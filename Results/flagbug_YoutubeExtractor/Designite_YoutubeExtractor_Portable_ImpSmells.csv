Implementation smell,Namespace,Class,File,Method,Description
Complex Method,YoutubeExtractor,Decipherer,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\Decipherer.cs,DecipherWithVersion,Cyclomatic complexity of the method is 11
Long Parameter List,YoutubeExtractor,VideoInfo,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\VideoInfo.cs,VideoInfo,The method has 7 parameters.
Long Statement,YoutubeExtractor,Decipherer,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\Decipherer.cs,DecipherWithVersion,The length of the statement  "	foreach (var line in lines.Skip (1).Take (lines.Length - 2))//Matches the funcBody with each cipher method. Only runs till all three are defined. " is 145.
Long Statement,YoutubeExtractor,DownloadUrlResolver,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\DownloadUrlResolver.cs,ExtractDownloadUrls,The length of the statement  "			string fallbackHost = queries.ContainsKey ("fallback_host") ? "&fallback_host=" + queries ["fallback_host"] : String.Empty; " is 123.
Long Statement,YoutubeExtractor,DownloadUrlResolver,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\DownloadUrlResolver.cs,ThrowYoutubeParseException,The length of the statement  "	throw new YoutubeParseException ("Could not parse the Youtube page for URL " + videoUrl + "\n" + "This may be due to a change of the Youtube page structure.\n" + "Please report this bug at www.github.com/flagbug/YoutubeExtractor/issues"' innerException); " is 254.
Long Statement,YoutubeExtractor,HttpHelper,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\HttpHelper.cs,DownloadString,The length of the statement  "	System.Threading.Tasks.Task<WebResponse> task = System.Threading.Tasks.Task.Factory.FromAsync (request.BeginGetResponse' asyncResult => request.EndGetResponse (asyncResult)' null); " is 180.
Long Statement,YoutubeExtractor,VideoInfo,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\VideoInfo.cs,ToString,The length of the statement  "	return string.Format ("Full Title: {0}' Type: {1}' Resolution: {2}p"' this.Title + this.VideoExtension' this.VideoType' this.Resolution); " is 137.
Magic Number,YoutubeExtractor,Decipherer,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\Decipherer.cs,DecipherWithVersion,The following statement contains a magic number: foreach (var line in lines.Skip (1).Take (lines.Length - 2))//Matches the funcBody with each cipher method. Only runs till all three are defined.   {  	if (!string.IsNullOrEmpty (idReverse) && !string.IsNullOrEmpty (idSlice) && !string.IsNullOrEmpty (idCharSwap)) {  		break;  		//Break loop if all three cipher methods are defined  	}  	functionIdentifier = GetFunctionFromLine (line);  	string reReverse = string.Format (@"{0}:\bfunction\b\(\w+\)"' functionIdentifier);  	//Regex for reverse (one parameter)  	string reSlice = string.Format (@"{0}:\bfunction\b\([a]'b\).(\breturn\b)?.?\w+\."' functionIdentifier);  	//Regex for slice (return or not)  	string reSwap = string.Format (@"{0}:\bfunction\b\(\w+\'\w\).\bvar\b.\bc=a\b"' functionIdentifier);  	//Regex for the char swap.  	if (Regex.Match (js' reReverse).Success) {  		idReverse = functionIdentifier;  		//If def matched the regex for reverse then the current function is a defined as the reverse  	}  	if (Regex.Match (js' reSlice).Success) {  		idSlice = functionIdentifier;  		//If def matched the regex for slice then the current function is defined as the slice.  	}  	if (Regex.Match (js' reSwap).Success) {  		idCharSwap = functionIdentifier;  		//If def matched the regex for charSwap then the current function is defined as swap.  	}  }  
Magic Number,YoutubeExtractor,Decipherer,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\Decipherer.cs,DecipherWithVersion,The following statement contains a magic number: foreach (var line in lines.Skip (1).Take (lines.Length - 2)) {  	Match m;  	functionIdentifier = GetFunctionFromLine (line);  	if ((m = Regex.Match (line' @"\(\w+'(?<index>\d+)\)")).Success && functionIdentifier == idCharSwap) {  		operations += "w" + m.Groups ["index"].Value + " ";  		//operation is a swap (w)  	}  	if ((m = Regex.Match (line' @"\(\w+'(?<index>\d+)\)")).Success && functionIdentifier == idSlice) {  		operations += "s" + m.Groups ["index"].Value + " ";  		//operation is a slice  	}  	if (functionIdentifier == idReverse)//No regex required for reverse (reverse method has no parameters)  	 {  		operations += "r ";  		//operation is a reverse  	}  }  
Magic Number,YoutubeExtractor,HttpHelper,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\HttpHelper.cs,ParseQueryString,The following statement contains a magic number: foreach (string vp in Regex.Split (s' "&")) {  	string[] strings = Regex.Split (vp' "=");  	dictionary.Add (strings [0]' strings.Length == 2 ? UrlDecode (strings [1]) : string.Empty);  }  
Magic Number,YoutubeExtractor,HttpHelper,F:\newReposMay17\flagbug_YoutubeExtractor\YoutubeExtractor\YoutubeExtractor\HttpHelper.cs,ParseQueryString,The following statement contains a magic number: dictionary.Add (strings [0]' strings.Length == 2 ? UrlDecode (strings [1]) : string.Empty);  
