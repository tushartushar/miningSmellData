Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,PlanetXamarin.WinStore,MasterPage,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\MasterPage.xaml.cs,,The length of the parameter MinimumWidthForSupportingTwoPanes is 33.
Long Statement,PlanetXamarin.WinStore.Common,SuspensionManager,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "        StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,PlanetXamarin.WinStore.Common,SuspensionManager,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "        throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Complex Conditional,PlanetXamarin.WinStore.Common,NavigationHelper,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||            e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&            (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||            (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,PlanetXamarin.WinStore.Common,NavigationHelper,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||              (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,PlanetXamarin.WinStore.Common,NavigationHelper,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||              (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Magic Number,PlanetXamarin.WinStore.Common,NavigationHelper,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||            e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&            (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||            (int)virtualKey == 166 || (int)virtualKey == 167))        {          var coreWindow = Window.Current.CoreWindow;          var downState = CoreVirtualKeyStates.Down;          bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;          bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;          bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;          bool noModifiers = !menuKey && !controlKey && !shiftKey;          bool onlyAlt = menuKey && !controlKey && !shiftKey;            if (((int)virtualKey == 166 && noModifiers) ||              (virtualKey == VirtualKey.Left && onlyAlt))          {            // When the previous key or Alt+Left are pressed navigate back            e.Handled = true;            this.GoBackCommand.Execute(null);          }          else if (((int)virtualKey == 167 && noModifiers) ||              (virtualKey == VirtualKey.Right && onlyAlt))          {            // When the next key or Alt+Right are pressed navigate forward            e.Handled = true;            this.GoForwardCommand.Execute(null);          }        }
Magic Number,PlanetXamarin.WinStore.Common,NavigationHelper,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||            e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&            (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||            (int)virtualKey == 166 || (int)virtualKey == 167))        {          var coreWindow = Window.Current.CoreWindow;          var downState = CoreVirtualKeyStates.Down;          bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;          bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;          bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;          bool noModifiers = !menuKey && !controlKey && !shiftKey;          bool onlyAlt = menuKey && !controlKey && !shiftKey;            if (((int)virtualKey == 166 && noModifiers) ||              (virtualKey == VirtualKey.Left && onlyAlt))          {            // When the previous key or Alt+Left are pressed navigate back            e.Handled = true;            this.GoBackCommand.Execute(null);          }          else if (((int)virtualKey == 167 && noModifiers) ||              (virtualKey == VirtualKey.Right && onlyAlt))          {            // When the next key or Alt+Right are pressed navigate forward            e.Handled = true;            this.GoForwardCommand.Execute(null);          }        }
Magic Number,PlanetXamarin.WinStore.Common,NavigationHelper,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||            e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&            (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||            (int)virtualKey == 166 || (int)virtualKey == 167))        {          var coreWindow = Window.Current.CoreWindow;          var downState = CoreVirtualKeyStates.Down;          bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;          bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;          bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;          bool noModifiers = !menuKey && !controlKey && !shiftKey;          bool onlyAlt = menuKey && !controlKey && !shiftKey;            if (((int)virtualKey == 166 && noModifiers) ||              (virtualKey == VirtualKey.Left && onlyAlt))          {            // When the previous key or Alt+Left are pressed navigate back            e.Handled = true;            this.GoBackCommand.Execute(null);          }          else if (((int)virtualKey == 167 && noModifiers) ||              (virtualKey == VirtualKey.Right && onlyAlt))          {            // When the next key or Alt+Right are pressed navigate forward            e.Handled = true;            this.GoForwardCommand.Execute(null);          }        }
Magic Number,PlanetXamarin.WinStore.Common,NavigationHelper,C:\repos\jamesmontemagno_PlanetXamarin\PlanetXamarin.WinStore\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||            e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&            (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||            (int)virtualKey == 166 || (int)virtualKey == 167))        {          var coreWindow = Window.Current.CoreWindow;          var downState = CoreVirtualKeyStates.Down;          bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;          bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;          bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;          bool noModifiers = !menuKey && !controlKey && !shiftKey;          bool onlyAlt = menuKey && !controlKey && !shiftKey;            if (((int)virtualKey == 166 && noModifiers) ||              (virtualKey == VirtualKey.Left && onlyAlt))          {            // When the previous key or Alt+Left are pressed navigate back            e.Handled = true;            this.GoBackCommand.Execute(null);          }          else if (((int)virtualKey == 167 && noModifiers) ||              (virtualKey == VirtualKey.Right && onlyAlt))          {            // When the next key or Alt+Right are pressed navigate forward            e.Handled = true;            this.GoForwardCommand.Execute(null);          }        }
