Implementation smell,Namespace,Class,File,Method,Description
Long Method,FileHelpers,FileHelperEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,ReadStreamAsList,The method has 116 lines of code.
Long Method,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadStream,The method has 142 lines of code.
Long Method,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,CreateField,The method has 166 lines of code.
Long Method,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,ReadStream,The method has 119 lines of code.
Complex Method,FileHelpers,FieldConverterAttribute,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Attributes\FieldConverterAttribute.cs,FieldConverterAttribute,Cyclomatic complexity of the method is 18
Complex Method,FileHelpers,ConvertHelpers,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\ConvertHelpers.cs,GetDefaultConverter,Cyclomatic complexity of the method is 22
Complex Method,FileHelpers,BooleanConverter,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\ConvertHelpers.cs,StringToField,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers,RecordInfo,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordInfo.cs,InitRecordFields,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers,RecordOperations,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordOperations.cs,MustIgnoreLine,Cyclomatic complexity of the method is 15
Complex Method,FileHelpers,FileDiffEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileDiffEngine.cs,ApplyDiff,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers,FileHelperAsyncEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,ReadNextRecord,Cyclomatic complexity of the method is 12
Complex Method,FileHelpers,FileHelperEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,ReadStreamAsList,Cyclomatic complexity of the method is 17
Complex Method,FileHelpers,FileHelperEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,WriteStream,Cyclomatic complexity of the method is 14
Complex Method,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadStream,Cyclomatic complexity of the method is 17
Complex Method,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,WriteStream,Cyclomatic complexity of the method is 13
Complex Method,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadNextRecord,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers,DelimitedField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,ExtractFieldString,Cyclomatic complexity of the method is 9
Complex Method,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,CreateField,Cyclomatic complexity of the method is 17
Complex Method,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,FieldBase,Cyclomatic complexity of the method is 9
Complex Method,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,ExtractFieldValue,Cyclomatic complexity of the method is 14
Complex Method,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,AssignFromString,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,AssignToString,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers.Helpers,StringHelper,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StringHelper.cs,ExtractQuotedString,Cyclomatic complexity of the method is 10
Complex Method,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,ReadStream,Cyclomatic complexity of the method is 15
Complex Method,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,WriteStream,Cyclomatic complexity of the method is 11
Complex Method,FileHelpers.MasterDetail,CommonSelectorInternal,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,CommonSelectorMethod,Cyclomatic complexity of the method is 17
Complex Method,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,Cyclomatic complexity of the method is 9
Complex Method,FileHelpers.Streams,InternalStringReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStringReader.cs,Read,Cyclomatic complexity of the method is 8
Long Parameter List,FileHelpers,ConvertException,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\ErrorHandling\ConvertException.cs,ConvertException,The method has 7 parameters. Parameters: origValue' destType' fieldName' lineNumber' columnNumber' extraInfo' innerEx
Long Parameter List,FileHelpers,ConvertException,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\ErrorHandling\ConvertException.cs,MessageBuilder,The method has 6 parameters. Parameters: origValue' destType' fieldName' lineNumber' columnNumber' extraInfo
Long Parameter List,FileHelpers.Events,AfterReadEventArgs<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Events\AfterReadEventArgs.cs,AfterReadEventArgs,The method has 5 parameters. Parameters: engine' line' lineChanged' newRecord' lineNumber
Long Parameter List,FileHelpers.Helpers,StreamHelper,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StreamHelper.cs,CreateFileAppender,The method has 5 parameters. Parameters: fileName' encode' correctEnd' disposeStream' bufferSize
Long Identifier,FileHelpers,Errors,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mClassWithOutDefaultConstructor is 31.
Long Identifier,FileHelpers,Errors,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mPartialFieldOrderInAutoProperty is 32.
Long Identifier,FileHelpers,Errors,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mMissingFieldArrayLenghtInNotLastField is 38.
Long Identifier,FileHelpers,Errors,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mSameMinMaxLengthForArrayNotLastField is 37.
Long Identifier,FileHelpers,Errors,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mMixOfStandardAndAutoPropertiesFields is 37.
Long Identifier,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,InternalStreamReader,The length of the parameter detectEncodingFromByteOrderMarks is 32.
Long Identifier,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,Init,The length of the parameter detectEncodingFromByteOrderMarks is 32.
Long Statement,FileHelpers,EnumConverter,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\EnumConverter.cs,GetEnumFormat,The length of the statement  "                    throw new BadUsageException("The format parameter must be either \"s\" (converts enum to string) or \"n\" (converts enum to number)."); " is 135.
Long Statement,FileHelpers,RecordOperations,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordOperations.cs,MustIgnoreLine,The length of the statement  "                if ((mRecordInfo.CommentAnyPlace && StringHelper.StartsWithIgnoringWhiteSpaces(line' mRecordInfo.CommentMarker' StringComparison.Ordinal)) || " is 141.
Long Statement,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,GetFirstType,The length of the statement  "                    "You only provided one type to the engine constructor. You need 2 or more types' for one type you can use the FileHelperEngine.");" is 130.
Long Statement,FileHelpers,DelimitedField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,ExtractFieldString,The length of the statement  "                            $"The field '{FieldInfo.Name}' has spaces before the QuotedChar at line {line.mReader.LineNumber}. Use the TrimAttribute to by pass this error. Field String: {line.CurrentString}"); " is 181.
Long Statement,FileHelpers,DelimitedField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,ExtractFieldString,The length of the statement  "                            $"The field '{FieldInfo.Name}' does not begin with the QuotedChar at line {line.mReader.LineNumber}. You can use FieldQuoted(QuoteMode.OptionalForRead) to allow optional quoted field. Field String: {line.CurrentString}"); " is 221.
Long Statement,FileHelpers,DelimitedField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,BasicExtractString,The length of the statement  "                                $"The line {line.mReader.LineNumber} is empty. Maybe you need to use the attribute [IgnoreEmptyLines] in your record class."; " is 125.
Long Statement,FileHelpers,DelimitedField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,BasicExtractString,The length of the statement  "                                    "Delimiter '{0}' not found after field '{1}' (the record has less fields' the delimiter is wrong or the next field must be marked as optional)."' " is 145.
Long Statement,FileHelpers,DelimitedField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,CreateFieldString,The length of the statement  "                                            " has a new line inside. To allow write this value you must add a FieldQuoted attribute with the multiline option in true."); " is 125.
Long Statement,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,CreateField,The length of the statement  "                                            "' can't be marked with FieldAlign attribute' it is only valid for fixed length records and are used only for write purpose."); " is 127.
Long Statement,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,ExtractFieldValue,The length of the statement  "                        $"Line: {line.mReader.LineNumber.ToString()} Column: {line.mCurrentPos.ToString()} Field: {FieldInfo.Name}. The array has only {res.Count} values' less than the minimum length of {ArrayMinLength}"); " is 198.
Long Statement,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,ExtractFieldValue,The length of the statement  "                        $"Line: {line.mReader.LineNumber} Column: {line.mCurrentPos} Field: {FieldInfo.Name}. The array has more values than the maximum length of {ArrayMaxLength}"); " is 158.
Long Statement,FileHelpers,FieldBase,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,GetNullValue,The length of the statement  "                                 "You must use the [FieldNullValue] attribute because this is a value type and can't be null or use a Nullable Type instead of the current type."; " is 145.
Complex Conditional,FileHelpers,GuidConverter,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\ConvertHelpers.cs,GuidConverter,The conditional expression  "!(format == "N" || format == "D" || format == "B" || format == "P")"  is complex.
Complex Conditional,FileHelpers,DelimitedField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,CreateFieldString,The conditional expression  "(QuoteChar != '\0') &&                  (QuoteMode == QuoteMode.AlwaysQuoted ||                   QuoteMode == QuoteMode.OptionalForRead ||                   ((QuoteMode == QuoteMode.OptionalForWrite || QuoteMode == QuoteMode.OptionalForBoth)                    && mCompare.IndexOf(field' Separator' CompareOptions.Ordinal) >= 0) || hasNewLine)"  is complex.
Complex Conditional,FileHelpers,FixedLengthField,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FixedLengthField.cs,ExtractFieldString,The conditional expression  "line.CurrentLength > FieldLength &&                       IsArray == false &&                       IsLast &&                       FixedMode != FixedMode.AllowMoreChars &&                       FixedMode != FixedMode.AllowVariableLength"  is complex.
Complex Conditional,FileHelpers.Helpers,ValidIdentifierValidator,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\ValidIdentifierValidator.cs,ValidIdentifier,The conditional expression  "id[i] == '.' ||                          id[i] == '<' ||                          id[i] == '>' ||                          id[i] == '?' ||                          id[i] == '''"  is complex.
Complex Conditional,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The conditional expression  "((mByteLen >= 3) && (mByteBuffer[0] == 0xef)) &&                           ((mByteBuffer[1] == 0xbb) && (mByteBuffer[2] == 0xbf))"  is complex.
Complex Conditional,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The conditional expression  "(((mByteLen >= 4) && (mByteBuffer[0] == 0)) &&                            ((mByteBuffer[1] == 0) && (mByteBuffer[2] == 0xfe))) &&                           (mByteBuffer[3] == 0xff)"  is complex.
Complex Conditional,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadLine,The conditional expression  "((ch == '\r') && ((mCharPos < mCharLen) || (ReadBuffer() > 0))) &&                                  (mCharBuffer[mCharPos] == '\n')"  is complex.
Empty Catch Block,FileHelpers,FileHelperAsyncEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,ReadNextRecord,The method has an empty catch block.
Empty Catch Block,FileHelpers,FileHelperAsyncEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,FileHelperAsyncEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadNextRecord,The method has an empty catch block.
Magic Number,FileHelpers,PercentDoubleConverter,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\ConvertHelpers.cs,ParseString,The following statement contains a magic number: return res / 100.0;
Magic Number,FileHelpers,RecordInfo,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordInfo.cs,RecordInfo,The following statement contains a magic number: SizeHint = 32;
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return                  CoreTransformAsync(                      new InternalStreamReader(sourceFile' SourceEncoding' true' EngineBase.DefaultReadBufferSize*5)'                      new StreamWriter(destFile' false' DestinationEncoding' EngineBase.DefaultWriteBufferSize*5));
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return                  CoreTransformAsync(                      new InternalStreamReader(sourceFile' SourceEncoding' true' EngineBase.DefaultReadBufferSize*5)'                      new StreamWriter(destFile' false' DestinationEncoding' EngineBase.DefaultWriteBufferSize*5));
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return CoreTransformAsync(sourceStream'                  new StreamWriter(destFile' false' DestinationEncoding' EngineBase.DefaultWriteBufferSize*5));
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return                  CoreTransformAsync(                      new InternalStreamReader(sourceFile' SourceEncoding' true' EngineBase.DefaultReadBufferSize*5)'                      destStream);
Magic Number,FileHelpers,BigFileSorter<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Sort\BigFileSorter.T.cs,GetSplitName,The following statement contains a magic number: return Path.Combine(dir'                  Path.GetFileNameWithoutExtension(file) + ".part" + splitNum.ToString().PadLeft(4' '0'));
Magic Number,FileHelpers,BigFileSorter<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Sort\BigFileSorter.T.cs,MergeTheChunks,The following statement contains a magic number: sw.BeginWriteFile(destinationFile' EngineBase.DefaultWriteBufferSize*4);
Magic Number,FileHelpers,SortQueue<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Sort\SortQueue.T.cs,SortQueue,The following statement contains a magic number: Engine.BeginReadFile(file' EngineBase.DefaultReadBufferSize*4);
Magic Number,FileHelpers.Events,ProgressEventArgs,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Events\ProgressEventArgs.cs,ProgressEventArgs,The following statement contains a magic number: Percent = currentRecord/(double) totalRecords*100.0;
Magic Number,FileHelpers.Helpers,StringHelper,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StringHelper.cs,ExtractQuotedString,The following statement contains a magic number: var res = new StringBuilder(32);
Magic Number,FileHelpers.Helpers,StringHelper,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StringHelper.cs,ReplaceRecursive,The following statement contains a magic number: const int maxTries = 1000;
Magic Number,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: CompressBuffer(2);
Magic Number,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: mByteLen >= 2
Magic Number,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadBuffer,The following statement contains a magic number: mDetectEncoding &&                          (mByteLen >= 2)
Magic Number,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadLine,The following statement contains a magic number: builder = new StringBuilder(currentCharPos + 80);
Missing Default,FileHelpers,FieldConverterAttribute,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Attributes\FieldConverterAttribute.cs,ValidateTypes,The following switch statement is missing a default case: switch (Kind) {                 case ConverterKind.None:                     valid = true;                     break;                  case ConverterKind.Date:                 case ConverterKind.DateMultiFormat:                     valid = typeof (DateTime) == fieldType;                     break;                  case ConverterKind.Byte:                 case ConverterKind.SByte:                 case ConverterKind.Int16:                 case ConverterKind.Int32:                 case ConverterKind.Int64:                 case ConverterKind.UInt16:                 case ConverterKind.UInt32:                 case ConverterKind.UInt64:                 case ConverterKind.Decimal:                 case ConverterKind.Double:                 case ConverterKind.Single:                 case ConverterKind.Boolean:                 case ConverterKind.Char:                 case ConverterKind.Guid:                     valid = Kind.ToString() == fieldType.UnderlyingSystemType.Name;                     break;                 case ConverterKind.PercentDouble:                     valid = typeof (double) == fieldType;                     break;             }
Missing Default,FileHelpers,RecordOperations,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordOperations.cs,MustIgnoreLine,The following switch statement is missing a default case: switch (mRecordInfo.RecordCondition) {                      case RecordCondition.ExcludeIfBegins:                          return ConditionHelper.BeginsWith(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfBegins:                          return !ConditionHelper.BeginsWith(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfContains:                          return ConditionHelper.Contains(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfContains:                          return !ConditionHelper.Contains(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfEnclosed:                          return ConditionHelper.Enclosed(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfEnclosed:                          return !ConditionHelper.Enclosed(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfEnds:                          return ConditionHelper.EndsWith(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfEnds:                          return !ConditionHelper.EndsWith(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfMatchRegex:                          return mRecordInfo.RecordConditionRegEx.IsMatch(line);                        case RecordCondition.IncludeIfMatchRegex:                          return !mRecordInfo.RecordConditionRegEx.IsMatch(line);                  }
Missing Default,FileHelpers,FileHelperAsyncEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,ReadNextRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                          {                              case ErrorMode.ThrowException:                                  byPass = true;                                  throw;                              case ErrorMode.IgnoreAndContinue:                                  break;                              case ErrorMode.SaveAndContinue:                                  var err = new ErrorInfo                                  {                                      mLineNumber = mAsyncReader.LineNumber'                                      mExceptionInfo = ex'                                      mRecordString = currentLine'                                      mRecordTypeName = RecordInfo.RecordType.Name                                  };                                  mErrorManager.AddError(err);                                  break;                          }
Missing Default,FileHelpers,FileHelperAsyncEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,WriteRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                  {                      case ErrorMode.ThrowException:                          throw;                      case ErrorMode.IgnoreAndContinue:                          break;                      case ErrorMode.SaveAndContinue:                          var err = new ErrorInfo                          {                              mLineNumber = mLineNumber'                              mExceptionInfo = ex'                              mRecordString = currentLine'                              mRecordTypeName = RecordInfo.RecordType.Name                          };                          mErrorManager.AddError(err);                          break;                  }
Missing Default,FileHelpers,FileHelperAsyncEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,WriteNextValues,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                  {                      case ErrorMode.ThrowException:                          throw;                      case ErrorMode.IgnoreAndContinue:                          break;                      case ErrorMode.SaveAndContinue:                          var err = new ErrorInfo                          {                              mLineNumber = mLineNumber'                              mExceptionInfo = ex'                              mRecordString = currentLine'                              mRecordTypeName = RecordInfo.RecordType.Name                          };                          mErrorManager.AddError(err);                          break;                  }
Missing Default,FileHelpers,FileHelperEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,ReadStreamAsList,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                          {                              case ErrorMode.ThrowException:                                  byPass = true;                                  throw;                              case ErrorMode.IgnoreAndContinue:                                  break;                              case ErrorMode.SaveAndContinue:                                  var err = new ErrorInfo                                  {                                      mLineNumber = freader.LineNumber'                                      mExceptionInfo = ex'                                      mRecordString = completeLine'                                      mRecordTypeName = RecordInfo.RecordType.Name                                  };                                    mErrorManager.AddError(err);                                  break;                          }
Missing Default,FileHelpers,FileHelperEngine<T>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,WriteStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                      {                          case ErrorMode.ThrowException:                              throw;                          case ErrorMode.IgnoreAndContinue:                              break;                          case ErrorMode.SaveAndContinue:                              var err = new ErrorInfo                              {                                  mLineNumber = mLineNumber'                                  mExceptionInfo = ex'                                  mRecordString = currentLine'                                  mRecordTypeName = RecordInfo.RecordType.Name                              };                              mErrorManager.AddError(err);                              break;                      }
Missing Default,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                          {                             case ErrorMode.ThrowException:                                 byPass = true;                                 throw;                             case ErrorMode.IgnoreAndContinue:                                 break;                             case ErrorMode.SaveAndContinue:                                 var err = new ErrorInfo                                  {                                     mLineNumber = freader.LineNumber'                                     mExceptionInfo = ex'                                     mRecordString = completeLine'                                     mRecordTypeName = RecordInfo.RecordType.Name                                 };                                  mErrorManager.AddError(err);                                 break;                         }
Missing Default,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,WriteStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                      {                         case ErrorMode.ThrowException:                             throw;                         case ErrorMode.IgnoreAndContinue:                             break;                         case ErrorMode.SaveAndContinue:                             var err = new ErrorInfo                              {                                 mLineNumber = mLineNumber'                                 mExceptionInfo = ex'                                 mRecordString = currentLine'                                 mRecordTypeName = RecordInfo.RecordType.Name                             };                             mErrorManager.AddError(err);                             break;                     }
Missing Default,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadNextRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                          {                             case ErrorMode.ThrowException:                                 byPass = true;                                 throw;                             case ErrorMode.IgnoreAndContinue:                                 break;                             case ErrorMode.SaveAndContinue:                                 var err = new ErrorInfo                                  {                                     mLineNumber = mAsyncReader.LineNumber'                                     mExceptionInfo = ex'                                     mRecordString = currentLine'                                     mRecordTypeName = RecordInfo.RecordType.Name                                 };                                  mErrorManager.AddError(err);                                 break;                         }
Missing Default,FileHelpers,MultiRecordEngine,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,WriteRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                  {                     case ErrorMode.ThrowException:                         throw;                     case ErrorMode.IgnoreAndContinue:                         break;                     case ErrorMode.SaveAndContinue:                         var err = new ErrorInfo                          {                             mLineNumber = mLineNumber'                             mExceptionInfo = ex'                             mRecordString = currentLine'                             mRecordTypeName = RecordInfo.RecordType.Name                         };                         mErrorManager.AddError(err);                         break;                 }
Missing Default,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,ReadStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                          {                              case ErrorMode.ThrowException:                                  byPass = true;                                  throw;                              case ErrorMode.IgnoreAndContinue:                                  break;                              case ErrorMode.SaveAndContinue:                                  var err = new ErrorInfo                                  {                                      mLineNumber = mLineNumber'                                      mExceptionInfo = ex'                                      mRecordString = completeLine'                                      mRecordTypeName = RecordInfo.RecordType.Name                                  };                                  mErrorManager.AddError(err);                                  break;                          }
Missing Default,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,WriteStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode)                      {                          case ErrorMode.ThrowException:                              throw;                          case ErrorMode.IgnoreAndContinue:                              break;                          case ErrorMode.SaveAndContinue:                              var err = new ErrorInfo                              {                                  mLineNumber = mLineNumber'                                  mExceptionInfo = ex'                                  mRecordString = currentLine'                                  mRecordTypeName = RecordInfo.RecordType.Name                              };                              mErrorManager.AddError(err);                              break;                      }
Missing Default,FileHelpers.MasterDetail,CommonSelectorInternal,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,CommonSelectorMethod,The following switch statement is missing a default case: switch (mAction)                  {                      case CommonSelector.DetailIfContains:                          if (recordString.IndexOf(mSelector) >= 0)                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfContains:                          if (recordString.IndexOf(mSelector) >= 0)                              return RecordAction.Master;                          else                              return RecordAction.Detail;                        case CommonSelector.DetailIfBegins:                          if (recordString.StartsWith(mSelector))                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfBegins:                          if (recordString.StartsWith(mSelector))                              return RecordAction.Master;                          else                              return RecordAction.Detail;                        case CommonSelector.DetailIfEnds:                          if (recordString.EndsWith(mSelector))                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfEnds:                          if (recordString.EndsWith(mSelector))                              return RecordAction.Master;                          else                              return RecordAction.Detail;                        case CommonSelector.DetailIfEnclosed:                          if (recordString.StartsWith(mSelector) &&                              recordString.EndsWith(mSelector))                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfEnclosed:                          if (recordString.StartsWith(mSelector) &&                              recordString.EndsWith(mSelector))                              return RecordAction.Master;                          else                              return RecordAction.Detail;                  }
Missing Default,FileHelpers.Streams,InternalStreamReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadLine,The following switch statement is missing a default case: switch (ch) {                          case '\r':                          case '\n':                              string str;                              if (builder != null) {                                  builder.Append(mCharBuffer' mCharPos' currentCharPos - mCharPos);                                  //str = new string(charBuffer' this.charPos' currentCharPos - this.charPos);                                  str = builder.ToString();                              }                              else                                  str = new string(mCharBuffer' mCharPos' currentCharPos - mCharPos);                              mCharPos = currentCharPos + 1;                              if (((ch == '\r') && ((mCharPos < mCharLen) || (ReadBuffer() > 0))) &&                                  (mCharBuffer[mCharPos] == '\n'))                                  mCharPos++;                              return str;                      }
Missing Default,FileHelpers.Streams,InternalStringReader,D:\research\architectureSmells\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStringReader.cs,ReadLine,The following switch statement is missing a default case: switch (ch) {                      case '\r':                      case '\n':                      {                          string str = mS.Substring(Position' num - Position);                          Position = num + 1;                          if (((ch == '\r') && (Position < Length)) &&                              (mS[Position] == '\n'))                              Position = Position + 1;                          return str;                      }                  }
