Implementation smell,Namespace,Class,File,Method,Description
Long Method,FileHelpers,FileHelperEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,ReadStreamAsList,The method has 101 lines of code.
Long Method,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadStream,The method has 124 lines of code.
Long Method,FileHelpers,FieldBase,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,CreateField,The method has 142 lines of code.
Long Method,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,ClassFromString,The method has 123 lines of code.
Long Method,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,ReadStream,The method has 105 lines of code.
Complex Method,FileHelpers,ConvertHelpers,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\ConvertHelpers.cs,GetDefaultConverter,Cyclomatic complexity of the method is 22
Complex Method,FileHelpers,RecordInfo,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordInfo.Factory.cs,InitRecordFields,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers,FileDiffEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileDiffEngine.cs,ApplyDiff,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers,FileHelperAsyncEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,ReadNextRecord,Cyclomatic complexity of the method is 11
Complex Method,FileHelpers,FileHelperEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,WriteStream,Cyclomatic complexity of the method is 18
Complex Method,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,WriteStream,Cyclomatic complexity of the method is 17
Complex Method,FileHelpers,FieldBase,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,CreateField,Cyclomatic complexity of the method is 14
Complex Method,FileHelpers,FieldBase,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,FieldBase,Cyclomatic complexity of the method is 9
Complex Method,FileHelpers,FieldBase,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,AssignToString,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,LoadFromXml,Cyclomatic complexity of the method is 14
Complex Method,FileHelpers.Dynamic,FieldBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\FieldBuilder.cs,AddAttributesInternal,Cyclomatic complexity of the method is 10
Complex Method,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,GetDelimiters,Cyclomatic complexity of the method is 14
Complex Method,FileHelpers.Helpers,StringHelper,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StringHelper.cs,ExtractQuotedString,Cyclomatic complexity of the method is 8
Complex Method,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,WriteStream,Cyclomatic complexity of the method is 15
Complex Method,FileHelpers.Streams,InternalStringReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStringReader.cs,Read,Cyclomatic complexity of the method is 8
Long Parameter List,FileHelpers,CsvEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CsvEngine.cs,CsvToDataTable,The method has 5 parameters. Parameters: filename' classname' delimiter' hasHeader' ignoreEmptyLines
Long Parameter List,FileHelpers,CommonEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CommonEngine.cs,SortFileByField,The method has 5 parameters. Parameters: recordClass' fieldName' asc' sourceFile' sortedFile
Long Parameter List,FileHelpers,CommonEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CommonEngine.cs,MergeAndSortFile,The method has 5 parameters. Parameters: recordType' file1' file2' destFile' field
Long Parameter List,FileHelpers,CommonEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CommonEngine.cs,MergeAndSortFile,The method has 6 parameters. Parameters: recordType' file1' file2' destFile' field' ascending
Long Parameter List,FileHelpers,ConvertException,C:\repos\MarcosMeli_FileHelpers\FileHelpers\ErrorHandling\ConvertException.cs,ConvertException,The method has 7 parameters. Parameters: origValue' destType' fieldName' lineNumber' columnNumber' extraInfo' innerEx
Long Parameter List,FileHelpers,ConvertException,C:\repos\MarcosMeli_FileHelpers\FileHelpers\ErrorHandling\ConvertException.cs,MessageBuilder,The method has 6 parameters. Parameters: origValue' destType' fieldName' lineNumber' columnNumber' extraInfo
Long Parameter List,FileHelpers.DataLink,SqlServerStorage,C:\repos\MarcosMeli_FileHelpers\FileHelpers\DataLink\Storage\SqlServerStorage.cs,SqlServerStorage,The method has 5 parameters. Parameters: recordType' server' database' user' pass
Long Parameter List,FileHelpers.Events,AfterReadEventArgs<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Events\AfterReadEventArgs.cs,AfterReadEventArgs,The method has 5 parameters. Parameters: engine' line' lineChanged' newRecord' lineNumber
Long Parameter List,FileHelpers.Detection,DelimiterInfo,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\DelimiterInfo.cs,DelimiterInfo,The method has 5 parameters. Parameters: delimiter' average' max' min' deviation
Long Parameter List,FileHelpers.Helpers,StreamHelper,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StreamHelper.cs,CreateFileAppender,The method has 5 parameters. Parameters: fileName' encode' correctEnd' disposeStream' bufferSize
Long Identifier,FileHelpers,Errors,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mClassWithOutDefaultConstructor is 31.
Long Identifier,FileHelpers,Errors,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mPartialFieldOrderInAutoProperty is 32.
Long Identifier,FileHelpers,Errors,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mMissingFieldArrayLenghtInNotLastField is 38.
Long Identifier,FileHelpers,Errors,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mSameMinMaxLengthForArrayNotLastField is 37.
Long Identifier,FileHelpers,Errors,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Messages\GenerateMessages1.autogen.cs,,The length of the parameter mMixOfStandardAndAutoPropertiesFields is 37.
Long Identifier,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,,The length of the parameter mFixedLengthDeviationTolerance is 30.
Long Identifier,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,InternalStreamReader,The length of the parameter detectEncodingFromByteOrderMarks is 32.
Long Identifier,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,Init,The length of the parameter detectEncodingFromByteOrderMarks is 32.
Long Statement,FileHelpers,EnumConverter,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\EnumConverter.cs,GetEnumFormat,The length of the statement  "                    throw new BadUsageException("The format parameter must be either \"s\" (converts enum to string) or \"n\" (converts enum to number)."); " is 135.
Long Statement,FileHelpers,RecordOperations,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordOperations.cs,MustIgnoreLine,The length of the statement  "                if ((mRecordInfo.CommentAnyPlace && StringHelper.StartsWithIgnoringWhiteSpaces(line' mRecordInfo.CommentMarker' StringComparison.Ordinal)) || " is 141.
Long Statement,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,GetFirstType,The length of the statement  "                    "You only provided one type to the engine constructor. You need 2 or more types' for one type you can use the FileHelperEngine.");" is 130.
Long Statement,FileHelpers,DelimitedField,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,ExtractFieldString,The length of the statement  "                                "The field '{0}' has spaces before the QuotedChar at line {1}. Use the TrimAttribute to by pass this error. Field String: {2}"' " is 127.
Long Statement,FileHelpers,DelimitedField,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,ExtractFieldString,The length of the statement  "                                "The field '{0}' does not begin with the QuotedChar at line {1}. You can use FieldQuoted(QuoteMode.OptionalForRead) to allow optional quoted field. Field String: {2}"' " is 167.
Long Statement,FileHelpers,DelimitedField,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,BasicExtractString,The length of the statement  "                                    "Delimiter '{0}' not found after field '{1}' (the record has less fields' the delimiter is wrong or the next field must be marked as optional)."' " is 145.
Long Statement,FileHelpers,DelimitedField,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,CreateFieldString,The length of the statement  "                                            " has a new line inside. To allow write this value you must add a FieldQuoted attribute with the multiline option in true."); " is 125.
Long Statement,FileHelpers,FieldBase,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,CreateField,The length of the statement  "                                            "' can't be marked with FieldAlign attribute' it is only valid for fixed length records and are used only for write purpose."); " is 127.
Long Statement,FileHelpers,FieldBase,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,GetNullValue,The length of the statement  "                                 "You must use the [FieldNullValue] attribute because this is a value type and can't be null or use a Nullable Type instead of the current type."; " is 145.
Complex Conditional,FileHelpers,GuidConverter,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\ConvertHelpers.cs,GuidConverter,The conditional expression  "!(format == "N" || format == "D" || format == "B" || format == "P")"  is complex.
Complex Conditional,FileHelpers,DelimitedField,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\DelimitedField.cs,CreateFieldString,The conditional expression  "(QuoteChar != '\0') &&                  (QuoteMode == QuoteMode.AlwaysQuoted ||                   QuoteMode == QuoteMode.OptionalForRead ||                   ((QuoteMode == QuoteMode.OptionalForWrite || QuoteMode == QuoteMode.OptionalForBoth)                    && mCompare.IndexOf(field' Separator' CompareOptions.Ordinal) >= 0) || hasNewLine)"  is complex.
Complex Conditional,FileHelpers,FixedLengthField,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FixedLengthField.cs,ExtractFieldString,The conditional expression  "line.CurrentLength > FieldLength &&                       IsArray == false &&                       IsLast &&                       FixedMode != FixedMode.AllowMoreChars &&                       FixedMode != FixedMode.AllowVariableLength"  is complex.
Complex Conditional,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,ClassFromString,The conditional expression  "!module.Name.Equals("System.Data.dll"' StringComparison.OrdinalIgnoreCase) &&                                  !module.Name.Equals("System.Core.dll"' StringComparison.OrdinalIgnoreCase) &&                                  !module.Name.Equals("System.dll"' StringComparison.OrdinalIgnoreCase) &&                                  !module.Name.Equals("FileHelpers.dll"' StringComparison.OrdinalIgnoreCase) &&                                  !module.Name.Equals("System.Xml.dll"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,FileHelpers.Helpers,ValidIdentifierValidator,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\ValidIdentifierValidator.cs,ValidIdentifier,The conditional expression  "id[i] == '.' ||                          id[i] == '<' ||                          id[i] == '>' ||                          id[i] == '?' ||                          id[i] == '''"  is complex.
Complex Conditional,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The conditional expression  "((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))"  is complex.
Complex Conditional,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The conditional expression  "(((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)"  is complex.
Complex Conditional,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadLine,The conditional expression  "((ch == '\r') && ((this.mCharPos < this.mCharLen) || (this.ReadBuffer() > 0))) &&                                  (this.mCharBuffer[this.mCharPos] == '\n')"  is complex.
Virtual Method Call from Constructor,FileHelpers.Dynamic,CsvClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\CsvClassBuilder.cs,CsvClassBuilder,The constructor "CsvClassBuilder" calls a virtual method "AddField".
Virtual Method Call from Constructor,FileHelpers.Dynamic,CsvClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\CsvClassBuilder.cs,CsvClassBuilder,The constructor "CsvClassBuilder" calls a virtual method "AddField".
Virtual Method Call from Constructor,FileHelpers.Dynamic,DelimitedClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\DelimitedClassBuilder.cs,DelimitedClassBuilder,The constructor "DelimitedClassBuilder" calls a virtual method "AddField".
Empty Catch Block,FileHelpers,FileHelperAsyncEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,ReadNextRecord,The method has an empty catch block.
Empty Catch Block,FileHelpers,FileHelperAsyncEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,FileHelperAsyncEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,Close,The method has an empty catch block.
Empty Catch Block,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadNextRecord,The method has an empty catch block.
Empty Catch Block,FileHelpers.DataLink,DatabaseStorage,C:\repos\MarcosMeli_FileHelpers\FileHelpers\DataLink\Storage\DataBaseStorage.cs,InsertRecords,The method has an empty catch block.
Magic Number,FileHelpers,PercentDoubleConverter,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Converters\ConvertHelpers.cs,ParseString,The following statement contains a magic number: if (blanksRemoved.EndsWith("%")) {                      if (                          !Double.TryParse(blanksRemoved'                              NumberStyles.Number | NumberStyles.AllowExponent'                              mCulture'                              out res))                          throw new ConvertException(from' mType);                      return res/100.0;                  }                  else {                      if (                          !Double.TryParse(blanksRemoved'                              NumberStyles.Number | NumberStyles.AllowExponent'                              mCulture'                              out res))                          throw new ConvertException(from' mType);                      return res;                  }
Magic Number,FileHelpers,RecordInfo,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordInfo.Factory.cs,RecordInfo,The following statement contains a magic number: SizeHint = 32;
Magic Number,FileHelpers,CommonEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CommonEngine.cs,MergeFiles,The following statement contains a magic number: using (var engineRead = new FileHelperAsyncEngine(recordType))              using (var engineWrite = new FileHelperAsyncEngine(recordType)) {                  engineWrite.BeginWriteFile(destinationFile);                    object[] readRecords;                    // Read FILE 1                  engineRead.BeginReadFile(file1);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }                  engineRead.Close();                    // Read FILE 2                  engineRead.BeginReadFile(file2);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }              }
Magic Number,FileHelpers,CommonEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CommonEngine.cs,MergeFiles,The following statement contains a magic number: using (var engineRead = new FileHelperAsyncEngine(recordType))              using (var engineWrite = new FileHelperAsyncEngine(recordType)) {                  engineWrite.BeginWriteFile(destinationFile);                    object[] readRecords;                    // Read FILE 1                  engineRead.BeginReadFile(file1);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }                  engineRead.Close();                    // Read FILE 2                  engineRead.BeginReadFile(file2);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }              }
Magic Number,FileHelpers,CommonEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CommonEngine.cs,MergeFiles,The following statement contains a magic number: using (var engineRead = new FileHelperAsyncEngine(recordType))              using (var engineWrite = new FileHelperAsyncEngine(recordType)) {                  engineWrite.BeginWriteFile(destinationFile);                    object[] readRecords;                    // Read FILE 1                  engineRead.BeginReadFile(file1);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }                  engineRead.Close();                    // Read FILE 2                  engineRead.BeginReadFile(file2);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }              }
Magic Number,FileHelpers,CommonEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\CommonEngine.cs,MergeFiles,The following statement contains a magic number: using (var engineRead = new FileHelperAsyncEngine(recordType))              using (var engineWrite = new FileHelperAsyncEngine(recordType)) {                  engineWrite.BeginWriteFile(destinationFile);                    object[] readRecords;                    // Read FILE 1                  engineRead.BeginReadFile(file1);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }                  engineRead.Close();                    // Read FILE 2                  engineRead.BeginReadFile(file2);                    readRecords = engineRead.ReadNexts(50);                  while (readRecords.Length > 0) {                      engineWrite.WriteNexts(readRecords);                      readRecords = engineRead.ReadNexts(50);                  }              }
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return                  CoreTransformAsync(                      new InternalStreamReader(sourceFile' SourceEncoding' true' EngineBase.DefaultReadBufferSize*5)'                      new StreamWriter(destFile' false' DestinationEncoding' EngineBase.DefaultWriteBufferSize*5));
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return                  CoreTransformAsync(                      new InternalStreamReader(sourceFile' SourceEncoding' true' EngineBase.DefaultReadBufferSize*5)'                      new StreamWriter(destFile' false' DestinationEncoding' EngineBase.DefaultWriteBufferSize*5));
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return CoreTransformAsync(sourceStream'                  new StreamWriter(destFile' false' DestinationEncoding' EngineBase.DefaultWriteBufferSize*5));
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,TransformFileFast,The following statement contains a magic number: return                  CoreTransformAsync(                      new InternalStreamReader(sourceFile' SourceEncoding' true' EngineBase.DefaultReadBufferSize*5)'                      destStream);
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,CoreTransformFile,The following statement contains a magic number: using (                  var fs = new InternalStreamReader(sourceFile' mSourceEncoding' true' EngineBase.DefaultReadBufferSize*10)                  ) {                  using (                      var ds = new StreamWriter(destFile'                          false'                          mDestinationEncoding'                          EngineBase.DefaultWriteBufferSize*10)) {                      tempRes = CoreTransform(fs' ds);                      ds.Close();                  }                    fs.Close();              }
Magic Number,FileHelpers,FileTransformEngine<TSource;TDestination>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileTransformEngine.cs,CoreTransformFile,The following statement contains a magic number: using (                  var fs = new InternalStreamReader(sourceFile' mSourceEncoding' true' EngineBase.DefaultReadBufferSize*10)                  ) {                  using (                      var ds = new StreamWriter(destFile'                          false'                          mDestinationEncoding'                          EngineBase.DefaultWriteBufferSize*10)) {                      tempRes = CoreTransform(fs' ds);                      ds.Close();                  }                    fs.Close();              }
Magic Number,FileHelpers,FieldBase,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FieldBase.cs,ExtractFieldValue,The following statement contains a magic number: if (IsArray == false) {                  ExtractedInfo info = ExtractFieldString(line);                  if (info.mCustomExtractedString == null)                      line.mCurrentPos = info.ExtractedTo + 1;                    line.mCurrentPos += CharsToDiscard; //total;                    if (Discarded)                      return GetDiscardedNullValue();                  else                      return AssignFromString(info' line).Value;              }              else {                  if (ArrayMinLength <= 0)                      ArrayMinLength = 0;                    int i = 0;                    var res = new ArrayList(Math.Max(ArrayMinLength' 10));                    while (line.mCurrentPos - CharsToDiscard < line.mLineStr.Length &&                         i < ArrayMaxLength) {                      ExtractedInfo info = ExtractFieldString(line);                      if (info.mCustomExtractedString == null)                          line.mCurrentPos = info.ExtractedTo + 1;                        line.mCurrentPos += CharsToDiscard;                        try {                          var value = AssignFromString(info' line);                            if (value.NullValueUsed &&                              i == 0 &&                              line.IsEOL())                              break;                            res.Add(value.Value);                      }                      catch (NullValueNotFoundException) {                          if (i == 0)                              break;                          else                              throw;                      }                      i++;                  }                    if (res.Count < ArrayMinLength) {                      throw new InvalidOperationException(                          string.Format(                              "Line: {0} Column: {1} Field: {2}. The array has only {3} values' less than the minimum length of {4}"'                              line.mReader.LineNumber.ToString()'                              line.mCurrentPos.ToString()'                              FieldInfo.Name'                              res.Count'                              ArrayMinLength));                  }                  else if (IsLast && line.IsEOL() == false) {                      throw new InvalidOperationException(                          string.Format(                              "Line: {0} Column: {1} Field: {2}. The array has more values than the maximum length of {3}"'                              line.mReader.LineNumber'                              line.mCurrentPos'                              FieldInfo.Name'                              ArrayMaxLength));                  }                    // TODO:   is there a reason we go through all the array processing then discard it                  if (Discarded)                      return null;                  else                      return res.ToArray(ArrayType);              }
Magic Number,FileHelpers,FixedLengthField,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Fields\FixedLengthField.cs,CreateFieldString,The following statement contains a magic number: if (Align.Align == AlignMode.Left) {                  sb.Append(field);                  sb.Append(Align.AlignChar' FieldLength - field.Length);              }              else if (Align.Align == AlignMode.Right) {                  sb.Append(Align.AlignChar' FieldLength - field.Length);                  sb.Append(field);              }              else {                  int middle = (FieldLength - field.Length)/2;                    sb.Append(Align.AlignChar' middle);                  sb.Append(field);                  sb.Append(Align.AlignChar' FieldLength - field.Length - middle);  //				if (middle > 0)  //					res = res.PadLeft(mFieldLength - middle' mAlign.AlignChar).PadRight(mFieldLength' mAlign.AlignChar);              }
Magic Number,FileHelpers,BigFileSorter<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Sort\BigFileSorter.T.cs,SplitAndSortParts,The following statement contains a magic number: try {                  long writtenBytes = 0;                  long lastWrittenBytes = 0;                  var readEngine = new FileHelperAsyncEngine<T>(Encoding);                    readEngine.Progress += (sender' e) => writtenBytes = e.CurrentBytes;                    using (readEngine.BeginReadFile(file' EngineBase.DefaultReadBufferSize*2)) {                      foreach (var item in readEngine) {                          lines.Add(item);                            if ((writtenBytes - lastWrittenBytes) > BlockFileSizeInBytes) {                              WritePart(file' lines' partNumber' res);                              partNumber++;                              lastWrittenBytes = writtenBytes;                          }                      }                  }                    return readEngine;              }              finally {                  if (lines.Count > 0)                      WritePart(file' lines' partNumber' res);              }
Magic Number,FileHelpers,BigFileSorter<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Sort\BigFileSorter.T.cs,GetSplitName,The following statement contains a magic number: return Path.Combine(dir'                  Path.GetFileNameWithoutExtension(file) + ".part" + splitNum.ToString().PadLeft(4' '0'));
Magic Number,FileHelpers,BigFileSorter<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Sort\BigFileSorter.T.cs,MergeTheChunks,The following statement contains a magic number: try {                  // Merge!                  using (var sw = new FileHelperAsyncEngine<T>(Encoding)) {                      sw.HeaderText = headerText;                      sw.FooterText = footerText;                      sw.BeginWriteFile(destinationFile' EngineBase.DefaultWriteBufferSize*4);                      while (true) {                          // Find the chunk with the lowest value                          int lowestIndex = -1;                          T lowestValue = null;                            for (int j = 0; j < queues.Length; j++) {                              var current = queues[j].Current;                                if (current != null) {                                  if (lowestIndex < 0 ||                                      current.CompareTo(lowestValue) < 0) {                                      lowestIndex = j;                                      lowestValue = current;                                  }                              }                          }                            // Was nothing found in any queue? We must be done then.                          if (lowestIndex == -1)                              break;                            sw.WriteNext(lowestValue);                            // Remove from queue                          queues[lowestIndex].MoveNext();                      }                  }              }              finally {                  for (int i = 0; i < queues.Length; i++)                      queues[i].Dispose();              }
Magic Number,FileHelpers,SortQueue<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Sort\SortQueue.T.cs,SortQueue,The following statement contains a magic number: Engine.BeginReadFile(file' EngineBase.DefaultReadBufferSize*4);
Magic Number,FileHelpers.DataLink,DataBaseHelper,C:\repos\MarcosMeli_FileHelpers\FileHelpers\DataLink\Storage\DataBaseHelper.cs,SqlConnectionString,The following statement contains a magic number: StringBuilder sCadena = new StringBuilder(300);
Magic Number,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,ClassFromString,The following statement contains a magic number: if (classStr.Length < 4) {                  throw new BadUsageException(                      "There is not enough text to be a proper class' load your class and try again");              }
Magic Number,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,GetClassSourceCode,The following statement contains a magic number: var sb = new StringBuilder(100);
Magic Number,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,Encrypt,The following statement contains a magic number: byte[] encryptedData = Encrypt(clearBytes'                  pdb.GetBytes(32)'                  pdb.GetBytes(16));
Magic Number,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,Encrypt,The following statement contains a magic number: byte[] encryptedData = Encrypt(clearBytes'                  pdb.GetBytes(32)'                  pdb.GetBytes(16));
Magic Number,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,Decrypt,The following statement contains a magic number: var decryptedData = Decrypt(cipherBytes' pdb.GetBytes(32)' pdb.GetBytes(16));
Magic Number,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,Decrypt,The following statement contains a magic number: var decryptedData = Decrypt(cipherBytes' pdb.GetBytes(32)' pdb.GetBytes(16));
Magic Number,FileHelpers.Dynamic,CsvClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\CsvClassBuilder.cs,RawReadFirstLines,The following statement contains a magic number: var sb = new StringBuilder(Math.Min(lines * 50' 10000));
Magic Number,FileHelpers.Dynamic,CsvClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\CsvClassBuilder.cs,RawReadFirstLines,The following statement contains a magic number: var sb = new StringBuilder(Math.Min(lines * 50' 10000));
Magic Number,FileHelpers.Dynamic,DelimitedClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\DelimitedClassBuilder.cs,AddFields,The following statement contains a magic number: for (int i = 0; i < numberOfFields; i++)                  AddField("Field" + (i + 1).ToString().PadLeft(4' '0'));
Magic Number,FileHelpers.Dynamic,FieldBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\FieldBuilder.cs,GetFieldCode,The following statement contains a magic number: var sb = new StringBuilder(100);
Magic Number,FileHelpers.Dynamic,FixedLengthClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\FixedLengthClassBuilder.cs,ReadField,The following statement contains a magic number: AddField(node.Attributes.Item(0).InnerText'                  int.Parse(node.Attributes.Item(2).InnerText)'                  node.Attributes.Item(1).InnerText).ReadField(node);
Magic Number,FileHelpers.Dynamic,XmlHelper,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\XmlHelper.cs,BeginWriteStream,The following statement contains a magic number: Writer = new XmlTextWriter(writer) {                  Formatting = Formatting.Indented'                  Indentation = 4              };
Magic Number,FileHelpers.Events,ProgressEventArgs,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Events\ProgressEventArgs.cs,ProgressEventArgs,The following statement contains a magic number: if (totalRecords > 0)                  Percent = currentRecord/(double) totalRecords*100.0;              else if (totalBytes > 0)                  Percent = currentBytes/(double) totalBytes*100.0;              else                    Percent = -1;
Magic Number,FileHelpers.Events,ProgressEventArgs,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Events\ProgressEventArgs.cs,ProgressEventArgs,The following statement contains a magic number: if (totalRecords > 0)                  Percent = currentRecord/(double) totalRecords*100.0;              else if (totalBytes > 0)                  Percent = currentBytes/(double) totalBytes*100.0;              else                    Percent = -1;
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CreateFixedLengthOptions,The following statement contains a magic number: format.mConfidence = (int)(Math.Max (0' 1 - stats.Deviation / stats.Avg) * 100);
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CreateFixedLengthFields,The following statement contains a magic number: for (int i = 0; i < res.Count; i++) {                  FixedColumnInfo col = res[i];                  builder.AddField("Field" + i.ToString().PadLeft(4' '0')' col.Length' typeof (string));              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CreateFixedLengthCandidates,The following statement contains a magic number: foreach (var line in lines) {                  var candidates = new List<FixedColumnInfo>();                  int blanks = 0;                    FixedColumnInfo col = null;                  for (int i = 1; i < line.Length; i++) {                      if (char.IsWhiteSpace(line[i]))                          blanks += 1;                      else {                          if (blanks > 2) {                              if (col == null) {                                  col = new FixedColumnInfo {                                      Start = 0'                                      Length = i                                  };                              }                              else {                                  FixedColumnInfo prevCol = col;                                  col = new FixedColumnInfo {                                      Start = prevCol.Start + prevCol.Length                                  };                                  col.Length = i - col.Start;                              }                              candidates.Add(col);                              blanks = 0;                          }                      }                  }                    if (col == null) {                      col = new FixedColumnInfo {                          Start = 0'                          Length = line.Length                      };                  }                  else {                      FixedColumnInfo prevCol = col;                      col = new FixedColumnInfo {                          Start = prevCol.Start + prevCol.Length                      };                      col.Length = line.Length - col.Start;                  }                    candidates.Add(col);                      res = JoinFixedColCandidates(res' candidates);              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,HeadersInData,The following statement contains a magic number: return duplicate >= rows.Length * 0.25;
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,DetectIfContainsHeaders,The following statement contains a magic number: if (sampleData.Length >= 2) {  				return SameFirstLine (info' sampleData);  			}
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CreateDelimiterOptions,The following statement contains a magic number: foreach (var info in delimiters) {                  var format = new RecordFormatInfo {                      mConfidence = (int) ((1 - info.Deviation)*100)                  };                  AdjustConfidence(format' info);  				var fileHasHeaders = false;  				if (FileHasHeaders.HasValue)  					fileHasHeaders = FileHasHeaders.Value;  				else {  					fileHasHeaders = DetectIfContainsHeaders (info' sampleData) ;  				}                  var builder = new DelimitedClassBuilder("AutoDetectedClass"' info.Delimiter.ToString()) {  					IgnoreFirstLines = fileHasHeaders                          ? 1                          : 0                  };                    var firstLineSplitted = sampleData[0][0].Split(info.Delimiter);                  for (int i = 0; i < info.Max + 1; i++) {                      string name = "Field " + (i + 1).ToString().PadLeft(3' '0');                      if (fileHasHeaders && i < firstLineSplitted.Length)                          name = firstLineSplitted[i];                        var f = builder.AddField(StringHelper.ToValidIdentifier(name));                      if (i > info.Min)                          f.FieldOptional = true;                  }                    format.mClassBuilder = builder;                    res.Add(format);              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CreateDelimiterOptions,The following statement contains a magic number: foreach (var info in delimiters) {                  var format = new RecordFormatInfo {                      mConfidence = (int) ((1 - info.Deviation)*100)                  };                  AdjustConfidence(format' info);  				var fileHasHeaders = false;  				if (FileHasHeaders.HasValue)  					fileHasHeaders = FileHasHeaders.Value;  				else {  					fileHasHeaders = DetectIfContainsHeaders (info' sampleData) ;  				}                  var builder = new DelimitedClassBuilder("AutoDetectedClass"' info.Delimiter.ToString()) {  					IgnoreFirstLines = fileHasHeaders                          ? 1                          : 0                  };                    var firstLineSplitted = sampleData[0][0].Split(info.Delimiter);                  for (int i = 0; i < info.Max + 1; i++) {                      string name = "Field " + (i + 1).ToString().PadLeft(3' '0');                      if (fileHasHeaders && i < firstLineSplitted.Length)                          name = firstLineSplitted[i];                        var f = builder.AddField(StringHelper.ToValidIdentifier(name));                      if (i > info.Min)                          f.FieldOptional = true;                  }                    format.mClassBuilder = builder;                    res.Add(format);              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,AdjustConfidence,The following statement contains a magic number: switch (info.Delimiter) {                  case '"': // Avoid the quote identifier                  case '\'': // Avoid the quote identifier                      format.mConfidence = (int) (format.Confidence*0.2);                      break;                    case '/': // Avoid the date delimiters and url to be selected                  case '.': // Avoid the decimal separator to be selected                      format.mConfidence = (int) (format.Confidence*0.4);                      break;                    case '@': // Avoid the mails separator to be selected                  case '&': // Avoid this is near a letter and URLS                  case '=': // Avoid because URLS contains it                  case ':': // Avoid because URLS contains it                      format.mConfidence = (int) (format.Confidence*0.6);                      break;                    case '-': // Avoid this other date separator                      format.mConfidence = (int) (format.Confidence*0.7);                      break;                    case ''': // Help the ' ; tab | to be confident                  case ';':                  case '\t':                  case '|':                      format.mConfidence = (int) Math.Min(100' format.Confidence*1.15);                      break;              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,AdjustConfidence,The following statement contains a magic number: switch (info.Delimiter) {                  case '"': // Avoid the quote identifier                  case '\'': // Avoid the quote identifier                      format.mConfidence = (int) (format.Confidence*0.2);                      break;                    case '/': // Avoid the date delimiters and url to be selected                  case '.': // Avoid the decimal separator to be selected                      format.mConfidence = (int) (format.Confidence*0.4);                      break;                    case '@': // Avoid the mails separator to be selected                  case '&': // Avoid this is near a letter and URLS                  case '=': // Avoid because URLS contains it                  case ':': // Avoid because URLS contains it                      format.mConfidence = (int) (format.Confidence*0.6);                      break;                    case '-': // Avoid this other date separator                      format.mConfidence = (int) (format.Confidence*0.7);                      break;                    case ''': // Help the ' ; tab | to be confident                  case ';':                  case '\t':                  case '|':                      format.mConfidence = (int) Math.Min(100' format.Confidence*1.15);                      break;              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,AdjustConfidence,The following statement contains a magic number: switch (info.Delimiter) {                  case '"': // Avoid the quote identifier                  case '\'': // Avoid the quote identifier                      format.mConfidence = (int) (format.Confidence*0.2);                      break;                    case '/': // Avoid the date delimiters and url to be selected                  case '.': // Avoid the decimal separator to be selected                      format.mConfidence = (int) (format.Confidence*0.4);                      break;                    case '@': // Avoid the mails separator to be selected                  case '&': // Avoid this is near a letter and URLS                  case '=': // Avoid because URLS contains it                  case ':': // Avoid because URLS contains it                      format.mConfidence = (int) (format.Confidence*0.6);                      break;                    case '-': // Avoid this other date separator                      format.mConfidence = (int) (format.Confidence*0.7);                      break;                    case ''': // Help the ' ; tab | to be confident                  case ';':                  case '\t':                  case '|':                      format.mConfidence = (int) Math.Min(100' format.Confidence*1.15);                      break;              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,AdjustConfidence,The following statement contains a magic number: switch (info.Delimiter) {                  case '"': // Avoid the quote identifier                  case '\'': // Avoid the quote identifier                      format.mConfidence = (int) (format.Confidence*0.2);                      break;                    case '/': // Avoid the date delimiters and url to be selected                  case '.': // Avoid the decimal separator to be selected                      format.mConfidence = (int) (format.Confidence*0.4);                      break;                    case '@': // Avoid the mails separator to be selected                  case '&': // Avoid this is near a letter and URLS                  case '=': // Avoid because URLS contains it                  case ':': // Avoid because URLS contains it                      format.mConfidence = (int) (format.Confidence*0.6);                      break;                    case '-': // Avoid this other date separator                      format.mConfidence = (int) (format.Confidence*0.7);                      break;                    case ''': // Help the ' ; tab | to be confident                  case ';':                  case '\t':                  case '|':                      format.mConfidence = (int) Math.Min(100' format.Confidence*1.15);                      break;              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,AdjustConfidence,The following statement contains a magic number: switch (info.Delimiter) {                  case '"': // Avoid the quote identifier                  case '\'': // Avoid the quote identifier                      format.mConfidence = (int) (format.Confidence*0.2);                      break;                    case '/': // Avoid the date delimiters and url to be selected                  case '.': // Avoid the decimal separator to be selected                      format.mConfidence = (int) (format.Confidence*0.4);                      break;                    case '@': // Avoid the mails separator to be selected                  case '&': // Avoid this is near a letter and URLS                  case '=': // Avoid because URLS contains it                  case ':': // Avoid because URLS contains it                      format.mConfidence = (int) (format.Confidence*0.6);                      break;                    case '-': // Avoid this other date separator                      format.mConfidence = (int) (format.Confidence*0.7);                      break;                    case ''': // Help the ' ; tab | to be confident                  case ';':                  case '\t':                  case '|':                      format.mConfidence = (int) Math.Min(100' format.Confidence*1.15);                      break;              }
Magic Number,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,AdjustConfidence,The following statement contains a magic number: switch (info.Delimiter) {                  case '"': // Avoid the quote identifier                  case '\'': // Avoid the quote identifier                      format.mConfidence = (int) (format.Confidence*0.2);                      break;                    case '/': // Avoid the date delimiters and url to be selected                  case '.': // Avoid the decimal separator to be selected                      format.mConfidence = (int) (format.Confidence*0.4);                      break;                    case '@': // Avoid the mails separator to be selected                  case '&': // Avoid this is near a letter and URLS                  case '=': // Avoid because URLS contains it                  case ':': // Avoid because URLS contains it                      format.mConfidence = (int) (format.Confidence*0.6);                      break;                    case '-': // Avoid this other date separator                      format.mConfidence = (int) (format.Confidence*0.7);                      break;                    case ''': // Help the ' ; tab | to be confident                  case ';':                  case '\t':                  case '|':                      format.mConfidence = (int) Math.Min(100' format.Confidence*1.15);                      break;              }
Magic Number,FileHelpers.Detection,Indicators,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CalculateDeviation,The following statement contains a magic number: for (int i = 0; i < values.Count; i++)                  {                      sum += Math.Pow (values[i] - avg' 2);                  }
Magic Number,FileHelpers.Detection,Indicators,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CalculateByDelimiter,The following statement contains a magic number: List<int> delimiterPerLine = new List<int> (100);
Magic Number,FileHelpers.Detection,Indicators,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,CalculateAsFixedSize,The following statement contains a magic number: List<int> sizePerLine = new List<int> (100);
Magic Number,FileHelpers.Helpers,StringHelper,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StringHelper.cs,ExtractQuotedString,The following statement contains a magic number: var res = new StringBuilder(32);
Magic Number,FileHelpers.Helpers,StringHelper,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Helpers\StringHelper.cs,ReplaceRecursive,The following statement contains a magic number: const int maxTries = 1000;
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,DetectEncoding,The following statement contains a magic number: if (this.mByteLen >= 2) {                  this.mDetectEncoding = false;                  bool flag = false;                  if ((this.mByteBuffer[0] == 0xfe) &&                      (this.mByteBuffer[1] == 0xff)) {                      this.mEncoding = new UnicodeEncoding(true' true);                      CompressBuffer(2);                      flag = true;                  }                  else if ((this.mByteBuffer[0] == 0xff) &&                           (this.mByteBuffer[1] == 0xfe)) {                      if (((this.mByteLen >= 4) && (this.mByteBuffer[2] == 0)) &&                          (this.mByteBuffer[3] == 0)) {                          this.mEncoding = new UTF32Encoding(false' true);                          this.CompressBuffer(4);                      }                      else {                          this.mEncoding = new UnicodeEncoding(false' true);                          this.CompressBuffer(2);                      }                      flag = true;                  }                  else if (((this.mByteLen >= 3) && (this.mByteBuffer[0] == 0xef)) &&                           ((this.mByteBuffer[1] == 0xbb) && (this.mByteBuffer[2] == 0xbf))) {                      this.mEncoding = Encoding.UTF8;                      this.CompressBuffer(3);                      flag = true;                  }                  else if ((((this.mByteLen >= 4) && (this.mByteBuffer[0] == 0)) &&                            ((this.mByteBuffer[1] == 0) && (this.mByteBuffer[2] == 0xfe))) &&                           (this.mByteBuffer[3] == 0xff)) {                      this.mEncoding = new UTF32Encoding(true' true);                      flag = true;                  }                  else if (this.mByteLen == 2)                      this.mDetectEncoding = true;                  if (flag) {                      this.mDecoder = this.mEncoding.GetDecoder();                      this.mMaxCharsPerBuffer = this.mEncoding.GetMaxCharCount(this.mByteBuffer.Length);                      this.mCharBuffer = new char[this.mMaxCharsPerBuffer];                  }              }
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadBuffer,The following statement contains a magic number: do {                  if (this.mCheckPreamble) {                      int num = this.mStream.Read(this.mByteBuffer' this.mBytePos' this.mByteBuffer.Length - this.mBytePos);                      if (num == 0) {                          if (this.mByteLen > 0) {                              this.mCharLen += this.mDecoder.GetChars(this.mByteBuffer'                                  0'                                  this.mByteLen'                                  this.mCharBuffer'                                  this.mCharLen);                          }                          return this.mCharLen;                      }                      this.mByteLen += num;                  }                  else {                      this.mByteLen = this.mStream.Read(this.mByteBuffer' 0' this.mByteBuffer.Length);                      if (this.mByteLen == 0)                          return this.mCharLen;                  }                  this.mIsBlocked = this.mByteLen < this.mByteBuffer.Length;                  if (!this.IsPreamble()) {                      if (this.mDetectEncoding &&                          (this.mByteLen >= 2))                          this.DetectEncoding();                      this.mCharLen += this.mDecoder.GetChars(this.mByteBuffer'                          0'                          this.mByteLen'                          this.mCharBuffer'                          this.mCharLen);                  }              } while (this.mCharLen == 0);
Magic Number,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadLine,The following statement contains a magic number: do {                  int currentCharPos = this.mCharPos;                  do {                      char ch = this.mCharBuffer[currentCharPos];                      switch (ch) {                          case '\r':                          case '\n':                              string str;                              if (builder != null) {                                  builder.Append(this.mCharBuffer' this.mCharPos' currentCharPos - this.mCharPos);                                  //str = new string(charBuffer' this.charPos' currentCharPos - this.charPos);                                  str = builder.ToString();                              }                              else                                  str = new string(this.mCharBuffer' this.mCharPos' currentCharPos - this.mCharPos);                              this.mCharPos = currentCharPos + 1;                              if (((ch == '\r') && ((this.mCharPos < this.mCharLen) || (this.ReadBuffer() > 0))) &&                                  (this.mCharBuffer[this.mCharPos] == '\n'))                                  this.mCharPos++;                              return str;                      }                      currentCharPos++;                  } while (currentCharPos < this.mCharLen);                  currentCharPos = this.mCharLen - this.mCharPos;                  if (builder == null)                      builder = new StringBuilder(currentCharPos + 80);                  builder.Append(this.mCharBuffer' this.mCharPos' currentCharPos);              } while (this.ReadBuffer() > 0);
Missing Default,FileHelpers,FieldConverterAttribute,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Attributes\FieldConverterAttribute.cs,ValidateTypes,The following switch statement is missing a default case: switch (Kind) {                 case ConverterKind.None:                     valid = true;                     break;                  case ConverterKind.Date:                 case ConverterKind.DateMultiFormat:                     valid = typeof (DateTime) == fieldType;                     break;                  case ConverterKind.Byte:                 case ConverterKind.SByte:                 case ConverterKind.Int16:                 case ConverterKind.Int32:                 case ConverterKind.Int64:                 case ConverterKind.UInt16:                 case ConverterKind.UInt32:                 case ConverterKind.UInt64:                 case ConverterKind.Decimal:                 case ConverterKind.Double:                 case ConverterKind.Single:                 case ConverterKind.Boolean:                 case ConverterKind.Char:                 case ConverterKind.Guid:                     valid = Kind.ToString() == fieldType.UnderlyingSystemType.Name;                     break;                 case ConverterKind.PercentDouble:                     valid = typeof (double) == fieldType;                     break;             }
Missing Default,FileHelpers,RecordOperations,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Core\RecordOperations.cs,MustIgnoreLine,The following switch statement is missing a default case: switch (mRecordInfo.RecordCondition) {                      case RecordCondition.ExcludeIfBegins:                          return ConditionHelper.BeginsWith(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfBegins:                          return !ConditionHelper.BeginsWith(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfContains:                          return ConditionHelper.Contains(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfContains:                          return !ConditionHelper.Contains(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfEnclosed:                          return ConditionHelper.Enclosed(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfEnclosed:                          return !ConditionHelper.Enclosed(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfEnds:                          return ConditionHelper.EndsWith(line' mRecordInfo.RecordConditionSelector);                      case RecordCondition.IncludeIfEnds:                          return !ConditionHelper.EndsWith(line' mRecordInfo.RecordConditionSelector);                        case RecordCondition.ExcludeIfMatchRegex:                          return mRecordInfo.RecordConditionRegEx.IsMatch(line);                        case RecordCondition.IncludeIfMatchRegex:                          return !mRecordInfo.RecordConditionRegEx.IsMatch(line);                  }
Missing Default,FileHelpers,FileHelperAsyncEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,ReadNextRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                              case ErrorMode.ThrowException:                                  byPass = true;                                  throw;                              case ErrorMode.IgnoreAndContinue:                                  break;                              case ErrorMode.SaveAndContinue:                                  var err = new ErrorInfo {                                      mLineNumber = mAsyncReader.LineNumber'                                      mExceptionInfo = ex'                                      mRecordString = currentLine                                  };                                  //							err.mColumnNumber = mColumnNum;                                    mErrorManager.AddError(err);                                  break;                          }
Missing Default,FileHelpers,FileHelperAsyncEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,WriteRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                      case ErrorMode.ThrowException:                          throw;                      case ErrorMode.IgnoreAndContinue:                          break;                      case ErrorMode.SaveAndContinue:                          var err = new ErrorInfo {                              mLineNumber = mLineNumber'                              mExceptionInfo = ex'                              mRecordString = currentLine                          };                          //							err.mColumnNumber = mColumnNum;                          mErrorManager.AddError(err);                          break;                  }
Missing Default,FileHelpers,FileHelperAsyncEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperAsyncEngine.cs,WriteNextValues,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                      case ErrorMode.ThrowException:                          throw;                      case ErrorMode.IgnoreAndContinue:                          break;                      case ErrorMode.SaveAndContinue:                          var err = new ErrorInfo {                              mLineNumber = mLineNumber'                              mExceptionInfo = ex'                              mRecordString = currentLine                          };                          //							err.mColumnNumber = mColumnNum;                          mErrorManager.AddError(err);                          break;                  }
Missing Default,FileHelpers,FileHelperEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,ReadStreamAsList,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                              case ErrorMode.ThrowException:                                  byPass = true;                                  throw;                              case ErrorMode.IgnoreAndContinue:                                  break;                              case ErrorMode.SaveAndContinue:                                  var err = new ErrorInfo {                                      mLineNumber = freader.LineNumber'                                      mExceptionInfo = ex'                                      mRecordString = completeLine'                                  };                                    mErrorManager.AddError(err);                                  break;                          }
Missing Default,FileHelpers,FileHelperEngine<T>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\FileHelperEngine.cs,WriteStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                          case ErrorMode.ThrowException:                              throw;                          case ErrorMode.IgnoreAndContinue:                              break;                          case ErrorMode.SaveAndContinue:                              var err = new ErrorInfo {                                  mLineNumber = mLineNumber'                                  mExceptionInfo = ex'                                  mRecordString = currentLine                              };                              mErrorManager.AddError(err);                              break;                      }
Missing Default,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                             case ErrorMode.ThrowException:                                 byPass = true;                                 throw;                             case ErrorMode.IgnoreAndContinue:                                 break;                             case ErrorMode.SaveAndContinue:                                 var err = new ErrorInfo {                                     mLineNumber = freader.LineNumber'                                     mExceptionInfo = ex'                                     mRecordString = completeLine                                 };                                  mErrorManager.AddError(err);                                 break;                         }
Missing Default,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,WriteStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                         case ErrorMode.ThrowException:                             throw;                         case ErrorMode.IgnoreAndContinue:                             break;                         case ErrorMode.SaveAndContinue:                             var err = new ErrorInfo {                                 mLineNumber = mLineNumber'                                 mExceptionInfo = ex'                                 mRecordString = currentLine                             };                             mErrorManager.AddError(err);                             break;                     }
Missing Default,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,ReadNextRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                             case ErrorMode.ThrowException:                                 byPass = true;                                 throw;                             case ErrorMode.IgnoreAndContinue:                                 break;                             case ErrorMode.SaveAndContinue:                                 var err = new ErrorInfo {                                     mLineNumber = mAsyncReader.LineNumber'                                     mExceptionInfo = ex'                                     mRecordString = currentLine                                 };                                  mErrorManager.AddError(err);                                 break;                         }
Missing Default,FileHelpers,MultiRecordEngine,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Engines\MultiRecordEngine.cs,WriteRecord,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                     case ErrorMode.ThrowException:                         throw;                     case ErrorMode.IgnoreAndContinue:                         break;                     case ErrorMode.SaveAndContinue:                         var err = new ErrorInfo {                             mLineNumber = mLineNumber'                             mExceptionInfo = ex'                             mRecordString = currentLine                         };                         //							err.mColumnNumber = mColumnNum;                         mErrorManager.AddError(err);                         break;                 }
Missing Default,FileHelpers.DataLink,DatabaseStorage,C:\repos\MarcosMeli_FileHelpers\FileHelpers\DataLink\Storage\DataBaseStorage.cs,InitTransaction,The following switch statement is missing a default case: switch (mTransactionMode) {                  case TransactionMode.UseDefault:                      return conn.BeginTransaction();                    case TransactionMode.UseChaosLevel:                      return conn.BeginTransaction(IsolationLevel.Chaos);                    case TransactionMode.UseReadCommitted:                      return conn.BeginTransaction(IsolationLevel.ReadCommitted);                    case TransactionMode.UseReadUnCommitted:                      return conn.BeginTransaction(IsolationLevel.ReadUncommitted);                    case TransactionMode.UseRepeatableRead:                      return conn.BeginTransaction(IsolationLevel.RepeatableRead);                    case TransactionMode.UseSerializable:                      return conn.BeginTransaction(IsolationLevel.Serializable);              }
Missing Default,FileHelpers.Dynamic,AttributesBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\AttributesBuilder.cs,AddAttribute,The following switch statement is missing a default case: switch (mLang) {                      case NetLanguage.CSharp:                          mSb.Append("[");                          break;                      case NetLanguage.VbNet:                          mSb.Append("<");                          break;                  }
Missing Default,FileHelpers.Dynamic,AttributesBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\AttributesBuilder.cs,AddAttribute,The following switch statement is missing a default case: switch (mLang) {                      case NetLanguage.VbNet:                          mSb.Append("' _"); //  new line continuation                          mSb.Append(StringHelper.NewLine);                          mSb.Append(" ");                          break;                      case NetLanguage.CSharp:                          mSb.Append("[");                          break;                  }
Missing Default,FileHelpers.Dynamic,AttributesBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\AttributesBuilder.cs,AddAttribute,The following switch statement is missing a default case: switch (mLang) {                  case NetLanguage.CSharp:                      mSb.Append("]");                      mSb.Append(StringHelper.NewLine);                      break;                  case NetLanguage.VbNet:                      break;              }
Missing Default,FileHelpers.Dynamic,AttributesBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\AttributesBuilder.cs,GetAttributesCode,The following switch statement is missing a default case: switch (mLang) {                  case NetLanguage.VbNet:                      mSb.Append("> _");                      mSb.Append(StringHelper.NewLine);                      break;              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,ClassFromString,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.CSharp:                      code.Append("using System; using FileHelpers; using System.Collections; using System.Collections.Generic;");                      if (mustAddSystemData)                          code.Append(" using System.Data;");                      break;                    case NetLanguage.VbNet:                        if (                          CultureInfo.CurrentCulture.CompareInfo.IndexOf(classStr'                              "Imports System"'                              CompareOptions.IgnoreCase) == -1)                          code.Append("Imports System\n");                        if (                          CultureInfo.CurrentCulture.CompareInfo.IndexOf(classStr'                              "Imports FileHelpers"'                              CompareOptions.IgnoreCase) == -1)                          code.Append("Imports FileHelpers\n");                        if (mustAddSystemData &&                          CultureInfo.CurrentCulture.CompareInfo.IndexOf(classStr'                              "Imports System.Data"'                              CompareOptions.IgnoreCase) == -1)                          code.Append("Imports System.Data\n");                        break;              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,ClassFromString,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.CSharp:                      prov = CodeDomProvider.CreateProvider("cs");                      break;                    case NetLanguage.VbNet:                      prov = CodeDomProvider.CreateProvider("vb");                      break;              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,GetClassSourceCode,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.VbNet:                      sb.Append(GetVisibility(lang' mVisibility) + GetSealed(lang) + "Class " + mClassName);                      sb.Append(StringHelper.NewLine);                      break;                  case NetLanguage.CSharp:                      sb.Append(GetVisibility(lang' mVisibility) + GetSealed(lang) + "class " + mClassName);                      sb.Append(StringHelper.NewLine);                      sb.Append("{");                      break;              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,GetClassSourceCode,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.VbNet:                      sb.Append("End Class");                      break;                  case NetLanguage.CSharp:                      sb.Append("}");                      break;              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,GetVisibility,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.CSharp:                      switch (visibility) {                          case NetVisibility.Public:                              return "public ";                          case NetVisibility.Private:                              return "private ";                          case NetVisibility.Internal:                              return "internal ";                          case NetVisibility.Protected:                              return "protected ";                      }                      break;                    case NetLanguage.VbNet:                      switch (visibility) {                          case NetVisibility.Public:                              return "Public ";                          case NetVisibility.Private:                              return "Private ";                          case NetVisibility.Internal:                              return "Friend ";                          case NetVisibility.Protected:                              return "Protected ";                      }                      break;              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,GetVisibility,The following switch statement is missing a default case: switch (visibility) {                          case NetVisibility.Public:                              return "public ";                          case NetVisibility.Private:                              return "private ";                          case NetVisibility.Internal:                              return "internal ";                          case NetVisibility.Protected:                              return "protected ";                      }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,GetVisibility,The following switch statement is missing a default case: switch (visibility) {                          case NetVisibility.Public:                              return "Public ";                          case NetVisibility.Private:                              return "Private ";                          case NetVisibility.Internal:                              return "Friend ";                          case NetVisibility.Protected:                              return "Protected ";                      }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,GetSealed,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.CSharp:                      return "sealed ";                    case NetLanguage.VbNet:                      return "NotInheritable ";              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,BeginNamespace,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.CSharp:                      sb.Append("namespace ");                      sb.Append(mNamespace);                      sb.Append(StringHelper.NewLine);                      sb.Append("{");                      break;                    case NetLanguage.VbNet:                      sb.Append("Namespace ");                      sb.Append(mNamespace);                      sb.Append(StringHelper.NewLine);                      break;              }
Missing Default,FileHelpers.Dynamic,ClassBuilder,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Dynamic\ClassBuilder.cs,EndNamespace,The following switch statement is missing a default case: switch (lang) {                  case NetLanguage.CSharp:                      sb.Append("}");                      break;                    case NetLanguage.VbNet:                      sb.Append("End Namespace");                      break;              }
Missing Default,FileHelpers.Detection,SmartFormatDetector,C:\repos\MarcosMeli_FileHelpers\FileHelpers\FormatDetector\SmartFormatDetector.cs,AdjustConfidence,The following switch statement is missing a default case: switch (info.Delimiter) {                  case '"': // Avoid the quote identifier                  case '\'': // Avoid the quote identifier                      format.mConfidence = (int) (format.Confidence*0.2);                      break;                    case '/': // Avoid the date delimiters and url to be selected                  case '.': // Avoid the decimal separator to be selected                      format.mConfidence = (int) (format.Confidence*0.4);                      break;                    case '@': // Avoid the mails separator to be selected                  case '&': // Avoid this is near a letter and URLS                  case '=': // Avoid because URLS contains it                  case ':': // Avoid because URLS contains it                      format.mConfidence = (int) (format.Confidence*0.6);                      break;                    case '-': // Avoid this other date separator                      format.mConfidence = (int) (format.Confidence*0.7);                      break;                    case ''': // Help the ' ; tab | to be confident                  case ';':                  case '\t':                  case '|':                      format.mConfidence = (int) Math.Min(100' format.Confidence*1.15);                      break;              }
Missing Default,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,ReadStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                              case ErrorMode.ThrowException:                                  byPass = true;                                  throw;                              case ErrorMode.IgnoreAndContinue:                                  break;                              case ErrorMode.SaveAndContinue:                                  var err = new ErrorInfo {                                      mLineNumber = mLineNumber'                                      mExceptionInfo = ex'                                      mRecordString = completeLine                                  };                                  //							err.mColumnNumber = mColumnNum;                                    mErrorManager.AddError(err);                                  break;                          }
Missing Default,FileHelpers.MasterDetail,MasterDetailEngine<TMaster;TDetail>,C:\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,WriteStream,The following switch statement is missing a default case: switch (mErrorManager.ErrorMode) {                          case ErrorMode.ThrowException:                              throw;                          case ErrorMode.IgnoreAndContinue:                              break;                          case ErrorMode.SaveAndContinue:                              var err = new ErrorInfo {                                  mLineNumber = mLineNumber'                                  mExceptionInfo = ex'                                  mRecordString = currentLine                              };                              //							err.mColumnNumber = mColumnNum;                              mErrorManager.AddError(err);                              break;                      }
Missing Default,FileHelpers.MasterDetail,CommonSelectorInternal,C:\repos\MarcosMeli_FileHelpers\FileHelpers\MasterDetail\MasterDetailEngine.cs,CommonSelectorMethod,The following switch statement is missing a default case: switch (mAction) {                      case CommonSelector.DetailIfContains:                          if (recordString.IndexOf(mSelector) >= 0)                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfContains:                          if (recordString.IndexOf(mSelector) >= 0)                              return RecordAction.Master;                          else                              return RecordAction.Detail;                        case CommonSelector.DetailIfBegins:                          if (recordString.StartsWith(mSelector))                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfBegins:                          if (recordString.StartsWith(mSelector))                              return RecordAction.Master;                          else                              return RecordAction.Detail;                        case CommonSelector.DetailIfEnds:                          if (recordString.EndsWith(mSelector))                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfEnds:                          if (recordString.EndsWith(mSelector))                              return RecordAction.Master;                          else                              return RecordAction.Detail;                        case CommonSelector.DetailIfEnclosed:                          if (recordString.StartsWith(mSelector) &&                              recordString.EndsWith(mSelector))                              return RecordAction.Detail;                          else                              return RecordAction.Master;                        case CommonSelector.MasterIfEnclosed:                          if (recordString.StartsWith(mSelector) &&                              recordString.EndsWith(mSelector))                              return RecordAction.Master;                          else                              return RecordAction.Detail;                  }
Missing Default,FileHelpers.Streams,InternalStringReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStringReader.cs,ReadLine,The following switch statement is missing a default case: switch (ch) {                      case '\r':                      case '\n':                      {                          string str = this.mS.Substring(this.Position' num - this.Position);                          this.Position = num + 1;                          if (((ch == '\r') && (this.Position < this.Length)) &&                              (this.mS[this.Position] == '\n'))                              this.Position = this.Position + 1;                          return str;                      }                  }
Missing Default,FileHelpers.Streams,InternalStreamReader,C:\repos\MarcosMeli_FileHelpers\FileHelpers\Streams\InternalStreamReader.cs,ReadLine,The following switch statement is missing a default case: switch (ch) {                          case '\r':                          case '\n':                              string str;                              if (builder != null) {                                  builder.Append(this.mCharBuffer' this.mCharPos' currentCharPos - this.mCharPos);                                  //str = new string(charBuffer' this.charPos' currentCharPos - this.charPos);                                  str = builder.ToString();                              }                              else                                  str = new string(this.mCharBuffer' this.mCharPos' currentCharPos - this.mCharPos);                              this.mCharPos = currentCharPos + 1;                              if (((ch == '\r') && ((this.mCharPos < this.mCharLen) || (this.ReadBuffer() > 0))) &&                                  (this.mCharBuffer[this.mCharPos] == '\n'))                                  this.mCharPos++;                              return str;                      }
