Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,SharpMTProto.Tests,TestData,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\TestData.cs,,The length of the parameter ServerDHParamsOkEncryptedAnswer is 31.
Long Identifier,SharpMTProto.Tests,TestData,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\TestData.cs,,The length of the parameter SetClientDHParamsEncryptedData is 30.
Long Identifier,SharpMTProto.Tests.Messaging,MessageCodecFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\MessageCodecFacts.cs,,The length of the parameter TestEncryptedClientMessageBytes is 31.
Long Identifier,SharpMTProto.Tests.Messaging,MessageCodecFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\MessageCodecFacts.cs,,The length of the parameter TestEncryptedServerMessageBytes is 31.
Long Statement,SharpMTProto.Tests.Authentication,KeyChainFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Authentication\KeyChainFacts.cs,Should_add_keys,The length of the statement  "                keyChain.Contains(testKey.Fingerprint).Should().BeTrue("Because key chain must have added key with fingerprint: {0:X16}."' testKey.Fingerprint); " is 144.
Long Statement,SharpMTProto.Tests,MTProtoClientBuilderFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoBuilderFacts.cs,Should_create_connection,The length of the statement  "            IMTProtoClientConnection connection = MTProtoClientBuilder.BuildConnection(new TcpClientTransportConfig("127.0.0.1"' 9999)); " is 124.
Long Statement,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_encrypted_message_and_wait_for_response,The length of the statement  "                TestResponse response = await connection.RequestAsync<TestResponse>(request' MessageSendingFlags.EncryptedAndContentRelated' TimeSpan.FromSeconds(5)); " is 150.
Long Statement,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_plain_message_and_wait_for_response,The length of the statement  "                TestResponse response = await connection.RequestAsync<TestResponse>(request' MessageSendingFlags.None' TimeSpan.FromSeconds(5)); " is 128.
Long Statement,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_timeout_on_connect,The length of the statement  "            mockTransport.Setup(transport => transport.ConnectAsync(It.IsAny<CancellationToken>())).Returns(() => Task.Delay(1000)); " is 120.
Long Statement,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,SetupMockTransportWhichReturnsBytes,The length of the statement  "            mockTransport.Setup(transport => transport.Subscribe(It.IsAny<IObserver<byte[]>>())).Callback<IObserver<byte[]>>(observer => inConnector.Subscribe(observer)); " is 158.
Long Statement,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,CreateMockTransportFactory,The length of the statement  "            mockTransportFactory.Setup(manager => manager.CreateTransport(It.IsAny<IClientTransportConfig>())).Returns(() => clientTransport); " is 130.
Long Statement,SharpMTProto.Tests,TestRig,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\TestData.cs,CreateTestServiceLocator,The length of the statement  "            serviceLocator.RegisterInstance(Mock.Of<IClientTransportFactory>(factory => factory.CreateTransport(It.IsAny<IClientTransportConfig>()) == Mock.Of<IClientTransport>())); " is 169.
Long Statement,SharpMTProto.Tests.Messaging.Handlers,BadMsgNotificationHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\BadMsgNotificationHandlerFacts.cs,Should_update_salt_and_resend_message_on_bad_server_salt_notification,The length of the statement  "                new BadServerSalt {BadMsgId = reqMsg.MsgId' BadMsgSeqno = reqMsg.Seqno' ErrorCode = (uint) ErrorCode.IncorrectServerSalt' NewServerSalt = newSalt}); " is 148.
Long Statement,SharpMTProto.Tests.Messaging.Handlers,FirstRequestResponseHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\FirstRequestResponseHandlerFacts.cs,Should_set_response_to_request,The length of the statement  "            requestsManager.Setup(manager => manager.GetFirstOrDefault(response' It.IsAny<bool>())).Returns(request.Object).Verifiable(); " is 125.
Long Statement,SharpMTProto.Tests.Messaging,MessageCodecFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\MessageCodecFacts.cs,Should_throw_on_unwrap_plain_message_with_wrong_body_length,The length of the statement  "            byte[] messageBytes = ("0000000000000000" + "0807060504030201" + "11000000" + "9EB6EFEB" + "09" + "000102030405060708" + "0000").HexToBytes(); " is 142.
Long Statement,SharpMTProto.Tests.Messaging,MessageCodecFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\MessageCodecFacts.cs,Should_wrap_encrypted_message,The length of the statement  "            byte[] wrappedMessageBytes = messageCodec.EncodeEncryptedMessage(TestMessage' TestRig.AuthKey' 0x999UL' 0x777UL' sender); " is 121.
Long Statement,SharpMTProto.Tests.Services,EncryptionServicesFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Services\EncryptionServicesFacts.cs,Should_decrypt_Aes256Ige,The length of the statement  "            byte[] decryptedData = es.Aes256IgeDecrypt(TestData.ServerDHParamsOkEncryptedAnswer' TestData.TmpAesKey' TestData.TmpAesIV); " is 124.
Long Statement,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,CreateTcpTransport,The length of the statement  "            var config = new TcpClientTransportConfig(_serverEndPoint.Address.ToString()' _serverEndPoint.Port) {MaxBufferSize = 0xFF}; " is 123.
Magic Number,SharpMTProto.Tests.Authentication,AuthKeyNegotiatorFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Authentication\AuthKeyNegotiatorFacts.cs,Should_create_auth_key,The following statement contains a magic number: mockEncryptionServices.Setup(                      services =>                          services.Aes256IgeEncrypt(                              It.Is<byte[]>(                                  bytes =>                                      bytes.RewriteWithValue(0' bytes.Length - 12' 12)                                          .SequenceEqual(TestData.ClientDHInnerDataWithHash))'                              TestData.TmpAesKey'                              TestData.TmpAesIV)).Returns(TestData.SetClientDHParamsEncryptedData);
Magic Number,SharpMTProto.Tests.Authentication,AuthKeyNegotiatorFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Authentication\AuthKeyNegotiatorFacts.cs,Should_create_auth_key,The following statement contains a magic number: mockEncryptionServices.Setup(                      services =>                          services.Aes256IgeEncrypt(                              It.Is<byte[]>(                                  bytes =>                                      bytes.RewriteWithValue(0' bytes.Length - 12' 12)                                          .SequenceEqual(TestData.ClientDHInnerDataWithHash))'                              TestData.TmpAesKey'                              TestData.TmpAesIV)).Returns(TestData.SetClientDHParamsEncryptedData);
Magic Number,SharpMTProto.Tests,MTProtoClientBuilderFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoBuilderFacts.cs,Should_create_connection,The following statement contains a magic number: IMTProtoClientConnection connection = MTProtoClientBuilder.BuildConnection(new TcpClientTransportConfig("127.0.0.1"' 9999));
Magic Number,SharpMTProto.Tests,MTProtoClientBuilderFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoBuilderFacts.cs,Should_create_auth_key_negotiator,The following statement contains a magic number: var authKeyNegotiator = MTProtoClientBuilder.BuildAuthKeyNegotiator(new TcpClientTransportConfig("127.0.0.1"' 9999));
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_Rpc_and_receive_response,The following statement contains a magic number: var config = new ConnectionConfig(TestRig.AuthKey' 100500) {SessionId = 2};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_Rpc_and_receive_response,The following statement contains a magic number: var config = new ConnectionConfig(TestRig.AuthKey' 100500) {SessionId = 2};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_Rpc_and_receive_response,The following statement contains a magic number: var request = new TestRequest {TestId = 9};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_Rpc_and_receive_response,The following statement contains a magic number: var expectedResponse = new TestResponse {TestId = 9' TestText = "Number 1"};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_Rpc_and_receive_response,The following statement contains a magic number: byte[] expectedResponseMessageBytes = messageProcessor.EncodeEncryptedMessage(                  new Message(0x0102030405060708' 3' rpcResult)'                  config.AuthKey'                  config.Salt'                  config.SessionId'                  Sender.Server);
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_encrypted_message_and_wait_for_response,The following statement contains a magic number: var config = new ConnectionConfig(TestRig.AuthKey' 100500) {SessionId = 2};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_encrypted_message_and_wait_for_response,The following statement contains a magic number: var config = new ConnectionConfig(TestRig.AuthKey' 100500) {SessionId = 2};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_encrypted_message_and_wait_for_response,The following statement contains a magic number: var request = new TestRequest {TestId = 9};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_encrypted_message_and_wait_for_response,The following statement contains a magic number: var expectedResponse = new TestResponse {TestId = 9' TestText = "Number 1"};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_encrypted_message_and_wait_for_response,The following statement contains a magic number: byte[] expectedResponseMessageBytes = messageProcessor.EncodeEncryptedMessage(                  new Message(0x0102030405060708' 3' expectedResponse)'                  config.AuthKey'                  config.Salt'                  config.SessionId'                  Sender.Server);
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_encrypted_message_and_wait_for_response,The following statement contains a magic number: TestResponse response = await connection.RequestAsync<TestResponse>(request' MessageSendingFlags.EncryptedAndContentRelated' TimeSpan.FromSeconds(5));
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_plain_message_and_wait_for_response,The following statement contains a magic number: var request = new TestRequest {TestId = 9};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_plain_message_and_wait_for_response,The following statement contains a magic number: var expectedResponse = new TestResponse {TestId = 9' TestText = "Number 1"};
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_send_plain_message_and_wait_for_response,The following statement contains a magic number: TestResponse response = await connection.RequestAsync<TestResponse>(request' MessageSendingFlags.None' TimeSpan.FromSeconds(5));
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_timeout_on_connect,The following statement contains a magic number: mockTransport.Setup(transport => transport.ConnectAsync(It.IsAny<CancellationToken>())).Returns(() => Task.Delay(1000));
Magic Number,SharpMTProto.Tests,MTProtoClientConnectionFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\MTProtoConnectionFacts.cs,Should_timeout_on_connect,The following statement contains a magic number: connection.DefaultConnectTimeout = TimeSpan.FromMilliseconds(100);
Magic Number,SharpMTProto.Tests.Messaging.Handlers,BadMsgNotificationHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\BadMsgNotificationHandlerFacts.cs,Should_update_salt_and_resend_message_on_bad_server_salt_notification,The following statement contains a magic number: const ulong newSalt = 9;
Magic Number,SharpMTProto.Tests.Messaging.Handlers,BadMsgNotificationHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\BadMsgNotificationHandlerFacts.cs,Should_update_salt_and_resend_message_on_bad_server_salt_notification,The following statement contains a magic number: var resMsg = new Message(                  0x200600'                  2'                  new BadServerSalt {BadMsgId = reqMsg.MsgId' BadMsgSeqno = reqMsg.Seqno' ErrorCode = (uint) ErrorCode.IncorrectServerSalt' NewServerSalt = newSalt});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var messages = new List<Message> {new Message(1' 1' 1)' new Message(2' 2' 2)' new Message(3' 3' 3)};
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var messages = new List<Message> {new Message(1' 1' 1)' new Message(2' 2' 2)' new Message(3' 3' 3)};
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var messages = new List<Message> {new Message(1' 1' 1)' new Message(2' 2' 2)' new Message(3' 3' 3)};
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var messages = new List<Message> {new Message(1' 1' 1)' new Message(2' 2' 2)' new Message(3' 3' 3)};
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var messages = new List<Message> {new Message(1' 1' 1)' new Message(2' 2' 2)' new Message(3' 3' 3)};
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var messages = new List<Message> {new Message(1' 1' 1)' new Message(2' 2' 2)' new Message(3' 3' 3)};
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var containerMessage = new Message(4' 4' new MsgContainer {Messages = messages});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,MessageContainerHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\MessageContainerHandlerFacts.cs,Should_handle_container_and_forward_internal_messages_to_dispatcher,The following statement contains a magic number: var containerMessage = new Message(4' 4' new MsgContainer {Messages = messages});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg1 = new Message(1' 2' new TestResponse {TestId = 3' TestText = "TEXT 1"});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg1 = new Message(1' 2' new TestResponse {TestId = 3' TestText = "TEXT 1"});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg1Ex = new Message(3' 4' new TestResponseEx {TestId = 3' TestText = "TEXT 1"' TestText2 = "TEXT 1 EX"});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg1Ex = new Message(3' 4' new TestResponseEx {TestId = 3' TestText = "TEXT 1"' TestText2 = "TEXT 1 EX"});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg1Ex = new Message(3' 4' new TestResponseEx {TestId = 3' TestText = "TEXT 1"' TestText2 = "TEXT 1 EX"});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg2 = new Message(5' 6' new TestResponse2 {Name = "Mr.Resp"' Address = "1 Object st."' City = "Class"});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg2 = new Message(5' 6' new TestResponse2 {Name = "Mr.Resp"' Address = "1 Object st."' City = "Class"});
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg3 = new Message(7' 8' 9);
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg3 = new Message(7' 8' 9);
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: var msg3 = new Message(7' 8' 9);
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: handler1.Verify(handleAnyMsgExp' Times.Exactly(2));
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: handler1.Verify(handleAnyMsgExp' Times.Exactly(2));
Magic Number,SharpMTProto.Tests.Messaging.Handlers,ResponseDispatcherFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\ResponseDispatcherFacts.cs,Should_dispatch_messages,The following statement contains a magic number: handler1.Verify(handleAnyMsgExp' Times.Exactly(2));
Magic Number,SharpMTProto.Tests.Messaging.Handlers,RpcResultHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\RpcResultHandlerFacts.cs,Should_set_exception_on_rpc_error_response,The following statement contains a magic number: var rpcResult = new RpcResult              {                  ReqMsgId = reqMsg.MsgId'                  Result = new RpcError {ErrorCode = 400' ErrorMessage = "BAD_REQUEST"}              };
Magic Number,SharpMTProto.Tests.Messaging.Handlers,RpcResultHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\RpcResultHandlerFacts.cs,Should_set_exception_on_rpc_error_response,The following statement contains a magic number: var resMsg = new Message(0x200600' 2' rpcResult);
Magic Number,SharpMTProto.Tests.Messaging.Handlers,RpcResultHandlerFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\Handlers\RpcResultHandlerFacts.cs,Should_set_rpc_result_to_requst,The following statement contains a magic number: var resMsg = new Message(0x200600' 2' rpcResult);
Magic Number,SharpMTProto.Tests.Messaging,MessageCodecFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Messaging\MessageCodecFacts.cs,GetMessageCodec,The following statement contains a magic number: serviceLocator.RegisterInstance<IRandomGenerator>(new RandomGenerator(9));
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_process_lost_connection,The following statement contains a magic number: await Task.Delay(200);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive,The following statement contains a magic number: Task<byte[]> receiveTask = clientTransport.FirstAsync().Timeout(TimeSpan.FromMilliseconds(1000)).ToTask();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_big_payload,The following statement contains a magic number: Task<byte[]> receiveTask = clientTransport.FirstAsync().Timeout(TimeSpan.FromMilliseconds(1000)).ToTask();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_big_payload,The following statement contains a magic number: byte[] payload = Enumerable.Range(0' 255).Select(i => (byte) i).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] payload1 = Enumerable.Range(0' 10).Select(i => (byte) i).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] payload2 = Enumerable.Range(11' 40).Select(i => (byte) i).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] payload2 = Enumerable.Range(11' 40).Select(i => (byte) i).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] payload3 = Enumerable.Range(51' 205).Select(i => (byte) i).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] payload3 = Enumerable.Range(51' 205).Select(i => (byte) i).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: var packet3 = new TcpTransportPacket(2' payload3);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: allData.Split(50' out dataPart1' out dataPart2);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: await Task.Delay(100);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: await Task.Delay(100);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] receivedData1 = await receivedMessages.DequeueAsync(CancellationTokenHelpers.Timeout(1000).Token);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] receivedData2 = await receivedMessages.DequeueAsync(CancellationTokenHelpers.Timeout(1000).Token);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_multiple_packets,The following statement contains a magic number: byte[] receivedData3 = await receivedMessages.DequeueAsync(CancellationTokenHelpers.Timeout(1000).Token);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_small_parts_less_than_4_bytes,The following statement contains a magic number: Task<byte[]> receiveTask = clientTransport.FirstAsync().Timeout(TimeSpan.FromMilliseconds(3000)).ToTask();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_small_parts_less_than_4_bytes,The following statement contains a magic number: byte[] part2 = packet.Data.Skip(part1.Length).Take(2).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_small_parts_less_than_4_bytes,The following statement contains a magic number: byte[] part3 = packet.Data.Skip(part1.Length + part2.Length).Take(3).ToArray();
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_small_parts_less_than_4_bytes,The following statement contains a magic number: await Task.Delay(100);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_small_parts_less_than_4_bytes,The following statement contains a magic number: await Task.Delay(200);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_small_parts_less_than_4_bytes,The following statement contains a magic number: await Task.Delay(50);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_receive_small_parts_less_than_4_bytes,The following statement contains a magic number: await Task.Delay(50);
Magic Number,SharpMTProto.Tests.Transport,TcpClientTransportFacts,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\Transport\TcpClientTransportFacts.cs,Should_send,The following statement contains a magic number: var buffer = new byte[30];
Magic Number,SharpMTProto.Tests.TestObjects,TestResponse,D:\research\architectureSmells\repos1\Taggersoft_SharpMTProto\src\SharpMTProto.Tests.NET45\TestObjects\TestSchema.cs,GetHashCode,The following statement contains a magic number: return (TestId*397) ^ (TestText != null ? TestText.GetHashCode() : 0);
