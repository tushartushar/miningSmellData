Implementation smell,Namespace,Class,File,Method,Description
Long Method,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The method has 108 lines of code.
Long Method,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The method has 105 lines of code.
Long Method,DBreeze.DataTypes,DataTypesConvertor,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataTypes\DataTypesConvertor.cs,InitDict,The method has 110 lines of code.
Long Method,DBreeze,DBreezeResources,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Engine\DBreezeResources.cs,Insert,The method has 109 lines of code.
Long Method,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,The method has 165 lines of code.
Long Method,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The method has 127 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,IterateBackwardStartFrom,The method has 116 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdFromTo,The method has 116 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,IterateBackwardFromTo,The method has 120 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdSkipFrom,The method has 102 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,IterateBackwardSkipFrom,The method has 113 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdStartsWith,The method has 142 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,IterateForwardStartFrom,The method has 102 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwFromTo,The method has 120 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,IterateForwardFromTo,The method has 120 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwSkipFrom,The method has 103 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,IterateForwardSkipFrom,The method has 110 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwStartsWith,The method has 141 lines of code.
Long Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwStartsWith_Prefix_Helper,The method has 117 lines of code.
Long Method,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The method has 113 lines of code.
Long Method,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The method has 109 lines of code.
Long Method,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The method has 110 lines of code.
Long Method,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,GetKey,The method has 111 lines of code.
Long Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,SetupKidWithValue,The method has 133 lines of code.
Long Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The method has 312 lines of code.
Long Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The method has 195 lines of code.
Long Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteSelf,The method has 119 lines of code.
Long Method,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The method has 158 lines of code.
Long Method,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,WriteDynamicDataBlock,The method has 149 lines of code.
Long Method,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,The method has 169 lines of code.
Long Method,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,The method has 212 lines of code.
Long Method,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The method has 102 lines of code.
Long Method,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,The method has 201 lines of code.
Long Method,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The method has 104 lines of code.
Long Method,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The method has 258 lines of code.
Long Method,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The method has 100 lines of code.
Long Method,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,The method has 141 lines of code.
Long Method,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,GetReadTableFromBuffer,The method has 104 lines of code.
Long Method,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ObjectInsert,The method has 196 lines of code.
Long Method,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,RegisterWriteTablesForTransaction,The method has 102 lines of code.
Long Method,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,Commit,The method has 117 lines of code.
Long Method,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The method has 139 lines of code.
Complex Method,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetCollection,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetCollection,Cyclomatic complexity of the method is 13
Complex Method,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,CheckNull,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetNumber,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetBoolean,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,SkipValue,Cyclomatic complexity of the method is 17
Complex Method,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetStr,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetDictionary,Cyclomatic complexity of the method is 10
Complex Method,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetList,Cyclomatic complexity of the method is 10
Complex Method,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,Prettify,Cyclomatic complexity of the method is 12
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,TruncateUTF8,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoOneBitDown_NoArrayGrow_BigEndian,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoUpNextByteStart_NoArrayGrow_BigEndian,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoDownNextByteStart_NoArrayGrow_BigEndian,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,IfStringArraySmallerThen,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,IfStringArraySmallerOrEqualThen,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,IfStringArrayBiggerThen,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,IfStringArrayBiggerOrEqualThen,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.DataTypes,DataTypesConvertor,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataTypes\DataTypesConvertor.cs,ConvertValue,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.DataTypes,DataTypesConvertor,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataTypes\DataTypesConvertor.cs,ConvertBack,Cyclomatic complexity of the method is 8
Complex Method,DBreeze,DBreezeResources,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Engine\DBreezeResources.cs,Insert,Cyclomatic complexity of the method is 14
Complex Method,DBreeze,DBreezeResources,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Engine\DBreezeResources.cs,Insert,Cyclomatic complexity of the method is 17
Complex Method,DBreeze,DBreezeResources,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Engine\DBreezeResources.cs,Select,Cyclomatic complexity of the method is 14
Complex Method,DBreeze,DBreezeResources,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Engine\DBreezeResources.cs,Select,Cyclomatic complexity of the method is 10
Complex Method,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,Cyclomatic complexity of the method is 11
Complex Method,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,CloseTables,Cyclomatic complexity of the method is 8
Complex Method,DBreeze,TransactionTablesLocker,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionTablesLocker.cs,AddSession,Cyclomatic complexity of the method is 15
Complex Method,DBreeze,TransactionTablesLocker,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionTablesLocker.cs,RemoveSession,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,Cyclomatic complexity of the method is 44
Complex Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdStartFrom,Cyclomatic complexity of the method is 12
Complex Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,IterateBackwardStartFrom,Cyclomatic complexity of the method is 10
Complex Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdFromTo,Cyclomatic complexity of the method is 15
Complex Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,IterateBackwardFromTo,Cyclomatic complexity of the method is 13
Complex Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdSkipFrom,Cyclomatic complexity of the method is 13
Complex Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,IterateBackwardSkipFrom,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdStartsWith,Cyclomatic complexity of the method is 17
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwStartFrom,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,IterateForwardStartFrom,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwFromTo,Cyclomatic complexity of the method is 15
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,IterateForwardFromTo,Cyclomatic complexity of the method is 13
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwSkipFrom,Cyclomatic complexity of the method is 14
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,IterateForwardSkipFrom,Cyclomatic complexity of the method is 12
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwStartsWith,Cyclomatic complexity of the method is 17
Complex Method,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwStartsWith_Prefix_Helper,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,Cyclomatic complexity of the method is 13
Complex Method,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,Cyclomatic complexity of the method is 14
Complex Method,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,RemoveKey,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,GetKey,Cyclomatic complexity of the method is 17
Complex Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,SetupKidWithValue,Cyclomatic complexity of the method is 14
Complex Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,SetupKidWithValuePartially,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,RemoveKid,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,Cyclomatic complexity of the method is 12
Complex Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,Cyclomatic complexity of the method is 17
Complex Method,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,Cyclomatic complexity of the method is 10
Complex Method,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,Cyclomatic complexity of the method is 22
Complex Method,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_WriteByOffset,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,FlushRandomBuffer,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,Cyclomatic complexity of the method is 24
Complex Method,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,Cyclomatic complexity of the method is 12
Complex Method,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,Cyclomatic complexity of the method is 15
Complex Method,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_WriteByOffset,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,FlushRandomBuffer,Cyclomatic complexity of the method is 10
Complex Method,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,Cyclomatic complexity of the method is 24
Complex Method,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Rollback,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,GetArrays,Cyclomatic complexity of the method is 20
Complex Method,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,GetPureBlockArrays,Cyclomatic complexity of the method is 18
Complex Method,DBreeze.TextSearch,TextDeferredIndexer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextDeferredIndexer.cs,Indexer,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,Cyclomatic complexity of the method is 18
Complex Method,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,Cyclomatic complexity of the method is 26
Complex Method,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,GetWordsDefinitionFromText,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,Cyclomatic complexity of the method is 18
Complex Method,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,WordsPrepare,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,Cyclomatic complexity of the method is 36
Complex Method,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_OR_logic,Cyclomatic complexity of the method is 10
Complex Method,DBreeze.Transactions,RandomKeySorter,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\RandomKeySorter.cs,Flush,Cyclomatic complexity of the method is 8
Complex Method,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,GetReadTableFromBuffer,Cyclomatic complexity of the method is 13
Complex Method,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ObjectGetNewIdentity,Cyclomatic complexity of the method is 9
Complex Method,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ObjectInsert,Cyclomatic complexity of the method is 39
Complex Method,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,RegisterWriteTablesForTransaction,Cyclomatic complexity of the method is 15
Complex Method,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,AddNodes,Cyclomatic complexity of the method is 13
Complex Method,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,AddNode,Cyclomatic complexity of the method is 11
Complex Method,DBreeze.SchemeInternal,DbUserTables,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\SchemeInternal\Sheme.UserTable.cs,PatternsIntersect,Cyclomatic complexity of the method is 23
Complex Method,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,Cyclomatic complexity of the method is 19
Long Parameter List,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetCollection,The method has 6 parameters. Parameters: fk' fv' dict' lst' set' isNullChecked
Long Parameter List,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,Filter,The method has 5 parameters. Parameters: capacity' errorRate' hashFunction' m' k
Long Parameter List,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,CopyInside,The method has 5 parameters. Parameters: destArray' destOffset' srcArray' srcOffset' quantity
Long Parameter List,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,Insert,The method has 5 parameters. Parameters: key' value' refToInsertedValue' WasUpdated' dontUpdateIfExists
Long Parameter List,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,InsertPart,The method has 5 parameters. Parameters: key' value' startIndex' refToInsertedValue' WasUpdated
Long Parameter List,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardFromTo,The method has 5 parameters. Parameters: startKey' includeStartKey' stopKey' includeStopKey' AsReadVisibilityScope
Long Parameter List,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardFromTo,The method has 5 parameters. Parameters: startKey' includeStartKey' stopKey' includeStopKey' AsReadVisibilityScope
Long Parameter List,DBreeze.DataTypes,NestedTableInternal,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTableInternal.cs,NestedTableInternal,The method has 7 parameters. Parameters: tableExists' masterTrie' rootStart' shiftFromValueStart' useCache' parentTrie' key
Long Parameter List,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,IterateBackwardFromTo,The method has 5 parameters. Parameters: initKey' stopKey' inclStartKey' inclStopKey' useCache
Long Parameter List,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,IterateForwardFromTo,The method has 5 parameters. Parameters: initKey' stopKey' inclStartKey' inclStopKey' useCache
Long Parameter List,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The method has 6 parameters. Parameters: row' btKey' tableIndex' masterTrie' insertTable' useCache
Long Parameter List,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,AddPartially,The method has 5 parameters. Parameters: key' value' startIndex' valueStartPtr' WasUpdated
Long Parameter List,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,IterateForwardFromTo,The method has 6 parameters. Parameters: startKey' stopKey' includeStartKey' includeStopKey' useCache' ValuesLazyLoadingIsOn
Long Parameter List,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,IterateForwardFromTo,The method has 6 parameters. Parameters: startKey' stopKey' includeStartKey' includeStopKey' readRootNode' ValuesLazyLoadingIsOn
Long Parameter List,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,IterateBackwardFromTo,The method has 6 parameters. Parameters: startKey' stopKey' includeStartKey' includeStopKey' useCache' ValuesLazyLoadingIsOn
Long Parameter List,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,IterateBackwardFromTo,The method has 6 parameters. Parameters: startKey' stopKey' includeStartKey' includeStopKey' readRootNode' ValuesLazyLoadingIsOn
Long Parameter List,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The method has 5 parameters. Parameters: key' value' startIndex' valueStartPtr' WasUpdated
Long Parameter List,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,SetupKidWithValue,The method has 7 parameters. Parameters: kid' lastElementOfTheKey' fullKey' value' useExistingPointerToValue' WasUpdated' dontUpdateIfExists
Long Parameter List,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,SetupKidWithValuePartially,The method has 8 parameters. Parameters: kid' lastElementOfTheKey' fullKey' value' useExistingPointerToValue' startIndex' valueStartPtr' WasUpdated
Long Parameter List,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,RemoveKid,The method has 6 parameters. Parameters: kid' lastElementOfTheKey' key' WasRemoved' retrieveDeletedValue' deletedValue
Long Parameter List,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The method has 5 parameters. Parameters: ptr' value' fullKey' startIndex' valueStartPtr
Long Parameter List,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteKidValuePartially,The method has 6 parameters. Parameters: fullKey' value' tryToOverwrite' overWritePointer' startIndex' valueStartPtr
Long Parameter List,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The method has 6 parameters. Parameters: useCache' pointer' valueStartPtr' valueLength' key' val
Long Parameter List,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The method has 6 parameters. Parameters: pointer' startIndex' length' useCache' valueStartPtr' valueLength
Long Parameter List,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The method has 8 parameters. Parameters: tran' tableName' documentId' containsWords' fullMatchWords' deferredIndexing' containsMinimalLength' iMode
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,RemoveKey,The method has 5 parameters. Parameters: tableName' key' WasRemoved' retrieveDeletedValue' deletedValue
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ChangeKey,The method has 5 parameters. Parameters: tableName' oldKey' newKey' ptrToNewKey' WasChanged
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,Insert,The method has 5 parameters. Parameters: tableName' key' value' refToInsertedValue' WasUpdated
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,Insert,The method has 6 parameters. Parameters: tableName' key' value' refToInsertedValue' WasUpdated' dontUpdateIfExists
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,InsertPart,The method has 5 parameters. Parameters: tableName' key' value' startIndex' refToInsertedValue
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,InsertPart,The method has 6 parameters. Parameters: tableName' key' value' startIndex' refToInsertedValue' WasUpdated
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,InsertDictionary,The method has 5 parameters. Parameters: tableName' key' value' tableIndex' withValuesRemove
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,InsertHashSet,The method has 5 parameters. Parameters: tableName' key' value' tableIndex' withValuesRemove
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextInsert,The method has 6 parameters. Parameters: tableName' documentId' containsWords' fullMatchWords' deferredIndexing' containsMinimalLength
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextAppend,The method has 6 parameters. Parameters: tableName' documentId' containsWords' fullMatchWords' deferredIndexing' containsMinimalLength
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextRemove,The method has 5 parameters. Parameters: tableName' documentId' fullMatchWords' deferredIndexing' containsMinimalLength
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectForwardFromTo,The method has 6 parameters. Parameters: tableName' startKey' includeStartKey' stopKey' includeStopKey' AsReadVisibilityScope
Long Parameter List,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectBackwardFromTo,The method has 6 parameters. Parameters: tableName' startKey' includeStartKey' stopKey' includeStopKey' AsReadVisibilityScope
Long Parameter List,DBreeze.Utils.Async,AsyncOperations,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\AsyncOperations.cs,DoAsync,The method has 5 parameters. Parameters: f' arg' arg1' arg2' arg3
Long Identifier,DBreeze,DBreezeEngine,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\DBreezeEngine.cs,,The length of the parameter BackgroundTasksExternalNotifier is 31.
Long Identifier,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,,The length of the parameter _IncrementalBackupFileIntervalMin is 33.
Long Identifier,DBreeze.Transactions,RandomKeySorter,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\RandomKeySorter.cs,,The length of the parameter AutomaticFlushLimitQuantityPerTable is 35.
Long Identifier,DBreeze.Transactions,RandomKeySorter,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\RandomKeySorter.cs,,The length of the parameter _tablesWithOverwriteIsNotAllowed is 32.
Long Identifier,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,,The length of the parameter ReadVisibilityScopeModifier_GenerateNewTableForRead is 51.
Long Identifier,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,,The length of the parameter ReadVisibilityScopeModifier_DirtyRead is 37.
Long Identifier,DBreeze.Transactions,TransactionUnit,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionUnit.cs,,The length of the parameter _transactionWriteTablesAwaitingReservation is 42.
Long Identifier,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,RegisterWriteTablesForTransaction,The length of the parameter toWaitTillTransactionIsFinished is 31.
Long Statement,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Encode_DICT_PROTO_UINT_BYTEARRAY,The length of the statement  "                tar = el.Value == null ? new byte[] { 0 } : GetVarintBytes((uint)el.Value.Length); //Supporting 0 length' will be null then " is 123.
Long Statement,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetDigit,The length of the statement  "                    if (coldeepcnt > 0 && !coldeep[coldeepcnt - 1].collectionIsFinished && coldeep[coldeepcnt - 1].collectionShiftToPass < coldeep[coldeepcnt - 1].collectionShift) " is 159.
Long Statement,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,JSAdd,The length of the statement  "                    return JSAdd(Convert.ToInt64(value.ToUniversalTime().Subtract(new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds)); " is 138.
Long Statement,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The length of the statement  "                ms.Write(new byte[] { 0' 0 }' 0' 2); //first byte means not null' second - reservation for minimal length representation " is 120.
Long Statement,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The length of the statement  "                var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;  //4 bytes max for collections and groups " is 145.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The length of the statement  "                        //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;    " is 123.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The length of the statement  "                        //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;    " is 123.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The length of the statement  "                         * new DateTime(2018' 6' 5' 17'44'15'443' DateTimeKind.Local).ToString("o"); //Encoder ISO "2018-06-05T17:44:15.4430000Z" or "2018-06-05T17:44:15.4430000+02:00" " is 159.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetFloat,The length of the statement  "                return float.Parse(GetNumber(false)' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture); " is 127.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetFloat_NULL,The length of the statement  "                return v == null ? null : (float?)float.Parse(v' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture); " is 139.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetDouble,The length of the statement  "                return double.Parse(GetNumber(false)' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture); " is 128.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetDouble_NULL,The length of the statement  "                return v == null ? null : (double?)double.Parse(v' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture); " is 141.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetDecimal,The length of the statement  "                return decimal.Parse(GetNumber(false)' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture); " is 129.
Long Statement,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,GetDecimal_NULL,The length of the statement  "                return v == null ? null : (decimal?)decimal.Parse(v' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture); " is 143.
Long Statement,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,AppendDateTime,The length of the statement  "                        // sb.Append($"\"\\/Date({((dt.Kind == DateTimeKind.Utc) ? ((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000) : ((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000)) })\\/\""); " is 202.
Long Statement,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,AppendDateTime,The length of the statement  "                        //sb.Append($"\"{dt.Year}-{String.Format("{0:00}"' dt.Month)}-{String.Format("{0:00}"' dt.Day)}T{String.Format("{0:00}"' dt.Hour)}:{String.Format("{0:00}"' dt.Minute)}:{String.Format("{0:00}"' dt.Second)}.{dt.Millisecond}Z\""); " is 227.
Long Statement,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,Add,The length of the statement  "                //                 ic = typeof(System.Collections.IDictionary).GetTypeInfo().IsAssignableFrom(typeof(T).Ge‌​tTypeInfo()); " is 121.
Long Statement,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,bestErrorRate,The length of the statement  "                    return (float)Math.Pow(0.6185' int.MaxValue / capacity); // http://www.cs.princeton.edu/courses/archive/spring02/cs493/lec7.pdf " is 127.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The length of the statement  "            return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian())); " is 145.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The length of the statement  "            return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1); " is 175.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The length of the statement  "            return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1); " is 177.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The length of the statement  "            return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]); " is 213.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The length of the statement  "            return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]); " is 213.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The length of the statement  "            return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]); " is 213.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The length of the statement  "            return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]); " is 213.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The length of the statement  "            ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]); " is 275.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The length of the statement  "            double.TryParse(resultDouble' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out result); " is 132.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The length of the statement  "            ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]); " is 275.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The length of the statement  "            double.TryParse(resultDouble' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out result); " is 132.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The length of the statement  "            float.TryParse(resultFloat' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out result); " is 130.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The length of the statement  "            float.TryParse(resultFloat' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out result); " is 130.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToAsciiString,The length of the statement  "            return (dBytes == null) ? String.Empty : dBytes.UTF8_GetString(); // System.Text.Encoding.UTF8.GetString(dBytes'0' dBytes.Length); " is 130.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToUTF8String,The length of the statement  "            return (dBytes == null) ? String.Empty : dBytes.UTF8_GetString(); // System.Text.Encoding.UTF8.GetString(dBytes'0' dBytes.Length); " is 130.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToUnicodeString,The length of the statement  "            return (dBytes == null) ? String.Empty : dBytes.UTF8_GetString(); // System.Text.Encoding.Unicode.GetString(dBytes' 0' dBytes.Length); " is 134.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_ByteArrayEquals,The length of the statement  "            if (b1 == b2) return true;      //if both arrays are null returns true' if byte arrays have same content returns false' cause checking instances " is 144.
Long Statement,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_ByteArrayEquals_EqualityBrokenIndex,The length of the statement  "            // if (b1 == b2) return -1;      //if both arrays are null returns true' if byte arrays have same content returns false' cause checking instances " is 145.
Long Statement,DBreeze.Utils,StringProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\StringProcessing.cs,ReplaceMultiple,The length of the statement  "            var regex = new System.Text.RegularExpressions.Regex(String.Join("|"' replaceWith.Keys.Select(k => System.Text.RegularExpressions.Regex.Escape(k)))); " is 149.
Long Statement,DBreeze.Utils,XmlSerializator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\XmlSerializator.cs,SerializeXml,The length of the statement  "            System.Xml.Serialization.XmlSerializer xs = new System.Xml.Serialization.XmlSerializer(objectForSerialization.GetType()); " is 121.
Long Statement,DBreeze.Utils,XmlSerializator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\XmlSerializator.cs,SerializeXml,The length of the statement  "            //    System.Xml.Serialization.XmlSerializer xs = new System.Xml.Serialization.XmlSerializer(objectForSerialization.GetType()); " is 127.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetTable,The length of the statement  "            ///////////  FOR NOW allow insert from master is always false' later we have to change Transaction.Insert' and insertPart to return also a row??? " is 145.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetTable,The length of the statement  "                var nt = _row.Root.Tree.GetTable(_row' ref _row.Key' tableIndex' _masterTrie' nestedTable._insertAllowed' this._useCache); " is 122.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetValuePart,The length of the statement  "                //return this._root.Tree.Cache.ReadValuePartially(this._ptrToValue' startIndex' length' this._useCache' out valueStartPointer' out valueFullLength); " is 148.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetValuePart,The length of the statement  "                return this._row.Root.Tree.Cache.ReadValuePartially(this._row.LinkToValue' startIndex' length' this._useCache' out valueStartPointer' out valueFullLength); " is 155.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetValuePart,The length of the statement  "                return this._row.Root.Tree.Cache.ReadValuePartially(this._row.LinkToValue' startIndex' length' this._useCache' out valueStartPointer' out valueFullLength); " is 155.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlock,The length of the statement  "                dataBlockId = this._row.Root.Tree.Cache.ReadValuePartially(this._row.LinkToValue' startIndex' 16' this._useCache' out valueStartPointer' out valueFullLength); " is 158.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlockWithFixedAddress,The length of the statement  "                    //return DataTypesConvertor.ConvertBack<TValue>(this._row.Root.Tree.Cache.ReadDynamicDataBlock(ref dataBlockId' this._useCache)); " is 129.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlockWithFixedAddress,The length of the statement  "                dataBlockId = this._row.Root.Tree.Cache.ReadValuePartially(this._row.LinkToValue' startIndex' 16' this._useCache' out valueStartPointer' out valueFullLength); " is 158.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlockWithFixedAddress,The length of the statement  "                //return DataTypesConvertor.ConvertBack<TValue>(this._row.Root.Tree.Cache.ReadDynamicDataBlock(ref dataBlockId' this._useCache)); " is 129.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlockWithFixedAddress,The length of the statement  "            return DataTypesConvertor.ConvertBack<TVal>(this._row.Root.Tree.Cache.ReadDynamicDataBlock(ref dataBlockId' this._useCache)); " is 125.
Long Statement,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,ObjectGet,The length of the statement  "                    dataBlockId = this._row.Root.Tree.Cache.ReadValuePartially(this._row.LinkToValue' (uint)startIndex' 16' this._useCache' out valueStartPointer' out valueFullLength); " is 164.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectDataBlock,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,Select,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectDirect,The length of the statement  "                refToInsertedValue = refToInsertedValue.RemoveLeadingElement(0).EnlargeByteArray_BigEndian(_tbl._masterTrie.Storage.TrieSettings.POINTER_LENGTH); " is 145.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectDirect,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,Count,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,Max,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,Min,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForward,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackward,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardStartFrom,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardStartFrom,The length of the statement  "                foreach (var xrow in _tbl.table.IterateForwardStartFrom(btKey' includeStartFromKey' useCache' this._valuesLazyLoadingIsOn)) " is 123.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardStartFrom,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardStartFrom,The length of the statement  "                foreach (var xrow in _tbl.table.IterateBackwardStartFrom(btKey' includeStartFromKey' useCache' this._valuesLazyLoadingIsOn)) " is 124.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardFromTo,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardFromTo,The length of the statement  "                foreach (var xrow in _tbl.table.IterateForwardFromTo(btStartKey' btStopKey' includeStartKey' includeStopKey' useCache' this._valuesLazyLoadingIsOn)) " is 148.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardFromTo,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardFromTo,The length of the statement  "                foreach (var xrow in _tbl.table.IterateBackwardFromTo(btStartKey' btStopKey' includeStartKey' includeStopKey' useCache' this._valuesLazyLoadingIsOn)) " is 149.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardStartsWith,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardStartsWithClosestToPrefix,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardStartsWithClosestToPrefix,The length of the statement  "                foreach (var xrow in _tbl.table.IterateForwardStartsWithClosestToPrefix(btStartKey' useCache' this._valuesLazyLoadingIsOn)) " is 123.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardStartsWithClosestToPrefix,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardStartsWithClosestToPrefix,The length of the statement  "                foreach (var xrow in _tbl.table.IterateBackwardStartsWithClosestToPrefix(btStartKey' useCache' this._valuesLazyLoadingIsOn)) " is 124.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardStartsWith,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardSkip,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardSkip,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardSkipFrom,The length of the statement  "            //    bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 143.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectForwardSkipFrom,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardSkipFrom,The length of the statement  "            //    bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 143.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardSkipFrom,The length of the statement  "                bool useCache = (_tbl._masterTrie.NestedTablesCoordinator.ModificationThreadId != System.Threading.Thread.CurrentThread.ManagedThreadId); " is 137.
Long Statement,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,SelectBackwardSkipFrom,The length of the statement  "                foreach (var xrow in _tbl.table.IterateBackwardSkipFrom(btKey' skippingQuantity' useCache' this._valuesLazyLoadingIsOn)) " is 120.
Long Statement,DBreeze,DBreezeResources,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Engine\DBreezeResources.cs,SelectStartsWith,The length of the statement  "                    yield return new KeyValuePair<string' TValue>(rn.Substring(1)' val == null ? default(TValue) : DataTypesConvertor.ConvertBack<TValue>(val)); " is 140.
Long Statement,DBreeze,DBreezeEngine,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\DBreezeEngine.cs,ConstructFromConfiguration,The length of the statement  "                throw new Exception("DBreeze.DBreezeEngine.DBreezeEngine: remote instance must be initiated via new DBreezeRemoteEngine"); " is 122.
Long Statement,DBreeze,DBreezeEngine,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\DBreezeEngine.cs,ConstructFromConfiguration,The length of the statement  "            //Console.WriteLine("DBreeze notification: Don't forget in the dispose function of your DLL or main application thread"); " is 121.
Long Statement,DBreeze,DBreezeEngine,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\DBreezeEngine.cs,GetTransaction,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.DB_IS_NOT_OPERABLE'DBisOperableReason'new Exception());               " is 120.
Long Statement,DBreeze,DBreezeEngine,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\DBreezeEngine.cs,GetTransaction,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.DB_IS_NOT_OPERABLE' DBisOperableReason' new Exception()); " is 122.
Long Statement,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetPhysicalPathToTheUserTable,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.GENERAL_EXCEPTION_DB_NOT_OPERABLE' this.Engine.DBisOperableReason' ex); " is 136.
Long Statement,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,The length of the statement  "            //TODO pattern based mapping If table doesn't exist we create it with properties which could be supplied after db init as regex theme. " is 134.
Long Statement,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,The length of the statement  "            //For protocol 1: first 8 bytes will be TheFileName' starting from db10000-dbN (0-N ulong). up to 10000 are reserved for dbreeze. " is 129.
Long Statement,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,The length of the statement  "                            storage = new StorageLayer(Path.Combine(ts.AlternativeTableStorageFolder' fileName.ToString())' ts' Engine.Configuration); " is 122.
Long Statement,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,IfUserTableExists,The length of the statement  "            ////First trying to acquire memory storage' without lock but inside of "ignoring" try-catch' if answer is failed refer to the disk " is 130.
Long Statement,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetUserTableNamesStartingWith,The length of the statement  "            //No lock here' while IterateForwardStartsWith of the LTrie is safe (new root is created)' and we don't acquire value from the key (which could be delete). " is 155.
Long Statement,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetUserTableNamesStartingWith,The length of the statement  "                //try       //try-catch could be necessary in case if we acquire value' which was deleted by other thread. Here we don't acquire value. " is 135.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Database is not operable' please find out the problem and restart the engine! {0}"'message)' innerException); " is 152.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Database is not operable' please find out the problem and restart the engine! {0}"' message)' innerException); " is 153.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                // return new DBreezeException(String.Format("{0}creation of the database folder failed: {1}"' ExceptionHeader' originalException.ToString())); " is 143.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Table name can not contain reserved symbols like * # @ \\ ^ $ ~ ´")' innerException); " is 128.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Table \"{0}\" commit failed!"' message)' innerException);     //ADD TABLE NAME!!! " is 124.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    //return new DBreezeException(String.Format("{0}rollback of the file \"{1}\" is not operatable: {2}"' ExceptionHeader' description' originalException.ToString())); " is 163.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Transaction rollback failed on the table \"{0}\"!"' message)' innerException); " is 121.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Key is too long' maximal key size is: {0}!"' UInt16.MaxValue.ToString())' innerException); " is 133.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                        return new DBreezeException(String.Format("Table was changed (Table Recrete' Table RestoreTableFromTheOtherTable)' links are not actual' repeat reading operation!")' innerException); " is 182.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Transaction journal couldn't clean rollback files of the finished transactions!")' innerException); " is 142.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Transaction is in a deadlock state and will be terminated. To avoid such case use Transaction.SynchronizeTables!")' innerException); " is 175.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Reservation tables for modification or synchronized read failed! Use SynchronizeTables before any modification!")' innerException); " is 174.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Reservation tables for modification or synchronized read failed! Only one synchronization call permitted per transaction!")' innerException); " is 184.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Reservation tables for modification or synchronized read failed! Synchronization list must be filled!")' innerException); " is 164.
Long Statement,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The length of the statement  "                    return new DBreezeException(String.Format("Changing data after SelectTable is not permitted' use InsertTable instead!")' innerException); " is 137.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                    val = row.GetPartialValue(tableIndex * this.Storage.TrieSettings.ROOT_SIZE' this.Storage.TrieSettings.ROOT_SIZE' useCache); " is 123.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                        fullValuePointer = this.AddPartially(ref btKey' ref btValue' tableIndex * this.Storage.TrieSettings.ROOT_SIZE' out valueStartPointer); " is 134.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                            dit = new DataTypes.NestedTableInternal(true' masterTrie' Id_RootStart' (tableIndex * this.Storage.TrieSettings.ROOT_SIZE)' false'this'ref btKey); " is 146.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                            this.NestedTablesCoordinator.AddNestedTable(ref btKey' fullValuePointer.DynamicLength_To_UInt64_BigEndian()' Id_RootStart' dit); " is 128.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                                dit = new DataTypes.NestedTableInternal(true' masterTrie' Id_RootStart' (tableIndex * this.Storage.TrieSettings.ROOT_SIZE)' useCache' this' ref btKey); " is 151.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                                this.NestedTablesCoordinator.AddNestedTable(ref btKey' fullValuePointer.DynamicLength_To_UInt64_BigEndian()' Id_RootStart' dit); " is 128.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                    fullValuePointer = this.AddPartially(ref btKey' ref btValue' tableIndex * this.Storage.TrieSettings.ROOT_SIZE' out valueStartPointer); " is 134.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                        dit = new DataTypes.NestedTableInternal(true' masterTrie' Id_RootStart' (tableIndex * this.Storage.TrieSettings.ROOT_SIZE)' false' this' ref btKey); " is 148.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                        this.NestedTablesCoordinator.AddNestedTable(ref btKey' fullValuePointer.DynamicLength_To_UInt64_BigEndian()' Id_RootStart' dit); " is 128.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,GetTable,The length of the statement  "                //this.NestedTablesCoordinator.AddNestedTable(ref btKey' fullValuePointer.DynamicLength_To_UInt64_BigEndian()' Id_RootStart' dit); " is 130.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,AddPartially,The length of the statement  "            //    this.NestedTablesCoordinator.MoveNestedTablesRootStart(ref key' linkToVal.DynamicLength_To_UInt64_BigEndian()' valueStartPtr); " is 132.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,AddPartially,The length of the statement  "                this.NestedTablesCoordinator.MoveNestedTablesRootStart(ref key' linkToVal.DynamicLength_To_UInt64_BigEndian()' valueStartPtr); " is 126.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,ChangeKey,The length of the statement  "                        this.NestedTablesCoordinator.ChangeKeyAndMoveNestedTablesRootStart(ref oldKey' ref newKey' row.LinkToValue.DynamicLength_To_UInt64_BigEndian()' row.ValueStartPointer); " is 167.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,ChangeKey,The length of the statement  "                        this.NestedTablesCoordinator.ChangeKeyAndMoveNestedTablesRootStart(ref oldKey' ref newKey' row.LinkToValue.DynamicLength_To_UInt64_BigEndian()' row.ValueStartPointer); " is 167.
Long Statement,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,ITRRollBack,The length of the statement  "            //This rollback differs from the SingleRollBack' by cleaning in memorey _rootOldCopy' in case if table was already Committed inside of cascade(Transactional) commit " is 164.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,ReadRootNode,The length of the statement  "            //if (me.Length == 0 || me[0] == 0)   //Support of the memory where field is reserved or DbInTable where initial bytes are filled with 0 " is 136.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,DeserializeRootNode,The length of the statement  "            //First byte is identifier: 1 if from memory' if 0 from File - under discussion' probably we don't need this logical element. " is 125.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,SerializeRootNode,The length of the statement  "            byte[] dbreeze = new byte[] { 0x64' 0x62' 0x72' 0x65' 0x65' 0x7A' 0x65' 0x2E' 0x74' 0x69' 0x65' 0x73' 0x6B' 0x79' 0x2E' 0x63' 0x6F' 0x6D }; " is 139.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,TransactionalRollBack,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TRANSACTIONAL_ROLLBACK_FAILED' this.Tree.TableName' ex); " is 121.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,Save_GM_nodes_Starting_From,The length of the statement  "                //and record them as Key into memory dictionary with value byte[] oldKids' later reader will be able on every iteration point to request these kids from memory " is 159.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,Save_GM_nodes_Starting_From,The length of the statement  "                    //this.Tree.Cache.AddMapKids(_generationMap.GenerateMapNodesValuesUpToIndex(gmMaxIndex--)' gn.Value.KidsBeforeModification);                  " is 124.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The length of the statement  "                res = _generationMap[0].SetupKidWithValue((byte)0' true' ref key' ref value' false' out WasUpdated' dontUpdateIfExists); " is 120.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The length of the statement  "                    //In case if i>0' it's not the first element and we have to compare if there are generation mapsstarting from this point. " is 121.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The length of the statement  "                        gn.Pointer = new byte[DefaultPointerLen];       //!!!!!!!!!!!!! Check if it'S really necessary or we can leave it as null " is 121.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The length of the statement  "                //If Kids==0 && Value Link is not Default Empty Pointer' then this value-link refers to the sentence which can go after this last character' so also to the value. " is 162.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The length of the statement  "                        _generationMap[i].SetupKidWithValue(res.KeyOldKid[i]' false' ref key1' ref val1' true' out WasUpdated' dontUpdateIfExists); " is 123.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The length of the statement  "                res = _generationMap[i].SetupKidWithValue(((i == key.Length) ? (byte)0 : key[i])' (i == key.Length)' ref key' ref value' false' out WasUpdated' dontUpdateIfExists); " is 164.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The length of the statement  "                res = _generationMap[0].SetupKidWithValuePartially((byte)0' true' ref key' ref value' false' startIndex' out valueStartPtr' out WasUpdated); " is 140.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The length of the statement  "                    //In case if i>0' it's not the first element and we have to compare if there are generation mapsstarting from this point. " is 121.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The length of the statement  "                        gn.Pointer = new byte[DefaultPointerLen];       //!!!!!!!!!!!!! Check if it'S really necessary or we can leave it as null " is 121.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The length of the statement  "                //If Kids==0 && Value Link is not Default Empty Pointer' then this value-link refers to the sentence which can go after this last character' so also to the value. " is 162.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The length of the statement  "                        _generationMap[i].SetupKidWithValuePartially((byte)0' true' ref key1' ref val1' true' startIndex' out valueStartPtr' out WasUpdated); " is 133.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The length of the statement  "                        _generationMap[i].SetupKidWithValuePartially(res.KeyOldKid[i]' false' ref key1' ref val1' true' startIndex' out valueStartPtr' out WasUpdated); " is 143.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The length of the statement  "                res = _generationMap[i].SetupKidWithValuePartially(((i == key.Length) ? (byte)0 : key[i])' (i == key.Length)' ref key' ref value' false' startIndex' out valueStartPtr' out WasUpdated); " is 184.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,ChangeKey,The length of the statement  "            //just changing pointers to the value will give nothing' because in the value also the full key is written' so we will need  " is 123.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,RemoveKey,The length of the statement  "                    //In case if i>0' it's not the first element and we have to compare if there are generation mapsstarting from this point. " is 121.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,RemoveKey,The length of the statement  "                        gn.Pointer = new byte[DefaultPointerLen];       //!!!!!!!!!!!!! Check if it'S really necessary or we can leave it as null " is 121.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,RemoveKey,The length of the statement  "                iterateFurther = _generationMap[i].RemoveKid((i == key.Length) ? (byte)0 : key[i]' (i == key.Length)' ref key' out WasRemoved' retrieveDeletedValue' out deletedValue); " is 167.
Long Statement,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,GetKey,The length of the statement  "                //If kid is a link to next node we iterate further' if link on the value' we retrieve full key and value as link for TreeKVP stoping iteration " is 142.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,RemoveKid,The length of the statement  "                //Trying to delete value' as result we must receive bool true' if value existed (and we can change here also count and setup ToWrite = true) " is 140.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,RemoveKid,The length of the statement  "                        deletedValue = this._root.Tree.Cache.ReadValue(KidsInNode.GetKidValue().Ptr' false' out valueStartPtr' out valueLength);                         " is 120.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The length of the statement  "            //1 byte - ValueWriteProtocol identification (0 - without FULL reserved size[used after first insert]' 1 - with extra reservation space)'  " is 137.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The length of the statement  "            int initRead = 111; //Where 100 is standard max size of the key in case of words (even 50 must be enough)' in case of sentences can be much longer' probably we can setup it later " is 178.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteKidValuePartially,The length of the statement  "            //1 byte protocol'FullKeyLen (2 bytes)' FullValueLen (4 bytes)'[4 bytes reeserved space if protocol 1' if 0 nothing]'FullKey'FullValue " is 134.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The length of the statement  "            //1 byte - ValueWriteProtocol identification (0 - without FULL reserved size[used after first insert]' 1 - with extra reservation space)'  " is 137.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The length of the statement  "            int initRead = 111; //Where 100 is standard max size of the key in case of words (even 50 must be enough)' in case of sentences can be much longer' probably we can setup it later " is 178.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteKidValue,The length of the statement  "            //1 byte protocol'FullKeyLen (2 bytes)' FullValueLen (4 bytes)'[4 bytes reeserved space if protocol 1' if 0 nothing]'FullKey'FullValue " is 134.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteSelf,The length of the statement  "            // * Problem can appear after remove' previous node still has link to the empty line and it influences backward and forward work' inside of for(;;) going only down            " is 163.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteSelf,The length of the statement  "            //We need correction for the case when we use one cursor for Select (with standard "write" visibility scope) and Insert statement in one transaction             " is 148.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteSelf,The length of the statement  "                //byte[] rollBackData = ((short)KidsBeforeModification.Length).To_2_bytes_array_BigEndian().Concat(KidsBeforeModification); " is 123.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteSelf,The length of the statement  "                //    throw new Exception(String.Format("!!!DBreeze debug exception' LTrieGenNode KBM null' Reservation: {0}; QRS: {1};"'reservation'this.QuantityReservationSlots)); " is 165.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteSelf,The length of the statement  "            //2. Generation.WriteSelf works in 2 cases' when we need to load other generation node (then it's safe) and after Commit " is 120.
Long Statement,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteSelf,The length of the statement  "            //   in this case generation node stays' but we change KidsBeforeModification in commit in case of mistake we clean generation map " is 130.
Long Statement,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,AddKid,The length of the statement  "                //It's balanced on upper level' but here we save only pointer to the value' and this kid will definetely has not busy place' " is 124.
Long Statement,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ReplaceValueLinkOnKidLink,The length of the statement  "            //Here we appear only in case if we want to setup kid on the busy place. This busy place can be resided by link to the other kid or link to the value. " is 150.
Long Statement,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ReplaceValueLinkOnKidLink,The length of the statement  "            //If it's busy by link to the kid we return null' if by link to the value then we clean flag "Link to the value" an return back this pointer. " is 141.
Long Statement,DBreeze.LianaTrie,LTrieRow,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieRow.cs,GetPartialValue,The length of the statement  "                return this._root.Tree.Cache.ReadValuePartially(this.LinkToValue' startIndex' length' useCache' out ValueStartPointer' out ValueFullLength); " is 140.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,GenerationNodeRead,The length of the statement  "                    //Here node can be also of empty length [0] - it means that cachedGenerationMapLine exists but old kids were empty' it will be checked on upper levels " is 150.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadDynamicDataBlock,The length of the statement  "            //Link to the block (initPtr) is represented by 8+4+4=16 bytes: 8 pointer (ulong)' 4 bytes Block Length(ulong)' 4 bytes data length (uint) " is 138.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,WriteDynamicDataBlock,The length of the statement  "            //Link to the block (initPtr) is represented by 8+4+4=16 bytes: 8 pointer (ulong)' 4 bytes Block Length(ulong)' 4 bytes data length (uint) " is 138.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ValueWritingEnd,The length of the statement  "            //    //READ threads will try to get this value by newly received pointer. we have to bind it to the old value which resides in the StorageFile (not in Rollback) " is 161.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ValueWritingEnd,The length of the statement  "            //                //creating new hash from the newly written pointer and explaining that it must be taken from real DbStorage' so it was completely moved to the new place " is 170.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ValueWritingEnd,The length of the statement  "            //                    ResidesInRollbackFile = diOld.ResidesInRollbackFile       //Pointer to the old value resides in the storage file " is 134.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ValueWritingOver,The length of the statement  "            ////OverWriting of a value [used by WRITE FUNC] and Reading Key or Value [used by READ FUNC] must come via one Synchro lock _sync_data " is 134.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The length of the statement  "            //int initRead = 111; //Where 100 is standard max size of the key in case of words (even 50 must be enough)' in case of sentences can be much longer' probably we can setup it later " is 180.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The length of the statement  "            int initRead = 111; //Where 100 is standard max size of the key in case of words (even 50 must be enough)' in case of sentences can be much longer' probably we can setup it later " is 178.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The length of the statement  "            //int initRead = 111; //Where 100 is standard max size of the key in case of words (even 50 must be enough)' in case of sentences can be much longer' probably we can setup it later " is 180.
Long Statement,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The length of the statement  "            int initRead = 111; //Where 100 is standard max size of the key in case of words (even 50 must be enough)' in case of sentences can be much longer' probably we can setup it later " is 178.
Long Statement,DBreeze.LianaTrie,NestedTablesCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\NestedTables\NestedTablesCoordinator.cs,CloseTable,The length of the statement  "            //Must close refered nested table and in cascade include tables' for memory efficiency while reading master table with nested tables " is 132.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.DB_IS_NOT_OPERABLE' "MSR INIT FAILED: " + this._fileName' ex); " is 127.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_WriteByOffset,The length of the statement  "            //!! This is a cutted implementation for DBreeze we dont take care buffer elements overlapping (start+len U some elements -> should be not possible) " is 148.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_WriteByOffset,The length of the statement  "                    //We put data to the buffer first and flush it if buffer > allowed space. We dont take care if data is bigger then buffer. " is 122.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,FlushRandomBuffer,The length of the statement  "                _rollbackCache.Add(de.Key' new r { o = eofRollback + 1 + offset.Length + 4' l = de.Value.Length });  //10 is size of protocol data " is 130.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,The length of the statement  "                        var qkvp = _randBuf.OrderByDescending(r => r.Key).Where(r => r.Key < offset).Take(1).Where(r => (r.Key + r.Value.Length - 1) >= offset); " is 136.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,The length of the statement  "                        var qkvp = _rollbackCache.OrderByDescending(r => r.Key).Where(r => r.Key < offset).Take(1).Where(r => (r.Key + r.Value.l - 1) >= offset); " is 137.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,The length of the statement  "                         * Transaction with minimum 2 tables. T2 is inserted' reference to T2 KVP is taken' then this reference is saved into T1. " is 120.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,The length of the statement  "                         * then Commit procedure for each table calls TransactionalCommitIsFinished (this proc will clear rollback refs and moves eofData for every table). " is 146.
Long Statement,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,The length of the statement  "                         * To avoid such specific case we use for calculation this._fsData.Length instead of eofData in case if (eofData < offset && TransactionalCommitIsStarted)             " is 153.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitFiles,The length of the statement  "                //this._fsData = new FileStream(this._fileName' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 158.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitFiles,The length of the statement  "                //this._fsRollback = new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 171.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitFiles,The length of the statement  "                //this._fsRollbackHelper = new FileStream(this._fileName + ".rhp"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 177.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitFiles,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.DB_IS_NOT_OPERABLE' "RISR INIT FAILED: " + this._fileName' ex); " is 128.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitRollback,The length of the statement  "                    //this._fsRollback = new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 171.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitRollback,The length of the statement  "                //this._fsRollback = new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 171.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The length of the statement  "            //Protocol: type of Rollback record - 1 byte; Offset - size is trie.Storage.TreeSettings.POINTER_LENGTH (Default pointer length); data length - 4 bytes; data " is 157.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The length of the statement  "            //If full value cant be read we can think that this part of protocol is corrupted and definitely not written to the original file' " is 130.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The length of the statement  "                //Console.WriteLine("Of: {0}; DL: {1}"' offset.ToBytesString("")' data.Length.To_4_bytes_array_BigEndian().ToBytesString("")); " is 126.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_WriteByOffset,The length of the statement  "            //!! This is a cutted implementation for DBreeze we dont take care buffer elements overlapping (start+len U some elements -> should be not possible) " is 148.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_WriteByOffset,The length of the statement  "                    //We put data to the buffer first and flush it if buffer > allowed space. We dont take care if data is bigger then buffer. " is 122.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,The length of the statement  "                        var qkvp = _randBuf.OrderByDescending(r => r.Key).Where(r => r.Key < offset).Take(1).Where(r => (r.Key + r.Value.Length - 1) >= offset); " is 136.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,The length of the statement  "                        var qkvp = _rollbackCache.OrderByDescending(r => r.Key).Where(r => r.Key < offset).Take(1).Where(r => (r.Key + r.Value.l - 1) >= offset); " is 137.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,The length of the statement  "                         * Transaction with minimum 2 tables. T2 is inserted' reference to T2 KVP is taken' then this reference is saved into T1. " is 120.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,The length of the statement  "                         * then Commit procedure for each table calls TransactionalCommitIsFinished (this proc will clear rollback refs and moves eofData for every table). " is 146.
Long Statement,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,The length of the statement  "                         * To avoid such specific case we use for calculation this._fsData.Length instead of eofData in case if (eofData < offset && TransactionalCommitIsStarted)             " is 153.
Long Statement,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,InitBackupFolder,The length of the statement  "                //bmFs = new FileStream(Path.Combine(this._backupFolderName' "DBreezeBM.mg1")' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _bufferSize); " is 153.
Long Statement,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The length of the statement  "            //Console.WriteLine(String.Format("{0}> FN: {1} - {2}; at {3} q {4}"' writeTime.ToString("dd.MM.yyyy HH:mm:ss")' fileNumber' type.ToString()' pos.ToString()'  " is 157.
Long Statement,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,GetFileStream,The length of the statement  "                //fs = new FileStream(fullBackupFileName' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None'_bufferSize'FileOptions.WriteThrough); " is 140.
Long Statement,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,GetFileStream,The length of the statement  "                //fs = new FileStream(fullBackupFileName' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _bufferSize'FileOptions.WriteThrough); " is 141.
Long Statement,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,GetFileStream,The length of the statement  "                    //fs = new FileStream(fullBackupFileName' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _bufferSize' FileOptions.WriteThrough); " is 142.
Long Statement,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The length of the statement  "                    using (var bfs = configuration.FSFactory.CreateType3(file.FullName))// new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.None)) " is 149.
Long Statement,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,GetFileStream,The length of the statement  "                fsret = this.configuration.FSFactory.CreateType2(tfn + ".rhp");// new FileStream(tfn + ".rhp"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None); " is 156.
Long Statement,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,GetFileStream,The length of the statement  "                fsret = this.configuration.FSFactory.CreateType2(tfn + ".rol");//new FileStream(tfn + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None); " is 155.
Long Statement,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,GetFileStream,The length of the statement  "                fsret = this.configuration.FSFactory.CreateType2(tfn); //new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None); " is 138.
Long Statement,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The length of the statement  "            // 0 - table file' 1 - rollback file' 2 - rollbackhelper' 3 - recreate table file (only table file)' 4 - recreate rollback file (only rollback file)' 5 - removing complete table " is 177.
Long Statement,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The length of the statement  "                    ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None); " is 145.
Long Statement,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The length of the statement  "                    ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None); " is 153.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitFiles,The length of the statement  "                //this._fsData = new FileStream(this._fileName' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 158.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitFiles,The length of the statement  "                //this._fsRollback = new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 171.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitFiles,The length of the statement  "                //this._fsRollbackHelper = new FileStream(this._fileName + ".rhp"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 177.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitFiles,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.DB_IS_NOT_OPERABLE' "FSR INIT FAILED: " + this._fileName' ex); " is 127.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitRollback,The length of the statement  "                    //this._fsRollback = new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 171.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitRollback,The length of the statement  "                //this._fsRollback = new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 171.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitRollback,The length of the statement  "            //    throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.RESTORE_ROLLBACK_DATA_FAILED' this._fileName' ex); " is 121.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The length of the statement  "            //Protocol: type of Rollback record - 1 byte; Offset - size is trie.Storage.TreeSettings.POINTER_LENGTH (Default pointer length); data length - 4 bytes; data " is 157.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The length of the statement  "            //If full value cant be read we can think that this part of protocol is corrupted and definitely not written to the original file' " is 130.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The length of the statement  "                //Console.WriteLine("Of: {0}; DL: {1}"' offset.ToBytesString("")' data.Length.To_4_bytes_array_BigEndian().ToBytesString("")); " is 126.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_WriteByOffset,The length of the statement  "            //!! This is a cutted implementation for DBreeze we dont take care buffer elements overlapping (start+len U some elements -> should be not possible) " is 148.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_WriteByOffset,The length of the statement  "                    //We put data to the buffer first and flush it if buffer > allowed space. We dont take care if data is bigger then buffer. " is 122.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,The length of the statement  "                        var qkvp = _randBuf.OrderByDescending(r => r.Key).Where(r => r.Key < offset).Take(1).Where(r => (r.Key + r.Value.Length - 1) >= offset); " is 136.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,The length of the statement  "                        var qkvp = _rollbackCache.OrderByDescending(r => r.Key).Where(r => r.Key < offset).Take(1).Where(r => (r.Key + r.Value.l - 1) >= offset); " is 137.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,The length of the statement  "                         * Transaction with minimum 2 tables. T2 is inserted' reference to T2 KVP is taken' then this reference is saved into T1. " is 120.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,The length of the statement  "                         * then Commit procedure for each table calls TransactionalCommitIsFinished (this proc will clear rollback refs and moves eofData for every table). " is 146.
Long Statement,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,The length of the statement  "                         * To avoid such specific case we use for calculation this._fsData.Length instead of eofData in case if (eofData < offset && TransactionalCommitIsStarted)             " is 153.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,CreateBlock,The length of the statement  "            if (ignoreOnEmptyParameters && String.IsNullOrEmpty(block._fullMatchWords) && String.IsNullOrEmpty(block._containsWords)) " is 121.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,CreateBlock,The length of the statement  "                this._tsm.WordsPrepare(block._fullMatchWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' true' ref block.ParsedWords); " is 165.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,CreateBlock,The length of the statement  "                this._tsm.WordsPrepare(block._containsWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' false' ref block.ParsedWords); " is 165.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,And,The length of the statement  "                return this.CreateBlock(blockAnd ? (SBlock)(new BlockAnd(containsWords' fullMatchWords)) : (new BlockOr(containsWords' fullMatchWords))'  " is 136.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,And,The length of the statement  "            return this.CreateBlock(blockAnd ? (SBlock)(new BlockAnd(containsWords' fullMatchWords)) : (new BlockOr(containsWords' fullMatchWords))'  " is 136.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,Or,The length of the statement  "            return this.CreateBlock(blockAnd ? (SBlock)(new BlockAnd(containsWords' fullMatchWords)) : (new BlockOr(containsWords' fullMatchWords))'  " is 136.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,Xor,The length of the statement  "                return this.CreateBlock(blockAnd ? (SBlock)(new BlockAnd(containsWords' fullMatchWords)) : (new BlockOr(containsWords' fullMatchWords))' " is 136.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,Xor,The length of the statement  "            return this.CreateBlock(blockAnd ? (SBlock)(new BlockAnd(containsWords' fullMatchWords)) : (new BlockOr(containsWords' fullMatchWords))'  " is 136.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,Exclude,The length of the statement  "                return this.CreateBlock(blockAnd ? (SBlock)(new BlockAnd(containsWords' fullMatchWords)) : (new BlockOr(containsWords' fullMatchWords))' " is 136.
Long Statement,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,Exclude,The length of the statement  "            return this.CreateBlock(blockAnd ? (SBlock)(new BlockAnd(containsWords' fullMatchWords)) : (new BlockOr(containsWords' fullMatchWords))'  " is 136.
Long Statement,DBreeze.TextSearch,TextDeferredIndexer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextDeferredIndexer.cs,Add,The length of the statement  "                var bt = DBreeze.Utils.Biser.Encode_DICT_PROTO_STRING_UINTHASHSET(defferedDocIds' Compression.eCompressionMethod.NoCompression);                 " is 128.
Long Statement,DBreeze.TextSearch,TextDeferredIndexer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextDeferredIndexer.cs,Indexer,The length of the statement  "            Dictionary<byte[]' Dictionary<string' HashSet<uint>>> defTasks = new Dictionary<byte[]' Dictionary<string' HashSet<uint>>>(); " is 125.
Long Statement,DBreeze.TextSearch,TextDeferredIndexer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextDeferredIndexer.cs,Indexer,The length of the statement  "                        DBreeze.Utils.Biser.Decode_DICT_PROTO_STRING_UINTHASHSET(row.GetFullValue(true)' defTask' Compression.eCompressionMethod.NoCompression);                         " is 136.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,GetDocumentsSearchables,The length of the statement  "                    byte[] oldSrch = its.srch.Select<byte[]' byte[]>(r1.Value.To_4_bytes_array_BigEndian().Concat(new byte[] { 0 })' true).Value; " is 125.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The length of the statement  "            if ((iMode == eInsertMode.Append || iMode == eInsertMode.Remove) && (String.IsNullOrEmpty(containsWords) && String.IsNullOrEmpty(fullMatchWords))) " is 146.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The length of the statement  "            SortedDictionary<string' WordDefinition> pST = this.GetWordsDefinitionFromText(containsWords' fullMatchWords' containsMinimalLength' " is 132.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The length of the statement  "                tran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.MaximalWordSize); //flattend searchables " is 125.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The length of the statement  "                byte[] oldSrch = its.srch.Select<byte[]' byte[]>(iId.To_4_bytes_array_BigEndian().Concat(new byte[] { 0 })' true).Value; " is 120.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The length of the statement  "            its.srch.Insert<byte[]' byte[]>(iId.To_4_bytes_array_BigEndian().Concat(new byte[] { 1 })' GetByteArrayFromSearchbles(sbPs.ToString())); " is 136.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                //Key is word' Value.Item1 is documents list from which this word must be removed' Value.Item2 is documents List where word must be added " is 137.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                Dictionary<string' Tuple<HashSet<int>' HashSet<int>' WordInDocs>> ds = new Dictionary<string' Tuple<HashSet<int>' HashSet<int>' WordInDocs>>(); " is 143.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                            if (its.numberInBlock > itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.QuantityOfWordsInBlock)  //Quantity of words (WAHs) in block " is 170.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                            // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian())); " is 137.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                                // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian())); " is 137.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                    //            its.srch.Select<byte[]' byte[]>(docId.To_4_bytes_array_BigEndian().Concat(new byte[] { 0 })' true).Value' //Current searchables  " is 141.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                    //its.srch.ChangeKey<byte[]>(docId.To_4_bytes_array_BigEndian().Concat(new byte[] { 1 })' docId.To_4_bytes_array_BigEndian().Concat(new byte[] { 0 })); " is 151.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                                if ((btBlock.Length + 4) < itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.MinimalBlockReservInBytes)    //Minimal reserv " is 159.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                                    tmp = new byte[itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.MinimalBlockReservInBytes]; " is 128.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                    if ((btBlock.Length + 4) < itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.MinimalBlockReservInBytes)    //Minimal reserve " is 160.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The length of the statement  "                        tmp = new byte[itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.MinimalBlockReservInBytes]; " is 128.
Long Statement,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,GetWordsDefinitionFromText,The length of the statement  "                foreach (var nswrd in fullMatchWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length >= containsMinimalLength)) " is 148.
Long Statement,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,Block,The length of the statement  "            return blockAnd ? BlockAnd(containsWords' fullMatchWords' ignoreOnEmptyParameters) : BlockOr(containsWords' fullMatchWords' ignoreOnEmptyParameters); " is 149.
Long Statement,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockAnd,The length of the statement  "            this.WordsPrepare(fullMatchWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' true' ref sb.ParsedWords); " is 150.
Long Statement,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockAnd,The length of the statement  "            this.WordsPrepare(containsWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' false' ref sb.ParsedWords); " is 150.
Long Statement,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockOr,The length of the statement  "            this.WordsPrepare(fullMatchWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' true' ref sb.ParsedWords); " is 150.
Long Statement,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockOr,The length of the statement  "            this.WordsPrepare(containsWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' false' ref sb.ParsedWords); " is 150.
Long Statement,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,GetCompressedByteArray,The length of the statement  "            //Compression is currently off' cause the whole dataBlock will be compressed and while searching we don't need to decompress every found word's WAH again " is 153.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SynchronizeTables,The length of the statement  "            this._transactionUnit.TransactionsCoordinator.RegisterWriteTablesForTransaction(this.ManagedThreadId' correctedPatterns'true); " is 126.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,CheckIfTransactionHasTablesRegisteredForWrite,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TRANSACTION_TABLES_RESERVATION_CANBEDONE_ONCE' new Exception()); " is 129.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,CheckIfTransactionHasTablesRegisteredForWrite,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TRANSACTION_TABLES_RESERVATION_LIST_MUSTBEFILLED' new Exception()); " is 132.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,CheckIfTransactionHasTablesRegisteredForWrite,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TRANSACTION_TABLES_RESERVATION_FAILED' new Exception()); " is 121.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,GetWriteTableFromBuffer,The length of the statement  "                    throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.DB_IS_NOT_OPERABLE' this._transactionUnit.TransactionsCoordinator.GetSchema.Engine.DBisOperableReason'new Exception()); " is 184.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,GetReadTableFromBuffer,The length of the statement  "            ////In discussion' if we need to compare threadsIds' normally transaction can be used only from one thread' but it will be checked " is 130.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,GetReadTableFromBuffer,The length of the statement  "            //In discussion' if we need to compare threadsIds' normally transaction can be used only from one thread' but it will be checked " is 128.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,GetReadTableFromBuffer,The length of the statement  "            //Parallel read queries inside of one transaction' to use in TPL in manner Task.WaitAll(Task.Run(() => tran.Select...'Task.Run(() => tran.Select...'...); " is 153.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,GetReadTableFromBuffer,The length of the statement  "                table = this._transactionUnit.TransactionsCoordinator.GetTable_READ(tableName' this.ManagedThreadId' ignoreThreadIdCheck: ignoreThreadIdCheck); " is 143.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ObjectGetNewIdentity,The length of the statement  "                throw new Exception("DBreeze.Transaction.ObjectGetNewIdentity: not acceptable identity type. (Only (long'ulong'int'uint'short'ushort))"); " is 137.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,InsertTable,The length of the statement  "            var nt = table.GetTable(row'ref btKey' tableIndex' null' true' false); //<-masterTrie argument equals to null in case if it is a first level of nested tables " is 157.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,InsertTable,The length of the statement  "            //return table.InsertTable(btKey' tableIndex'null); //<-masterTrie argument equals to null in case if it is a first level of nested tables " is 138.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectTable,The length of the statement  "                 * (readRoot == null) ? WRITING TABLE TRANSACTION' doesn't use cache for getting value : READING TABLE TRANSACTION' always uses value via cache " is 142.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectDictionary,The length of the statement  "            foreach (var row in this.SelectTable<TTableKey>(tableName' key' tableIndex).SelectForward<TDictionaryKey' TDictionaryValue>()) " is 126.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,Max,The length of the statement  "                 * (readRoot == null) ? WRITING TABLE TRANSACTION' doesn't use cache for getting value : READING TABLE TRANSACTION' always uses value via cache " is 142.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,Min,The length of the statement  "                 * (readRoot == null) ? WRITING TABLE TRANSACTION' doesn't use cache for getting value : READING TABLE TRANSACTION' always uses value via cache " is 142.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextInsert,The length of the statement  "            tsh.InsertDocumentText(this' tableName' documentId' containsWords' fullMatchWords' deferredIndexing' containsMinimalLength' TextSearchHandler.eInsertMode.Insert); " is 162.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextAppend,The length of the statement  "            tsh.InsertDocumentText(this' tableName' documentId' containsWords' fullMatchWords' deferredIndexing' containsMinimalLength' TextSearchHandler.eInsertMode.Append); " is 162.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextRemove,The length of the statement  "            tsh.InsertDocumentText(this' tableName' documentId' ""' fullMatchWords' deferredIndexing' containsMinimalLength' TextSearchHandler.eInsertMode.Remove); " is 151.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextRemoveAll,The length of the statement  "            tsh.InsertDocumentText(this' tableName' documentId' String.Empty'String.Empty' deferredIndexing'3' TextSearchHandler.eInsertMode.Insert); " is 137.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,Select,The length of the statement  "                 * (readRoot == null) ? WRITING TABLE TRANSACTION' doesn't use cache for getting value : READING TABLE TRANSACTION' always uses value via cache " is 142.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectDirect,The length of the statement  "                refToInsertedValue = refToInsertedValue.RemoveLeadingElement(0).EnlargeByteArray_BigEndian(table.Storage.TrieSettings.POINTER_LENGTH); " is 134.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectDirect,The length of the statement  "                table.Cache.ReadKeyValue(!(readRoot == null)' refToInsertedValue' out valueStartPtr' out ValueLength' out xKey' out xValue); " is 124.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectForwardFromTo,The length of the statement  "                foreach (var xrow in table.IterateForwardFromTo(btStartKey' btStopKey' includeStartKey' includeStopKey' readRoot' this._valuesLazyLoadingIsOn)) " is 143.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectBackwardFromTo,The length of the statement  "                foreach (var xrow in table.IterateBackwardFromTo(btStartKey' btStopKey' includeStartKey' includeStopKey' readRoot' this._valuesLazyLoadingIsOn)) " is 144.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectForwardStartsWithClosestToPrefix,The length of the statement  "                foreach (var xrow in table.IterateForwardStartsWithClosestToPrefix(btStartWithKeyPart' readRoot' this._valuesLazyLoadingIsOn)) " is 126.
Long Statement,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,SelectBackwardStartsWithClosestToPrefix,The length of the statement  "                foreach (var xrow in table.IterateBackwardStartsWithClosestToPrefix(btStartWithKeyPart' readRoot' this._valuesLazyLoadingIsOn)) " is 127.
Long Statement,DBreeze.Transactions,TransactionsJournal,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsJournal.cs,RestoreNotFinishedTransactions,The length of the statement  "                //Settigns and storage for Committed tables !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   MUST BE TAKEN FROM SCHEMA' FOR NOW DEFAULT " is 128.
Long Statement,DBreeze.Transactions,TransactionsJournal,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsJournal.cs,RestoreNotFinishedTransactions,The length of the statement  "                    //committedTablesNames = System.Text.Encoding.UTF8.GetString(btCommittedTablesNames'0'btCommittedTablesNames.Length).DeserializeXml<List<string>>(); " is 148.
Long Statement,DBreeze.Transactions,TransactionsJournal,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsJournal.cs,RestoreNotFinishedTransactions,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.CLEAN_ROLLBACK_FILES_FOR_FINISHED_TRANSACTIONS_FAILED); " is 120.
Long Statement,DBreeze.Transactions,TransactionUnit,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionUnit.cs,Dispose,The length of the statement  "                _transactionWriteTablesAwaitingReservation.Clear(); //holds tables with awaiting reservation' means that transaction thread is blocked " is 134.
Long Statement,DBreeze.Transactions,TransactionUnit,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionUnit.cs,If_TableIsReservedForWrite,The length of the statement  "                //var kvp = _transactionWriteTables.Where(r => r.Key.Equals(tableName' StringComparison.OrdinalIgnoreCase)).FirstOrDefault(); " is 125.
Long Statement,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,GetTransaction,The length of the statement  "            //Transaction must have 2 classes one class is for the user' with appropriate methods' second for technical purposes TransactionDetails' where we store different transaction information " is 185.
Long Statement,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,RegisterWriteTablesForTransaction,The length of the statement  "                                    //++++++++++++++ if thread' who has locked this table has another table in a "waiting for reservation" blocked by this thread - it's a deadlock                                     " is 143.
Long Statement,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,RegisterWriteTablesForTransaction,The length of the statement  "                                    //if (transactionUnit.GetTransactionWriteTablesNames().Intersect(tu.Value.GetTransactionWriteTablesAwaitingReservation()).Count() > 0) " is 134.
Long Statement,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,RegisterWriteTablesForTransaction,The length of the statement  "                                    if (DbUserTables.TableNamesIntersect(transactionUnit.GetTransactionWriteTablesNames()'tu.Value.GetTransactionWriteTablesAwaitingReservation())) " is 143.
Long Statement,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,RegisterWriteTablesForTransaction,The length of the statement  "                    //ThreadsGator.PutGateHere(20000);    //every 20 second (or by Gate open we give a chance to re-try' for safety reasons of hanged threads' if programmer didn't dispose DBreeze process after the programm end) " is 207.
Long Statement,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,Commit,The length of the statement  "                throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.DB_IS_NOT_OPERABLE'this._engine.DBisOperableReason'new Exception()); " is 133.
Long Statement,DBreeze.Transactions,TransactionsCoordinator,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionsCoordinator.cs,Commit,The length of the statement  "                     //Here we appear if all tables were succesfully commited (but it's not visible still for READING THREDS and all tables still have their rollback files active) " is 158.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupWriteTables,The length of the statement  "                this.RootNode.nt2Write = this.RootNode.Transaction.InsertTable(this.RootNode.DBreezeTableName' new byte[] { 2 }' 0);  //here is a structure table   " is 145.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupWriteTables,The length of the statement  "                this.RootNode.nt3Write = this.RootNode.Transaction.InsertTable(this.RootNode.DBreezeTableName' new byte[] { 3 }' 0);  //here is a search by NodeName table " is 154.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,GetNodeByParentIdAndNodeId,The length of the statement  "            var row = this.RootNode.nt2Read.Select<byte[]' byte[]>(parentNodeId.To_8_bytes_array_BigEndian().Concat(nodeId.To_8_bytes_array_BigEndian())); " is 142.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,RemoveNode,The length of the statement  "            var oldRow = this.RootNode.nt2Write.Select<byte[]' byte[]>(parentNodeId.To_8_bytes_array_BigEndian().Concat(nodeId.To_8_bytes_array_BigEndian())); " is 146.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,RemoveNode,The length of the statement  "                RemoveOldNodeFromNameIndex(oldNode.NodeName' parentNodeId.To_8_bytes_array_BigEndian().Concat(nodeId.To_8_bytes_array_BigEndian())); " is 132.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,RemoveNode,The length of the statement  "            this.RootNode.nt2Write.RemoveKey<byte[]>(parentNodeId.To_8_bytes_array_BigEndian().Concat(nodeId.To_8_bytes_array_BigEndian())); " is 128.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,AddNodes,The length of the statement  "                    var oldRow = this.RootNode.nt2Write.Select<byte[]' byte[]>(node.ParentNodeId.To_8_bytes_array_BigEndian().Concat(node.NodeId.To_8_bytes_array_BigEndian())); " is 156.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,AddNodes,The length of the statement  "                            RemoveOldNodeFromNameIndex(oldNode.NodeName' node.ParentNodeId.To_8_bytes_array_BigEndian().Concat(node.NodeId.To_8_bytes_array_BigEndian())); " is 142.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,AddNode,The length of the statement  "                var oldRow = this.RootNode.nt2Write.Select<byte[]' byte[]>(node.ParentNodeId.To_8_bytes_array_BigEndian().Concat(node.NodeId.To_8_bytes_array_BigEndian())); " is 156.
Long Statement,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,AddNode,The length of the statement  "                        RemoveOldNodeFromNameIndex(oldNode.NodeName' node.ParentNodeId.To_8_bytes_array_BigEndian().Concat(node.NodeId.To_8_bytes_array_BigEndian())); " is 142.
Long Statement,DBreeze.Diagnostic,SpeedStatistic,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Diagnostic\SpeedStatistic.cs,PrintOut,The length of the statement  "            //        Console.WriteLine("{0}: {1}; Time: {2} ms; {3} ticks "' counterName' cnt.QuantityRuns' cnt.ElapsedMs' cnt.ElapsedTicks); " is 130.
Long Statement,DBreeze.Diagnostic,SpeedStatistic,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Diagnostic\SpeedStatistic.cs,PrintOut,The length of the statement  "                    string output = String.Format("{0}: {1}; Time: {2} ms; {3} ticks "' counterName' cnt.QuantityRuns' cnt.ElapsedMs' cnt.ElapsedTicks); " is 132.
Long Statement,DBreeze.Diagnostic,SpeedStatistic,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Diagnostic\SpeedStatistic.cs,PrintOut,The length of the statement  "                    string output = String.Format("{0}: {1}; Time: {2} ms; {3} ticks "' cnt.Key' cnt.Value.QuantityRuns' cnt.Value.ElapsedMs' cnt.Value.ElapsedTicks); " is 146.
Long Statement,DBreeze.Diagnostic,Counter,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Diagnostic\SpeedStatistic.cs,PrintOut,The length of the statement  "                string output = String.Format("{0}: {1}; Time: {2} ms; {3} ticks "' this.name' cnt' sw.ElapsedMilliseconds' sw.ElapsedTicks); " is 125.
Long Statement,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackHelperFileWrite,The length of the statement  "                throw new Exception("DBreeze.Storage.RemoteInstance.RemoteInstanceCommander.RollbackHelperFileWrite: remote exception"); " is 120.
Long Statement,DBreeze.Storage.RemoteInstance,RemoteTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTable.cs,OpenRemoteTable,The length of the statement  "                    this._fsData = this.rth.configuration.FSFactory.CreateType1(this._fileName' _fileStreamBufferSize);// new FileStream(this._fileName' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough);                 " is 243.
Long Statement,DBreeze.Storage.RemoteInstance,RemoteTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTable.cs,OpenRemoteTable,The length of the statement  "                    this._fsRollback = this.rth.configuration.FSFactory.CreateType1(this._fileName + ".rol"' _fileStreamBufferSize);//new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 264.
Long Statement,DBreeze.Storage.RemoteInstance,RemoteTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTable.cs,OpenRemoteTable,The length of the statement  "                    this._fsRollbackHelper = this.rth.configuration.FSFactory.CreateType1(this._fileName + ".rhp"' _fileStreamBufferSize);//new FileStream(this._fileName + ".rhp"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 270.
Long Statement,DBreeze.Storage.RemoteInstance,RemoteTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTable.cs,RollbackFileRecreate,The length of the statement  "                this._fsRollback = this.rth.configuration.FSFactory.CreateType1(this._fileName + ".rol"' _fileStreamBufferSize); // new FileStream(this._fileName + ".rol"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None' _fileStreamBufferSize' FileOptions.WriteThrough); " is 266.
Complex Conditional,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,SkipValue,The conditional expression  "d == ' ' && (c == ''' || c == '}' || c == ']')"  is complex.
Complex Conditional,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,Prettify,The conditional expression  "!instr && (el == ' ' || el == '\t' || el == '\r' || el == '\n')"  is complex.
Complex Conditional,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,Prettify,The conditional expression  "prevchar == ''' || prevchar == '[' || prevchar == ']' || prevchar == '{' || prevchar == '}'"  is complex.
Complex Conditional,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,IndexOfByteArray,The conditional expression  "ar == null || search == null || ar.Length == 0 || search.Length == 0"  is complex.
Complex Conditional,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKey,The conditional expression  "cleanCheck && i != 0 && _generationMap.ContainsKey(i) && _generationMap[i].Value != key[i - 1]"  is complex.
Complex Conditional,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,AddKeyPartially,The conditional expression  "cleanCheck && i != 0 && _generationMap.ContainsKey(i) && _generationMap[i].Value != key[i - 1]"  is complex.
Complex Conditional,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,RemoveKey,The conditional expression  "cleanCheck && i != 0 && _generationMap.ContainsKey(i) && _generationMap[i].Value != key[i - 1]"  is complex.
Complex Conditional,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,GetKey,The conditional expression  "cleanCheck && i != 0 && _generationMap.ContainsKey(i) && _generationMap[i].Value != key[i - 1]"  is complex.
Complex Conditional,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,GetArrays,The conditional expression  "la == null || ra == null || la.Count == 0 || ra.Count == 0"  is complex.
Complex Conditional,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,GetArrays,The conditional expression  "la == null || ra == null || la.Count == 0 || ra.Count == 0"  is complex.
Complex Conditional,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The conditional expression  "(iMode == eInsertMode.Append || iMode == eInsertMode.Remove) && (String.IsNullOrEmpty(containsWords) && String.IsNullOrEmpty(fullMatchWords))"  is complex.
Complex Conditional,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockAnd,The conditional expression  "(containsWords == null || containsWords.Count() == 0 || containsWords.Where(r=>r.Trim().Length > 0).Count() < 1)                      &&                     (fullMatchWords == null || fullMatchWords.Count() == 0 || fullMatchWords.Where(r => r.Trim().Length > 0).Count() < 1)"  is complex.
Complex Conditional,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockOr,The conditional expression  "(containsWords == null || containsWords.Count() == 0 || containsWords.Where(r => r.Trim().Length > 0).Count() < 1)                      &&                     (fullMatchWords == null || fullMatchWords.Count() == 0 || fullMatchWords.Where(r => r.Trim().Length > 0).Count() < 1)"  is complex.
Complex Conditional,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ObjectInsert,The conditional expression  "!toInsert.NewEntity && toInsert.ptrToExisingEntity == null && primary == null && idx.IndexNoPrefix != null"  is complex.
Empty Catch Block,DBreeze,DBreezeResources,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Engine\DBreezeResources.cs,SelectStartsWith,The method has an empty catch block.
Empty Catch Block,DBreeze,DBreezeEngine,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\DBreezeEngine.cs,BackgroundNotify,The method has an empty catch block.
Empty Catch Block,DBreeze,TransactionTablesLocker,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Transactions\TransactionTablesLocker.cs,RemoveSession,The method has an empty catch block.
Empty Catch Block,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,Dispose,The method has an empty catch block.
Empty Catch Block,DBreeze.LianaTrie,LTrie,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LianaTrie.cs,Dispose,The method has an empty catch block.
Empty Catch Block,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,GetWordsDefinitionFromText,The method has an empty catch block.
Magic Number,DBreeze.Utils,Compression,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze.NetStandard\Utils\Compression.cs,GZip_Decompress,The following statement contains a magic number: int length = 100000;
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,GetVarintBytes,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,GetVarintBytes,The following statement contains a magic number: value >>= 7;
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,ToTarget,The following statement contains a magic number: shift += 7;
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following statement contains a magic number: byte[] sizer = new byte[4];
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following statement contains a magic number: switch (mode)                  {                      case 0:                            if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              hc = 0;                              mode = 1;                              sizer[size] = el;                              size++;                              keyLength = ToUInt32(sizer);                              //key = System.Text.Encoding.UTF8.GetString(encB.Substring(i + 1' (int)keyLength));                              key = encB.Substring(i + 1' (int)keyLength).UTF8_GetString();                              i += (int)keyLength + 1;                              ClearSizer();                              continue;                          }                            break;                      case 1:                          //HashSet Count                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valCnt = ToUInt32(sizer);                              ClearSizer();                                if (valCnt == 0)                              {                                  retD.Add(key' new List<byte[]>());                                  mode = 0;                              }                          }                          break;                      case 2:                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              sizer[size] = el;                              size++;                              if (hc == 0)                                  mhs = new List<byte[]>();                              lenBa = ToUInt32(sizer);                                                          mhs.Add(encB.Substring(i + 1' (int)lenBa));                              i += (int)lenBa + 1;                                                        hc++;                              ClearSizer();                                if (valCnt == hc)                              {                                  mode = 0;                                  retD.Add(key' mhs);                              }                              continue;                                                       }                          break;                  }
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following statement contains a magic number: switch (mode)                  {                      case 0:                            if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              hc = 0;                              mode = 1;                              sizer[size] = el;                              size++;                              keyLength = ToUInt32(sizer);                              //key = System.Text.Encoding.UTF8.GetString(encB.Substring(i + 1' (int)keyLength));                              key = encB.Substring(i + 1' (int)keyLength).UTF8_GetString();                              i += (int)keyLength + 1;                              ClearSizer();                              continue;                          }                            break;                      case 1:                          //HashSet Count                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valCnt = ToUInt32(sizer);                              ClearSizer();                                if (valCnt == 0)                              {                                  retD.Add(key' new List<byte[]>());                                  mode = 0;                              }                          }                          break;                      case 2:                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              sizer[size] = el;                              size++;                              if (hc == 0)                                  mhs = new List<byte[]>();                              lenBa = ToUInt32(sizer);                                                          mhs.Add(encB.Substring(i + 1' (int)lenBa));                              i += (int)lenBa + 1;                                                        hc++;                              ClearSizer();                                if (valCnt == hc)                              {                                  mode = 0;                                  retD.Add(key' mhs);                              }                              continue;                                                       }                          break;                  }
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The following statement contains a magic number: byte[] sizer = new byte[4];
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The following statement contains a magic number: switch (mode)                  {                      case 0:                                                    if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              hc = 0;                              mode = 1;                              sizer[size] = el;                              size++;                              keyLength = ToUInt32(sizer);                              //key = System.Text.Encoding.UTF8.GetString(encB.Substring(i + 1' (int)keyLength));                              key = encB.Substring(i + 1' (int)keyLength).UTF8_GetString();                              i += (int)keyLength+1;                              ClearSizer();                              continue;                          }                            break;                      case 1:                          //HashSet Count                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valCnt = ToUInt32(sizer);                              ClearSizer();                                if (valCnt == 0)                              {                                  retD.Add(key' new HashSet<uint>());                                  mode = 0;                              }                          }                          break;                      case 2:                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                                                          sizer[size] = el;                              size++;                                                                                  if (hc == 0)                                  mhs = new HashSet<uint>();                              mhs.Add(ToUInt32(sizer));                              hc++;                              ClearSizer();                                                            if (valCnt == hc)                              {                                                                  mode = 0;                                  retD.Add(key' mhs);                              }                                                      }                          break;                  }
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The following statement contains a magic number: switch (mode)                  {                      case 0:                                                    if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              hc = 0;                              mode = 1;                              sizer[size] = el;                              size++;                              keyLength = ToUInt32(sizer);                              //key = System.Text.Encoding.UTF8.GetString(encB.Substring(i + 1' (int)keyLength));                              key = encB.Substring(i + 1' (int)keyLength).UTF8_GetString();                              i += (int)keyLength+1;                              ClearSizer();                              continue;                          }                            break;                      case 1:                          //HashSet Count                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valCnt = ToUInt32(sizer);                              ClearSizer();                                if (valCnt == 0)                              {                                  retD.Add(key' new HashSet<uint>());                                  mode = 0;                              }                          }                          break;                      case 2:                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                                                          sizer[size] = el;                              size++;                                                                                  if (hc == 0)                                  mhs = new HashSet<uint>();                              mhs.Add(ToUInt32(sizer));                              hc++;                              ClearSizer();                                                            if (valCnt == hc)                              {                                                                  mode = 0;                                  retD.Add(key' mhs);                              }                                                      }                          break;                  }
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,The following statement contains a magic number: byte[] sizer = new byte[4];
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,The following statement contains a magic number: switch (mode)                  {                      case 0:                          //Key' Size of BT //                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 1;                              sizer[size] = el;                              size++;                              key = ToUInt32(sizer);                              ClearSizer();                          }                            break;                      case 1:                          //Value Size                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valLen = ToUInt32(sizer);                              ClearSizer();                                if (valLen == 0)                              {                                  retD.Add(key' null);                                  mode = 0;                                  break;                              }                                val = new byte[valLen];                              valCnt = 0;                          }                          break;                      case 2:                          val[valCnt] = el;                          valCnt++;                          if (valCnt == valLen)                          {                              retD.Add(key' val);                              mode = 0;                              break;                          }                          break;                  }
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,The following statement contains a magic number: switch (mode)                  {                      case 0:                          //Key' Size of BT //                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 1;                              sizer[size] = el;                              size++;                              key = ToUInt32(sizer);                              ClearSizer();                          }                            break;                      case 1:                          //Value Size                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valLen = ToUInt32(sizer);                              ClearSizer();                                if (valLen == 0)                              {                                  retD.Add(key' null);                                  mode = 0;                                  break;                              }                                val = new byte[valLen];                              valCnt = 0;                          }                          break;                      case 2:                          val[valCnt] = el;                          valCnt++;                          if (valCnt == valLen)                          {                              retD.Add(key' val);                              mode = 0;                              break;                          }                          break;                  }
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Encode_PROTO_ListByteArray,The following statement contains a magic number: ms.Write(new byte[] { 10 }' 0' 1);
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_PROTO_ListByteArray,The following statement contains a magic number: byte[] sizer = new byte[4];
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_PROTO_ListByteArray,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_PROTO_ListByteArray,The following statement contains a magic number: Action ClearSizer = () =>              {                  sizer[0] = 0;                  sizer[1] = 0;                  sizer[2] = 0;                  sizer[3] = 0;                    size = 0;              };
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,GetVarintBytes,The following statement contains a magic number: var zigzag = EncodeZigZag(value' 64);
Magic Number,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,ToUInt32,The following statement contains a magic number: return (uint)ToTarget(bytes' 32);
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetDigit,The following statement contains a magic number: shift += 7;
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetDecimal,The following statement contains a magic number: int[] bits = new int[4];
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetDecimal,The following statement contains a magic number: bits[2] = (int)Biser.DecodeZigZag(dgt);
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetDecimal,The following statement contains a magic number: bits[3] = (int)Biser.DecodeZigZag(dgt);
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,JSGetDouble,The following statement contains a magic number: var bt = this.Read(9);
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,JSGetDouble,The following statement contains a magic number: Array.Reverse(bt' 1' 8);
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,JSGetDate,The following statement contains a magic number: return (new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).AddMilliseconds(this.JSGetLong());
Magic Number,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetByteArray,The following statement contains a magic number: switch (prot)                  {                      case 2:                          ret = new byte[0];                          break;                      case 0:                          this.GetDigit(out prot);                          ret = Read((int)((uint)prot));                          //ret = Read((int)((uint)this.GetDigit()));                          break;                  }
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,GetVarintBytes,The following statement contains a magic number: value >>= 7;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,JSAdd,The following statement contains a magic number: value > 999999999999999 || value < -999999999999999
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,JSAdd,The following statement contains a magic number: value > 999999999999999 || value < -999999999999999
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,JSAdd,The following statement contains a magic number: return JSAdd(Convert.ToInt64(value.ToUniversalTime().Subtract(new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds));
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,JSAdd,The following statement contains a magic number: return JSAdd(Convert.ToInt64(value                      .Subtract(new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds));
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,JSAdd,The following statement contains a magic number: ms.Write(BitConverter.GetBytes(value)' 0' 8);
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: GetVarintBytes((ulong)Biser.EncodeZigZag(value' 64));
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: GetVarintBytes((ulong)Biser.EncodeZigZag(value' 32));
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: GetVarintBytes((ulong)Biser.EncodeZigZag(value' 16));
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: Add(bits[2]);
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: Add(bits[3]);
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: ms.Write(new byte[] { 0' 0 }' 0' 2);
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,Encoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserEncoder.cs,Add,The following statement contains a magic number: var intLenSize = (len > 268435455) ? 5 : (len > 2097151) ? 4 : (len > 16383) ? 3 : (len > 127) ? 2 : 1;
Magic Number,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,CheckNull,The following statement contains a magic number: this.encPos += 3;
Magic Number,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"\/Date(13257180000000000)\/"*/                          s = GetStr(false);                          // StringBuilder dsb = new StringBuilder();  #if NET35                          sb.Length = 0;  #else                          sb.Clear();  #endif                          for (int i = 6; i < s.Length - 2; i++)                              sb.Append(s[i]);                          //v = Convert.ToUInt64(s.Substring(0' s.Length - 2).Replace("/Date("' "")) / 10000;                          v = Convert.ToUInt64(sb.ToString()) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                        case JsonSettings.DateTimeStyle.EpochTime:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"P17":13257818550000000*/                          v = Convert.ToUInt64(GetNumber(false)) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                      case JsonSettings.DateTimeStyle.ISO:                      case JsonSettings.DateTimeStyle.Javascript:                          /*                           * Encoder                           * new DateTime(2018' 6' 5' 17'44'15'443' DateTimeKind.Local).ToString("o"); //Encoder ISO "2018-06-05T17:44:15.4430000Z" or "2018-06-05T17:44:15.4430000+02:00"                           */                          s = GetStr(false);                          return DateTime.Parse(s' null' System.Globalization.DateTimeStyles.RoundtripKind);                    }
Magic Number,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"\/Date(13257180000000000)\/"*/                          s = GetStr(false);                          // StringBuilder dsb = new StringBuilder();  #if NET35                          sb.Length = 0;  #else                          sb.Clear();  #endif                          for (int i = 6; i < s.Length - 2; i++)                              sb.Append(s[i]);                          //v = Convert.ToUInt64(s.Substring(0' s.Length - 2).Replace("/Date("' "")) / 10000;                          v = Convert.ToUInt64(sb.ToString()) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                        case JsonSettings.DateTimeStyle.EpochTime:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"P17":13257818550000000*/                          v = Convert.ToUInt64(GetNumber(false)) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                      case JsonSettings.DateTimeStyle.ISO:                      case JsonSettings.DateTimeStyle.Javascript:                          /*                           * Encoder                           * new DateTime(2018' 6' 5' 17'44'15'443' DateTimeKind.Local).ToString("o"); //Encoder ISO "2018-06-05T17:44:15.4430000Z" or "2018-06-05T17:44:15.4430000+02:00"                           */                          s = GetStr(false);                          return DateTime.Parse(s' null' System.Globalization.DateTimeStyles.RoundtripKind);                    }
Magic Number,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"\/Date(13257180000000000)\/"*/                          s = GetStr(false);                          // StringBuilder dsb = new StringBuilder();  #if NET35                          sb.Length = 0;  #else                          sb.Clear();  #endif                          for (int i = 6; i < s.Length - 2; i++)                              sb.Append(s[i]);                          //v = Convert.ToUInt64(s.Substring(0' s.Length - 2).Replace("/Date("' "")) / 10000;                          v = Convert.ToUInt64(sb.ToString()) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                        case JsonSettings.DateTimeStyle.EpochTime:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"P17":13257818550000000*/                          v = Convert.ToUInt64(GetNumber(false)) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                      case JsonSettings.DateTimeStyle.ISO:                      case JsonSettings.DateTimeStyle.Javascript:                          /*                           * Encoder                           * new DateTime(2018' 6' 5' 17'44'15'443' DateTimeKind.Local).ToString("o"); //Encoder ISO "2018-06-05T17:44:15.4430000Z" or "2018-06-05T17:44:15.4430000+02:00"                           */                          s = GetStr(false);                          return DateTime.Parse(s' null' System.Globalization.DateTimeStyles.RoundtripKind);                    }
Magic Number,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"\/Date(13257180000000000)\/"*/                          s = GetStr(false);                          // StringBuilder dsb = new StringBuilder();  #if NET35                          sb.Length = 0;  #else                          sb.Clear();  #endif                          for (int i = 6; i < s.Length - 2; i++)                              sb.Append(s[i]);                          //v = Convert.ToUInt64(s.Substring(0' s.Length - 2).Replace("/Date("' "")) / 10000;                          v = Convert.ToUInt64(sb.ToString()) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                        case JsonSettings.DateTimeStyle.EpochTime:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"P17":13257818550000000*/                          v = Convert.ToUInt64(GetNumber(false)) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                      case JsonSettings.DateTimeStyle.ISO:                      case JsonSettings.DateTimeStyle.Javascript:                          /*                           * Encoder                           * new DateTime(2018' 6' 5' 17'44'15'443' DateTimeKind.Local).ToString("o"); //Encoder ISO "2018-06-05T17:44:15.4430000Z" or "2018-06-05T17:44:15.4430000+02:00"                           */                          s = GetStr(false);                          return DateTime.Parse(s' null' System.Globalization.DateTimeStyles.RoundtripKind);                    }
Magic Number,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,AppendDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          ////sb.Append("\"");                          sb.Append("\"\\/Date(");                            // sb.Append($"\"\\/Date({((dt.Kind == DateTimeKind.Utc) ? ((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000) : ((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000)) })\\/\"");                            if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          sb.Append(")\\/\"");                          ////sb.Append("\"");                          break;                      case JsonSettings.DateTimeStyle.EpochTime:                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          break;                      case JsonSettings.DateTimeStyle.ISO:                          sb.Append($"\"{dt.ToString("o")}\"");                          //sb.Append("\"");                          //sb.Append(dt.ToString("o"));                          //sb.Append("\"");                          //sb.Append($"\"{dt.Year}-{String.Format("{0:00}"' dt.Month)}-{String.Format("{0:00}"' dt.Day)}T{String.Format("{0:00}"' dt.Hour)}:{String.Format("{0:00}"' dt.Minute)}:{String.Format("{0:00}"' dt.Second)}.{dt.Millisecond}Z\"");                          //sb.Append("\"2018-08-21T09:42:21.9770676Z\"");                          //		dt.ToString("o")	"2018-08-21T09:42:21.9770676Z"	string                            break;                      case JsonSettings.DateTimeStyle.Javascript:                          sb.Append("\"");                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(dt.ToString("o"));                          else                              sb.Append(dt.ToUniversalTime().ToString("o"));                          sb.Append("\"");                          break;                    }
Magic Number,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,AppendDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          ////sb.Append("\"");                          sb.Append("\"\\/Date(");                            // sb.Append($"\"\\/Date({((dt.Kind == DateTimeKind.Utc) ? ((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000) : ((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000)) })\\/\"");                            if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          sb.Append(")\\/\"");                          ////sb.Append("\"");                          break;                      case JsonSettings.DateTimeStyle.EpochTime:                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          break;                      case JsonSettings.DateTimeStyle.ISO:                          sb.Append($"\"{dt.ToString("o")}\"");                          //sb.Append("\"");                          //sb.Append(dt.ToString("o"));                          //sb.Append("\"");                          //sb.Append($"\"{dt.Year}-{String.Format("{0:00}"' dt.Month)}-{String.Format("{0:00}"' dt.Day)}T{String.Format("{0:00}"' dt.Hour)}:{String.Format("{0:00}"' dt.Minute)}:{String.Format("{0:00}"' dt.Second)}.{dt.Millisecond}Z\"");                          //sb.Append("\"2018-08-21T09:42:21.9770676Z\"");                          //		dt.ToString("o")	"2018-08-21T09:42:21.9770676Z"	string                            break;                      case JsonSettings.DateTimeStyle.Javascript:                          sb.Append("\"");                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(dt.ToString("o"));                          else                              sb.Append(dt.ToUniversalTime().ToString("o"));                          sb.Append("\"");                          break;                    }
Magic Number,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,AppendDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          ////sb.Append("\"");                          sb.Append("\"\\/Date(");                            // sb.Append($"\"\\/Date({((dt.Kind == DateTimeKind.Utc) ? ((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000) : ((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000)) })\\/\"");                            if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          sb.Append(")\\/\"");                          ////sb.Append("\"");                          break;                      case JsonSettings.DateTimeStyle.EpochTime:                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          break;                      case JsonSettings.DateTimeStyle.ISO:                          sb.Append($"\"{dt.ToString("o")}\"");                          //sb.Append("\"");                          //sb.Append(dt.ToString("o"));                          //sb.Append("\"");                          //sb.Append($"\"{dt.Year}-{String.Format("{0:00}"' dt.Month)}-{String.Format("{0:00}"' dt.Day)}T{String.Format("{0:00}"' dt.Hour)}:{String.Format("{0:00}"' dt.Minute)}:{String.Format("{0:00}"' dt.Second)}.{dt.Millisecond}Z\"");                          //sb.Append("\"2018-08-21T09:42:21.9770676Z\"");                          //		dt.ToString("o")	"2018-08-21T09:42:21.9770676Z"	string                            break;                      case JsonSettings.DateTimeStyle.Javascript:                          sb.Append("\"");                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(dt.ToString("o"));                          else                              sb.Append(dt.ToUniversalTime().ToString("o"));                          sb.Append("\"");                          break;                    }
Magic Number,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,AppendDateTime,The following statement contains a magic number: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          ////sb.Append("\"");                          sb.Append("\"\\/Date(");                            // sb.Append($"\"\\/Date({((dt.Kind == DateTimeKind.Utc) ? ((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000) : ((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000)) })\\/\"");                            if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          sb.Append(")\\/\"");                          ////sb.Append("\"");                          break;                      case JsonSettings.DateTimeStyle.EpochTime:                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          break;                      case JsonSettings.DateTimeStyle.ISO:                          sb.Append($"\"{dt.ToString("o")}\"");                          //sb.Append("\"");                          //sb.Append(dt.ToString("o"));                          //sb.Append("\"");                          //sb.Append($"\"{dt.Year}-{String.Format("{0:00}"' dt.Month)}-{String.Format("{0:00}"' dt.Day)}T{String.Format("{0:00}"' dt.Hour)}:{String.Format("{0:00}"' dt.Minute)}:{String.Format("{0:00}"' dt.Second)}.{dt.Millisecond}Z\"");                          //sb.Append("\"2018-08-21T09:42:21.9770676Z\"");                          //		dt.ToString("o")	"2018-08-21T09:42:21.9770676Z"	string                            break;                      case JsonSettings.DateTimeStyle.Javascript:                          sb.Append("\"");                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(dt.ToString("o"));                          else                              sb.Append(dt.ToUniversalTime().ToString("o"));                          sb.Append("\"");                          break;                    }
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,bestK,The following statement contains a magic number: return (int)Math.Round(Math.Log(2.0) * bestM(capacity' errorRate) / capacity);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,bestM,The following statement contains a magic number: return (int)Math.Ceiling(capacity * Math.Log(errorRate' (1.0 / Math.Pow(2' Math.Log(2.0)))));
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,bestM,The following statement contains a magic number: return (int)Math.Ceiling(capacity * Math.Log(errorRate' (1.0 / Math.Pow(2' Math.Log(2.0)))));
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashInt32,The following statement contains a magic number: x = ~x + (x << 15);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashInt32,The following statement contains a magic number: x = x ^ (x >> 12);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashInt32,The following statement contains a magic number: x = x + (x << 2);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashInt32,The following statement contains a magic number: x = x ^ (x >> 4);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashInt32,The following statement contains a magic number: x = x * 2057;
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashInt32,The following statement contains a magic number: x = x ^ (x >> 16);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashString,The following statement contains a magic number: hash += (hash << 10);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashString,The following statement contains a magic number: hash ^= (hash >> 6);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashString,The following statement contains a magic number: hash += (hash << 3);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashString,The following statement contains a magic number: hash ^= (hash >> 11);
Magic Number,DBreeze.Utils,Filter<T>,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BloomFilter.cs,hashString,The following statement contains a magic number: hash += (hash << 15);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToIndex,The following statement contains a magic number: indexNumber < 1 || indexNumber > 255
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Byte_NULL,The following statement contains a magic number: value == null || value.Length != 2 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: value == null || value.Length != 9 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian()));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian()));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian()));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian()));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian()));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian()));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_DateTime_NULL,The following statement contains a magic number: return new DateTime((long)(new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }.To_UInt64_BigEndian()));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Bool_NULL,The following statement contains a magic number: value == null || value.Length != 1 || value[0] == 2
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Char_NULL,The following statement contains a magic number: value == null || value.Length != 3 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Char_NULL,The following statement contains a magic number: return (System.Text.Encoding.Unicode.GetChars(new byte[] {value[1]'value[2]})[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_SByte_NULL,The following statement contains a magic number: value == null || value.Length != 2 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int16_BigEndian_NULL,The following statement contains a magic number: value == null || value.Length != 3 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int16_LittleEndian_NULL,The following statement contains a magic number: value == null || value.Length != 3 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_BigEndian,The following statement contains a magic number: return (ushort)(value[0] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_LittleEndian,The following statement contains a magic number: return (ushort)(value[1] << 8 | value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_BigEndian_NULL,The following statement contains a magic number: value == null || value.Length != 3 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_BigEndian_NULL,The following statement contains a magic number: return (ushort)(value[1] << 8 | value[2]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_BigEndian_NULL,The following statement contains a magic number: return (ushort)(value[1] << 8 | value[2]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_LittleEndian_NULL,The following statement contains a magic number: value == null || value.Length != 3 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_LittleEndian_NULL,The following statement contains a magic number: return (ushort)(value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt16_LittleEndian_NULL,The following statement contains a magic number: return (ushort)(value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_BigEndian_NULL,The following statement contains a magic number: value == null || value.Length != 5 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_BigEndian_NULL,The following statement contains a magic number: return (int?)((new byte[] { value[1]' value[2]' value[3]' value[4] }).To_UInt32_BigEndian() + int.MinValue);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_BigEndian_NULL,The following statement contains a magic number: return (int?)((new byte[] { value[1]' value[2]' value[3]' value[4] }).To_UInt32_BigEndian() + int.MinValue);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_BigEndian_NULL,The following statement contains a magic number: return (int?)((new byte[] { value[1]' value[2]' value[3]' value[4] }).To_UInt32_BigEndian() + int.MinValue);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_LittleEndian_NULL,The following statement contains a magic number: value == null || value.Length != 5 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_LittleEndian_NULL,The following statement contains a magic number: return (int?)((new byte[] {value[1]'value[2]'value[3]'value[4]}).To_UInt32_LittleEndian() + int.MinValue);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_LittleEndian_NULL,The following statement contains a magic number: return (int?)((new byte[] {value[1]'value[2]'value[3]'value[4]}).To_UInt32_LittleEndian() + int.MinValue);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int32_LittleEndian_NULL,The following statement contains a magic number: return (int?)((new byte[] {value[1]'value[2]'value[3]'value[4]}).To_UInt32_LittleEndian() + int.MinValue);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian,The following statement contains a magic number: return (uint)(value[0] << 24 | value[1] << 16 | value[2] << 8 | value[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian,The following statement contains a magic number: return (uint)(value[0] << 24 | value[1] << 16 | value[2] << 8 | value[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian,The following statement contains a magic number: return (uint)(value[0] << 24 | value[1] << 16 | value[2] << 8 | value[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian,The following statement contains a magic number: return (uint)(value[0] << 24 | value[1] << 16 | value[2] << 8 | value[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian,The following statement contains a magic number: return (uint)(value[0] << 24 | value[1] << 16 | value[2] << 8 | value[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian,The following statement contains a magic number: return (uint)(value[3] << 24 | value[2] << 16 | value[1] << 8 | value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian,The following statement contains a magic number: return (uint)(value[3] << 24 | value[2] << 16 | value[1] << 8 | value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian,The following statement contains a magic number: return (uint)(value[3] << 24 | value[2] << 16 | value[1] << 8 | value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian,The following statement contains a magic number: return (uint)(value[3] << 24 | value[2] << 16 | value[1] << 8 | value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian,The following statement contains a magic number: return (uint)(value[3] << 24 | value[2] << 16 | value[1] << 8 | value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian_NULL,The following statement contains a magic number: value == null || value.Length != 5 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian_NULL,The following statement contains a magic number: return (uint)(value[1] << 24 | value[2] << 16 | value[3] << 8 | value[4]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian_NULL,The following statement contains a magic number: return (uint)(value[1] << 24 | value[2] << 16 | value[3] << 8 | value[4]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian_NULL,The following statement contains a magic number: return (uint)(value[1] << 24 | value[2] << 16 | value[3] << 8 | value[4]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian_NULL,The following statement contains a magic number: return (uint)(value[1] << 24 | value[2] << 16 | value[3] << 8 | value[4]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian_NULL,The following statement contains a magic number: return (uint)(value[1] << 24 | value[2] << 16 | value[3] << 8 | value[4]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_BigEndian_NULL,The following statement contains a magic number: return (uint)(value[1] << 24 | value[2] << 16 | value[3] << 8 | value[4]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian_NULL,The following statement contains a magic number: value == null || value.Length != 5 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian_NULL,The following statement contains a magic number: return (uint)(value[4] << 24 | value[3] << 16 | value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian_NULL,The following statement contains a magic number: return (uint)(value[4] << 24 | value[3] << 16 | value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian_NULL,The following statement contains a magic number: return (uint)(value[4] << 24 | value[3] << 16 | value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian_NULL,The following statement contains a magic number: return (uint)(value[4] << 24 | value[3] << 16 | value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian_NULL,The following statement contains a magic number: return (uint)(value[4] << 24 | value[3] << 16 | value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt32_LittleEndian_NULL,The following statement contains a magic number: return (uint)(value[4] << 24 | value[3] << 16 | value[2] << 8 | value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: value == null || value.Length != 9 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_BigEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8] }).To_UInt64_BigEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: value == null || value.Length != 9 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Int64_LittleEndian_NULL,The following statement contains a magic number: return (long?)((new byte[] { value[1]' value[2]' value[3]' value[4]' value[5]' value[6]' value[7]' value[8]}).To_UInt64_LittleEndian() - (ulong)Math.Abs(long.MinValue + 1) - 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,DynamicLength_To_UInt64_BigEndian,The following statement contains a magic number: res += (ulong)value[i] << ((vl - 1 - i) * 8);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian,The following statement contains a magic number: return (ulong)(((ulong)value[0] << 56) + ((ulong)value[1] << 48) + ((ulong)value[2] << 40) + ((ulong)value[3] << 32) + ((ulong)value[4] << 24) + ((ulong)value[5] << 16) + ((ulong)value[6] << 8) + (ulong)value[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian,The following statement contains a magic number: return (ulong)(((ulong)value[7] << 56) + ((ulong)value[6] << 48) + ((ulong)value[5] << 40) + ((ulong)value[4] << 32) + ((ulong)value[3] << 24) + ((ulong)value[2] << 16) + ((ulong)value[1] << 8) + (ulong)value[0]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: value == null || value.Length != 9 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_BigEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[1] << 56) + ((ulong)value[2] << 48) + ((ulong)value[3] << 40) + ((ulong)value[4] << 32) + ((ulong)value[5] << 24) + ((ulong)value[6] << 16) + ((ulong)value[7] << 8) + (ulong)value[8]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: value == null || value.Length != 9 || value[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_UInt64_LittleEndian_NULL,The following statement contains a magic number: return (ulong)(((ulong)value[8] << 56) + ((ulong)value[7] << 48) + ((ulong)value[6] << 40) + ((ulong)value[5] << 32) + ((ulong)value[4] << 24) + ((ulong)value[3] << 16) + ((ulong)value[2] << 8) + (ulong)value[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: bool blIsPositive = ((input[0] & 128) > 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[9] << 24 | input[10] << 16 | input[11] << 8 | input[12])'                      (int)(input[5] << 24 | input[6] << 16 | input[7] << 8 | input[8])'                      (int)(input[1] << 24 | input[2] << 16 | input[3] << 8 | input[4])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: byte lastDigit = (byte)(input[13] >> 3);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: byte lastDigit = (byte)(input[13] >> 3);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: byte numOfDigits = (byte)(input[14] & 0x1F);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: byte scale = (byte)(((input[13] & 0x03) << 3) + (input[14] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: byte scale = (byte)(((input[13] & 0x03) << 3) + (input[14] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: byte scale = (byte)(((input[13] & 0x03) << 3) + (input[14] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: byte scale = (byte)(((input[13] & 0x03) << 3) + (input[14] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = Math.Floor(decimalValuePart / (decimal)Math.Pow(10' 28 - numOfDigits));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = Math.Floor(decimalValuePart / (decimal)Math.Pow(10' 28 - numOfDigits));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: numOfDigits < 28
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: decimalValuePart = (decimalValuePart * 10) + lastDigit;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: numOfDigits == 29
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: input == null || input.Length != 16 || input[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: bool blIsPositive = ((input[1] & 128) > 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = new decimal(new int[4]                   {                       (int)(input[10] << 24 | input[11] << 16 | input[12] << 8 | input[13])'                      (int)(input[6] << 24 | input[7] << 16 | input[8] << 8 | input[9])'                      (int)(input[2] << 24 | input[3] << 16 | input[4] << 8 | input[5])'                      (int)0                  });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: byte lastDigit = (byte)(input[14] >> 3);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: byte lastDigit = (byte)(input[14] >> 3);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: byte numOfDigits = (byte)(input[15] & 0x1F);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: byte scale = (byte)(((input[14] & 0x03) << 3) + (input[15] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: byte scale = (byte)(((input[14] & 0x03) << 3) + (input[15] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: byte scale = (byte)(((input[14] & 0x03) << 3) + (input[15] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: byte scale = (byte)(((input[14] & 0x03) << 3) + (input[15] >> 5));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = Math.Floor(decimalValuePart / (decimal)Math.Pow(10' 28 - numOfDigits));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = Math.Floor(decimalValuePart / (decimal)Math.Pow(10' 28 - numOfDigits));
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: numOfDigits < 28
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: decimalValuePart = (decimalValuePart * 10) + lastDigit;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: numOfDigits == 29
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Decimal_BigEndian_NULL,The following statement contains a magic number: return new decimal(new int[4]               {                  decArray[0]'                  decArray[1]'                  decArray[2]'                  (int)((blIsPositive ? 0 : (1 << 31)) + (scale << 16))              });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: bool blIsPositive = ((input[0] & 128) > 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: int exp = ((input[0] & 127) << 8) | (input[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: int exp = ((input[0] & 127) << 8) | (input[1]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: byte[] numberArray = new byte[8] { 0' 0' 0' 0' 0' 0' 0' 0 };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: System.Buffer.BlockCopy(input' 2' numberArray' 1' 7);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: System.Buffer.BlockCopy(input' 2' numberArray' 1' 7);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: input == null || input.Length != 10 || input[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: bool blIsPositive = ((input[1] & 128) > 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: int exp = ((input[1] & 127) << 8) | (input[2]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: int exp = ((input[1] & 127) << 8) | (input[2]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: int exp = ((input[1] & 127) << 8) | (input[2]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: byte[] numberArray = new byte[8] { 0' 0' 0' 0' 0' 0' 0' 0 };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: System.Buffer.BlockCopy(input' 3' numberArray' 1' 7);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: System.Buffer.BlockCopy(input' 3' numberArray' 1' 7);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Double_BigEndian_NULL,The following statement contains a magic number: ulong doubleNumber = (ulong)(((ulong)numberArray[0] << 56) + ((ulong)numberArray[1] << 48) + ((ulong)numberArray[2] << 40) + ((ulong)numberArray[3] << 32) + ((ulong)numberArray[4] << 24) + ((ulong)numberArray[5] << 16) + ((ulong)numberArray[6] << 8) + (ulong)numberArray[7]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The following statement contains a magic number: bool blIsPositive = ((input[0] & 128) > 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The following statement contains a magic number: int exp = input[0] & 127;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: input == null || input.Length != 5 || input[0] == 0
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: input = new byte[] { input[1]' input[2]' input[3]' input[4] };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: input = new byte[] { input[1]' input[2]' input[3]' input[4] };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: input = new byte[] { input[1]' input[2]' input[3]' input[4] };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: bool blIsPositive = ((input[0] & 128) > 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: int exp = input[0] & 127;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_Float_BigEndian_NULL,The following statement contains a magic number: uint floatNumber = (uint)(input[0] << 24 | input[1] << 16 | input[2] << 8 | input[3]);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_1_byte_array,The following statement contains a magic number: return new byte[] { 2 };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_2_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte) (val1 >> 8)'                   (byte)  val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_2_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                   (byte)  val1'                  (byte) (val1 >> 8)                              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_3_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte) (val1 >> 8)'                   (byte)  val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_3_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)  val1'                  (byte) (val1 >> 8)                              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_2_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte) (value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_2_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                   (byte) value'                  (byte) (value >> 8)                              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_3_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte) (value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_3_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte) value'                  (byte) (value >> 8)                              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    (byte) val1 '                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    (byte) val1 '                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    (byte) val1 '                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    1'                  (byte) val1 '                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    1'                  (byte) val1 '                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    1'                  (byte) val1 '                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    (byte) value '                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    (byte) value '                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    (byte) value '                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    1'                  (byte) value '                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    1'                  (byte) value '                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                    1'                  (byte) value '                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(val1 >> 56)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 8)'                   (byte) val1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                          1'                  (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                          1'                  (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                          1'                  (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                          1'                  (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                          1'                  (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                          1'                  (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                          1'                  (byte) val1'                  (byte)(val1 >> 8)'                   (byte)(val1 >> 16)'                   (byte)(val1 >> 24)'                   (byte)(val1 >> 32)'                   (byte)(val1 >> 40)'                   (byte)(val1 >> 48)'                   (byte)(val1 >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_8_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                   (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: return new byte[]               {                   1'                  (byte)(value >> 56)'                   (byte)(value >> 48)'                   (byte)(value >> 40)'                   (byte)(value >> 32)'                   (byte)(value >> 24)'                   (byte)(value >> 16)'                   (byte)(value >> 8)'                   (byte) value              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                  1'                  (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                  1'                  (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                  1'                  (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                  1'                  (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                  1'                  (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                  1'                  (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_LittleEndian,The following statement contains a magic number: return new byte[]               {                                  1'                  (byte) value'                  (byte)(value >> 8)'                   (byte)(value >> 16)'                   (byte)(value >> 24)'                   (byte)(value >> 32)'                   (byte)(value >> 40)'                   (byte)(value >> 48)'                   (byte)(value >> 56)'               };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: bool blIsPositive = ((decArray[3] & 0x80000000) == 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: byte scale = (byte)(decArray[3] >> 16);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: byte scale = (byte)(decArray[3] >> 16);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: decimal decimalValuePart = new decimal(new int[4] { decArray[0]' decArray[1]' decArray[2]' 0 });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: decimal decimalValuePart = new decimal(new int[4] { decArray[0]' decArray[1]' decArray[2]' 0 });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: byte exp = (byte)(30 + numOfDigits - 1 - scale);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: lastDigit = (byte)(decimalValuePart % 10);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: decimalValuePart = Math.Floor(decimalValuePart / 10);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: numOfDigits == 29
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: decimalValuePart *= (decimal)Math.Pow(10' 28 - numOfDigits);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: decimalValuePart *= (decimal)Math.Pow(10' 28 - numOfDigits);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: numOfDigits < 28
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_15_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[BCNT_DECIMAL]                   {                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: bool blIsPositive = ((decArray[3] & 0x80000000) == 0);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: byte scale = (byte)(decArray[3] >> 16);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: byte scale = (byte)(decArray[3] >> 16);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: decimal decimalValuePart = new decimal(new int[4] { decArray[0]' decArray[1]' decArray[2]' 0 });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: decimal decimalValuePart = new decimal(new int[4] { decArray[0]' decArray[1]' decArray[2]' 0 });
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: byte exp = (byte)(30 + numOfDigits - 1 - scale);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: lastDigit = (byte)(decimalValuePart % 10);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: decimalValuePart = Math.Floor(decimalValuePart / 10);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: numOfDigits == 29
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: decimalValuePart *= (decimal)Math.Pow(10' 28 - numOfDigits);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: decimalValuePart *= (decimal)Math.Pow(10' 28 - numOfDigits);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: numOfDigits < 28
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_16_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[16]                   {                      1'                      (byte)(128 + (blIsExpPositive ? 64 : 0) + (exp & 0x3F))'                      (byte)(decArray[2] >> 24)' (byte)(decArray[2] >> 16)' (byte)(decArray[2] >> 8)' (byte)decArray[2]'                      (byte)(decArray[1] >> 24)' (byte)(decArray[1] >> 16)' (byte)(decArray[1] >> 8)' (byte)decArray[1]'                      (byte)(decArray[0] >> 24)' (byte)(decArray[0] >> 16)' (byte)(decArray[0] >> 8)' (byte)decArray[0]'                      (byte)((lastDigit << 3) + (byte)(scale >> 3))'                      (byte)((scale << 5) + numOfDigits)                  };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_9_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: ulong[] ulongPowerListReverse = new ulong[16] {                  1000000000000000'                  100000000000000'                  10000000000000'                  1000000000000'                  100000000000'                  10000000000'                  1000000000'                  100000000'                  10000000'                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  1'                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  1'                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  1'                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  1'                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  1'                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  1'                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_10_bytes_array_BigEndian,The following statement contains a magic number: byte[] resultArray = new byte[] {                  1'                  (byte)(servicePart >> 8)'                  (byte)servicePart'                  (byte)(doubleNumber >> 48)'                   (byte)(doubleNumber >> 40)'                   (byte)(doubleNumber >> 32)'                   (byte)(doubleNumber >> 24)'                   (byte)(doubleNumber >> 16)'                   (byte)(doubleNumber >> 8)'                   (byte)doubleNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[] {                  (byte)servicePart'                  (byte)(floatNumber >> 16)'                   (byte)(floatNumber >> 8)'                   (byte)floatNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_4_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[] {                  (byte)servicePart'                  (byte)(floatNumber >> 16)'                   (byte)(floatNumber >> 8)'                   (byte)floatNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: uint[] uintPowerListReverse = new uint[7] {                  1000000'                  100000'                  10000'                  1000'                  100'                  10'                  1              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: Int16[] ushortPowerList = new Int16[5] {                  1'                  10'                  100'                  1000'                  10000              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[] {                  1'                  (byte)servicePart'                  (byte)(floatNumber >> 16)'                   (byte)(floatNumber >> 8)'                   (byte)floatNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_5_bytes_array_BigEndian,The following statement contains a magic number: resultArray = new byte[] {                  1'                  (byte)servicePart'                  (byte)(floatNumber >> 16)'                   (byte)(floatNumber >> 8)'                   (byte)floatNumber              };
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,TruncateUTF8,The following statement contains a magic number: bt[maxSizeInBytes - 1] < 128
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,TruncateUTF8,The following statement contains a magic number: int qb = 2;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,TruncateUTF8,The following statement contains a magic number: j < 5
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,TruncateUTF8,The following statement contains a magic number: (bt[i] & 64) == 64
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,TruncateUTF8,The following statement contains a magic number: (bt[i] & 64) == 64
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_FixedSizeColumn,The following statement contains a magic number: fixedSize < 4
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_FixedSizeColumn,The following statement contains a magic number: return UInt16.MaxValue.To_2_bytes_array_BigEndian().EnlargeByteArray_LittleEndian(fixedSize + 2);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,To_FixedSizeColumn,The following statement contains a magic number: return ((ushort)text.Length).To_2_bytes_array_BigEndian().Concat(text).EnlargeByteArray_LittleEndian(fixedSize + 2);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,From_FixedSizeColumn,The following statement contains a magic number: value == null || value.Length < 2
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,From_FixedSizeColumn,The following statement contains a magic number: var bt = value.Substring(2' (int)size);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: byte[] tr = new byte[str.Length / 2];
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: d = str[i] - 48;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: d = d > 9 ? d - 7 : d;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: d = d > 9 ? d - 7 : d;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: tr[j] = (byte)(d * 16);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: d = str[i + 1] - 48;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: d = d > 9 ? d - 7 : d;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToByteArrayFromHex,The following statement contains a magic number: d = d > 9 ? d - 7 : d;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBytesString,The following statement contains a magic number: char[] digits = new char[dBytes.Length * 2];
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBytesString,The following statement contains a magic number: d2 = dBytes[i] % 16;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBytesString,The following statement contains a magic number: d1 = dBytes[i] / 16;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBytesString,The following statement contains a magic number: digits[2 * i] = _hexDigits[d1];
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBytesString,The following statement contains a magic number: digits[2 * i + 1] = _hexDigits[d2];
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: byte[] ret = new byte[8];
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[0] = (byte)((bt >> 7) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[1] = (byte)((bt >> 6) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[2] = (byte)((bt >> 5) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[2] = (byte)((bt >> 5) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[3] = (byte)((bt >> 4) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[3] = (byte)((bt >> 4) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[4] = (byte)((bt >> 3) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[4] = (byte)((bt >> 3) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[5] = (byte)((bt >> 2) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[5] = (byte)((bt >> 2) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[6] = (byte)((bt >> 1) & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ToBitArray,The following statement contains a magic number: ret[7] = (byte)(bt & 1);
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoOneBitUp_NoArrayGrow_BigEndian,The following statement contains a magic number: i == 0 && toAdd && bt[0] == 255
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoOneBitUp_NoArrayGrow_BigEndian,The following statement contains a magic number: toAdd && bt[i] == 255
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoOneBitUp_ArrayGrows_BigEndian,The following statement contains a magic number: i == 0 && toAdd && bt[0] == 255
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoOneBitUp_ArrayGrows_BigEndian,The following statement contains a magic number: toAdd && bt[i] == 255
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoOneBitDown_NoArrayGrow_BigEndian,The following statement contains a magic number: ret[i] = 255;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoUpNextByteStart_NoArrayGrow_BigEndian,The following statement contains a magic number: bt == null || bt.Length < 2
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoUpNextByteStart_NoArrayGrow_BigEndian,The following statement contains a magic number: i == 0 && toAdd && bt[0] == 255
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoDownNextByteStart_NoArrayGrow_BigEndian,The following statement contains a magic number: bt == null || bt.Length < 2
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,BytesAction_GoDownNextByteStart_NoArrayGrow_BigEndian,The following statement contains a magic number: ret[i] = 255;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfDynamicDataPointerIsEmpty,The following statement contains a magic number: initPtr == null || initPtr.Length != 16
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfDynamicDataPointerIsEmpty,The following statement contains a magic number: return (initPtr[0] | initPtr[1] | initPtr[2] | initPtr[3] | initPtr[4] | initPtr[5] | initPtr[6] | initPtr[7]) == 0;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfDynamicDataPointerIsEmpty,The following statement contains a magic number: return (initPtr[0] | initPtr[1] | initPtr[2] | initPtr[3] | initPtr[4] | initPtr[5] | initPtr[6] | initPtr[7]) == 0;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfDynamicDataPointerIsEmpty,The following statement contains a magic number: return (initPtr[0] | initPtr[1] | initPtr[2] | initPtr[3] | initPtr[4] | initPtr[5] | initPtr[6] | initPtr[7]) == 0;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfDynamicDataPointerIsEmpty,The following statement contains a magic number: return (initPtr[0] | initPtr[1] | initPtr[2] | initPtr[3] | initPtr[4] | initPtr[5] | initPtr[6] | initPtr[7]) == 0;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfDynamicDataPointerIsEmpty,The following statement contains a magic number: return (initPtr[0] | initPtr[1] | initPtr[2] | initPtr[3] | initPtr[4] | initPtr[5] | initPtr[6] | initPtr[7]) == 0;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfDynamicDataPointerIsEmpty,The following statement contains a magic number: return (initPtr[0] | initPtr[1] | initPtr[2] | initPtr[3] | initPtr[4] | initPtr[5] | initPtr[6] | initPtr[7]) == 0;
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_IfPointerIsEmpty,The following statement contains a magic number: switch (DefaultPointerLen)              {                  case 5:     //Gives ability to allocate file up to 1 terrabyte (1.099.511.627.775)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4]) == 0;                  case 8:     //UINT64.Max                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6] | ptr[7]) == 0;                  case 4:     //4GB                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3]) == 0;                  case 3:     //17MB                      return (ptr[0] | ptr[1] | ptr[2]) == 0;                  case 6:     //281 Terrabytes (281.474.976.710.655)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5]) == 0;                  case 7:      //72 Petabytes (72.057.594.037.927.935)                      return (ptr[0] | ptr[1] | ptr[2] | ptr[3] | ptr[4] | ptr[5] | ptr[6]) == 0;                  case 2:      //65 KB                      return (ptr[0] | ptr[1]) == 0;                  default:                      return ptr._ByteArrayEquals(new byte[DefaultPointerLen]);              }
Magic Number,DBreeze.Utils,BytesProcessing,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,_ByteArrayEquals_EqualityBrokenIndex,The following statement contains a magic number: return -2;
Magic Number,DBreeze.Utils,Crc16,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ComputeChecksum,The following statement contains a magic number: crc = (ushort)((crc >> 8) ^ Crc16.table[index]);
Magic Number,DBreeze.Utils,Crc16,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,ComputeChecksumBytes,The following statement contains a magic number: return new byte[] { (byte)(crc >> 8)' (byte)(crc & 0x00ff) };
Magic Number,DBreeze.Utils,Crc16,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\BytesProcessing.cs,InitializeMe,The following statement contains a magic number: j < 8
Magic Number,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlock,The following statement contains a magic number: dataBlockId = _row.Value.Substring((int)startIndex' 16);
Magic Number,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlock,The following statement contains a magic number: dataBlockId = this._row.Root.Tree.Cache.ReadValuePartially(this._row.LinkToValue' startIndex' 16' this._useCache' out valueStartPointer' out valueFullLength);
Magic Number,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlockWithFixedAddress,The following statement contains a magic number: dataBlockId = _row.Value.Substring((int)startIndex' 16);
Magic Number,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,GetDataBlockWithFixedAddress,The following statement contains a magic number: dataBlockId = this._row.Root.Tree.Cache.ReadValuePartially(this._row.LinkToValue' startIndex' 16' this._useCache' out valueStartPointer' out valueFullLength);
Magic Number,DBreeze.DataTypes,Row<TKey;TValue>,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\DataTypes\Row.cs,ObjectGet,The following statement contains a magic number: dataBlockId = _row.Value.Substring(startIndex' 16);
Magic Number,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,Insert,The following statement contains a magic number: refToInsertedValue = refToInsertedValue.EnlargeByteArray_BigEndian(8);
Magic Number,DBreeze.DataTypes,NestedTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\NestedTables\NestedTable.cs,InsertPart,The following statement contains a magic number: refToInsertedValue = refToInsertedValue.EnlargeByteArray_BigEndian(8);
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetPhysicalPathToTheUserTable,The following statement contains a magic number: ushort schemeProtocol = fullValue.Substring(0' 2).To_UInt16_BigEndian();
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetPhysicalPathToTheUserTable,The following statement contains a magic number: switch (schemeProtocol)                      {                          case 1:                              fileName = fullValue.Substring(2' 8).To_UInt64_BigEndian();                              break;                          default:                              throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.SCHEME_FILE_PROTOCOL_IS_UNKNOWN);                      }
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetPhysicalPathToTheUserTable,The following statement contains a magic number: switch (schemeProtocol)                      {                          case 1:                              fileName = fullValue.Substring(2' 8).To_UInt64_BigEndian();                              break;                          default:                              throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.SCHEME_FILE_PROTOCOL_IS_UNKNOWN);                      }
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTablePathFromTableName,The following statement contains a magic number: ushort schemeProtocol = fullValue.Substring(0' 2).To_UInt16_BigEndian();
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTablePathFromTableName,The following statement contains a magic number: switch (schemeProtocol)                  {                      case 1:                          fileName = fullValue.Substring(2' 8).To_UInt64_BigEndian();                          break;                      default:                          throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.SCHEME_FILE_PROTOCOL_IS_UNKNOWN);                  }
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTablePathFromTableName,The following statement contains a magic number: switch (schemeProtocol)                  {                      case 1:                          fileName = fullValue.Substring(2' 8).To_UInt64_BigEndian();                          break;                      default:                          throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.SCHEME_FILE_PROTOCOL_IS_UNKNOWN);                  }
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,The following statement contains a magic number: ushort schemeProtocol = fullValue.Substring(0' 2).To_UInt16_BigEndian();
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,The following statement contains a magic number: switch (schemeProtocol)                              {                                  case 1:                                      fileName = fullValue.Substring(2' 8).To_UInt64_BigEndian();                                      break;                                  default:                                      throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.SCHEME_FILE_PROTOCOL_IS_UNKNOWN);                              }
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetTable,The following statement contains a magic number: switch (schemeProtocol)                              {                                  case 1:                                      fileName = fullValue.Substring(2' 8).To_UInt64_BigEndian();                                      break;                                  default:                                      throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.SCHEME_FILE_PROTOCOL_IS_UNKNOWN);                              }
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,DeleteAllReleatedTableFiles,The following statement contains a magic number: this.Engine.Configuration.Backup.WriteBackupElement(ulFileName' 5' backup_filePosition' data);
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,GetUserTableNamesStartingWith,The following statement contains a magic number: ret.Add(row.Key.UTF8_GetString().Substring(3));
Magic Number,DBreeze,Scheme,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Engine\Scheme.cs,RenameTable,The following statement contains a magic number: System.Threading.Tasks.Task.Delay(TimeSpan.FromMilliseconds(200));
Magic Number,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdStartFrom,The following statement contains a magic number: startFrom = 255;
Magic Number,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdFromTo,The following statement contains a magic number: startFrom = 255;
Magic Number,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdSkipFrom,The following statement contains a magic number: startFrom = 255;
Magic Number,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwStartFrom,The following statement contains a magic number: startFrom = 256;
Magic Number,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwFromTo,The following statement contains a magic number: startFrom = 256;
Magic Number,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwSkipFrom,The following statement contains a magic number: startFrom = 256;
Magic Number,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,DeserializeRootNode,The following statement contains a magic number: this.LinkToZeroNode = me.Substring(2' DefaultPointerLen);
Magic Number,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,DeserializeRootNode,The following statement contains a magic number: this.RecordsCount = me.Substring(2 + DefaultPointerLen' 8).To_UInt64_BigEndian();
Magic Number,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,DeserializeRootNode,The following statement contains a magic number: this.RecordsCount = me.Substring(2 + DefaultPointerLen' 8).To_UInt64_BigEndian();
Magic Number,DBreeze.LianaTrie,LTrieRootNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\LTrieRootNode.cs,ChangeKey,The following statement contains a magic number: refToInsertedValue = refToInsertedValue.EnlargeByteArray_BigEndian(8);
Magic Number,DBreeze.LianaTrie,LTrieGenerationMap,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationMap.cs,Add,The following statement contains a magic number: Array.Resize(ref _d' key*2);
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,LTrieGenerationNode,The following statement contains a magic number: MaximumKidLineLength = 2 + DefaultPointerLen + (256 * (DefaultPointerLen + 2));
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,LTrieGenerationNode,The following statement contains a magic number: MaximumKidLineLength = 2 + DefaultPointerLen + (256 * (DefaultPointerLen + 2));
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,LTrieGenerationNode,The following statement contains a magic number: MaximumKidLineLength = 2 + DefaultPointerLen + (256 * (DefaultPointerLen + 2));
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,SetupKidWithValuePartially,The following statement contains a magic number: KidsInNode.AddKid(256' ptr);
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: int initRead = 111;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: byte[] btKeySize = new byte[] { data[1]' data[2] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: (data[3] & 0x80) > 0
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: oldData = data.Substring(0' 11 + totalReservedSize + keySize);
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: oldValue = data.Substring(11 + keySize' valueSize);
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: data.Length >= (11 + totalReservedSize + keySize)
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following statement contains a magic number: valueStartPtr = (long)ptr.DynamicLength_To_UInt64_BigEndian() + 11 + fullKey.Length;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteKidValuePartially,The following statement contains a magic number: valueStartPtr = (long)btFullValueStart.DynamicLength_To_UInt64_BigEndian() + 7 + fullKey.Length;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: int initRead = 111;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: byte[] btKeySize = new byte[] { data[1]' data[2] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: (data[3] & 0x80) > 0
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: uint newValueLength = 2147483648;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                                          break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                                          break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                                          break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                                          break;              }
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: oldData = data.Substring(0' 11 + totalReservedSize + keySize);
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following statement contains a magic number: data.Length >= (11 + totalReservedSize + keySize)
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,WriteKidValue,The following statement contains a magic number: uint valueLength = 2147483648;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc < 2
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 2;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc == 2
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 4;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc < 5
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 8;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc < 9
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 16;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc < 17
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 32;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc < 33
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 64;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc < 65
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 128;
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: kc < 129
Magic Number,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,GetQuantityOfReservationSlots,The following statement contains a magic number: return 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,LTrieKidsInNode,The following statement contains a magic number: _f = new byte[DefaultPointerLength + 2 + (256 * shift)];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,LTrieKidsInNode,The following statement contains a magic number: _f = new byte[DefaultPointerLength + 2 + (256 * shift)];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,AddKidPointer,The following statement contains a magic number: _f[(kidPlace + 2) + i] = ptr[i];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: int step = 2 + DefaultPointerLength;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                  {                      case 5:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                            notEmptyPointer = ((pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 6:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                            notEmptyPointer = ((pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      case 7:                          pb2 = bKids[j + 2];                          pb3 = bKids[j + 3];                          pb4 = bKids[j + 4];                          pb5 = bKids[j + 5];                          pb6 = bKids[j + 6];                          pb7 = bKids[j + 7];                          pb8 = bKids[j + 8];                            notEmptyPointer = ((pb8 != 0) || (pb7 != 0) || (pb6 != 0) || (pb5 != 0) || (pb4 != 0) || (pb3 != 0) || (pb2 != 0));                            break;                      default:                            notEmptyPointer = false;                            for (int ii = 0; ii < DefaultPointerLength; ii++)                          {                                if ((bKids[j + 2 + ii] != 0))                              {                                  notEmptyPointer = true;                                  break;                              }                              //notEmptyPointer |= (bKids[j + 2 + ii] != 0);                          }                          break;                    }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ParseKids,The following statement contains a magic number: switch (DefaultPointerLength)                      {                          case 5:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                                break;                          case 6:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                                break;                          case 7:                              _f[kidPlace + 2] = pb2;                              _f[kidPlace + 3] = pb3;                              _f[kidPlace + 4] = pb4;                              _f[kidPlace + 5] = pb5;                              _f[kidPlace + 6] = pb6;                              _f[kidPlace + 7] = pb7;                              _f[kidPlace + 8] = pb8;                                break;                          default:                              for (int ii = 0; ii < DefaultPointerLength; ii++)                              {                                  _f[kidPlace + 2 + ii] = bKids[j + 2 + ii];                              }                              break;                      }
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,AddKid,The following statement contains a magic number: kid == 256
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,RemoveAllKids,The following statement contains a magic number: _f = new byte[DefaultPointerLength + 2 + (256 * shift)];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,RemoveAllKids,The following statement contains a magic number: _f = new byte[DefaultPointerLength + 2 + (256 * shift)];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,FindNewMin,The following statement contains a magic number: i <= 256
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetMinKid,The following statement contains a magic number: ret.Val = 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetMaxKid,The following statement contains a magic number: ret.Val = 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetMaxKid,The following statement contains a magic number: ret.Ptr[i] = _f[(kidPlace + 2) + i];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,The following statement contains a magic number: ret.Val = 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,The following statement contains a magic number: startFrom == 256
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,The following statement contains a magic number: ret.Ptr[j] = _f[(kidPlace + 2) + j];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,The following statement contains a magic number: i <= 256
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,The following statement contains a magic number: ret.Val = 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,The following statement contains a magic number: ret.Ptr[j] = _f[(kidPlace + 2) + j];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForward,The following statement contains a magic number: i <= 256
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsBackward,The following statement contains a magic number: ret.Ptr[j] = _f[(kidPlace + 2) + j];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsBackward,The following statement contains a magic number: this.count > 0 && startFrom != 256
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsBackward,The following statement contains a magic number: ret.Val = 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsBackward,The following statement contains a magic number: ret.Ptr[j] = _f[(kidPlace + 2) + j];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsBackward,The following statement contains a magic number: ret.Val = 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ReplaceValueLinkOnKidLink,The following statement contains a magic number: ptr[i] = _f[(kidPlace + 2) + i];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,ReplaceValueLinkOnKidLink,The following statement contains a magic number: _f[(kidPlace + 2) + i] = 0;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidValue,The following statement contains a magic number: kidDef.Val = 256;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKid,The following statement contains a magic number: Buffer.BlockCopy(_f' (kidPlace + 2)' kidDef.Ptr' 0' DefaultPointerLength);
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetPointerToTheKid,The following statement contains a magic number: Buffer.BlockCopy(_f' (kidPlace + 2)' ptr' 0' DefaultPointerLength);
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForSave,The following statement contains a magic number: byte[] ret = new byte[DefaultPointerLength + 2 + (256 * shift)];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForSave,The following statement contains a magic number: byte[] ret = new byte[DefaultPointerLength + 2 + (256 * shift)];
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForSave,The following statement contains a magic number: Buffer.BlockCopy(_f' kidPlace + 2' ret' realcnt + 2' DefaultPointerLength);
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForSave,The following statement contains a magic number: Buffer.BlockCopy(_f' kidPlace + 2' ret' realcnt + 2' DefaultPointerLength);
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForSave,The following statement contains a magic number: realcnt += 2 + DefaultPointerLength;
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForSave,The following statement contains a magic number: i <= 256
Magic Number,DBreeze.LianaTrie,LTrieKidsInNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieKidsInNode.cs,GetKidsForSave,The following statement contains a magic number: int addSize = (2 + DefaultPointerLength) * toAdd;
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,GenerationNodeRead,The following statement contains a magic number: line == null || line.Length < 2
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,GenerationNodeRead,The following statement contains a magic number: return line.Substring(2' sLen);
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadDynamicDataBlock,The following statement contains a magic number: byte[] ptr = initPtr.Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadDynamicDataBlock,The following statement contains a magic number: byte[] btDataLen = initPtr.Substring(12' 4);
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadDynamicDataBlock,The following statement contains a magic number: byte[] btDataLen = initPtr.Substring(12' 4);
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,WriteDynamicDataBlock,The following statement contains a magic number: ret = ret.EnlargeByteArray_BigEndian(8);
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: int initRead = 4096;
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: ushort keySize = (new byte[] { data[1]' data[2] }).To_UInt16_BigEndian();
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: byte[] btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: (data[3] & 0x80) > 0
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: int initRead = 111;
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: ushort keySize = (new byte[] { data[1]' data[2] }).To_UInt16_BigEndian();
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //First insert - no reservation identifiers for the space                        //Expanding read if necessary                      if (keySize > (initRead - 7))   //>= ?                      {                          initRead = keySize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                                              }                        key = data.Substring(7' keySize);                        break;                  case 1:                      //Expanding read if necessary                      if (keySize > (initRead - 11))  //>= ?                      {                          initRead = keySize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(11' keySize);                        break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //First insert - no reservation identifiers for the space                        //Expanding read if necessary                      if (keySize > (initRead - 7))   //>= ?                      {                          initRead = keySize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                                              }                        key = data.Substring(7' keySize);                        break;                  case 1:                      //Expanding read if necessary                      if (keySize > (initRead - 11))  //>= ?                      {                          initRead = keySize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(11' keySize);                        break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //First insert - no reservation identifiers for the space                        //Expanding read if necessary                      if (keySize > (initRead - 7))   //>= ?                      {                          initRead = keySize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                                              }                        key = data.Substring(7' keySize);                        break;                  case 1:                      //Expanding read if necessary                      if (keySize > (initRead - 11))  //>= ?                      {                          initRead = keySize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(11' keySize);                        break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //First insert - no reservation identifiers for the space                        //Expanding read if necessary                      if (keySize > (initRead - 7))   //>= ?                      {                          initRead = keySize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                                              }                        key = data.Substring(7' keySize);                        break;                  case 1:                      //Expanding read if necessary                      if (keySize > (initRead - 11))  //>= ?                      {                          initRead = keySize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(11' keySize);                        break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //First insert - no reservation identifiers for the space                        //Expanding read if necessary                      if (keySize > (initRead - 7))   //>= ?                      {                          initRead = keySize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                                              }                        key = data.Substring(7' keySize);                        break;                  case 1:                      //Expanding read if necessary                      if (keySize > (initRead - 11))  //>= ?                      {                          initRead = keySize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(11' keySize);                        break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //First insert - no reservation identifiers for the space                        //Expanding read if necessary                      if (keySize > (initRead - 7))   //>= ?                      {                          initRead = keySize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                                              }                        key = data.Substring(7' keySize);                        break;                  case 1:                      //Expanding read if necessary                      if (keySize > (initRead - 11))  //>= ?                      {                          initRead = keySize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(11' keySize);                        break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: int initRead = 4096;
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: (data[3] & 0x80) > 0
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: keySize = (new byte[] { data[1]' data[2] }).To_UInt16_BigEndian();
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: int initRead = 111;
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: btValueSize = new byte[] { data[3]' data[4]' data[5]' data[6] };
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: (data[3] & 0x80) > 0
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: keySize = (new byte[] { data[1]' data[2] }).To_UInt16_BigEndian();
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following statement contains a magic number: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Magic Number,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,MemoryStorage,The following statement contains a magic number: initialCapacity = 5;
Magic Number,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,MemoryStorage,The following statement contains a magic number: initialCapacity < 5
Magic Number,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,MemoryStorage,The following statement contains a magic number: increaseOnBytes = 5;
Magic Number,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,MemoryStorage,The following statement contains a magic number: increaseOnBytes < 5
Magic Number,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,Resize,The following statement contains a magic number: switch (_expandStrategy)              {                  case eMemoryExpandStartegy.MULTIPLY_CAPACITY_BY_2:                        if (_capacity * 2 < upTo)                      {                          x = (int)Math.Ceiling((double)upTo / ((double) 2 * _capacity));                      }                      _capacity = _capacity * 2 * x;                                                          break;                  case eMemoryExpandStartegy.FIXED_LENGTH_INCREASE:                        if (_capacity + _increaseOnInBytes < upTo)                      {                          x = (int)Math.Ceiling((double)(upTo - _capacity) / (double)_increaseOnInBytes);                      }                      _capacity = _capacity + (_increaseOnInBytes * x);                        break;              }
Magic Number,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,Resize,The following statement contains a magic number: switch (_expandStrategy)              {                  case eMemoryExpandStartegy.MULTIPLY_CAPACITY_BY_2:                        if (_capacity * 2 < upTo)                      {                          x = (int)Math.Ceiling((double)upTo / ((double) 2 * _capacity));                      }                      _capacity = _capacity * 2 * x;                                                          break;                  case eMemoryExpandStartegy.FIXED_LENGTH_INCREASE:                        if (_capacity + _increaseOnInBytes < upTo)                      {                          x = (int)Math.Ceiling((double)(upTo - _capacity) / (double)_increaseOnInBytes);                      }                      _capacity = _capacity + (_increaseOnInBytes * x);                        break;              }
Magic Number,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,Resize,The following statement contains a magic number: switch (_expandStrategy)              {                  case eMemoryExpandStartegy.MULTIPLY_CAPACITY_BY_2:                        if (_capacity * 2 < upTo)                      {                          x = (int)Math.Ceiling((double)upTo / ((double) 2 * _capacity));                      }                      _capacity = _capacity * 2 * x;                                                          break;                  case eMemoryExpandStartegy.FIXED_LENGTH_INCREASE:                        if (_capacity + _increaseOnInBytes < upTo)                      {                          x = (int)Math.Ceiling((double)(upTo - _capacity) / (double)_increaseOnInBytes);                      }                      _capacity = _capacity + (_increaseOnInBytes * x);                        break;              }
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsData = new MemoryStorage(1024 * 16' 1024 * 500' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsData = new MemoryStorage(1024 * 16' 1024 * 500' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsData = new MemoryStorage(1024 * 16' 1024 * 500' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsData = new MemoryStorage(1024 * 16' 1024 * 500' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsRollback = new MemoryStorage(1024 * 16' 1024 * 128' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsRollback = new MemoryStorage(1024 * 16' 1024 * 128' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsRollback = new MemoryStorage(1024 * 16' 1024 * 128' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsRollback = new MemoryStorage(1024 * 16' 1024 * 128' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsRollbackHelper = new MemoryStorage(8' 10' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsRollbackHelper = new MemoryStorage(8' 10' MemoryStorage.eMemoryExpandStartegy.FIXED_LENGTH_INCREASE);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,InitFiles,The following statement contains a magic number: this._fsData.Write_ToTheEnd(new byte[64]);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_WriteToTheEnd,The following statement contains a magic number: return ((ulong)position).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,FlushRandomBuffer,The following statement contains a magic number: offset = ((ulong)de.Key).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,FlushRandomBuffer,The following statement contains a magic number: _rollbackCache.Add(de.Key' new r { o = eofRollback + 1 + offset.Length + 4' l = de.Value.Length });
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitRollback,The following statement contains a magic number: byte[] btWork = new byte[8];
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitRollback,The following statement contains a magic number: RIC.RollbackHelperFileRead(btWork' 0' 8);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,InitRollback,The following statement contains a magic number: RIC.RollbackHelperFileWrite(eofRollback.To_8_bytes_array_BigEndian()' 0' 8' true);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,RestoreInitRollback,The following statement contains a magic number: byte[] rba = new byte[100 * 1024];
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,RestoreInitRollback,The following statement contains a magic number: byte[] rba = new byte[100 * 1024];
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The following statement contains a magic number: protocolData.Length < (1 + DefaultPointerLen + 4)
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The following statement contains a magic number: int len = (int)(protocolData.Substring(1 + DefaultPointerLen' 4).To_UInt32_BigEndian());
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The following statement contains a magic number: data = protocolData.Substring(1 + DefaultPointerLen + 4' len);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The following statement contains a magic number: left = protocolData.Substring(len + 1 + DefaultPointerLen + 4' protocolData.Length);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,DoProtocol1,The following statement contains a magic number: protocolData.Length >= len + 1 + DefaultPointerLen + 4
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_WriteToTheEnd,The following statement contains a magic number: return ((ulong)position).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_WriteToTheEnd,The following statement contains a magic number: return ((ulong)position).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,FlushRandomBuffer,The following statement contains a magic number: offset = ((ulong)de.Key).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,FlushRandomBuffer,The following statement contains a magic number: _rollbackCache.Add(de.Key' new r { o = eofRollback + 1 + offset.Length + 4' l = de.Value.Length });
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,FlushRandomBuffer,The following statement contains a magic number: RIC.RollbackHelperFileWrite(eofRollback.To_8_bytes_array_BigEndian()' 0' 8' true);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,FlushRandomBuffer,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Commit,The following statement contains a magic number: RIC.RollbackHelperFileWrite(eofRollback.To_8_bytes_array_BigEndian()' 0' 8' true);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Commit,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,TransactionalCommitIsFinished,The following statement contains a magic number: RIC.RollbackHelperFileWrite(eofRollback.To_8_bytes_array_BigEndian()' 0' 8' true);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,TransactionalCommitIsFinished,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Rollback,The following statement contains a magic number: RIC.RollbackHelperFileWrite(eofRollback.To_8_bytes_array_BigEndian()' 0' 8' true);
Magic Number,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Rollback,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following statement contains a magic number: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Magic Number,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,GetFileStream,The following statement contains a magic number: DateTime dtBase = new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,DBreeze.Storage,BackupFileNamesParser,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,ParseFilename,The following statement contains a magic number: switch (fileName)                  {                      case "_DBreezeSchema":                          return UInt64.MaxValue - 1;                      case "_DBreezeTranJrnl":                          return UInt64.MaxValue - 2;                      case "_DBreezeTextIndexer":                          return UInt64.MaxValue - 3;                      case "_DBreezeResources":                          return UInt64.MaxValue - 4;                      default:                          return Convert.ToUInt64(fileName);                  }
Magic Number,DBreeze.Storage,BackupFileNamesParser,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,ParseFilename,The following statement contains a magic number: switch (fileName)                  {                      case "_DBreezeSchema":                          return UInt64.MaxValue - 1;                      case "_DBreezeTranJrnl":                          return UInt64.MaxValue - 2;                      case "_DBreezeTextIndexer":                          return UInt64.MaxValue - 3;                      case "_DBreezeResources":                          return UInt64.MaxValue - 4;                      default:                          return Convert.ToUInt64(fileName);                  }
Magic Number,DBreeze.Storage,BackupFileNamesParser,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,ParseFilename,The following statement contains a magic number: switch (fileName)                  {                      case "_DBreezeSchema":                          return UInt64.MaxValue - 1;                      case "_DBreezeTranJrnl":                          return UInt64.MaxValue - 2;                      case "_DBreezeTextIndexer":                          return UInt64.MaxValue - 3;                      case "_DBreezeResources":                          return UInt64.MaxValue - 4;                      default:                          return Convert.ToUInt64(fileName);                  }
Magic Number,DBreeze.Storage,BackupFileNamesParser,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,ParseFilenameBack,The following statement contains a magic number: switch (filenumber)                  {                      case (UInt64.MaxValue - 1):                          return "_DBreezeSchema";                      case (UInt64.MaxValue - 2):                          return "_DBreezeTranJrnl";                      case (UInt64.MaxValue - 3):                          return "_DBreezeTextIndexer";                      case (UInt64.MaxValue - 4):                          return "_DBreezeResources";                      default:                          return filenumber.ToString();                  }
Magic Number,DBreeze.Storage,BackupFileNamesParser,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,ParseFilenameBack,The following statement contains a magic number: switch (filenumber)                  {                      case (UInt64.MaxValue - 1):                          return "_DBreezeSchema";                      case (UInt64.MaxValue - 2):                          return "_DBreezeTranJrnl";                      case (UInt64.MaxValue - 3):                          return "_DBreezeTextIndexer";                      case (UInt64.MaxValue - 4):                          return "_DBreezeResources";                      default:                          return filenumber.ToString();                  }
Magic Number,DBreeze.Storage,BackupFileNamesParser,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,ParseFilenameBack,The following statement contains a magic number: switch (filenumber)                  {                      case (UInt64.MaxValue - 1):                          return "_DBreezeSchema";                      case (UInt64.MaxValue - 2):                          return "_DBreezeTranJrnl";                      case (UInt64.MaxValue - 3):                          return "_DBreezeTextIndexer";                      case (UInt64.MaxValue - 4):                          return "_DBreezeResources";                      default:                          return filenumber.ToString();                  }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: OnRestore(new BackupRestorationProcess()                      {                          ReadinessInProcent = 100'                          Finished = true                      });
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: int readinessInProcent = Convert.ToInt32((processed * 100) / totalBackupFileLength);
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: byte[] readOut = new byte[100000];
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: readinessInProcent = Convert.ToInt32((processed * 100) / totalBackupFileLength);
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: pack == null || pack.Length < 4
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: packSize = pack.Substring(0' 4).To_UInt32_BigEndian();
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: this.DoPackage(pack.Substring(4' (int)packSize));
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: pack = pack.Substring(4 + (int)packSize);
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: pack.Length >= 4 + packSize
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,StartRestoration,The following statement contains a magic number: OnRestore(new BackupRestorationProcess()                  {                      ReadinessInProcent = 100'                      Finished = true                  });
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: ulong fileNumber = pack.Substring(0' 8).To_UInt64_BigEndian();
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: byte type = pack.Substring(8' 1)[0];
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following statement contains a magic number: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitRollback,The following statement contains a magic number: byte[] btWork = new byte[8];
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitRollback,The following statement contains a magic number: _fsRollbackHelper.Read(btWork' 0' 8);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,InitRollback,The following statement contains a magic number: _fsRollbackHelper.Write(eofRollback.To_8_bytes_array_BigEndian()' 0' 8);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,RestoreInitRollback,The following statement contains a magic number: byte[] rba = new byte[100 * 1024];
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,RestoreInitRollback,The following statement contains a magic number: byte[] rba = new byte[100 * 1024];
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The following statement contains a magic number: protocolData.Length < (1 + DefaultPointerLen + 4)
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The following statement contains a magic number: int len = (int)(protocolData.Substring(1 + DefaultPointerLen' 4).To_UInt32_BigEndian());
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The following statement contains a magic number: data = protocolData.Substring(1 + DefaultPointerLen + 4' len);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The following statement contains a magic number: left = protocolData.Substring(len + 1 + DefaultPointerLen + 4' protocolData.Length);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,DoProtocol1,The following statement contains a magic number: protocolData.Length >= len + 1 + DefaultPointerLen + 4
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_WriteToTheEnd,The following statement contains a magic number: return ((ulong)position).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_WriteToTheEnd,The following statement contains a magic number: return ((ulong)position).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,FlushRandomBuffer,The following statement contains a magic number: offset = ((ulong)de.Key).To_8_bytes_array_BigEndian().Substring(8 - DefaultPointerLen' DefaultPointerLen);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,FlushRandomBuffer,The following statement contains a magic number: _rollbackCache.Add(de.Key' new r { o = eofRollback + 1 + offset.Length + 4' l = de.Value.Length });
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,FlushRandomBuffer,The following statement contains a magic number: _fsRollbackHelper.Write(eofRollback.To_8_bytes_array_BigEndian()' 0' 8);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,FlushRandomBuffer,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Commit,The following statement contains a magic number: _fsRollbackHelper.Write(eofRollback.To_8_bytes_array_BigEndian()' 0' 8);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Commit,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,TransactionalCommitIsFinished,The following statement contains a magic number: _fsRollbackHelper.Write(eofRollback.To_8_bytes_array_BigEndian()' 0' 8);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,TransactionalCommitIsFinished,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Rollback,The following statement contains a magic number: _fsRollbackHelper.Write(eofRollback.To_8_bytes_array_BigEndian()' 0' 8);
Magic Number,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Rollback,The following statement contains a magic number: this._configuration.Backup.WriteBackupElement(ulFileName' 2' 0' eofRollback.To_8_bytes_array_BigEndian());
Magic Number,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,CreateBlock,The following statement contains a magic number: this._tsm.WordsPrepare(block._fullMatchWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' true' ref block.ParsedWords);
Magic Number,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,CreateBlock,The following statement contains a magic number: this._tsm.WordsPrepare(block._containsWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' false' ref block.ParsedWords);
Magic Number,DBreeze.TextSearch,TextDeferredIndexer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextDeferredIndexer.cs,TextDeferredIndexer,The following statement contains a magic number: LTrie.Storage.Length > 100000
Magic Number,DBreeze.TextSearch,TextDeferredIndexer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextDeferredIndexer.cs,Indexer,The following statement contains a magic number: int maximalIterations = 10;
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,GetDocumentsSearchables,The following statement contains a magic number: its = new ITS()              {                  e2i = tran.SelectTable<byte>(tableName' 1' 0)'                  srch = tran.SelectTable<byte>(tableName' 3' 0)'              };
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The following statement contains a magic number: its = new ITS()                  {                      e2i = tran.InsertTable<byte>(tableName' 1' 0)'                      i2e = tran.InsertTable<byte>(tableName' 2' 0)'                      srch = tran.InsertTable<byte>(tableName' 3' 0)'                  };
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The following statement contains a magic number: its = new ITS()                  {                      e2i = tran.InsertTable<byte>(tableName' 1' 0)'                      i2e = tran.InsertTable<byte>(tableName' 2' 0)'                      srch = tran.InsertTable<byte>(tableName' 3' 0)'                  };
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: its.srch = itran.InsertTable<byte>(tbl.Key' 3' 0);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: its.blocks = itran.InsertTable<byte>(tbl.Key' 10' 0);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: its.words = itran.InsertTable<byte>(tbl.Key' 20' 0);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: its.currentBlock = itran.Select<int' uint>(tbl.Key' 11).Value;
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: its.numberInBlock = itran.Select<int' uint>(tbl.Key' 12).Value;
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: var litRow = itran.Select<byte' byte[]>(tbl.Key' 4);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: Action<string> createNew = (word) =>                  {                      if (!tmpWrds.ContainsKey(word))                      {                          rWord = its.words.Select<string' byte[]>(word' true);                          wd = new WordInDocs();                            if (rWord.Exists)                          {                              wd.BlockId = rWord.Value.Substring(0' 4).To_UInt32_BigEndian();                              wd.NumberInBlock = rWord.Value.Substring(4' 4).To_UInt32_BigEndian();                          }                          else                          {                              its.numberInBlock++;                                if (its.numberInBlock > itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.QuantityOfWordsInBlock)  //Quantity of words (WAHs) in block                              {                                  its.currentBlock++;                                  its.numberInBlock = 1;                              }                                wd.BlockId = its.currentBlock;                              wd.NumberInBlock = its.numberInBlock;                              //Inserting new definition                                    // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                              if (tmpWrds.Count < 100000)                                  tmpWrds[word] = wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian());                              else                              {                                  // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                                    foreach (var tmpwrd in tmpWrds)                                  {                                      its.words.Insert<string' byte[]>(tmpwrd.Key' tmpwrd.Value);                                    }                                  tmpWrds.Clear();                              }                            }                          tpl = new Tuple<HashSet<int>' HashSet<int>' WordInDocs>(new HashSet<int>()' new HashSet<int>()' wd);                          ds[word] = tpl;                      }                  };
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: Action<string> createNew = (word) =>                  {                      if (!tmpWrds.ContainsKey(word))                      {                          rWord = its.words.Select<string' byte[]>(word' true);                          wd = new WordInDocs();                            if (rWord.Exists)                          {                              wd.BlockId = rWord.Value.Substring(0' 4).To_UInt32_BigEndian();                              wd.NumberInBlock = rWord.Value.Substring(4' 4).To_UInt32_BigEndian();                          }                          else                          {                              its.numberInBlock++;                                if (its.numberInBlock > itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.QuantityOfWordsInBlock)  //Quantity of words (WAHs) in block                              {                                  its.currentBlock++;                                  its.numberInBlock = 1;                              }                                wd.BlockId = its.currentBlock;                              wd.NumberInBlock = its.numberInBlock;                              //Inserting new definition                                    // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                              if (tmpWrds.Count < 100000)                                  tmpWrds[word] = wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian());                              else                              {                                  // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                                    foreach (var tmpwrd in tmpWrds)                                  {                                      its.words.Insert<string' byte[]>(tmpwrd.Key' tmpwrd.Value);                                    }                                  tmpWrds.Clear();                              }                            }                          tpl = new Tuple<HashSet<int>' HashSet<int>' WordInDocs>(new HashSet<int>()' new HashSet<int>()' wd);                          ds[word] = tpl;                      }                  };
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: Action<string> createNew = (word) =>                  {                      if (!tmpWrds.ContainsKey(word))                      {                          rWord = its.words.Select<string' byte[]>(word' true);                          wd = new WordInDocs();                            if (rWord.Exists)                          {                              wd.BlockId = rWord.Value.Substring(0' 4).To_UInt32_BigEndian();                              wd.NumberInBlock = rWord.Value.Substring(4' 4).To_UInt32_BigEndian();                          }                          else                          {                              its.numberInBlock++;                                if (its.numberInBlock > itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.QuantityOfWordsInBlock)  //Quantity of words (WAHs) in block                              {                                  its.currentBlock++;                                  its.numberInBlock = 1;                              }                                wd.BlockId = its.currentBlock;                              wd.NumberInBlock = its.numberInBlock;                              //Inserting new definition                                    // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                              if (tmpWrds.Count < 100000)                                  tmpWrds[word] = wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian());                              else                              {                                  // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                                    foreach (var tmpwrd in tmpWrds)                                  {                                      its.words.Insert<string' byte[]>(tmpwrd.Key' tmpwrd.Value);                                    }                                  tmpWrds.Clear();                              }                            }                          tpl = new Tuple<HashSet<int>' HashSet<int>' WordInDocs>(new HashSet<int>()' new HashSet<int>()' wd);                          ds[word] = tpl;                      }                  };
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: Action<string> createNew = (word) =>                  {                      if (!tmpWrds.ContainsKey(word))                      {                          rWord = its.words.Select<string' byte[]>(word' true);                          wd = new WordInDocs();                            if (rWord.Exists)                          {                              wd.BlockId = rWord.Value.Substring(0' 4).To_UInt32_BigEndian();                              wd.NumberInBlock = rWord.Value.Substring(4' 4).To_UInt32_BigEndian();                          }                          else                          {                              its.numberInBlock++;                                if (its.numberInBlock > itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.QuantityOfWordsInBlock)  //Quantity of words (WAHs) in block                              {                                  its.currentBlock++;                                  its.numberInBlock = 1;                              }                                wd.BlockId = its.currentBlock;                              wd.NumberInBlock = its.numberInBlock;                              //Inserting new definition                                    // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                              if (tmpWrds.Count < 100000)                                  tmpWrds[word] = wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian());                              else                              {                                  // its.words.Insert<string' byte[]>(word' wd.BlockId.To_4_bytes_array_BigEndian().Concat(wd.NumberInBlock.To_4_bytes_array_BigEndian()));                                    foreach (var tmpwrd in tmpWrds)                                  {                                      its.words.Insert<string' byte[]>(tmpwrd.Key' tmpwrd.Value);                                    }                                  tmpWrds.Clear();                              }                            }                          tpl = new Tuple<HashSet<int>' HashSet<int>' WordInDocs>(new HashSet<int>()' new HashSet<int>()' wd);                          ds[word] = tpl;                      }                  };
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: tmp.CopyInside(4' btBlock);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: (btBlock.Length + 4) < itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.MinimalBlockReservInBytes
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: blockSize = val.Substring(0' 4).To_Int32_BigEndian();
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: btBlock = val.Substring(4' blockSize);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: tmp.CopyInside(4' btBlock);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: (btBlock.Length + 4) < itran._transactionUnit.TransactionsCoordinator._engine.Configuration.TextSearchConfig.MinimalBlockReservInBytes
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: itran.Insert<int' uint>(tbl.Key' 11' its.currentBlock);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: itran.Insert<int' uint>(tbl.Key' 12' its.numberInBlock);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The following statement contains a magic number: itran.Insert<byte' byte[]>(tbl.Key' 4' btUdtStart);
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,GetWordsDefinitionFromText,The following statement contains a magic number: containsMinimalLength = 3;
Magic Number,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,GetWordsDefinitionFromText,The following statement contains a magic number: containsMinimalLength < 3
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: this.tbWords = this._tran.SelectTable<byte>(this._tableName' 20' 0);
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: this.tbBlocks = this._tran.SelectTable<byte>(this._tableName' 10' 0);
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: i2e = this._tran.SelectTable<byte>(this._tableName' 2' 0);
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: wid = new TextSearchHandler.WordInDocs()                          {                              BlockId = row2.Value.Substring(0' 4).To_UInt32_BigEndian()'                              NumberInBlock = row2.Value.Substring(4' 4).To_UInt32_BigEndian()                          };
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: wid = new TextSearchHandler.WordInDocs()                          {                              BlockId = row2.Value.Substring(0' 4).To_UInt32_BigEndian()'                              NumberInBlock = row2.Value.Substring(4' 4).To_UInt32_BigEndian()                          };
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: wid = new TextSearchHandler.WordInDocs()                          {                              BlockId = row2.Value.Substring(0' 4).To_UInt32_BigEndian()'                              NumberInBlock = row2.Value.Substring(4' 4).To_UInt32_BigEndian()                          };
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: btBlock = btBlock.Substring(4' btBlock.Substring(0' 4).To_Int32_BigEndian());
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,ComputeWordsOrigin,The following statement contains a magic number: btBlock = btBlock.Substring(4' btBlock.Substring(0' 4).To_Int32_BigEndian());
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockAnd,The following statement contains a magic number: this.WordsPrepare(fullMatchWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' true' ref sb.ParsedWords);
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockAnd,The following statement contains a magic number: this.WordsPrepare(containsWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' false' ref sb.ParsedWords);
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockOr,The following statement contains a magic number: this.WordsPrepare(fullMatchWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' true' ref sb.ParsedWords);
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,BlockOr,The following statement contains a magic number: this.WordsPrepare(containsWords.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries).Where(r => r.Length > 2)' false' ref sb.ParsedWords);
Magic Number,DBreeze.TextSearch,TextSearchTable,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchTable.cs,WordsPrepare,The following statement contains a magic number: word.Trim().Length < 2 || word.Contains(" ")
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,WABI,The following statement contains a magic number: bt = array.Substring(2' array.Length);
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,Add,The following statement contains a magic number: int byteNumber = Convert.ToInt32(index / 8);
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,Add,The following statement contains a magic number: int rest = index % 8;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,Contains,The following statement contains a magic number: int byteNumber = Convert.ToInt32(index / 8);
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,Contains,The following statement contains a magic number: int rest = index % 8;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,The following statement contains a magic number: uint docId = Convert.ToUInt32(MinLenght * 8) - 1;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,The following statement contains a magic number: res = 255;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,The following statement contains a magic number: start = docStart / 8;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,The following statement contains a magic number: stop = docStop / 8;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,The following statement contains a magic number: docId = Convert.ToUInt32((start + 1) * 8) - 1;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_AND_logic,The following statement contains a magic number: res = 255;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_OR_logic,The following statement contains a magic number: uint docId = Convert.ToUInt32(MaxLenght * 8) - 1;
Magic Number,DBreeze.TextSearch,WABI,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\WABI.cs,TextSearch_OR_logic,The following statement contains a magic number: int[] el = new int[8];
Magic Number,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ObjectInsert,The following statement contains a magic number: ptr = row.Value.Substring(0' 16);
Magic Number,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,ObjectRemove,The following statement contains a magic number: ptr = row.Value.Substring(0' 16);
Magic Number,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,Insert,The following statement contains a magic number: refToInsertedValue = refToInsertedValue.EnlargeByteArray_BigEndian(8);
Magic Number,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,InsertPart,The following statement contains a magic number: refToInsertedValue = refToInsertedValue.EnlargeByteArray_BigEndian(8);
Magic Number,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,TextRemoveAll,The following statement contains a magic number: tsh.InsertDocumentText(this' tableName' documentId' String.Empty'String.Empty' deferredIndexing'3' TextSearchHandler.eInsertMode.Insert);
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,DataAsTree,The following statement contains a magic number: name.To_UTF8Bytes().Length > 256
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupReadTables,The following statement contains a magic number: this.RootNode.nt2Read = this.RootNode.Transaction.SelectTable(this.RootNode.DBreezeTableName' new byte[] { 2 }' 0);
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupReadTables,The following statement contains a magic number: this.RootNode.nt3Read = this.RootNode.Transaction.SelectTable(this.RootNode.DBreezeTableName' new byte[] { 3 }' 0);
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupWriteTables,The following statement contains a magic number: this.RootNode.nt2Write = this.RootNode.Transaction.InsertTable(this.RootNode.DBreezeTableName' new byte[] { 2 }' 0);
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupWriteTables,The following statement contains a magic number: this.RootNode.nt3Write = this.RootNode.Transaction.InsertTable(this.RootNode.DBreezeTableName' new byte[] { 3 }' 0);
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,GetNodesByName,The following statement contains a magic number: i += 16;
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,GetNodesByName,The following statement contains a magic number: (prt = val.Substring(i' 16)) != null
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupValueRowFromNode,The following statement contains a magic number: name.Length > 256
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: node.ParentNodeId = row.Key.Substring(0' 8).To_Int64_BigEndian();
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: node.NodeId = row.Key.Substring(8' 8).To_Int64_BigEndian();
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following statement contains a magic number: node.NodeId = row.Key.Substring(8' 8).To_Int64_BigEndian();
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,RemoveOldNodeFromNameIndex,The following statement contains a magic number: i += 16;
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,RemoveOldNodeFromNameIndex,The following statement contains a magic number: size += 16;
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,RemoveOldNodeFromNameIndex,The following statement contains a magic number: (prt = val.Substring(i' 16)) != null
Magic Number,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,RemoveOldNodeFromNameIndex,The following statement contains a magic number: i += 16;
Magic Number,DBreeze.SchemeInternal,DbUserTables,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\SchemeInternal\Sheme.UserTable.cs,UserTablePatternIsOk,The following statement contains a magic number: switch (tableName[i])                  {                      case '*':                          //Substring till * and return                          return tableName.Substring(0' i+1);                      case '$':                          //Substring till $ and return                          return tableName.Substring(0' i + 1);                      case '#':                            if ((i + 2) > (tableName.Length - 1))                              throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TABLE_PATTERN_SYMBOLS_AFTER_SHARP);                             if (tableName[i + 1] != '/')                              throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TABLE_PATTERN_SYMBOLS_AFTER_SHARP);                                                   break;                  }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,OpenRemoteTable,The following statement contains a magic number: _DataFileLength = BitConverter.ToInt64(ret' 9);
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,OpenRemoteTable,The following statement contains a magic number: _RollbackFileLength = BitConverter.ToInt64(ret' 17);
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,OpenRemoteTable,The following statement contains a magic number: _RollbackHelperFileLength = BitConverter.ToInt64(ret' 25);
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,CloseRemoteTable,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 2 }                                .ConcatMany(BitConverter.GetBytes(RemoteTableId));
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,CloseRemoteTable,The following statement contains a magic number: ret[0] == 255
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,DeleteRemoteTable,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 3 }                                .ConcatMany(BitConverter.GetBytes(RemoteTableId));
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,DeleteRemoteTable,The following statement contains a magic number: ret[0] == 255
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,DataFileWrite,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 4 }                                .ConcatMany(                                BitConverter.GetBytes(RemoteTableId)'                                BitConverter.GetBytes(this._DataFilePosition)'                                (withFlush) ? new byte[] {1} : new byte[] {0}'                                array.Substring(offset'count)                                );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackFileWrite,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 5 }                               .ConcatMany(                               BitConverter.GetBytes(RemoteTableId)'                               BitConverter.GetBytes(this._RollbackFilePosition)'                               (withFlush) ? new byte[] { 1 } : new byte[] { 0 }'                               array.Substring(offset' count)                               );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackHelperFileWrite,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 6 }                               .ConcatMany(                               BitConverter.GetBytes(RemoteTableId)'                               BitConverter.GetBytes(this._RollbackHelperFilePosition)'                               (withFlush) ? new byte[] { 1 } : new byte[] { 0 }'                               array.Substring(offset' count)                               );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,DataFileRead,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 7 }                                .ConcatMany(                                BitConverter.GetBytes(RemoteTableId)'                                BitConverter.GetBytes(this._DataFilePosition)'                                                             BitConverter.GetBytes(count-offset)                                );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackFileRead,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 8 }                                .ConcatMany(                                BitConverter.GetBytes(RemoteTableId)'                                BitConverter.GetBytes(this._RollbackFilePosition)'                                BitConverter.GetBytes(count - offset)                                );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackHelperFileRead,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 9 }                                .ConcatMany(                                BitConverter.GetBytes(RemoteTableId)'                                BitConverter.GetBytes(this._RollbackHelperFilePosition)'                                BitConverter.GetBytes(count - offset)                                );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,DataFileFlush,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 10 }                               .ConcatMany(                               BitConverter.GetBytes(RemoteTableId)                               );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,DataFileFlush,The following statement contains a magic number: ret[0] == 255
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackFileFlush,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 11 }                               .ConcatMany(                               BitConverter.GetBytes(RemoteTableId)                               );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackFileFlush,The following statement contains a magic number: ret[0] == 255
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackFileRecreate,The following statement contains a magic number: byte[] protocol = new byte[] { ProtocolVersion' 12 }                               .ConcatMany(                               BitConverter.GetBytes(RemoteTableId)                               );
Magic Number,DBreeze.Storage.RemoteInstance,RemoteInstanceCommander,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteInstanceCommander.cs,RollbackFileRecreate,The following statement contains a magic number: ret[0] == 255
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: callTableId = BitConverter.ToUInt64(protocol' 2);
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: return new byte[] { 255 };
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following statement contains a magic number: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_128,The following statement contains a magic number: return ((((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37))).To_8_bytes_array_BigEndian()                  .Concat(                  ((((ulong)MurmurHash3(data' 26)) << 32) | ((ulong)MurmurHash3(data' 7))).To_8_bytes_array_BigEndian()                  );
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_128,The following statement contains a magic number: return ((((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37))).To_8_bytes_array_BigEndian()                  .Concat(                  ((((ulong)MurmurHash3(data' 26)) << 32) | ((ulong)MurmurHash3(data' 7))).To_8_bytes_array_BigEndian()                  );
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_128,The following statement contains a magic number: return ((((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37))).To_8_bytes_array_BigEndian()                  .Concat(                  ((((ulong)MurmurHash3(data' 26)) << 32) | ((ulong)MurmurHash3(data' 7))).To_8_bytes_array_BigEndian()                  );
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_128,The following statement contains a magic number: return ((((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37))).To_8_bytes_array_BigEndian()                  .Concat(                  ((((ulong)MurmurHash3(data' 26)) << 32) | ((ulong)MurmurHash3(data' 7))).To_8_bytes_array_BigEndian()                  );
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_128,The following statement contains a magic number: return ((((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37))).To_8_bytes_array_BigEndian()                  .Concat(                  ((((ulong)MurmurHash3(data' 26)) << 32) | ((ulong)MurmurHash3(data' 7))).To_8_bytes_array_BigEndian()                  );
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_128,The following statement contains a magic number: return ((((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37))).To_8_bytes_array_BigEndian()                  .Concat(                  ((((ulong)MurmurHash3(data' 26)) << 32) | ((ulong)MurmurHash3(data' 7))).To_8_bytes_array_BigEndian()                  );
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_64,The following statement contains a magic number: return (((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37));
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_64,The following statement contains a magic number: return (((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37));
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MixedMurMurHash3_64,The following statement contains a magic number: return (((ulong)MurmurHash3(data' 42)) << 32) | ((ulong)MurmurHash3(data' 37));
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: k1 = (uint)(data[currentIndex++]                    | data[currentIndex++] << 8                    | data[currentIndex++] << 16                    | data[currentIndex++] << 24);
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: k1 = (uint)(data[currentIndex++]                    | data[currentIndex++] << 8                    | data[currentIndex++] << 16                    | data[currentIndex++] << 24);
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: k1 = (uint)(data[currentIndex++]                    | data[currentIndex++] << 8                    | data[currentIndex++] << 16                    | data[currentIndex++] << 24);
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: k1 = rotl32(k1' 15);
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: h1 = rotl32(h1' 13);
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: h1 = h1 * 5 + 0xe6546b64;
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: curLength -= 4;
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: curLength >= 4
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following statement contains a magic number: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,rotl32,The following statement contains a magic number: return (x << r) | (x >> (32 - r));
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,fmix,The following statement contains a magic number: h ^= h >> 16;
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,fmix,The following statement contains a magic number: h ^= h >> 13;
Magic Number,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,fmix,The following statement contains a magic number: h ^= h >> 16;
Duplicate Code,DBreeze.LianaTrie.Iterations,Backward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Backward.cs,ItBwdStartsWith,The method contains a code clone-set at the following line numbers (starting from the method definition): ((44' 63)' (93' 112))
Duplicate Code,DBreeze.LianaTrie.Iterations,Forward,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\LianaTrie\Iterations\Forward.cs,ItFrwStartsWith,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 62)' (73' 111))
Duplicate Code,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,SetupKidWithValue,The method contains a code clone-set at the following line numbers (starting from the method definition): ((21' 40)' (120' 139))
Duplicate Code,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The method contains a code clone-set at the following line numbers (starting from the method definition): ((112' 131)' (160' 179))
Duplicate Code,DBreeze.Storage,MSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MSR.cs,Table_Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((53' 78)' (173' 198))
Duplicate Code,DBreeze.Storage,RISR,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\RISR.cs,Table_Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((91' 117)' (220' 246))
Duplicate Code,DBreeze.Storage,FSR,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\FSR.cs,Table_Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((84' 110)' (209' 235))
Duplicate Code,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,DoIndexing,The method contains a code clone-set at the following line numbers (starting from the method definition): ((201' 225)' (277' 301))
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Encode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following switch statement is missing a default case: switch (compression)              {                  case Compression.eCompressionMethod.Gzip:                      encB = encB.GZip_Compress();                      break;              }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following switch statement is missing a default case: switch (compression)              {                  case Compression.eCompressionMethod.Gzip:                      encB = encB.GZip_Decompress();                      break;              }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_BYTEARRAYHASHSET,The following switch statement is missing a default case: switch (mode)                  {                      case 0:                            if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              hc = 0;                              mode = 1;                              sizer[size] = el;                              size++;                              keyLength = ToUInt32(sizer);                              //key = System.Text.Encoding.UTF8.GetString(encB.Substring(i + 1' (int)keyLength));                              key = encB.Substring(i + 1' (int)keyLength).UTF8_GetString();                              i += (int)keyLength + 1;                              ClearSizer();                              continue;                          }                            break;                      case 1:                          //HashSet Count                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valCnt = ToUInt32(sizer);                              ClearSizer();                                if (valCnt == 0)                              {                                  retD.Add(key' new List<byte[]>());                                  mode = 0;                              }                          }                          break;                      case 2:                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              sizer[size] = el;                              size++;                              if (hc == 0)                                  mhs = new List<byte[]>();                              lenBa = ToUInt32(sizer);                                                          mhs.Add(encB.Substring(i + 1' (int)lenBa));                              i += (int)lenBa + 1;                                                        hc++;                              ClearSizer();                                if (valCnt == hc)                              {                                  mode = 0;                                  retD.Add(key' mhs);                              }                              continue;                                                       }                          break;                  }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Encode_DICT_PROTO_STRING_UINTHASHSET,The following switch statement is missing a default case: switch (compression)              {                  case Compression.eCompressionMethod.Gzip:                      encB = encB.GZip_Compress();                      break;              }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The following switch statement is missing a default case: switch (compression)              {                  case Compression.eCompressionMethod.Gzip:                      encB = encB.GZip_Decompress();                      break;              }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_STRING_UINTHASHSET,The following switch statement is missing a default case: switch (mode)                  {                      case 0:                                                    if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              hc = 0;                              mode = 1;                              sizer[size] = el;                              size++;                              keyLength = ToUInt32(sizer);                              //key = System.Text.Encoding.UTF8.GetString(encB.Substring(i + 1' (int)keyLength));                              key = encB.Substring(i + 1' (int)keyLength).UTF8_GetString();                              i += (int)keyLength+1;                              ClearSizer();                              continue;                          }                            break;                      case 1:                          //HashSet Count                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valCnt = ToUInt32(sizer);                              ClearSizer();                                if (valCnt == 0)                              {                                  retD.Add(key' new HashSet<uint>());                                  mode = 0;                              }                          }                          break;                      case 2:                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                                                          sizer[size] = el;                              size++;                                                                                  if (hc == 0)                                  mhs = new HashSet<uint>();                              mhs.Add(ToUInt32(sizer));                              hc++;                              ClearSizer();                                                            if (valCnt == hc)                              {                                                                  mode = 0;                                  retD.Add(key' mhs);                              }                                                      }                          break;                  }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Encode_DICT_PROTO_UINT_BYTEARRAY,The following switch statement is missing a default case: switch (compression)              {                  case Compression.eCompressionMethod.Gzip:                      encB = encB.GZip_Compress();                                          break;              }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,The following switch statement is missing a default case: switch (compression)              {                  case Compression.eCompressionMethod.Gzip:                                          encB = encB.GZip_Decompress();                                          break;              }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_DICT_PROTO_UINT_BYTEARRAY,The following switch statement is missing a default case: switch (mode)                  {                      case 0:                          //Key' Size of BT //                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 1;                              sizer[size] = el;                              size++;                              key = ToUInt32(sizer);                              ClearSizer();                          }                            break;                      case 1:                          //Value Size                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 2;                              sizer[size] = el;                              size++;                              valLen = ToUInt32(sizer);                              ClearSizer();                                if (valLen == 0)                              {                                  retD.Add(key' null);                                  mode = 0;                                  break;                              }                                val = new byte[valLen];                              valCnt = 0;                          }                          break;                      case 2:                          val[valCnt] = el;                          valCnt++;                          if (valCnt == valLen)                          {                              retD.Add(key' val);                              mode = 0;                              break;                          }                          break;                  }
Missing Default,DBreeze.Utils,Biser,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\Biser.cs,Decode_PROTO_ListByteArray,The following switch statement is missing a default case: switch (mode)                  {                      case 0:                          //Always delimiter 10                          mode = 1;                          break;                      case 1:                          //Reading length of the next text                          if ((el & 0x80) > 0)                          {                              sizer[size] = el;                              size++;                          }                          else                          {                              mode = 0;                              sizer[size] = el;                              size++;                              valCnt = DBreeze.Utils.Biser.ToUInt32(sizer);                              ClearSizer();                              if (valCnt > 0)                              {                                  key = encB.Substring(i + 1' (int)valCnt);                                  i += (int)valCnt;                                  ret.Add(key);                              }                              else                                  ret.Add(new byte[0]);                          }                          break;                  }
Missing Default,DBreeze.Utils,Decoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserDecoder.cs,GetByteArray,The following switch statement is missing a default case: switch (prot)                  {                      case 2:                          ret = new byte[0];                          break;                      case 0:                          this.GetDigit(out prot);                          ret = Read((int)((uint)prot));                          //ret = Read((int)((uint)this.GetDigit()));                          break;                  }
Missing Default,DBreeze.Utils,JsonDecoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonDecoder.cs,ParseDateTime,The following switch statement is missing a default case: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"\/Date(13257180000000000)\/"*/                          s = GetStr(false);                          // StringBuilder dsb = new StringBuilder();  #if NET35                          sb.Length = 0;  #else                          sb.Clear();  #endif                          for (int i = 6; i < s.Length - 2; i++)                              sb.Append(s[i]);                          //v = Convert.ToUInt64(s.Substring(0' s.Length - 2).Replace("/Date("' "")) / 10000;                          v = Convert.ToUInt64(sb.ToString()) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                        case JsonSettings.DateTimeStyle.EpochTime:                          //var tt3f = jsts1.P17.ToUniversalTime().Subtract(new DateTime(1970'1'1'0'0'0'DateTimeKind.Utc)).TotalMilliseconds * 10000;                             /*"P17":13257818550000000*/                          v = Convert.ToUInt64(GetNumber(false)) / 10000;                          //time if not UTC must be brought to UTC' stored in UTC and restored in UTC                          rdt = epoch.AddMilliseconds(v);                          return DateTime.SpecifyKind(rdt' DateTimeKind.Utc);                      case JsonSettings.DateTimeStyle.ISO:                      case JsonSettings.DateTimeStyle.Javascript:                          /*                           * Encoder                           * new DateTime(2018' 6' 5' 17'44'15'443' DateTimeKind.Local).ToString("o"); //Encoder ISO "2018-06-05T17:44:15.4430000Z" or "2018-06-05T17:44:15.4430000+02:00"                           */                          s = GetStr(false);                          return DateTime.Parse(s' null' System.Globalization.DateTimeStyles.RoundtripKind);                    }
Missing Default,DBreeze.Utils,JsonEncoder,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Utils\BiserJsonEncoder.cs,AppendDateTime,The following switch statement is missing a default case: switch (this.jsonSettings.DateFormat)                  {                      case JsonSettings.DateTimeStyle.Default:                          ////sb.Append("\"");                          sb.Append("\"\\/Date(");                            // sb.Append($"\"\\/Date({((dt.Kind == DateTimeKind.Utc) ? ((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000) : ((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000)) })\\/\"");                            if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          sb.Append(")\\/\"");                          ////sb.Append("\"");                          break;                      case JsonSettings.DateTimeStyle.EpochTime:                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(((ulong)(dt.Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          else                              sb.Append(((ulong)(dt.ToUniversalTime().Subtract(epoch).TotalMilliseconds) * 10000).ToString());                          break;                      case JsonSettings.DateTimeStyle.ISO:                          sb.Append($"\"{dt.ToString("o")}\"");                          //sb.Append("\"");                          //sb.Append(dt.ToString("o"));                          //sb.Append("\"");                          //sb.Append($"\"{dt.Year}-{String.Format("{0:00}"' dt.Month)}-{String.Format("{0:00}"' dt.Day)}T{String.Format("{0:00}"' dt.Hour)}:{String.Format("{0:00}"' dt.Minute)}:{String.Format("{0:00}"' dt.Second)}.{dt.Millisecond}Z\"");                          //sb.Append("\"2018-08-21T09:42:21.9770676Z\"");                          //		dt.ToString("o")	"2018-08-21T09:42:21.9770676Z"	string                            break;                      case JsonSettings.DateTimeStyle.Javascript:                          sb.Append("\"");                          if (dt.Kind == DateTimeKind.Utc)                              sb.Append(dt.ToString("o"));                          else                              sb.Append(dt.ToUniversalTime().ToString("o"));                          sb.Append("\"");                          break;                    }
Missing Default,DBreeze.Exceptions,DBreezeException,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Exceptions\DBreezeException.cs,GenerateException,The following switch statement is missing a default case: switch (exceptionType)              {                  //General                  case eDBreezeExceptions.GENERAL_EXCEPTION_DB_NOT_OPERABLE:                      return new DBreezeException(String.Format("Database is not operable' please find out the problem and restart the engine! {0}"'message)' innerException);                                        //Enging                  case eDBreezeExceptions.DB_IS_NOT_OPERABLE:                      return new DBreezeException(String.Format("Database is not operable' please find out the problem and restart the engine! {0}"' message)' innerException);                  case eDBreezeExceptions.CREATE_DB_FOLDER_FAILED:                      return new DBreezeException("Creation of the database folder failed!"' innerException);                  // return new DBreezeException(String.Format("{0}creation of the database folder failed: {1}"' ExceptionHeader' originalException.ToString()));                    //Schema                  case eDBreezeExceptions.SCHEME_GET_TABLE_WRITE_FAILED:                      return new DBreezeException(String.Format("Getting table \"{0}\" from the schema failed!"' message)' innerException);                  case eDBreezeExceptions.SCHEME_FILE_PROTOCOL_IS_UNKNOWN:                      return new DBreezeException(String.Format("Scheme file protocol is unknown from the schema failed!")' innerException);                  case eDBreezeExceptions.SCHEME_TABLE_DELETE_FAILED:                      return new DBreezeException(String.Format("User table \"{0}\" delete failed!"'message)' innerException);                  case eDBreezeExceptions.SCHEME_TABLE_RENAME_FAILED:                      return new DBreezeException(String.Format("User table \"{0}\" rename failed!"' message)' innerException);                      //SchemaInternal.UserTable name patterns                  case eDBreezeExceptions.TABLE_NAMES_TABLENAMECANTBEEMPTY:                      return new DBreezeException(String.Format("Table name can't be empty!")' innerException);                  case eDBreezeExceptions.TABLE_NAMES_TABLENAMECANT_CONTAINRESERVEDSYMBOLS:                      return new DBreezeException(String.Format("Table name can not contain reserved symbols like * # @ \\ ^ $ ~ ´")' innerException);                  case eDBreezeExceptions.TABLE_PATTERN_CANTBEEMPTY:                      return new DBreezeException(String.Format("Table pattern can't be empty!")' innerException);                  case eDBreezeExceptions.TABLE_PATTERN_SYMBOLS_AFTER_SHARP:                      return new DBreezeException(String.Format("After # must follow / and any other symbol!")' innerException);                                            //LTrie                  //case eDBreezeExceptions.TABLE_IS_NOT_OPEARABLE:                  //    return new DBreezeException(String.Format("Table \"{0}\" is not operable!"' message)' innerException);                  case eDBreezeExceptions.COMMIT_FAILED:                      return new DBreezeException(String.Format("Table \"{0}\" commit failed!"' message)' innerException);     //ADD TABLE NAME!!!                  case eDBreezeExceptions.TRANSACTIONAL_COMMIT_FAILED:                      return new DBreezeException(String.Format("Transaction commit failed on table \"{0}\"!"'message)' innerException);                  case eDBreezeExceptions.RESTORE_ROLLBACK_DATA_FAILED:                      return new DBreezeException(String.Format("Restore rollback file \"{0}\" failed!"' message)' innerException);                  case eDBreezeExceptions.ROLLBACK_NOT_OPERABLE:                                            //WTF ?????????????????                      //return new DBreezeException(String.Format("{0}rollback of the file \"{1}\" is not operatable: {2}"' ExceptionHeader' description' originalException.ToString()));                      return new DBreezeException(String.Format("Rollback of the file \"{0}\" is not operable!"' message)' innerException);                  case eDBreezeExceptions.ROLLBACK_FAILED:                                                                       return new DBreezeException(String.Format("Rollback of the table \"{0}\" failed!"' message)' innerException);                  case eDBreezeExceptions.TRANSACTIONAL_ROLLBACK_FAILED:                                                                       return new DBreezeException(String.Format("Transaction rollback failed on the table \"{0}\"!"' message)' innerException);                  case eDBreezeExceptions.RECREATE_TABLE_FAILED:                      return new DBreezeException(String.Format("Table \"{0}\" re-creation failed!"' message)' innerException);                  case eDBreezeExceptions.PREPARE_ROLLBACK_FILE_FAILED:                      return new DBreezeException(String.Format("Rollback file \"{0}\" preparation failed!"' message)' innerException);                  case eDBreezeExceptions.KEY_IS_TOO_LONG:                                   return new DBreezeException(String.Format("Key is too long' maximal key size is: {0}!"' UInt16.MaxValue.ToString())' innerException);                  case eDBreezeExceptions.TABLE_WAS_CHANGED_LINKS_ARE_NOT_ACTUAL:                      {                          //It can happen when we have read LTrieRow with link to value' then table was re-created or restored from other table'                          //and then we want to get value from an "old" link                          return new DBreezeException(String.Format("Table was changed (Table Recrete' Table RestoreTableFromTheOtherTable)' links are not actual' repeat reading operation!")' innerException);                      }                    //Transaction Journal                  case eDBreezeExceptions.CLEAN_ROLLBACK_FILES_FOR_FINISHED_TRANSACTIONS_FAILED:                      return new DBreezeException(String.Format("Transaction journal couldn't clean rollback files of the finished transactions!")' innerException);                      //Transactions Coordinator                  case eDBreezeExceptions.TRANSACTION_DOESNT_EXIST:                      return new DBreezeException(String.Format("Transaction doesn't exist anymore!")' innerException);                  case eDBreezeExceptions.TRANSACTION_CANBEUSED_FROM_ONE_THREAD:                      return new DBreezeException(String.Format("One transaction can be used from one thread only!")' innerException);                  case eDBreezeExceptions.TRANSACTION_IN_DEADLOCK:                      return new DBreezeException(String.Format("Transaction is in a deadlock state and will be terminated. To avoid such case use Transaction.SynchronizeTables!")' innerException);                  case eDBreezeExceptions.TRANSACTION_TABLE_WRITE_REGISTRATION_FAILED:                      return new DBreezeException(String.Format("Transaction registration table for Write failed!")' innerException);                  case eDBreezeExceptions.TRANSACTION_GETTING_TRANSACTION_FAILED:                      return new DBreezeException(String.Format("getting transaction failed!")' innerException);                      //Transaction                  case eDBreezeExceptions.TRANSACTION_TABLES_RESERVATION_FAILED:                      return new DBreezeException(String.Format("Reservation tables for modification or synchronized read failed! Use SynchronizeTables before any modification!")' innerException);                  case eDBreezeExceptions.TRANSACTION_TABLES_RESERVATION_CANBEDONE_ONCE:                      return new DBreezeException(String.Format("Reservation tables for modification or synchronized read failed! Only one synchronization call permitted per transaction!")' innerException);                  case eDBreezeExceptions.TRANSACTION_TABLES_RESERVATION_LIST_MUSTBEFILLED:                      return new DBreezeException(String.Format("Reservation tables for modification or synchronized read failed! Synchronization list must be filled!")' innerException);                                          //DataTypes                  case eDBreezeExceptions.UNSUPPORTED_DATATYPE:                      return new DBreezeException(String.Format("Unsupported data type \"{0}\"!"' message)' innerException);                  case eDBreezeExceptions.UNSUPPORTED_DATATYPE_VALUE:                      return new DBreezeException(String.Format("Unsupported data type value \"{0}\"!"' message)' innerException);                                      case eDBreezeExceptions.KEY_CANT_BE_NULL:                      return new DBreezeException(String.Format("Key can't be NULL!")' innerException);                  case eDBreezeExceptions.PARTIAL_VALUE_CANT_BE_NULL:                      return new DBreezeException(String.Format("Partial value can't be NULL!")' innerException);                      //XML serializer                  case eDBreezeExceptions.XML_SERIALIZATION_ERROR:                      return new DBreezeException(String.Format("XML serialization error!")' innerException);                  case eDBreezeExceptions.XML_DESERIALIZATION_ERROR:                      return new DBreezeException(String.Format("XML deserialization error!")' innerException);                      //MICROSOFT JSON serializer                  case eDBreezeExceptions.MJSON_SERIALIZATION_ERROR:                      return new DBreezeException(String.Format("Microsoft JSON serialization error!")' innerException);                  case eDBreezeExceptions.MJSON_DESERIALIZATION_ERROR:                      return new DBreezeException(String.Format("Microsoft JSON deserialization error!")' innerException);                    //Custom serializer                  case eDBreezeExceptions.CUSTOM_SERIALIZATION_ERROR:                      return new DBreezeException(String.Format("Custom serialization error!")' innerException);                  case eDBreezeExceptions.CUSTOM_DESERIALIZATION_ERROR:                      return new DBreezeException(String.Format("Custom deserialization error!")' innerException);                    //DBINTABLE                  case eDBreezeExceptions.DBINTABLE_CHANGEDATA_FROMSELECTVIEW:                      return new DBreezeException(String.Format("Changing data after SelectTable is not permitted' use InsertTable instead!")' innerException);                    //Dynamic data blocks                  case eDBreezeExceptions.DYNAMIC_DATA_BLOCK_VALUE_IS_BIG:                      return new DBreezeException(String.Format("Value is too big' more then Int32.MaxValue!")' innerException);                    //Backup                  case eDBreezeExceptions.BACKUP_FOLDER_CREATE_FAILED:                      return new DBreezeException(String.Format("Backup folder creation has failed")' innerException);                    case eDBreezeExceptions.DBREEZE_RESOURCES_CONCERNING:                      return new DBreezeException(String.Format("DBreeze.DbreezeResources err: \"{0}\"!"' message)' innerException);              }
Missing Default,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValuePartially,The following switch statement is missing a default case: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                      break;              }
Missing Default,DBreeze.LianaTrie,LTrieGenerationNode,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieGenerationNode.cs,TryOverWriteValue,The following switch statement is missing a default case: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                                         break;                  case 1:                      btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      totalReservedSize = (int)btTotalReservedSize.To_UInt32_BigEndian();                                          break;              }
Missing Default,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKeyValue,The following switch statement is missing a default case: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          initRead = keySize + valueSize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(7' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 7 + keySize;                                                  val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //With Reserved space                        if ((keySize + valueSize + 11) > initRead)                      {                          initRead = keySize + valueSize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                          key = data.Substring(11' keySize);                        if (valueSize > 0)                      {                          valueStartPtr = lPtr + 11 + keySize;                                                                        val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Missing Default,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadKey,The following switch statement is missing a default case: switch (protocol)              {                  case 0:                      //First insert - no reservation identifiers for the space                        //Expanding read if necessary                      if (keySize > (initRead - 7))   //>= ?                      {                          initRead = keySize + 7;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                                              }                        key = data.Substring(7' keySize);                        break;                  case 1:                      //Expanding read if necessary                      if (keySize > (initRead - 11))  //>= ?                      {                          initRead = keySize + 11;                          data = Trie.Storage.Table_Read(useCache' pointer' initRead);                      }                        key = data.Substring(11' keySize);                        break;              }
Missing Default,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValue,The following switch statement is missing a default case: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          lPtr += 7 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize' valueSize);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          lPtr += 11 + keySize;                          valueStartPtr = lPtr;                          val = Trie.Storage.Table_Read(useCache' lPtr' valueSize);                      }                      else                      {                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize' valueSize);                      }                      break;              }
Missing Default,DBreeze.LianaTrie,LTrieWriteCache,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\LianaTrie\LTrieWriteCache.cs,ReadValuePartially,The following switch statement is missing a default case: switch (protocol)              {                  case 0:                      //We don't have reservation identifiers' it happens after first insert into the new place                         if ((keySize + valueSize + 7) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 7 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                          valueStartPtr = lPtr + 7 + keySize;                          lPtr += 7 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(7 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 7 + keySize;                          val = data.Substring(7 + keySize + (int)startIndex' (int)length);                      }                        break;                  case 1:                      //btTotalReservedSize = new byte[] { data[7]' data[8]' data[9]' data[10] };                      //totalReservedSize = btTotalReservedSize.To_Int32_BigEndian();                      if ((keySize + valueSize + 11) > initRead)                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //lPtr += 11 + keySize;                          //val = this.DBStorage.Read(lPtr' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          lPtr += 11 + keySize + (int)startIndex;                          val = Trie.Storage.Table_Read(useCache' lPtr' (int)length);                      }                      else                      {                          //HERE READ ONLY PART OF THE VALUE                            //original in read                          //val = data.Substring(11 + keySize' valueSize);                            //in partial read                          valueStartPtr = lPtr + 11 + keySize;                          val = data.Substring(11 + keySize + (int)startIndex' (int)length);                      }                      break;              }
Missing Default,DBreeze.Storage,MemoryStorage,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\MemoryStorage.cs,Resize,The following switch statement is missing a default case: switch (_expandStrategy)              {                  case eMemoryExpandStartegy.MULTIPLY_CAPACITY_BY_2:                        if (_capacity * 2 < upTo)                      {                          x = (int)Math.Ceiling((double)upTo / ((double) 2 * _capacity));                      }                      _capacity = _capacity * 2 * x;                                                          break;                  case eMemoryExpandStartegy.FIXED_LENGTH_INCREASE:                        if (_capacity + _increaseOnInBytes < upTo)                      {                          x = (int)Math.Ceiling((double)(upTo - _capacity) / (double)_increaseOnInBytes);                      }                      _capacity = _capacity + (_increaseOnInBytes * x);                        break;              }
Missing Default,DBreeze.Storage,StorageLayer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\StorageLayer.cs,StorageLayer,The following switch statement is missing a default case: switch (trieSettings.AlternativeTableStorageType)                  {                      case DBreezeConfiguration.eStorage.DISK:                            _tableStorage = (IStorage) new FSR(fileName' trieSettings' configuration);                            break;                      case DBreezeConfiguration.eStorage.MEMORY:                            _tableStorage = (IStorage)new MSR(fileName' trieSettings' configuration);                            break;                      case DBreezeConfiguration.eStorage.RemoteInstance:                            _tableStorage = (IStorage)new RISR(fileName' trieSettings' configuration);                            break;                  }
Missing Default,DBreeze.Storage,StorageLayer,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Storage\StorageLayer.cs,StorageLayer,The following switch statement is missing a default case: switch (configuration.Storage)                  {                      case DBreezeConfiguration.eStorage.DISK:                            _tableStorage = (IStorage)new FSR(fileName' trieSettings' configuration);                            break;                      case DBreezeConfiguration.eStorage.MEMORY:                            _tableStorage = (IStorage)new MSR(fileName' trieSettings' configuration);                            break;                      case DBreezeConfiguration.eStorage.RemoteInstance:                            _tableStorage = (IStorage)new RISR(fileName' trieSettings' configuration);                            break;                  }
Missing Default,DBreeze.Storage,Backup,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\Backup.cs,WriteBackupElement,The following switch statement is missing a default case: switch (type)                  {                      case 0:                      case 1:                            //8(fileNumber)+1(type)+8(position)+data.Length                          size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }'                              pos.To_8_bytes_array_BigEndian()'                              data);                                                 break;                      case 2:                            //Now we save new information into rollback                           size = Convert.ToUInt32(8 + 1 + 8 + data.Length);                          toSave = size.To_4_bytes_array_BigEndian().ConcatMany(fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { 2 }'                              ((long)0).To_8_bytes_array_BigEndian()'                              data);                          break;                      case 3: //recreate table file                                       case 5: //removing complete table                            //8(fileNumber)+1(type)                          size = 9;                          toSave = size.To_4_bytes_array_BigEndian()                              .ConcatMany(                              fileNumber.To_8_bytes_array_BigEndian()'                              new byte[] { type }                              );                          break;                                                               }
Missing Default,DBreeze.Storage,BackupRestorer,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\Backup\BackupRestorer.cs,DoPackage,The following switch statement is missing a default case: switch (type)              {                  case 0:                        //Write into table file                      lfs = this.GetFileStream(filename);                        //if (lfs == null)                      //{                      //    Console.WriteLine("Backup lfs = null");                      //    return;                      //}                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 1:                      //write into rollback file                      lfs = this.GetFileStream(filename + ".rol");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 2:                      //write into rollbackhelper                      lfs = this.GetFileStream(filename + ".rhp");                        if (lfs == null)                      {                          System.Diagnostics.Debug.WriteLine("Backup lfs = null");                          return;                      }                        offset = pack.Substring(9' 8).To_Int64_BigEndian();                      data = pack.Substring(17);                      lfs.Position = offset;                      lfs.Write(data' 0' data.Length);                      lfs.Flush();                      break;                  case 3:                        //3 - recreate table file (only table file)                        contains = ds.ContainsKey(filename);                      if (contains)                      {                                                  ds[filename].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename);                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename' null);                        ds[filename] = this.configuration.FSFactory.CreateType2(tfn);// new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                    case 4:                        //4 - recreate rollback file (only rollback file)                        contains = ds.ContainsKey(filename + ".rol");                      if (contains)                      {                                                  ds[filename + ".rol"].Dispose();                        }                        tfn = Path.Combine(this.DataBaseFolder' filename + ".rol");                      this.configuration.FSFactory.Delete(tfn);                        if (!contains)                          ds.Add(filename + ".rol"' null);                        ds[filename + ".rol"] = this.configuration.FSFactory.CreateType2(tfn);//new FileStream(tfn' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None);                        break;                  case 5:                        //5 - removing complete table                        if (ds.ContainsKey(filename))                      {                                                  ds[filename].Dispose();                      }                        ds.Remove(filename);                        if (ds.ContainsKey(filename + ".rol"))                      {                                                  ds[filename + ".rol"].Dispose();                      }                        ds.Remove(filename + ".rol");                        if (ds.ContainsKey(filename + ".rhp"))                      {                                               ds[filename + ".rhp"].Dispose();                      }                        ds.Remove(filename + ".rhp");                        break;                }
Missing Default,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,CreateBlock,The following switch statement is missing a default case: switch (operation)              {                  case eOperation.AND:                      b = new BlockAnd();                      break;                  case eOperation.OR:                      b = new BlockOr();                      break;                  case eOperation.XOR:                      b = new BlockXOR();                      break;                  case eOperation.EXCLUDE:                      b = new BlockEXCLUDE();                      break;                           }
Missing Default,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,GetArrays,The following switch statement is missing a default case: switch (this.TransBlockOperation)              {                  case eOperation.AND:                      if (la == null || ra == null || la.Count == 0 || ra.Count == 0)                          return foundArrays;                      la.AddRange(ra);                      this.foundArrays = la;                      return this.foundArrays;                    case eOperation.OR:                                          if (ra == null)                          ra = new List<byte[]>();                      if (la == null)                          la = new List<byte[]>();                      la.AddRange(ra);                      mrg = WABI.MergeByOrLogic(la);                      if (mrg != null)                          this.foundArrays.Add(mrg);                      return this.foundArrays;                    case eOperation.XOR:                                         if (ra == null)                          ra = new List<byte[]>();                      if (la == null)                          la = new List<byte[]>();                      la.AddRange(ra);                      mrg = WABI.MergeByXorLogic(la);                      if (mrg != null)                          this.foundArrays.Add(mrg);                      return this.foundArrays;                    case eOperation.EXCLUDE:                      if (la == null || ra == null || la.Count == 0 || ra.Count == 0)                          return this.foundArrays;                      mrg = WABI.MergeByExcludeLogic(la.FirstOrDefault()' ra.FirstOrDefault());                      if (mrg != null)                          this.foundArrays.Add(mrg);                      return this.foundArrays;              }
Missing Default,DBreeze.TextSearch,SBlock,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\SBlock.cs,GetPureBlockArrays,The following switch statement is missing a default case: switch (this.InternalBlockOperation)                  {                      case eOperation.AND:                          if (wrd.Value)                          { //Word must be FullMatched and doesn't                               if (!this._tsm.RealWords.ContainsKey(wrd.Key))      //!!No match                              {                                  //Found arrays must be cleared out                                  this.foundArrays.Clear();                                  return; //Parsed Words                              }                              else//Adding word to block array                                  this.foundArrays.Add(this._tsm.RealWords[wrd.Key].wahArray);                          }                          else                          { //Value must have contains                              echoes = new List<byte[]>();                              foreach (var conw in this._tsm.PureWords[wrd.Key].StartsWith)   //Adding all pure word StartsWith echoes                                  if (this._tsm.RealWords.ContainsKey(conw))                                      echoes.Add(this._tsm.RealWords[conw].wahArray);                                if (this._tsm.RealWords.ContainsKey(wrd.Key))  //And word itself                                  echoes.Add(this._tsm.RealWords[wrd.Key].wahArray);                                if (echoes.Count > 0)                                  this.foundArrays.Add(WABI.MergeByOrLogic(echoes));  //Echoes must be merged by OrLogic                              else                              {                                  //Found arrays must be cleared out                                  this.foundArrays.Clear();                                  return; //Parsed Words                              }                          }                          break;                      case eOperation.OR:                          if (wrd.Value)                          {                              if (this._tsm.RealWords.ContainsKey(wrd.Key))  //And word itself                                  this.foundArrays.Add(this._tsm.RealWords[wrd.Key].wahArray);                          }                          else                          {                              echoes = new List<byte[]>();                              foreach (var conw in this._tsm.PureWords[wrd.Key].StartsWith)   //Adding all pure word StartsWith echoes                                  if (this._tsm.RealWords.ContainsKey(conw))                                      echoes.Add(this._tsm.RealWords[conw].wahArray);                                if (this._tsm.RealWords.ContainsKey(wrd.Key))  //And word itself                                  echoes.Add(this._tsm.RealWords[wrd.Key].wahArray);                                if (echoes.Count > 0)                                  this.foundArrays.Add(WABI.MergeByOrLogic(echoes));                          }                          break;                  }
Missing Default,DBreeze.TextSearch,TextSearchHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\TextSearch\TextSearchHandler.cs,InsertDocumentText,The following switch statement is missing a default case: switch (iMode)                  {                      case eInsertMode.Insert:                          //Comparing                           if (oldSearchables.Intersect(pST.Keys).Count() == oldSearchables.Count && oldSearchables.Count == pST.Keys.Count)                              return; //Going out' nothing to insert                            foreach (var ps1i in pST)                          {                              sbPs.Append(ps1i.Key);                              sbPs.Append(" ");                          }                          break;                      case eInsertMode.Append:                      case eInsertMode.Remove:                            if ((iMode == eInsertMode.Append)                              &&                              oldSearchables.Intersect(pST.Keys).Count() == oldSearchables.Count                              &&                              oldSearchables.Count == pST.Keys.Count                              )                              return; //Going out' nothing to insert                            foreach (var ew in pST.Keys)                          {                              if (iMode == eInsertMode.Append)                                  oldSearchables.Add(ew);                              else                                  oldSearchables.Remove(ew);                          }                            foreach (var el in oldSearchables)                          {                              sbPs.Append(el);                              sbPs.Append(" ");                          }                            break;                  }
Missing Default,DBreeze.Transactions,Transaction,D:\research\architectureSmells\repos\hhblaze_DBreeze\DBreeze\Transactions\Transaction.cs,Transaction,The following switch statement is missing a default case: switch(transactionType)              {                  case 0:                      break;                  case 1:                      while (true)                      {                          if (_transactionUnit.TransactionsCoordinator.GetSchema.Engine._transactionTablesLocker.AddSession(lockType' tables))                              break;                        }                      break;              }
Missing Default,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupValueRowFromNode,The following switch statement is missing a default case: switch (protocolVersion)              {                  case 1:                      //First protocol type                      /*                      Protocol:                          1byte - protocol version (starting from 1)                          16bytes link to content (or 0)                          1byte - lenght of NodeName                                          Nbytes - Name                                                                         */                        val = new byte[] { protocolVersion }.ConcatMany                          (                              (node.ContentRef != null) ? node.ContentRef : new byte[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }'                              new byte[] { (byte)name.Length }'                              name                          );                      break;              }
Missing Default,DBreeze.DataStructures,DataAsTree,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\DataStructures\DataAsTree.cs,SetupNodeFromRow,The following switch statement is missing a default case: switch (val[0])              {                  case 1: //First protocol type                          /*                          Protocol:                              1byte - protocol version (starting from 1)                              16bytes link to content (or 0)                              1byte - lenght of NodeName                                              Nbytes - Name                                                                             */                        if ((val[1] | val[2] | val[3] | val[4] | val[5] | val[6] | val[7] | val[8]) != 0)                      {                          //We got content                          node.ContentRef = val.Substring(1' 16);                      }                                            node.NodeName = val.Substring(18' val[17]).UTF8_GetString();                      break;              }
Missing Default,DBreeze.SchemeInternal,DbUserTables,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\SchemeInternal\Sheme.UserTable.cs,UserTableNameIsOk,The following switch statement is missing a default case: switch(tableName[i])                  {                      case '*':   //used as pattern mask                                          case '#':   //used as pattern mask                      case '$':   //used as pattern mask                      case '@':   //used for system tables                      case '\\':  //reserved by dbreeze                      case '^':   //reserved by dbreeze                                          case '~':   //reserved by dbreeze                      case '´':   //reserved by dbreeze                                              throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TABLE_NAMES_TABLENAMECANT_CONTAINRESERVEDSYMBOLS);                   }
Missing Default,DBreeze.SchemeInternal,DbUserTables,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\SchemeInternal\Sheme.UserTable.cs,UserTablePatternIsOk,The following switch statement is missing a default case: switch (tableName[i])                  {                      case '*':                          //Substring till * and return                          return tableName.Substring(0' i+1);                      case '$':                          //Substring till $ and return                          return tableName.Substring(0' i + 1);                      case '#':                            if ((i + 2) > (tableName.Length - 1))                              throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TABLE_PATTERN_SYMBOLS_AFTER_SHARP);                             if (tableName[i + 1] != '/')                              throw DBreezeException.Throw(DBreezeException.eDBreezeExceptions.TABLE_PATTERN_SYMBOLS_AFTER_SHARP);                                                   break;                  }
Missing Default,DBreeze.Storage.RemoteInstance,RemoteTablesHandler,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Storage\RemoteInstance\RemoteTablesHandler.cs,ParseProtocol,The following switch statement is missing a default case: switch (protocol[1])                      {                          case 1:                              #region "OpenRemoteTable"                              //Special parsing                              int tblLen = BitConverter.ToInt32(protocol' 2);                              byte[] rb = protocol.Substring(6' tblLen);                              string tblName = rb.UTF8_GetString();// System.Text.Encoding.UTF8.GetString(rb'0'rb.Length);                              string _fileName = System.IO.Path.Combine(configuration.DBreezeDataFolderName' tblName);                                                         _sync.EnterUpgradeableReadLock();                              try                              {                                  if (!_tIds.TryGetValue(_fileName' out callTableId))                                  {                                      _sync.EnterWriteLock();                                      try                                      {                                          if (!_tIds.TryGetValue(_fileName' out callTableId))                                          {                                              tableId++;                                                //Creating directory' if necessary                                              if (directoryIsNotCreated)                                              {                                                  var di = this.configuration.FSFactory.CreateDirectoryInfo(System.IO.Path.GetDirectoryName(_fileName));                                                  if (!di.Exists)                                                      di.Create();                                                  //System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(_fileName));                                                  directoryIsNotCreated = false;                                              }                                                rt = new RemoteTable(this' _fileName' tableId);                                              _t[tableId] = rt;                                              _tIds[_fileName] = tableId;                                          }                                      }                                      finally                                      {                                          _sync.ExitWriteLock();                                      }                                  }                                  else                                      _t.TryGetValue(callTableId' out rt);                              }                              finally                              {                                  _sync.ExitUpgradeableReadLock();                              }                                return rt.OpenRemoteTable();                              #endregion                          case 2:                              #region "CloseRemoteTable"                                return rt.CloseRemoteTable();                                #endregion                          case 3:                              #region "DeleteRemoteTable"                              ret = rt.DeleteRemoteTable();                                _sync.EnterWriteLock();                              try                              {                                  _tIds.Remove(rt._fileName);                                                                  _t.Remove(callTableId);                                                              }                              finally                              {                                  _sync.ExitWriteLock();                              }                                return ret;                              #endregion                          case 4:                              #region DataFileWrite                              return rt.DataFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                                                     case 5:                              #region "RollbackFileWrite"                              return rt.RollbackFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                          #endregion                          case 6:                              #region "RollbackHelperFileWrite"                              return rt.RollbackHelperFileWrite(BitConverter.ToInt64(protocol' 10)' (protocol[18] == 1)' protocol.Substring(19));                              #endregion                          case 7:                              #region "DataFileRead"                              return rt.DataFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                          #endregion                          case 8:                              #region "RollbackFileRead"                              return rt.RollbackFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 9:                              #region "RollbackHelperFileRead"                              return rt.RollbackHelperFileRead(BitConverter.ToInt64(protocol' 10)' BitConverter.ToInt32(protocol' 18));                              #endregion                          case 10:                              #region "DataFileFlush"                              return rt.DataFileFlush();                              #endregion                          case 11:                              #region "RollbackFileFlush"                              return rt.RollbackFileFlush();                              #endregion                          case 12:                              #region "RollbackFileRecreate"                              return rt.RollbackFileRecreate();                              #endregion                        }
Missing Default,DBreeze.Utils.Hash,MurMurHash,D:\research\architectureSmells\repos\hhblaze_DBreeze\NETPortable\Utils\MurMurHash.cs,MurmurHash3,The following switch statement is missing a default case: switch (curLength)              {                  case 3:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8                        | data[currentIndex++] << 16);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 2:                      k1 = (uint)(data[currentIndex++]                        | data[currentIndex++] << 8);                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;                  case 1:                      k1 = data[currentIndex++];                      k1 *= c1;                      k1 = rotl32(k1' 15);                      k1 *= c2;                      h1 ^= k1;                      break;              }
