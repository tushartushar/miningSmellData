Implementation smell,Namespace,Class,File,Method,Description
Long Method,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The method has 143 lines of code.
Long Method,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The method has 138 lines of code.
Complex Method,AvaTax_Calc_DirectSOAP_csharp,GetTaxHistoryTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxHistoryTest.cs,Test,Cyclomatic complexity of the method is 8
Long Statement,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The length of the statement  "			Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ()); " is 178.
Long Statement,AvaTax_Calc_DirectSOAP_csharp,GetTaxHistoryTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxHistoryTest.cs,Test,The length of the statement  "			Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxHistoryRequest.DocCode' getTaxHistoryResult.GetTaxResult.TotalTax.ToString ()); " is 142.
Long Statement,AvaTax_Calc_DirectSOAP_csharp,ValidateAddressTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\ValidateAddressTest.cs,Test,The length of the statement  "			Console.WriteLine ("{0}\n{1}\n{2}\n{3}' {4} {5}\nCountry: {6}"' validatedAddress.Line1' validatedAddress.Line2' validatedAddress.Line3' validatedAddress.City' validatedAddress.Region' validatedAddress.PostalCode' validatedAddress.Country); " is 239.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,OnValidateOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,OnValidateOperationCompleted,The length of the statement  "		this.ValidateCompleted (this' new ValidateCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 145.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,OnPingOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,OnPingOperationCompleted,The length of the statement  "		this.PingCompleted (this' new PingCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 137.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,OnIsAuthorizedOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,OnIsAuthorizedOperationCompleted,The length of the statement  "		this.IsAuthorizedCompleted (this' new IsAuthorizedCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 153.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnGetTaxOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnGetTaxOperationCompleted,The length of the statement  "		this.GetTaxCompleted (this' new GetTaxCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 141.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,GetTaxHistoryAsync,The length of the statement  "		this.GetTaxHistoryOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetTaxHistoryOperationCompleted); " is 120.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnGetTaxHistoryOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnGetTaxHistoryOperationCompleted,The length of the statement  "		this.GetTaxHistoryCompleted (this' new GetTaxHistoryCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 155.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnPostTaxOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnPostTaxOperationCompleted,The length of the statement  "		this.PostTaxCompleted (this' new PostTaxCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 143.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnCommitTaxOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnCommitTaxOperationCompleted,The length of the statement  "		this.CommitTaxCompleted (this' new CommitTaxCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 147.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnCancelTaxOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnCancelTaxOperationCompleted,The length of the statement  "		this.CancelTaxCompleted (this' new CancelTaxCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 147.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,ReconcileTaxHistoryAsync,The length of the statement  "		this.ReconcileTaxHistoryOperationCompleted = new System.Threading.SendOrPostCallback (this.OnReconcileTaxHistoryOperationCompleted); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnReconcileTaxHistoryOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnReconcileTaxHistoryOperationCompleted,The length of the statement  "		this.ReconcileTaxHistoryCompleted (this' new ReconcileTaxHistoryCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 167.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnAdjustTaxOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnAdjustTaxOperationCompleted,The length of the statement  "		this.AdjustTaxCompleted (this' new AdjustTaxCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 147.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnApplyPaymentOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnApplyPaymentOperationCompleted,The length of the statement  "		this.ApplyPaymentCompleted (this' new ApplyPaymentCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 153.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnPingOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnPingOperationCompleted,The length of the statement  "		this.PingCompleted (this' new PingCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 137.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnIsAuthorizedOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnIsAuthorizedOperationCompleted,The length of the statement  "		this.IsAuthorizedCompleted (this' new IsAuthorizedCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 153.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,TaxSummaryFetchAsync,The length of the statement  "		this.TaxSummaryFetchOperationCompleted = new System.Threading.SendOrPostCallback (this.OnTaxSummaryFetchOperationCompleted); " is 124.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnTaxSummaryFetchOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,OnTaxSummaryFetchOperationCompleted,The length of the statement  "		this.TaxSummaryFetchCompleted (this' new TaxSummaryFetchCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 159.
Long Statement,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	getTaxRequest.Commit = true;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (4);  	line2.Amount = Convert.ToDecimal (200);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	AdjustTaxRequest adjustTaxRequest = new AdjustTaxRequest ();  	adjustTaxRequest.GetTaxRequest = getTaxRequest;  	adjustTaxRequest.AdjustmentReason = 4;  	// quantity change  	//adjustTaxRequest.AdjustmentDescription = "Transaction Adjusted for Testing";  	AdjustTaxResult adjustTaxResult = taxSvc.AdjustTax (adjustTaxRequest);  	Console.WriteLine ("AdjustTaxTest Result: {0}"' adjustTaxResult.ResultCode.ToString ());  	if (adjustTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in adjustTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}\nDocument Version: {2}"' getTaxRequest.DocCode' adjustTaxResult.TotalTax.ToString ()' adjustTaxResult.Version.ToString ());  		foreach (TaxLine taxLine in adjustTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: addresses [2] = address3;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: line1.Amount = Convert.ToDecimal (10);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: line2.Qty = Convert.ToDecimal (4);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: line2.Amount = Convert.ToDecimal (200);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: line3.Amount = Convert.ToDecimal (15);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: lines [2] = line3;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,AdjustTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\AdjustTaxTest.cs,Test,The following statement contains a magic number: adjustTaxRequest.AdjustmentReason = 4;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,CancelTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\CancelTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	CancelTaxRequest cancelTaxRequest = new CancelTaxRequest ();  	// Required Request Parameters  	cancelTaxRequest.CompanyCode = "APITrialCompany";  	cancelTaxRequest.DocType = DocumentType.SalesInvoice;  	cancelTaxRequest.DocCode = "INV001";  	cancelTaxRequest.CancelCode = CancelCode.DocVoided;  	// Optional Request Parameters  	// cancelTaxRequest.DocId = "123412341234";  	CancelTaxResult cancelTaxResult = taxSvc.CancelTax (cancelTaxRequest);  	Console.WriteLine ("CancelTaxTest Result: {0}"' cancelTaxResult.ResultCode.ToString ());  	if (cancelTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in cancelTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Voided.");  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,CancelTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\CancelTaxTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,CommitTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\CommitTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	CommitTaxRequest commitTaxRequest = new CommitTaxRequest ();  	// Required Request Parameters  	commitTaxRequest.CompanyCode = "APITrialCompany";  	commitTaxRequest.DocType = DocumentType.SalesInvoice;  	commitTaxRequest.DocCode = "INV001";  	CommitTaxResult commitTaxResult = taxSvc.CommitTax (commitTaxRequest);  	Console.WriteLine ("CommitTaxTest Result: {0}"' commitTaxResult.ResultCode.ToString ());  	if (commitTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in commitTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Committed.");  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,CommitTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\CommitTaxTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxHistoryTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxHistoryTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxHistoryRequest getTaxHistoryRequest = new GetTaxHistoryRequest ();  	// Required Request Parameters  	getTaxHistoryRequest.CompanyCode = "APITrialCompany";  	getTaxHistoryRequest.DocCode = "INV001";  	getTaxHistoryRequest.DetailLevel = DetailLevel.Tax;  	getTaxHistoryRequest.DocType = DocumentType.SalesInvoice;  	// Optional Request Parameters  	// getTaxHistoryRequest->DocId = "123412341234";  	GetTaxHistoryResult getTaxHistoryResult = taxSvc.GetTaxHistory (getTaxHistoryRequest);  	Console.WriteLine ("GetTaxHistoryTest Result: {0}"' getTaxHistoryResult.ResultCode.ToString ());  	if (getTaxHistoryResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxHistoryResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxHistoryRequest.DocCode' getTaxHistoryResult.GetTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxHistoryResult.GetTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  		//to display diagnostic details in the console  		if (getTaxHistoryRequest.DetailLevel == DetailLevel.Diagnostic) {  			foreach (Message message in getTaxHistoryResult.GetTaxResult.Messages) {  				Console.WriteLine ("{0}\n{1}\n{2}"' message.Name' message.Summary' message.Details);  				Console.ReadLine ();  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxHistoryTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxHistoryTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	GetTaxRequest getTaxRequest = new GetTaxRequest ();  	// Document Level Parameters  	// Required Request Parameters  	getTaxRequest.CustomerCode = "ABC4335";  	getTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	// getTaxRequest.Lines is also required'   	// and is presented later in this file.  	// Best Practice Request Parameters  	getTaxRequest.CompanyCode = "APITrialCompany";  	getTaxRequest.DocCode = "INV001";  	getTaxRequest.DetailLevel = DetailLevel.Tax;  	getTaxRequest.DocType = DocumentType.SalesInvoice;  	// Situational Request Parameters	  	// getTaxRequest.BusinessIdentificationNo = "234243";  	// getTaxRequest.CustomerUsageType = "G";  	// getTaxRequest.ExemptionNo = "12345";  	// getTaxRequest.Discount = 50;  	// getTaxRequest.LocationCode = "01";  	// getTaxRequest.ServiceMode = ServiceMode.Automatic;	  	// getTaxRequest.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// getTaxRequest.TaxOverride.Reason = "Adjustment for return";  	// getTaxRequest.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");      	// getTaxRequest.Commit = false;  	// Optional Request Parameters  	getTaxRequest.PurchaseOrderNo = "PO123456";  	getTaxRequest.ReferenceCode = "ref123456";  	getTaxRequest.PosLaneCode = "09";  	getTaxRequest.CurrencyCode = "USD";  	getTaxRequest.ExchangeRate = Convert.ToDecimal (1.0);  	getTaxRequest.ExchangeRateEffDate = DateTime.Parse ("2013-01-01");  	getTaxRequest.SalespersonCode = "Bill Sales";  	BaseAddress[] addresses = new BaseAddress[3];  	BaseAddress address1 = new BaseAddress ();  	address1.AddressCode = "01";  	address1.Line1 = "45 Fremont Street";  	address1.City = "San Francisco";  	address1.Region = "CA";  	addresses [0] = address1;  	BaseAddress address2 = new BaseAddress ();  	address2.AddressCode = "02";  	address2.Line1 = "118 N Clark St";  	address2.Line2 = "Suite 100";  	address2.Line3 = "ATTN Accounts Payable";  	address2.City = "Chicago";  	address2.Region = "IL";  	address2.PostalCode = "60602";  	address2.Country = "US";  	addresses [1] = address2;  	BaseAddress address3 = new BaseAddress ();  	address3.AddressCode = "03";  	address3.Latitude = "47.627935";  	address3.Longitude = "-122.51702";  	addresses [2] = address3;  	getTaxRequest.Addresses = addresses;  	getTaxRequest.OriginCode = "01";  	getTaxRequest.DestinationCode = "03";  	// Line Data  	// Required Parameters  	Line[] lines = new Line[3];  	Line line1 = new Line ();  	line1.No = "0001";  	line1.ItemCode = "N543";  	line1.Qty = Convert.ToDecimal (1);  	line1.Amount = Convert.ToDecimal (10);  	line1.OriginCode = "01";  	line1.DestinationCode = "02";  	// Best Practice Request Parameters  	line1.Description = "Red Size 7 Widget";  	line1.TaxCode = "NT";  	// Situational Request Parameters  	// line1.CustomerUsageType = "L";  	// line1.ExemptionNo = "12345";  	// line1.Discounted = true;  	// line1.TaxIncluded = true;  	// line1.TaxOverride.TaxOverrideType = TaxOverrideType.TaxDate;  	// line1.TaxOverride.Reason = "Adjustment for return";  	// line1.TaxOverride.TaxDate = DateTime.Parse("2013-07-01");  	// Optional Request Parameters  	line1.Ref1 = "ref123";  	line1.Ref2 = "ref456";  	lines [0] = line1;  	Line line2 = new Line ();  	line2.No = "0002";  	line2.ItemCode = "T345";  	line2.Qty = Convert.ToDecimal (3);  	line2.Amount = Convert.ToDecimal (150);  	line2.OriginCode = "01";  	line2.DestinationCode = "03";  	line2.Description = "Size 10 Green Running Shoe";  	line2.TaxCode = "PC030147";  	lines [1] = line2;  	Line line3 = new Line ();  	line3.No = "0002-FR";  	line3.ItemCode = "FREIGHT";  	line3.Qty = Convert.ToDecimal (1);  	line3.Amount = Convert.ToDecimal (15);  	line3.OriginCode = "01";  	line3.DestinationCode = "03";  	line3.Description = "Shipping Charge";  	line3.TaxCode = "FR";  	lines [2] = line3;  	getTaxRequest.Lines = lines;  	GetTaxResult getTaxResult = taxSvc.GetTax (getTaxRequest);  	Console.WriteLine ("GetTaxTest Result: {0}"' getTaxResult.ResultCode.ToString ());  	if (getTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in getTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Code: {0}\nTotal Tax: {1}"' getTaxRequest.DocCode' getTaxResult.TotalTax.ToString ());  		foreach (TaxLine taxLine in getTaxResult.TaxLines) {  			Console.WriteLine ("    Line {0} Tax: {1}"' taxLine.No' taxLine.Tax.ToString ());  			foreach (TaxDetail taxDetail in taxLine.TaxDetails) {  				Console.WriteLine ("        {0} Tax: {1}"' taxDetail.JurisName' taxDetail.Tax.ToString ());  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: addresses [2] = address3;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: line1.Amount = Convert.ToDecimal (10);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: line2.Qty = Convert.ToDecimal (3);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: line2.Amount = Convert.ToDecimal (150);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: line3.Amount = Convert.ToDecimal (15);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,GetTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\GetTaxTest.cs,Test,The following statement contains a magic number: lines [2] = line3;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PingTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PingTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	PingResult pingResult = taxSvc.Ping ("");  	Console.WriteLine ("PingTest Result: {0}"' pingResult.ResultCode.ToString ());  	if (pingResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in pingResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}"' message.Name' message.Summary' message.Details);  		}  	}  	else {  		Console.WriteLine ("Service Version: {0}"' pingResult.Version);  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PingTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PingTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PostTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PostTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	PostTaxRequest postTaxRequest = new PostTaxRequest ();  	// Required Request Parameters  	postTaxRequest.CompanyCode = "APITrialCompany";  	postTaxRequest.DocType = DocumentType.SalesInvoice;  	postTaxRequest.DocCode = "INV001";  	postTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	postTaxRequest.TotalTax = Convert.ToDecimal (14.27);  	postTaxRequest.TotalAmount = 175;  	// Optional Request Parameters  	// postTaxRequest.NewDocCode = "INV001-1";  	// postTaxRequest.Commit = true;  	PostTaxResult postTaxResult = taxSvc.PostTax (postTaxRequest);  	Console.WriteLine ("PostTaxTest Result: {0}"' postTaxResult.ResultCode.ToString ());  	if (postTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in postTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Posted.");  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PostTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PostTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	PostTaxRequest postTaxRequest = new PostTaxRequest ();  	// Required Request Parameters  	postTaxRequest.CompanyCode = "APITrialCompany";  	postTaxRequest.DocType = DocumentType.SalesInvoice;  	postTaxRequest.DocCode = "INV001";  	postTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	postTaxRequest.TotalTax = Convert.ToDecimal (14.27);  	postTaxRequest.TotalAmount = 175;  	// Optional Request Parameters  	// postTaxRequest.NewDocCode = "INV001-1";  	// postTaxRequest.Commit = true;  	PostTaxResult postTaxResult = taxSvc.PostTax (postTaxRequest);  	Console.WriteLine ("PostTaxTest Result: {0}"' postTaxResult.ResultCode.ToString ());  	if (postTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in postTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Posted.");  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PostTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PostTaxTest.cs,Test,The following statement contains a magic number: try {  	TaxSvc taxSvc = new TaxSvc ();  	taxSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = taxSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	taxSvc.ProfileValue = profile;  	PostTaxRequest postTaxRequest = new PostTaxRequest ();  	// Required Request Parameters  	postTaxRequest.CompanyCode = "APITrialCompany";  	postTaxRequest.DocType = DocumentType.SalesInvoice;  	postTaxRequest.DocCode = "INV001";  	postTaxRequest.DocDate = DateTime.Parse ("2014-01-01");  	postTaxRequest.TotalTax = Convert.ToDecimal (14.27);  	postTaxRequest.TotalAmount = 175;  	// Optional Request Parameters  	// postTaxRequest.NewDocCode = "INV001-1";  	// postTaxRequest.Commit = true;  	PostTaxResult postTaxResult = taxSvc.PostTax (postTaxRequest);  	Console.WriteLine ("PostTaxTest Result: {0}"' postTaxResult.ResultCode.ToString ());  	if (postTaxResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in postTaxResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		Console.WriteLine ("Document Posted.");  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PostTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PostTaxTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PostTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PostTaxTest.cs,Test,The following statement contains a magic number: postTaxRequest.TotalTax = Convert.ToDecimal (14.27);  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,PostTaxTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\PostTaxTest.cs,Test,The following statement contains a magic number: postTaxRequest.TotalAmount = 175;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,ValidateAddressTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\ValidateAddressTest.cs,Test,The following statement contains a magic number: try {  	AddressSvc addressSvc = new AddressSvc ();  	addressSvc.Url = serviceUrl + endpoint;  	UsernameToken token = new UsernameToken (accountNumber' licenseKey' PasswordOption.SendPlainText);  	SoapContext requestContext = addressSvc.RequestSoapContext;  	requestContext.Security.Tokens.Add (token);  	requestContext.Security.Timestamp.TtlInSeconds = 300;  	Profile profile = new Profile ();  	profile.Client = "AvaTaxSample";  	addressSvc.ProfileValue = profile;  	BaseAddress address = new BaseAddress ();  	// Required Address Parameters  	address.Line1 = "118 N Clark St";  	address.City = "Chicago";  	address.Region = "IL";  	// Optional Address Parameters  	address.Line2 = "Suite 100";  	address.Line3 = "ATTN Accounts Payable";  	address.Country = "US";  	address.PostalCode = "60602";  	ValidateRequest validateRequest = new ValidateRequest ();  	// Required Request Parameters  	validateRequest.Address = address;  	// Optional Request Parameters  	validateRequest.Coordinates = true;  	validateRequest.Taxability = true;  	validateRequest.TextCase = TextCase.Upper;  	ValidateResult validateResult = addressSvc.Validate (validateRequest);  	Console.WriteLine ("ValidateAddressTest Result: {0}"' validateResult.ResultCode.ToString ());  	Console.WriteLine ();  	if (validateResult.ResultCode != SeverityLevel.Success) {  		foreach (Message message in validateResult.Messages) {  			Console.WriteLine ("{0}\n{1}\n{2}\n{3}"' message.Name' message.Summary' message.RefersTo' message.Details);  		}  	}  	else {  		ValidAddress validatedAddress = validateResult.ValidAddresses [0];  		Console.WriteLine ("Validated Address: ");  		Console.WriteLine ("{0}\n{1}\n{2}\n{3}' {4} {5}\nCountry: {6}"' validatedAddress.Line1' validatedAddress.Line2' validatedAddress.Line3' validatedAddress.City' validatedAddress.Region' validatedAddress.PostalCode' validatedAddress.Country);  		Console.WriteLine ("Latitude: {0}\nLongitude: {1}"' validatedAddress.Latitude' validatedAddress.Longitude);  	}  }  catch (Exception e) {  	Console.WriteLine ("Exception: {0}"' e.Message);  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp,ValidateAddressTest,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\ValidateAddressTest.cs,Test,The following statement contains a magic number: requestContext.Security.Timestamp.TtlInSeconds = 300;  
Magic Number,AvaTax_Calc_DirectSOAP_csharp.AddressService,AddressSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\AddressService\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
Magic Number,AvaTax_Calc_DirectSOAP_csharp.TaxService,TaxSvc,C:\repos\avadev_AvaTax-Calc-DirectSOAP-csharp\AvaTax-Calc-DirectSOAP-csharp\Web References\TaxService\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
