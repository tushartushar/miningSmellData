Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Flurl.Http.CodeGen,Program,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\Program.cs,WriteExtensionMethods,Cyclomatic complexity of the method is 17
Long Statement,Flurl.Http.CodeGen,Program,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\Program.cs,WriteExtensionMethods,The length of the statement  "				writer.WriteLine("/// <param name=\"cancellationToken\">A cancellation token that can be used by other objects or threads to receive notice of cancellation. Optional.</param>"); " is 177.
Long Statement,Flurl.Http.CodeGen,Program,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\Program.cs,WriteExtensionMethods,The length of the statement  "				writer.WriteLine("/// <param name=\"completionOption\">The HttpCompletionOption used in the request. Optional.</param>"); " is 121.
Long Statement,Flurl.Http.CodeGen,Program,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\Program.cs,WriteExtensionMethods,The length of the statement  "				writer.WriteLine("public static Task<@0> @1@2(@3) {"' xm.TaskArg' xm.Name' xm.IsGeneric ? "<T>" : ""' string.Join("' "' args)); " is 127.
Long Statement,Flurl.Http.CodeGen,Program,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\Program.cs,WriteExtensionMethods,The length of the statement  "                    var receive = (xm.DeserializeToType == null) ? "" : string.Format(".Receive{0}{1}()"' xm.DeserializeToType' xm.IsGeneric ? "<T>" : ""); " is 135.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithHeaders"' "Creates a new FlurlRequest with the URL and sets request headers based on property names/values of the provided object' or keys/values if object is a dictionary' to be sent") " is 226.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "				.AddParam("replaceUnderscoreWithHyphen"' "bool"' "If true' underscores in property names will be replaced by hyphens. Default is true."' "true"); " is 145.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithBasicAuth"' "Creates a new FlurlRequest with the URL and sets the Authorization header according to Basic Authentication protocol.") " is 173.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithOAuthBearerToken"' "Creates a new FlurlRequest with the URL and sets the Authorization header with a bearer token according to OAuth 2.0 specification.") " is 194.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("EnableCookies"' "Creates a new FlurlRequest with the URL and allows cookies to be sent and received. Not necessary to call when setting cookies via WithCookie/WithCookies."); " is 211.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithCookie"' "Creates a new FlurlRequest with the URL and sets an HTTP cookie to be sent") " is 127.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithCookie"' "Creates a new FlurlRequest with the URL and sets an HTTP cookie to be sent.") " is 128.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "				.AddParam("expires"' "DateTime?"' "The cookie expiration (optional). If excluded' cookie only lives for duration of session."' "null"); " is 135.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithCookies"' "Creates a new FlurlRequest with the URL and sets HTTP cookies to be sent' based on property names / values of the provided object' or keys / values if object is a dictionary.") " is 228.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "				.AddParam("expires"' "DateTime?"' "Expiration for all cookies (optional). If excluded' cookies only live for duration of session."' "null"); " is 140.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("ConfigureRequest"' "Creates a new FlurlRequest with the URL and allows changing its Settings inline.") " is 139.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithTimeout"' "Creates a new FlurlRequest with the URL and sets the request timeout.") " is 123.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("WithTimeout"' "Creates a new FlurlRequest with the URL and sets the request timeout.") " is 123.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("AllowHttpStatus"' "Creates a new FlurlRequest with the URL and adds a pattern representing an HTTP status code or range of codes which (in addition to 2xx) will NOT result in a FlurlHttpException being thrown.") " is 248.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("AllowHttpStatus"' "Creates a new FlurlRequest with the URL and adds an HttpStatusCode which (in addtion to 2xx) will NOT result in a FlurlHttpException being thrown.") " is 204.
Long Statement,Flurl.Http.CodeGen,UrlExtensionMethod,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\UrlExtensionMethod.cs,GetAll,The length of the statement  "			yield return new UrlExtensionMethod("AllowAnyHttpStatus"' "Creates a new FlurlRequest with the URL and configures it to allow any returned HTTP status without throwing a FlurlHttpException."); " is 192.
Magic Number,Flurl.Http.CodeGen,Program,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\Program.cs,Main,The following statement contains a magic number: if (!File.Exists(codePath)) {  				Console.ForegroundColor = ConsoleColor.Red;  				Console.WriteLine("Code file not found: " + Path.GetFullPath(codePath));  				Console.ReadLine();  				return 2;  			}
Magic Number,Flurl.Http.CodeGen,Program,C:\repos\tmenier_Flurl\src\Flurl.Http.CodeGen\Program.cs,Main,The following statement contains a magic number: try {  				File.WriteAllText(codePath' "");                  using (var writer = new CodeWriter(codePath))                  {                      writer                          .WriteLine("// This file was auto-generated by Flurl.Http.CodeGen. Do not edit directly.")  	                    .WriteLine("using System;")  						.WriteLine("using System.Collections.Generic;")                          .WriteLine("using System.IO;")  	                    .WriteLine("using System.Net;")  						.WriteLine("using System.Net.Http;")                          .WriteLine("using System.Threading;")                          .WriteLine("using System.Threading.Tasks;")  	                    .WriteLine("using Flurl.Http.Configuration;")  						.WriteLine("using Flurl.Http.Content;")                          .WriteLine("")                          .WriteLine("namespace Flurl.Http")                          .WriteLine("{")                          .WriteLine("/// <summary>")                          .WriteLine("/// Auto-generated fluent extension methods on String' Url' and IFlurlRequest.")                          .WriteLine("/// </summary>")                          .WriteLine("public static class GeneratedExtensions")                          .WriteLine("{");                        WriteExtensionMethods(writer);                        writer                          .WriteLine("}")                          .WriteLine("}");                  }                    Console.WriteLine("File writing succeeded.");  				return 0;              }              catch (Exception ex) {  	            Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(ex);  	            Console.ReadLine();                  return 2;              }
