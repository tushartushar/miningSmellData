Implementation smell,Namespace,Class,File,Method,Description
Long Method,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,Accept,The method has 103 lines of code.
Complex Method,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,Accept,Cyclomatic complexity of the method is 11
Complex Method,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoFinishRead,Cyclomatic complexity of the method is 9
Complex Method,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,LookForTerm,Cyclomatic complexity of the method is 8
Complex Method,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,HandleMessage,Cyclomatic complexity of the method is 13
Complex Method,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,Cyclomatic complexity of the method is 29
Complex Method,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,AddInterface,Cyclomatic complexity of the method is 10
Long Parameter List,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,Write,The method has 5 parameters.
Long Parameter List,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,IsEqual,The method has 5 parameters.
Long Parameter List,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,IsEqual,The method has 5 parameters.
Long Parameter List,iStatServerService,SocketListener,C:\repos\bjango_iStat-Server-for-Windows\Service\SocketListener.cs,ServiceRegistered,The method has 5 parameters.
Long Statement,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,Connect,The length of the statement  "				connectTimer = new System.Threading.Timer (new TimerCallback (socket_DidNotConnect)' parameters' timeout' Timeout.Infinite); " is 124.
Long Statement,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,MaybeStartTLS,The length of the statement  "				secureSocketStream.BeginAuthenticateAsServer (localCertificate' new AsyncCallback (secureSocketStream_DidFinish)' null); " is 120.
Long Statement,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,MaybeDequeueRead,The length of the statement  "						readTimer = new System.Threading.Timer (new TimerCallback (stream_DidNotRead)' currentRead' currentRead.timeout' Timeout.Infinite); " is 131.
Long Statement,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,MaybeDequeueWrite,The length of the statement  "						writeTimer = new System.Threading.Timer (new TimerCallback (stream_DidNotWrite)' currentWrite' currentWrite.timeout' Timeout.Infinite); " is 135.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The length of the statement  "		Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (accept authorization): " + toClient' "Message"); " is 122.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The length of the statement  "		Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (reject authorization): " + toClient' "Message"); " is 122.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The length of the statement  "					data.Append (string.Format (STAT' "cpu"' index' Stat.Instance.CPU.HistoryIndexForMode (index)' Stat.Instance.SENSORS.sessionID)); " is 129.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The length of the statement  "					data.Append (string.Format (STAT' "memory"' index' Stat.Instance.MEMORY.HistoryIndexForMode (index)' Stat.Instance.MEMORY.sessionID)); " is 134.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The length of the statement  "					data.Append (string.Format (STAT' "sensors"' index' Stat.Instance.SENSORS.HistoryIndexForMode (index)' Stat.Instance.SENSORS.sessionID)); " is 137.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The length of the statement  "					data.Append (string.Format (STAT' "network"' index' Stat.Instance.NET.HistoryIndexForMode (index)' Stat.Instance.NET.sessionID)); " is 129.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The length of the statement  "					data.Append (string.Format (STAT' "disks"' index' Stat.Instance.DISKS.HistoryIndexForMode (index)' Stat.Instance.DISKS.sessionID)); " is 131.
Long Statement,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The length of the statement  "					data.Append (string.Format (STAT' "diskactivity"' index' Stat.Instance.ACTIVTY.HistoryIndexForMode (index)' Stat.Instance.ACTIVTY.sessionID)); " is 142.
Long Statement,iStatServerService,Clients,C:\repos\bjango_iStat-Server-for-Windows\Service\Clients.cs,LoadAuthorizedClients,The length of the statement  "			Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Error' string.Format ("Corrupted clients file at: {0}.  Error was: {1}"' _path' ex.Message)' "Exception"); " is 162.
Long Statement,iStatServerService,iStatServerService,C:\repos\bjango_iStat-Server-for-Windows\Service\iStatServerService.cs,OnStart,The length of the statement  "	string dataBasePath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData) + CLIENTS_SUBDIRECTORY; " is 120.
Long Statement,iStatServerService,SocketListener,C:\repos\bjango_iStat-Server-for-Windows\Service\SocketListener.cs,StartSocket,The length of the statement  "		Logger.Instance.eventLog.WriteEntry (String.Format ("Error starting server: {0}"' error)' EventLogEntryType.Information); " is 121.
Long Statement,iStatServerService,SocketListener,C:\repos\bjango_iStat-Server-for-Windows\Service\SocketListener.cs,PublishBonjour,The length of the statement  "	bonjourServiceRegistrar = bonjourService.Register (0' 0' name' type' null' null' ushort.Parse (Preferences.Instance.Value ("port"))' record' null); " is 147.
Long Statement,iStatServerService,SocketListener,C:\repos\bjango_iStat-Server-for-Windows\Service\SocketListener.cs,ReloadUPNP,The length of the statement  "		Match match = Regex.Match (addressString' @"([0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3})"' RegexOptions.IgnoreCase); " is 120.
Long Statement,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,samples,The length of the statement  "				data.Append (string.Format ("<s id=\"{0}\" r=\"{1}\" w=\"{2}\" rIOPS=\"{3}\" wIOPS=\"{4}\"></s>"' sample.SampleID' sample.read' sample.write' sample.readIOPS' sample.writeIOPS)); " is 178.
Long Statement,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,samples,The length of the statement  "				data.Append (string.Format ("<s id=\"{0}\" p=\"{1}\" u=\"{2}\" s=\"{3}\" f=\"{4}\"></s>"' diskSample.SampleID' diskSample.percentage' diskSample.used' diskSample.size' diskSample.free)); " is 186.
Long Statement,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,samples,The length of the statement  "					data.Append (string.Format ("<s id=\"{0}\" p=\"{1}\" u=\"{2}\" s=\"{3}\" f=\"{4}\"></s>"' sample.SampleID' sample.percentage' sample.used' sample.size' sample.free)); " is 166.
Long Statement,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,samples,The length of the statement  "			data.Append (string.Format ("<s id=\"{0}\" u=\"{1}\" f=\"{2}\" t=\"{3}\" su=\"{4}\" st=\"{5}\" pi=\"{6}\" po=\"{7}\"></s>"' s.SampleID' s.Used' s.Free' s.Total' s.SwapUsed' s.SwapTotal' s.PageInCount' s.PageOutCount)); " is 218.
Long Statement,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,AddInterface,The length of the statement  "	if (adapter.NetworkInterfaceType == NetworkInterfaceType.Tunnel || adapter.NetworkInterfaceType == NetworkInterfaceType.Loopback) " is 129.
Long Statement,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The length of the statement  "		where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU) " is 162.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidAccept,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoWillConnect,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidConnect,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidRead,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidReadPartial,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidWrite,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidWritePartial,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidSecure,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoWillClose,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,DoDidClose,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,ProcessEvent,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,ProcessEvent,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,Dns_DidResolve,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,secureSocketStream_DidFinish,The method has an empty catch block.
Empty Catch Block,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,secureSocketStream_DidFinish,The method has an empty catch block.
Empty Catch Block,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,asyncSocket_DidRead,The method has an empty catch block.
Magic Number,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,GetIsSmartConnected,The following statement contains a magic number: if (socket != null && socket.Connected) {  	bool blockingState = socket.Blocking;  	try {  		byte[] tmp = new byte[1];  		socket.Blocking = false;  		socket.Send (tmp' 0' 0);  	}  	catch (SocketException e) {  		// 10035 == WSAEWOULDBLOCK  		if (e.NativeErrorCode == 10035) {  			// Still Connected' but the Send would block  		}  		else {  			// Disconnected  		}  	}  	finally {  		socket.Blocking = blockingState;  	}  	return socket.Connected;  }  
Magic Number,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,GetIsSmartConnected,The following statement contains a magic number: try {  	byte[] tmp = new byte[1];  	socket.Blocking = false;  	socket.Send (tmp' 0' 0);  }  catch (SocketException e) {  	// 10035 == WSAEWOULDBLOCK  	if (e.NativeErrorCode == 10035) {  		// Still Connected' but the Send would block  	}  	else {  		// Disconnected  	}  }  finally {  	socket.Blocking = blockingState;  }  
Magic Number,Deusty.Net,AsyncSocket,C:\repos\bjango_iStat-Server-for-Windows\Service\AsyncSocket.cs,GetIsSmartConnected,The following statement contains a magic number: if (e.NativeErrorCode == 10035) {  	// Still Connected' but the Send would block  }  else {  	// Disconnected  }  
Magic Number,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	int b = bytes [i];  	chars [i * 2] = hexDigits [b >> 4];  	chars [i * 2 + 1] = hexDigits [b & 0xF];  }  
Magic Number,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	int b = bytes [i];  	chars [i * 2] = hexDigits [b >> 4];  	chars [i * 2 + 1] = hexDigits [b & 0xF];  }  
Magic Number,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,ToHexString,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	int b = bytes [i];  	chars [i * 2] = hexDigits [b >> 4];  	chars [i * 2 + 1] = hexDigits [b & 0xF];  }  
Magic Number,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,ToHexString,The following statement contains a magic number: chars [i * 2] = hexDigits [b >> 4];  
Magic Number,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,ToHexString,The following statement contains a magic number: chars [i * 2] = hexDigits [b >> 4];  
Magic Number,Deusty.Net,Data,C:\repos\bjango_iStat-Server-for-Windows\Service\Data.cs,ToHexString,The following statement contains a magic number: chars [i * 2 + 1] = hexDigits [b & 0xF];  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Client,The following statement contains a magic number: socket.Read (Client.Terminator' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Client,The following statement contains a magic number: socket.Read (Client.Terminator' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,asyncSocket_DidRead,The following statement contains a magic number: socket.Read (Client.Terminator' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,asyncSocket_DidRead,The following statement contains a magic number: socket.Read (Client.Terminator' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: if (message == Preferences.Instance.Value ("pin"))//code correct   {  	Clients.Instance.AddAuthorizedClient (uuid);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "New client added: " + uuid' "Message");  	const string toClient = HEADER + ACCEPT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (accept authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  else//code rejected   {  	const string toClient = HEADER + REJECT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (reject authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: if (message == Preferences.Instance.Value ("pin"))//code correct   {  	Clients.Instance.AddAuthorizedClient (uuid);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "New client added: " + uuid' "Message");  	const string toClient = HEADER + ACCEPT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (accept authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  else//code rejected   {  	const string toClient = HEADER + REJECT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (reject authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: if (message == Preferences.Instance.Value ("pin"))//code correct   {  	Clients.Instance.AddAuthorizedClient (uuid);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "New client added: " + uuid' "Message");  	const string toClient = HEADER + ACCEPT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (accept authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  else//code rejected   {  	const string toClient = HEADER + REJECT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (reject authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: if (message == Preferences.Instance.Value ("pin"))//code correct   {  	Clients.Instance.AddAuthorizedClient (uuid);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "New client added: " + uuid' "Message");  	const string toClient = HEADER + ACCEPT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (accept authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  else//code rejected   {  	const string toClient = HEADER + REJECT_CODE;  	byte[] data = Encoding.UTF8.GetBytes (toClient);  	Trace.WriteLineIf (Program.LogLevel.Level >= TraceLevel.Verbose' "Server (reject authorization): " + toClient' "Message");  	socket.Write (data' 120 * 1000' 1);  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: socket.Write (data' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: socket.Write (data' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: socket.Write (data' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,CheckPasscode,The following statement contains a magic number: socket.Write (data' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The following statement contains a magic number: socket.Write (bdataLength' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The following statement contains a magic number: socket.Write (bdataLength' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The following statement contains a magic number: socket.Write (bdata' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The following statement contains a magic number: socket.Write (bdata' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: socket.Write (bdata' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: socket.Write (bdata' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: if (!Clients.Instance.IsClientAuthenticated (uuid))//new client   {  	string aS = GetAuthorizeString (true);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  else {  	string aS = GetAuthorizeString (false);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: if (!Clients.Instance.IsClientAuthenticated (uuid))//new client   {  	string aS = GetAuthorizeString (true);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  else {  	string aS = GetAuthorizeString (false);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: if (!Clients.Instance.IsClientAuthenticated (uuid))//new client   {  	string aS = GetAuthorizeString (true);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  else {  	string aS = GetAuthorizeString (false);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: if (!Clients.Instance.IsClientAuthenticated (uuid))//new client   {  	string aS = GetAuthorizeString (true);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  else {  	string aS = GetAuthorizeString (false);  	byte[] data2 = Encoding.UTF8.GetBytes (aS);  	socket.Write (data2' 120 * 1000' 1);  	return true;  }  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: socket.Write (data2' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: socket.Write (data2' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: socket.Write (data2' 120 * 1000' 1);  
Magic Number,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,Authorize,The following statement contains a magic number: socket.Write (data2' 120 * 1000' 1);  
Magic Number,iStatServerService,Preferences,C:\repos\bjango_iStat-Server-for-Windows\Service\Preferences.cs,Load,The following statement contains a magic number: if (_preferences.ContainsKey ("upnpDescription") == false) {  	Random random = new Random ();  	int randomNumber = random.Next (1000' 99999);  	Set ("upnpDescription"' String.Format ("{0}"' randomNumber));  }  
Magic Number,iStatServerService,Preferences,C:\repos\bjango_iStat-Server-for-Windows\Service\Preferences.cs,Load,The following statement contains a magic number: if (_preferences.ContainsKey ("upnpDescription") == false) {  	Random random = new Random ();  	int randomNumber = random.Next (1000' 99999);  	Set ("upnpDescription"' String.Format ("{0}"' randomNumber));  }  
Magic Number,iStatServerService,Stat,C:\repos\bjango_iStat-Server-for-Windows\Service\Stat.cs,LoadStats,The following statement contains a magic number: _statUpdateTimer = new Timer (TimerTick' null' 0' 1000);  
Magic Number,iStatServerService,Stat,C:\repos\bjango_iStat-Server-for-Windows\Service\Stat.cs,GetUnixSeconds,The following statement contains a magic number: return (DateTime.UtcNow - new DateTime (1970' 1' 1' 0' 0' 0)).TotalSeconds;  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,StatCPU,The following statement contains a magic number: history = new FixedSizeQueue<CpuStat> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,StatCPU,The following statement contains a magic number: historyHour = new FixedSizeQueue<CpuStat> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,StatCPU,The following statement contains a magic number: historyDay = new FixedSizeQueue<CpuStat> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,StatCPU,The following statement contains a magic number: _timer = new Timer (Update' null' 0' 1000);  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var usr = _cpuUserCounter.NextValue ();  	var priv = _cpuPrivCounter.NextValue ();  	var cs = new CpuStat {  		SampleID = historyIndex'  		Idle = clamp (0' 100' (int)(100 - (usr + priv)))'  		Priv = (int)priv'  		User = (int)usr'  	};  	history.Enqueue (cs);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0) {  	historyIndexHour++;  	AddHistoryItem (history' 6' historyHour' historyIndexHour);  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0) {  	historyIndexHour++;  	AddHistoryItem (history' 6' historyHour' historyIndexHour);  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0) {  	historyIndexHour++;  	AddHistoryItem (history' 6' historyHour' historyIndexHour);  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: AddHistoryItem (history' 6' historyHour' historyIndexHour);  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0) {  	historyIndexDay++;  	AddHistoryItem (history' 144' historyDay' historyIndexDay);  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0) {  	historyIndexDay++;  	AddHistoryItem (history' 144' historyDay' historyIndexDay);  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0) {  	historyIndexDay++;  	AddHistoryItem (history' 144' historyDay' historyIndexDay);  }  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,Update,The following statement contains a magic number: AddHistoryItem (history' 144' historyDay' historyIndexDay);  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,HistoryForMode,The following statement contains a magic number: if (mode == 2)  	return historyDay;  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,HistoryIndexForMode,The following statement contains a magic number: if (mode == 2)  	return historyIndexDay;  
Magic Number,iStatServerService,StatCPU,C:\repos\bjango_iStat-Server-for-Windows\Service\StatCPU.cs,samples,The following statement contains a magic number: if (mode > 2)  	return "";  
Magic Number,iStatServerService,StatDiskActivityItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,StatDiskActivityItem,The following statement contains a magic number: history = new FixedSizeQueue<DiskActivityStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatDiskActivityItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,StatDiskActivityItem,The following statement contains a magic number: historyHour = new FixedSizeQueue<DiskActivityStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatDiskActivityItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,StatDiskActivityItem,The following statement contains a magic number: historyDay = new FixedSizeQueue<DiskActivityStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatDiskActivityItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,UpdateHour,The following statement contains a magic number: AddHistoryItem (history' 6' historyHour' index);  
Magic Number,iStatServerService,StatDiskActivityItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,UpdateDay,The following statement contains a magic number: AddHistoryItem (history' 144' historyDay' index);  
Magic Number,iStatServerService,StatDiskActivityItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,HistoryForMode,The following statement contains a magic number: if (mode == 2)  	return historyDay;  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,StatDiskActivity,The following statement contains a magic number: _timer = new Timer (Update' null' 0' 1000);  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	historyIndexHour++;  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	historyIndexHour++;  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: foreach (StatDiskActivityItem disk in _disks) {  	disk.Update (historyIndex);  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		disk.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		disk.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: foreach (StatDiskActivityItem disk in _disks) {  	disk.Update (historyIndex);  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		disk.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		disk.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: foreach (StatDiskActivityItem disk in _disks) {  	disk.Update (historyIndex);  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		disk.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		disk.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: foreach (StatDiskActivityItem disk in _disks) {  	disk.Update (historyIndex);  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		disk.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		disk.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	disk.UpdateHour (historyIndexHour);  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	disk.UpdateHour (historyIndexHour);  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	disk.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	disk.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,HistoryIndexForMode,The following statement contains a magic number: if (mode == 2)  	return historyIndexDay;  
Magic Number,iStatServerService,StatDiskActivity,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDiskActivity.cs,samples,The following statement contains a magic number: if (mode > 2)  	return "";  
Magic Number,iStatServerService,StatDiskItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,StatDiskItem,The following statement contains a magic number: history = new FixedSizeQueue<DiskStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatDiskItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,StatDiskItem,The following statement contains a magic number: historyDay = new FixedSizeQueue<DiskStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatDiskItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,UpdateDay,The following statement contains a magic number: AddHistoryItem (history' 4' historyDay' index);  
Magic Number,iStatServerService,StatDiskItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,HistoryForMode,The following statement contains a magic number: if (mode == 2)  	return historyDay;  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,StatDisks,The following statement contains a magic number: _timer = new Timer (Update' null' 0' 36000);  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 4 && (historyIndex % 4) == 0)  		historyIndexDay++;  	historyIndex++;  	DriveInfo[] allDrives = DriveInfo.GetDrives ();  	foreach (DriveInfo d in allDrives) {  		if (d.DriveType != DriveType.Fixed)  			continue;  		AddDisk (d);  	}  	foreach (StatDiskItem disk in _disks) {  		if (historyIndex >= 4 && (historyIndex % 4) == 0)  			disk.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 4 && (historyIndex % 4) == 0)  		historyIndexDay++;  	historyIndex++;  	DriveInfo[] allDrives = DriveInfo.GetDrives ();  	foreach (DriveInfo d in allDrives) {  		if (d.DriveType != DriveType.Fixed)  			continue;  		AddDisk (d);  	}  	foreach (StatDiskItem disk in _disks) {  		if (historyIndex >= 4 && (historyIndex % 4) == 0)  			disk.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 4 && (historyIndex % 4) == 0)  		historyIndexDay++;  	historyIndex++;  	DriveInfo[] allDrives = DriveInfo.GetDrives ();  	foreach (DriveInfo d in allDrives) {  		if (d.DriveType != DriveType.Fixed)  			continue;  		AddDisk (d);  	}  	foreach (StatDiskItem disk in _disks) {  		if (historyIndex >= 4 && (historyIndex % 4) == 0)  			disk.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 4 && (historyIndex % 4) == 0)  		historyIndexDay++;  	historyIndex++;  	DriveInfo[] allDrives = DriveInfo.GetDrives ();  	foreach (DriveInfo d in allDrives) {  		if (d.DriveType != DriveType.Fixed)  			continue;  		AddDisk (d);  	}  	foreach (StatDiskItem disk in _disks) {  		if (historyIndex >= 4 && (historyIndex % 4) == 0)  			disk.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: if (historyIndex >= 4 && (historyIndex % 4) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: if (historyIndex >= 4 && (historyIndex % 4) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: foreach (StatDiskItem disk in _disks) {  	if (historyIndex >= 4 && (historyIndex % 4) == 0)  		disk.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: foreach (StatDiskItem disk in _disks) {  	if (historyIndex >= 4 && (historyIndex % 4) == 0)  		disk.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: if (historyIndex >= 4 && (historyIndex % 4) == 0)  	disk.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,Update,The following statement contains a magic number: if (historyIndex >= 4 && (historyIndex % 4) == 0)  	disk.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: foreach (var s in _disks) {  	if (s.name == d.Name) {  		var ns = new DiskStatQueue {  			size = d.TotalSize / 1048576'  			used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  			free = d.AvailableFreeSpace / 1048576'  			percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  			SampleID = historyIndex  		};  		s.history.Enqueue (ns);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: foreach (var s in _disks) {  	if (s.name == d.Name) {  		var ns = new DiskStatQueue {  			size = d.TotalSize / 1048576'  			used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  			free = d.AvailableFreeSpace / 1048576'  			percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  			SampleID = historyIndex  		};  		s.history.Enqueue (ns);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: foreach (var s in _disks) {  	if (s.name == d.Name) {  		var ns = new DiskStatQueue {  			size = d.TotalSize / 1048576'  			used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  			free = d.AvailableFreeSpace / 1048576'  			percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  			SampleID = historyIndex  		};  		s.history.Enqueue (ns);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: foreach (var s in _disks) {  	if (s.name == d.Name) {  		var ns = new DiskStatQueue {  			size = d.TotalSize / 1048576'  			used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  			free = d.AvailableFreeSpace / 1048576'  			percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  			SampleID = historyIndex  		};  		s.history.Enqueue (ns);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: foreach (var s in _disks) {  	if (s.name == d.Name) {  		var ns = new DiskStatQueue {  			size = d.TotalSize / 1048576'  			used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  			free = d.AvailableFreeSpace / 1048576'  			percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  			SampleID = historyIndex  		};  		s.history.Enqueue (ns);  	}  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: if (s.name == d.Name) {  	var ns = new DiskStatQueue {  		size = d.TotalSize / 1048576'  		used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  		free = d.AvailableFreeSpace / 1048576'  		percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  		SampleID = historyIndex  	};  	s.history.Enqueue (ns);  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: if (s.name == d.Name) {  	var ns = new DiskStatQueue {  		size = d.TotalSize / 1048576'  		used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  		free = d.AvailableFreeSpace / 1048576'  		percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  		SampleID = historyIndex  	};  	s.history.Enqueue (ns);  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: if (s.name == d.Name) {  	var ns = new DiskStatQueue {  		size = d.TotalSize / 1048576'  		used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  		free = d.AvailableFreeSpace / 1048576'  		percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  		SampleID = historyIndex  	};  	s.history.Enqueue (ns);  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: if (s.name == d.Name) {  	var ns = new DiskStatQueue {  		size = d.TotalSize / 1048576'  		used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  		free = d.AvailableFreeSpace / 1048576'  		percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  		SampleID = historyIndex  	};  	s.history.Enqueue (ns);  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,AddDisk,The following statement contains a magic number: if (s.name == d.Name) {  	var ns = new DiskStatQueue {  		size = d.TotalSize / 1048576'  		used = (d.TotalSize - d.AvailableFreeSpace) / 1048576'  		free = d.AvailableFreeSpace / 1048576'  		percentage = 100 - ((d.TotalFreeSpace * 100 / d.TotalSize))'  		SampleID = historyIndex  	};  	s.history.Enqueue (ns);  }  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,HistoryIndexForMode,The following statement contains a magic number: if (mode == 2)  	return historyIndexDay;  
Magic Number,iStatServerService,StatDisks,C:\repos\bjango_iStat-Server-for-Windows\Service\StatDisks.cs,samples,The following statement contains a magic number: if (mode > 2 || mode == 1)  	return "";  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,StatMemory,The following statement contains a magic number: history = new FixedSizeQueue<MemStat> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,StatMemory,The following statement contains a magic number: historyHour = new FixedSizeQueue<MemStat> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,StatMemory,The following statement contains a magic number: historyDay = new FixedSizeQueue<MemStat> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,StatMemory,The following statement contains a magic number: _timer = new Timer (Update' null' 0' 1000);  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	var status = new MEMORYSTATUSEX ();  	GlobalMemoryStatusEx (status);  	long pageInSec = Convert.ToInt64 (_pageInSec.NextValue ());  	long pageOutSec = Convert.ToInt64 (_pageOutSec.NextValue ());  	var ms = new MemStat {  		SampleID = historyIndex'  		Free = Convert.ToInt64 (status.ullAvailPhys) / 1048576'  		Total = Convert.ToInt64 (status.ullTotalPhys) / 1048576'  		PageInCount = pageInSec'  		//sample time is 1 second so should be ~  		PageOutCount = pageOutSec'  		//sample time is 1 second so should be ~  		SwapTotal = Convert.ToInt64 (status.ullTotalPageFile) / 1048576'  		SwapUsed = Convert.ToInt64 (status.ullTotalPageFile - status.ullAvailPageFile) / 1048576  	};  	ms.Used = ms.Total - ms.Free;  	history.Enqueue (ms);  	if (historyIndex >= 6 && (historyIndex % 6) == 0) {  		historyIndexHour++;  		AddHistoryItem (history' 6' historyHour' historyIndexHour);  	}  	if (historyIndex >= 144 && (historyIndex % 144) == 0) {  		historyIndexDay++;  		AddHistoryItem (history' 144' historyDay' historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0) {  	historyIndexHour++;  	AddHistoryItem (history' 6' historyHour' historyIndexHour);  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0) {  	historyIndexHour++;  	AddHistoryItem (history' 6' historyHour' historyIndexHour);  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0) {  	historyIndexHour++;  	AddHistoryItem (history' 6' historyHour' historyIndexHour);  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: AddHistoryItem (history' 6' historyHour' historyIndexHour);  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0) {  	historyIndexDay++;  	AddHistoryItem (history' 144' historyDay' historyIndexDay);  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0) {  	historyIndexDay++;  	AddHistoryItem (history' 144' historyDay' historyIndexDay);  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0) {  	historyIndexDay++;  	AddHistoryItem (history' 144' historyDay' historyIndexDay);  }  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,Update,The following statement contains a magic number: AddHistoryItem (history' 144' historyDay' historyIndexDay);  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,HistoryIndexForMode,The following statement contains a magic number: if (mode == 2)  	return historyIndexDay;  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,HistoryForMode,The following statement contains a magic number: if (mode == 2)  	return historyDay;  
Magic Number,iStatServerService,StatMemory,C:\repos\bjango_iStat-Server-for-Windows\Service\StatMemory.cs,samples,The following statement contains a magic number: if (mode > 2)  	return "";  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,StatNetworkItem,The following statement contains a magic number: historyTotals = new FixedSizeQueue<NetworkStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,StatNetworkItem,The following statement contains a magic number: history = new FixedSizeQueue<NetworkStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,StatNetworkItem,The following statement contains a magic number: historyHour = new FixedSizeQueue<NetworkStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,StatNetworkItem,The following statement contains a magic number: historyDay = new FixedSizeQueue<NetworkStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,UpdateBandwidth,The following statement contains a magic number: if (historyTotals.Count () < 2)  	return;  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,UpdateHour,The following statement contains a magic number: AddHistoryItem (history' 6' historyHour' index);  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,UpdateDay,The following statement contains a magic number: AddHistoryItem (history' 144' historyDay' index);  
Magic Number,iStatServerService,StatNetworkItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,HistoryForMode,The following statement contains a magic number: if (mode == 2)  	return historyDay;  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,StatNetwork,The following statement contains a magic number: _timer = new Timer (Update' null' 0' 1000);  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: lock (_lock) {  	historyIndex++;  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces ();  	foreach (NetworkInterface adapter in nics) {  		AddInterface (adapter);  	}  	foreach (StatNetworkItem inf in _interfaces) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			inf.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			inf.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	historyIndexHour++;  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	historyIndexHour++;  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: foreach (StatNetworkItem inf in _interfaces) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		inf.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		inf.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: foreach (StatNetworkItem inf in _interfaces) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		inf.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		inf.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: foreach (StatNetworkItem inf in _interfaces) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		inf.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		inf.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: foreach (StatNetworkItem inf in _interfaces) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		inf.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		inf.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	inf.UpdateHour (historyIndexHour);  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	inf.UpdateHour (historyIndexHour);  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	inf.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	inf.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,HistoryIndexForMode,The following statement contains a magic number: if (mode == 2)  	return historyIndexDay;  
Magic Number,iStatServerService,StatNetwork,C:\repos\bjango_iStat-Server-for-Windows\Service\StatNetwork.cs,samples,The following statement contains a magic number: if (mode > 2)  	return "";  
Magic Number,iStatServerService,StatSensorItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,StatSensorItem,The following statement contains a magic number: history = new FixedSizeQueue<SensorStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatSensorItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,StatSensorItem,The following statement contains a magic number: historyHour = new FixedSizeQueue<SensorStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatSensorItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,StatSensorItem,The following statement contains a magic number: historyDay = new FixedSizeQueue<SensorStatQueue> {  	MaxSize = 602  };  
Magic Number,iStatServerService,StatSensorItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,UpdateHour,The following statement contains a magic number: AddHistoryItem (history' 6' historyHour' index);  
Magic Number,iStatServerService,StatSensorItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,UpdateDay,The following statement contains a magic number: AddHistoryItem (history' 144' historyDay' index);  
Magic Number,iStatServerService,StatSensorItem,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,HistoryForMode,The following statement contains a magic number: if (mode == 2)  	return historyDay;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,StatSensors,The following statement contains a magic number: _timer = new Timer (Update' null' 0' 6000);  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: lock (_lock) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		historyIndexHour++;  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		historyIndexDay++;  	historyIndex++;  	_computer.Accept (_visitor);  	//Update mechanism for OpenHardwareMonitorLib  	var moboTempSensors = from h in _computer.Hardware  	where h.HardwareType == HardwareType.Mainboard  	from sh in h.SubHardware  	where sh.HardwareType == HardwareType.SuperIO  	from ts in sh.Sensors  	where (ts.SensorType == SensorType.Temperature || ts.SensorType == SensorType.Fan)  	select ts;  	var gpuTempSensors = from h in _computer.Hardware  	where (h.HardwareType == HardwareType.GpuAti | h.HardwareType == HardwareType.GpuNvidia | h.HardwareType == HardwareType.HDD | h.HardwareType == HardwareType.CPU)  	from s in h.Sensors  	where (s.SensorType == SensorType.Temperature || s.SensorType == SensorType.Fan)  	select s;  	var allTemps = moboTempSensors.Concat (gpuTempSensors);  	foreach (var s in allTemps) {  		if (s.Value == null || s.Name == null)  			continue;  		if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  			continue;  		int type = 0;  		if (s.SensorType == SensorType.Fan)  			type = 2;  		AddSensor (s.Name' s.Value.Value' type);  	}  	foreach (StatSensorItem sensor in _sensors) {  		if (historyIndex >= 6 && (historyIndex % 6) == 0)  			sensor.UpdateHour (historyIndexHour);  		if (historyIndex >= 144 && (historyIndex % 144) == 0)  			sensor.UpdateDay (historyIndexDay);  	}  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	historyIndexHour++;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	historyIndexHour++;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	historyIndexDay++;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: foreach (var s in allTemps) {  	if (s.Value == null || s.Name == null)  		continue;  	if (s.SensorType != SensorType.Fan && s.SensorType != SensorType.Temperature)  		continue;  	int type = 0;  	if (s.SensorType == SensorType.Fan)  		type = 2;  	AddSensor (s.Name' s.Value.Value' type);  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (s.SensorType == SensorType.Fan)  	type = 2;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: type = 2;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: foreach (StatSensorItem sensor in _sensors) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		sensor.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		sensor.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: foreach (StatSensorItem sensor in _sensors) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		sensor.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		sensor.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: foreach (StatSensorItem sensor in _sensors) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		sensor.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		sensor.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: foreach (StatSensorItem sensor in _sensors) {  	if (historyIndex >= 6 && (historyIndex % 6) == 0)  		sensor.UpdateHour (historyIndexHour);  	if (historyIndex >= 144 && (historyIndex % 144) == 0)  		sensor.UpdateDay (historyIndexDay);  }  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	sensor.UpdateHour (historyIndexHour);  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 6 && (historyIndex % 6) == 0)  	sensor.UpdateHour (historyIndexHour);  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	sensor.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,Update,The following statement contains a magic number: if (historyIndex >= 144 && (historyIndex % 144) == 0)  	sensor.UpdateDay (historyIndexDay);  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,HistoryIndexForMode,The following statement contains a magic number: if (mode == 2)  	return historyIndexDay;  
Magic Number,iStatServerService,StatSensors,C:\repos\bjango_iStat-Server-for-Windows\Service\StatSensors.cs,samples,The following statement contains a magic number: if (mode > 2)  	return "";  
Missing Default,iStatServerService,Client,C:\repos\bjango_iStat-Server-for-Windows\Service\Client.cs,ReturnData,The following switch statement is missing a default case: switch (statType) {  case "cpu":  	foreach (var sample in statSamples) {  		data.Append (string.Format (STAT' "cpu"' index' Stat.Instance.CPU.HistoryIndexForMode (index)' Stat.Instance.SENSORS.sessionID));  		data.Append (Stat.Instance.CPU.samples (index' int.Parse (sample)));  		data.Append ("</stat>");  		index++;  	}  	break;  case "memory":  	foreach (var sample in statSamples) {  		data.Append (string.Format (STAT' "memory"' index' Stat.Instance.MEMORY.HistoryIndexForMode (index)' Stat.Instance.MEMORY.sessionID));  		data.Append (Stat.Instance.MEMORY.samples (index' int.Parse (sample)));  		data.Append ("</stat>");  		index++;  	}  	break;  case "sensors":  	foreach (var sample in statSamples) {  		data.Append (string.Format (STAT' "sensors"' index' Stat.Instance.SENSORS.HistoryIndexForMode (index)' Stat.Instance.SENSORS.sessionID));  		data.Append (Stat.Instance.SENSORS.samples (index' int.Parse (sample)));  		data.Append ("</stat>");  		index++;  	}  	break;  case "network":  	foreach (var sample in statSamples) {  		data.Append (string.Format (STAT' "network"' index' Stat.Instance.NET.HistoryIndexForMode (index)' Stat.Instance.NET.sessionID));  		data.Append (Stat.Instance.NET.samples (index' long.Parse (sample)));  		data.Append ("</stat>");  		index++;  	}  	break;  case "disks":  	foreach (var sample in statSamples) {  		data.Append (string.Format (STAT' "disks"' index' Stat.Instance.DISKS.HistoryIndexForMode (index)' Stat.Instance.DISKS.sessionID));  		data.Append (Stat.Instance.DISKS.samples (index' long.Parse (sample)));  		data.Append ("</stat>");  		index++;  	}  	break;  case "diskactivity":  	foreach (var sample in statSamples) {  		data.Append (string.Format (STAT' "diskactivity"' index' Stat.Instance.ACTIVTY.HistoryIndexForMode (index)' Stat.Instance.ACTIVTY.sessionID));  		data.Append (Stat.Instance.ACTIVTY.samples (index' long.Parse (sample)));  		data.Append ("</stat>");  		index++;  	}  	break;  case "uptime":  	data.Append (string.Format ("<stat type=\"uptime\"><s u=\"{0}\"></s></stat>"' Stat.Instance.CurrentUptime));  	break;  }  
