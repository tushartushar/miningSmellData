Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mond.Repl.Input,Highlighted,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighted.cs,ReadLine,The method has 197 lines of code.
Long Method,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,ColorNone,The method has 170 lines of code.
Complex Method,Mond.Repl.Input,Highlighted,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighted.cs,ReadLine,Cyclomatic complexity of the method is 31
Complex Method,Mond.Repl.Input,Highlighted,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighted.cs,Redraw,Cyclomatic complexity of the method is 8
Complex Method,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,ColorNone,Cyclomatic complexity of the method is 30
Complex Method,Mond.Repl,Program,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Program.cs,InteractiveRun,Cyclomatic complexity of the method is 8
Long Parameter List,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,OutputIfNext,The method has 5 parameters. Parameters: line' result' index' value' color
Magic Number,Mond.Repl.Input,Highlighted,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighted.cs,Highlighted,The following statement contains a magic number: _positions = new List<int>(8);
Magic Number,Mond.Repl.Input,Highlighted,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighted.cs,Highlighted,The following statement contains a magic number: _input = new List<char>(64);
Magic Number,Mond.Repl.Input,Highlighted,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighted.cs,ReadLine,The following statement contains a magic number: switch (info.Key)                 {                     case ConsoleKey.Enter:                         var result = new string(_input.ToArray());                          if (!string.IsNullOrWhiteSpace(result))                         {                             // add result to history                             _history.Insert(0' result);                             if (_history.Count > 50)                                 _history.RemoveAt(_history.Count - 1);                         }                          // restore console state                         RestorePosition(_input.Count);                         Console.ResetColor();                         Console.WriteLine();                         return result;                      case ConsoleKey.UpArrow:                         if (_historyIndex >= _history.Count -1)                             continue;                          if (_historyIndex == -1)                             _current = new string(_input.ToArray());                          _historyIndex++;                         SetInput(_history[_historyIndex]' out highlighter);                         continue;                      case ConsoleKey.DownArrow:                         if (_historyIndex <= -1)                             continue;                          _historyIndex--;                         var historyStr = _historyIndex == -1 ? _current : _history[_historyIndex];                          SetInput(historyStr' out highlighter);                         continue;                      case ConsoleKey.LeftArrow:                         if (_caretIndex == 0)                             continue;                          if (info.Modifiers.HasFlag(ConsoleModifiers.Control))                         {                             var diff = PreviousBoundary();                             _caretIndex += diff;                             Move(diff);                              continue;                         }                          _caretIndex--;                         Move(-1);                          continue;                      case ConsoleKey.RightArrow:                         if (_caretIndex == _input.Count)                             continue;                          if (info.Modifiers.HasFlag(ConsoleModifiers.Control))                         {                             var diff = NextBoundary();                             _caretIndex += diff;                             Move(diff);                              continue;                         }                          _caretIndex++;                         Move(1);                          continue;                      case ConsoleKey.Home:                         if (_caretIndex == 0)                             continue;                          Move(-_caretIndex);                         _caretIndex = 0;                         continue;                      case ConsoleKey.End:                         if (_caretIndex == _input.Count)                             continue;                          Move(_input.Count - _caretIndex);                         _caretIndex = _input.Count;                         continue;                      case ConsoleKey.Backspace:                         if (_caretIndex == 0)                             continue;                          if (info.Modifiers.HasFlag(ConsoleModifiers.Control))                         {                             var diff = PreviousBoundary();                              _caretIndex += diff;                             Move(diff);                              _input.RemoveRange(_caretIndex' Math.Abs(diff));                              highlighter = Redraw();                             continue;                         }                          _caretIndex--;                         _historyIndex = -1;                         _input.RemoveAt(_caretIndex);                          highlighter = Redraw();                          Move(-1);                         continue;                      case ConsoleKey.Delete:                         if (_caretIndex == _input.Count)                             continue;                          if (info.Modifiers.HasFlag(ConsoleModifiers.Control))                         {                             var diff = NextBoundary();                              _input.RemoveRange(_caretIndex' diff);                              highlighter = Redraw();                             continue;                         }                          _historyIndex = -1;                         _input.RemoveAt(_caretIndex);                          highlighter = Redraw();                         continue;                      case ConsoleKey.Escape:                         var count = _input.Count;                          if (count == 0)                             continue;                          _input.Clear();                         _caretIndex = 0;                         _historyIndex = -1;                          RestorePosition();                         SavePosition();                          highlighter = Redraw();                         continue;                      case ConsoleKey.Tab:                         continue;                      default:                         if (info.KeyChar == 0)                             continue;                          break;                 }
Magic Number,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,ColorNone,The following statement contains a magic number: index + 2 < line.Length && line[index + 2] == '_'
Magic Number,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,ColorNone,The following statement contains a magic number: index + 2 < line.Length && line[index + 2] == '_'
Magic Number,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,ColorNone,The following statement contains a magic number: index += 2;
Magic Number,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,ColorString,The following statement contains a magic number: index += 2;
Magic Number,Mond.Repl,Program,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Program.cs,Main,The following statement contains a magic number: Console.WriteLine($"Mond REPL v{mondVersion.ToString(3)}");
Magic Number,Mond.Repl,Program,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Program.cs,InteractiveRun,The following statement contains a magic number: result.Enumerate(state).Take(25)
Magic Number,Mond.Repl,Program,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Program.cs,CreateState,The following statement contains a magic number: state.Debugger = new MondRemoteDebugger(1597);
Missing Default,Mond.Repl.Input,Highlighter,C:\research\architectureSmells\repos\Rohansi_Mond\Mond.Repl\Input\Highlighter.cs,Highlight,The following switch statement is missing a default case: switch (_state)                 {                     case TokenState.None:                         ColorNone(line' result' ref index);                         break;                      case TokenState.MultiComment:                         ColorMultiComment(line' result' ref index);                         break;                      case TokenState.String:                         ColorString(line' result' ref index);                         break;                 }
