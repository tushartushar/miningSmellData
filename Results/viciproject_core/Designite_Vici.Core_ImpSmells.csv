Implementation smell,Namespace,Class,File,Method,Description
Long Method,Vici.Core,StringConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\StringConverter.cs,Convert,The method has 104 lines of code.
Long Method,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,BinaryArithmicExpression,The method has 166 lines of code.
Long Method,Vici.Core.Parser,ExpressionCompiler,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Parser\ExpressionParser.cs,Compile,The method has 114 lines of code.
Long Method,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,Parse,The method has 104 lines of code.
Long Method,Vici.Core.Parser,Tokenizer<T>,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Tokenizer\Tokenizer.cs,Tokenize,The method has 108 lines of code.
Complex Method,Vici.Core,ObjectConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\ObjectConverter.cs,Convert,Cyclomatic complexity of the method is 19
Complex Method,Vici.Core,StringConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\StringConverter.cs,Convert,Cyclomatic complexity of the method is 28
Complex Method,Vici.Core.Config,ConfigManager,D:\research\architectureSmells\repos\viciproject_core\Library\Source\EasyConfig\ConfigManager.cs,Fill,Cyclomatic complexity of the method is 14
Complex Method,Vici.Core.Parser,ExpressionVisitor,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Parser\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 12
Complex Method,Vici.Core.Parser,DynamicObject,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Context\DynamicObject.cs,TryGetValue,Cyclomatic complexity of the method is 9
Complex Method,Vici.Core.Parser,ParserContext,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Context\ParserContext.cs,ToBoolean,Cyclomatic complexity of the method is 17
Complex Method,Vici.Core.Parser,PropertyHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Context\PropertyHelper.cs,TryGetValue,Cyclomatic complexity of the method is 10
Complex Method,Vici.Core.Parser,AssignmentExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\AssignmentExpression.cs,Evaluate,Cyclomatic complexity of the method is 9
Complex Method,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,Cyclomatic complexity of the method is 16
Complex Method,Vici.Core.Parser,CallExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\CallExpression.cs,Evaluate,Cyclomatic complexity of the method is 9
Complex Method,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt32,Cyclomatic complexity of the method is 16
Complex Method,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt32,Cyclomatic complexity of the method is 14
Complex Method,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt64,Cyclomatic complexity of the method is 14
Complex Method,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt64,Cyclomatic complexity of the method is 14
Complex Method,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcFloat,Cyclomatic complexity of the method is 11
Complex Method,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcDouble,Cyclomatic complexity of the method is 11
Complex Method,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcDecimal,Cyclomatic complexity of the method is 11
Complex Method,Vici.Core.Parser,FieldExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\FieldExpression.cs,Evaluate,Cyclomatic complexity of the method is 17
Complex Method,Vici.Core.Parser,IndexExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\IndexExpression.cs,Evaluate,Cyclomatic complexity of the method is 11
Complex Method,Vici.Core.Parser,ExpressionCompiler,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Parser\ExpressionParser.cs,Compile,Cyclomatic complexity of the method is 22
Complex Method,Vici.Core.Parser,RPNExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Parser\RPNExpression.cs,ApplyToken,Cyclomatic complexity of the method is 16
Complex Method,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,UnEscape,Cyclomatic complexity of the method is 12
Complex Method,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,Number,Cyclomatic complexity of the method is 11
Complex Method,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,StringLiteral,Cyclomatic complexity of the method is 9
Complex Method,Vici.Core.Parser,DecimalLiteralMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\DecimalLiteralMatcher.cs,ProcessChar,Cyclomatic complexity of the method is 11
Complex Method,Vici.Core.Parser,IntegerLiteralMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\IntegerLiteralMatcher.cs,ProcessChar,Cyclomatic complexity of the method is 9
Complex Method,Vici.Core.Parser,TypeCastMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\TypeCastMatcher.cs,ProcessChar,Cyclomatic complexity of the method is 13
Complex Method,Vici.Core.Parser,SmartExpressionMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\SmartExpressionMatcher.cs,ProcessChar,Cyclomatic complexity of the method is 12
Complex Method,Vici.Core.Parser,WrappedExpressionMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\WrappedExpressionMatcher.cs,ProcessChar,Cyclomatic complexity of the method is 22
Complex Method,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,BuildOutput,Cyclomatic complexity of the method is 19
Complex Method,Vici.Core.Parser,MatchProcessor,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Tokenizer\BaseMatchers\AnyOfMatcher.cs,ProcessChar,Cyclomatic complexity of the method is 14
Complex Method,Vici.Core.Parser,Tokenizer<T>,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Tokenizer\Tokenizer.cs,Tokenize,Cyclomatic complexity of the method is 17
Complex Method,Vici.Core.Json,JsonSerializer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonSerializer.cs,WriteValue,Cyclomatic complexity of the method is 10
Complex Method,Vici.Core.Json,JsonParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonParser.cs,ParseObject,Cyclomatic complexity of the method is 13
Complex Method,Vici.Core.Json,JsonParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonParser.cs,ParseValue,Cyclomatic complexity of the method is 13
Complex Method,Vici.Core.Json,JsonParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonParser.cs,ParseArray,Cyclomatic complexity of the method is 9
Complex Method,Vici.Core.Logging,LoggingProviderFile,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Logger\Providers\LoggingProviderFile.cs,RemoveOldFiles,Cyclomatic complexity of the method is 11
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt32_Int32,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt64_Int32,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt64_Int32,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcBool,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt32,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt32,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt64,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt64,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcFloat,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcDouble,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcDecimal,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcString,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcStringObject,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcObjectString,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcObject,The method has 5 parameters. Parameters: op' p1' p2' stringComparison' expr
Long Parameter List,Vici.Core.Parser,ExpressionTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionTokenizer.cs,AddTokenMatcher,The method has 5 parameters. Parameters: tokenMatcher' tokenType' precedence' tokenEvaluator' numTerms
Long Parameter List,Vici.Core.Parser,ExpressionTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionTokenizer.cs,AddTokenMatcher,The method has 6 parameters. Parameters: tokenMatcher' tokenType' precedence' associativity' tokenEvaluator' numTerms
Long Parameter List,Vici.Core.Parser,ExpressionTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionTokenizer.cs,AddTernaryTokenMatcher,The method has 5 parameters. Parameters: matcher1' matcher2' precedence' associativity' tokenEvaluator
Long Parameter List,Vici.Core.Parser,ExpressionTokenMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionTokenMatcher.cs,ExpressionTokenMatcher,The method has 5 parameters. Parameters: matcher' tokenType' precedence' associativity' tokenEvaluator
Long Parameter List,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,BuildOutput,The method has 5 parameters. Parameters: compiledTemplate' macros' rootNode' outputBuffer' context
Long Parameter List,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,EvalParseFile,The method has 5 parameters. Parameters: templateParser' fileName' templateToken' context' parameters
Long Parameter List,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,OnEvalParseFile,The method has 5 parameters. Parameters: templateParser' fileName' templateToken' context' parameters
Long Parameter List,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,EvalParseFile,The method has 6 parameters. Parameters: parser' templateParser' fileName' token' context' parameters
Long Parameter List,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,OnEvalParseFile,The method has 6 parameters. Parameters: parser' templateParser' fileName' token' context' parameters
Long Parameter List,Vici.Core.Cache,SmartCache<T>,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Cache\SmartCache.cs,TryGetValue,The method has 5 parameters. Parameters: key' item' slidingExpiration' absoluteExpiration' addFunc
Long Parameter List,Vici.Core.Cache,CachedItem,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Cache\SmartCache.cs,CachedItem,The method has 5 parameters. Parameters: key' value' slidingExpiration' absoluteExpiration' time
Long Statement,Vici.Core,LazyBinder,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\LazyBinder.cs,MatchParameters,The length of the statement  "            var compareTypes = new[] { ParameterCompareType.Exact' ParameterCompareType.Assignable' ParameterCompareType.Implicit }; " is 120.
Long Statement,Vici.Core,LazyBinder,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\LazyBinder.cs,SelectBestMethod,The length of the statement  "            var compareTypes = new[] { ParameterCompareType.Exact' ParameterCompareType.Assignable' ParameterCompareType.Implicit }; " is 120.
Long Statement,Vici.Core,LazyBinder,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\LazyBinder.cs,SelectBestMethod,The length of the statement  "					.Select(compareType => methods.FirstOrDefault(m => MatchParameters(parameterTypes' m.GetParameters()' compareType) && m.Inspector().MatchBindingFlags(bindingFlags) )) " is 166.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetMethod,The length of the statement  "            return WalkAndFindSingle(t => t.GetTypeInfo().GetDeclaredMethods(name).FirstOrDefault(mi => types.SequenceEqual(mi.GetParameters().Select(p => p.ParameterType)))); " is 163.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetMethod,The length of the statement  "            return WalkAndFindSingle(t => t.GetTypeInfo().GetDeclaredMethods(name).FirstOrDefault(mi => mi.Inspector().MatchBindingFlags(bindingFlags))); " is 141.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetIndexer,The length of the statement  "            return WalkAndFindSingle(t => t.GetTypeInfo().DeclaredProperties.FirstOrDefault(pi => pi.Name == "Item" && LazyBinder.MatchParameters(types' pi.GetIndexParameters()))); " is 168.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,ImplementsOrInherits,The length of the statement  "                return _typeInfo.ImplementedInterfaces.Any(t => (t.GetTypeInfo().IsGenericType && t.GetTypeInfo().GetGenericTypeDefinition() == type)); " is 135.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetMethod,The length of the statement  "            return WalkAndFindSingle(t => LazyBinder.SelectBestMethod(t.GetTypeInfo().GetDeclaredMethods(methodName)'parameterTypes'bindingFlags)); " is 135.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetFields,The length of the statement  "            return WalkAndFindMultiple(t => t.GetTypeInfo().DeclaredFields.Where(fi => fi.Inspector().MatchBindingFlags(bindingFlags))); " is 124.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetProperties,The length of the statement  "            return WalkAndFindMultiple(t => t.GetTypeInfo().DeclaredProperties.Where(pi => pi.Inspector().MatchBindingFlags(bindingFlags))); " is 128.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetMethods,The length of the statement  "            return WalkAndFindMultiple(t => t.GetTypeInfo().DeclaredMethods.Where(mi => mi.Inspector().MatchBindingFlags(bindingFlags))); " is 125.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetFieldsAndProperties,The length of the statement  "                members = _typeInfo.DeclaredFields.Where(fi => fi.Inspector().MatchBindingFlags(bindingFlags)).Union<MemberInfo>(_typeInfo.DeclaredProperties.Where(pi => pi.Inspector().MatchBindingFlags(bindingFlags))).ToArray(); " is 213.
Long Statement,Vici.Core,TypeInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\TypeInspector.cs,GetFieldsAndProperties,The length of the statement  "                members = WalkAndFindMultiple(t => t.GetTypeInfo().DeclaredFields.Where(fi => fi.Inspector().MatchBindingFlags(bindingFlags)).Union<MemberInfo>(t.GetTypeInfo().DeclaredProperties.Where(pi => pi.Inspector().MatchBindingFlags(bindingFlags)))); " is 241.
Long Statement,Vici.Core,AssemblyInspector,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Reflection\Inspectors\AssemblyInspector.cs,FindCompatibleTypes,The length of the statement  "            return _assembly.DefinedTypes.Where(type => type != baseTypeInfo && baseTypeInfo.IsAssignableFrom(type)).ToArray().ConvertAll(typeInfo => typeInfo.AsType()); " is 157.
Long Statement,Vici.Core,StringConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\StringConverter.cs,Convert,The length of the statement  "                if (!Decimal.TryParse(stringValue.Replace('''' '.')' NumberStyles.Any' NumberFormatInfo.InvariantInfo' out decimalValue)) " is 121.
Long Statement,Vici.Core,StringConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\StringConverter.cs,Convert,The length of the statement  "                if (!DateTime.TryParseExact(stringValue' dateFormats ?? _dateFormats' CultureInfo.InvariantCulture' DateTimeStyles.NoCurrentDateDefault' out dateTime)) " is 151.
Long Statement,Vici.Core,StringConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\StringConverter.cs,Convert,The length of the statement  "                returnValue = (stringValue == "1" || stringValue.ToUpper() == "Y" || stringValue.ToUpper() == "YES" || stringValue.ToUpper() == "T" || stringValue.ToUpper() == "TRUE"); " is 168.
Long Statement,Vici.Core.Config,ConfigManager,D:\research\architectureSmells\repos\viciproject_core\Library\Source\EasyConfig\ConfigManager.cs,Fill,The length of the statement  "                bool follow = (attributes.Length > 0 && attributes[0] is ConfigObjectAttribute) || fieldType.Inspector().ImplementsOrInherits<IConfigObject>(); " is 143.
Long Statement,Vici.Core.Config,ConfigManager,D:\research\architectureSmells\repos\viciproject_core\Library\Source\EasyConfig\ConfigManager.cs,Fill,The length of the statement  "                        Type dicInterface = fieldType.Inspector().GetInterfaces().FirstOrDefault(i => i.GetGenericTypeDefinition() == typeof(IDictionary<'>)); " is 134.
Long Statement,Vici.Core.Config,ConfigManager,D:\research\architectureSmells\repos\viciproject_core\Library\Source\EasyConfig\ConfigManager.cs,GetValue,The length of the statement  "            return (from provider in _configProviders select provider.GetValue(key' _environment) into value where value != null select value.To(type)).FirstOrDefault(); " is 157.
Long Statement,Vici.Core.Parser,ParserContext,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Context\ParserContext.cs,ToBoolean,The length of the statement  "                    if (value is int || value is uint || value is short || value is ushort || value is long || value is ulong || value is byte || value is sbyte) " is 141.
Long Statement,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The length of the statement  "                else if (type1 == typeof(uint) || type2 == typeof(uint) && (type1 == typeof(sbyte) || type2 == typeof(sbyte) || type1 == typeof(short) || type2 == typeof(short) || type1 == typeof(int) || type2 == typeof(int))) " is 210.
Long Statement,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The length of the statement  "                else if (type1.Inspector().IsPrimitive && type2.Inspector().IsPrimitive && type1 != typeof(bool) && type2 != typeof(bool)) " is 122.
Long Statement,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The length of the statement  "                MethodInfo customOperatorMethod = type1.Inspector().GetMethod(_operatorOverloadNames[_operator]' new[] { type1' type2 }); " is 121.
Long Statement,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The length of the statement  "                    return new ValueExpression(TokenPosition' customOperatorMethod.Invoke(null' new[] { values[0].Value' values[1].Value })' customOperatorMethod.ReturnType); " is 154.
Long Statement,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The length of the statement  "                    return new ValueExpression(TokenPosition' BinaryExpressionHelper.CalcObject(_operator' values[0].Value' values[1].Value' context.StringComparison' this)' typeof(bool)); " is 168.
Long Statement,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The length of the statement  "                throw new IllegalOperandsException("Operator " + _operator + " is not supported on " + values[0] + " and " + values[1]' this); " is 126.
Long Statement,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The length of the statement  "            return new ValueExpression(TokenPosition' operatorMethod.Function(_operator' value1' value2' context.StringComparison' this)' returnType); " is 138.
Long Statement,Vici.Core.Parser,CallExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\CallExpression.cs,Evaluate,The length of the statement  "                return Exp.Value(TokenPosition' ((MethodDefinition)methodObject).Invoke(parameterTypes' parameterValues' out returnType)' returnType); " is 134.
Long Statement,Vici.Core.Parser,CallExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\CallExpression.cs,Evaluate,The length of the statement  "                MethodBase method = LazyBinder.SelectBestMethod(constructors' parameterTypes' BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance); " is 145.
Long Statement,Vici.Core.Parser,CallExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\CallExpression.cs,Evaluate,The length of the statement  "                MethodBase method = LazyBinder.SelectBestMethod(methods' parameterTypes' BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance); " is 140.
Long Statement,Vici.Core.Parser,MethodDefinition,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ContainerClasses\MethodDefinition.cs,GetMethodInfo,The length of the statement  "                MethodInfo methodInfo = t.Inspector().GetMethod(_methodName' BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance' parameterTypes); " is 144.
Long Statement,Vici.Core.Parser,MethodDefinition,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ContainerClasses\MethodDefinition.cs,GetMethodInfo,The length of the statement  "            //return _methodInfo ?? _type.GetMethod(_methodName' BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance' binder ?? LazyBinder.Default' parameterTypes' null); " is 172.
Long Statement,Vici.Core.Parser,FieldExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\FieldExpression.cs,Evaluate,The length of the statement  "                    return new ValueExpression(TokenPosition' indexerPropInfo.GetValue(targetObject' new object[] { Member })' indexerPropInfo.PropertyType); " is 137.
Long Statement,Vici.Core.Parser,FieldExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\FieldExpression.cs,Evaluate,The length of the statement  "    			throw new UnknownPropertyException("Unknown property " + Member + " for object " + Target + " (type " + targetType.Name + ")"' this); " is 133.
Long Statement,Vici.Core.Parser,FieldExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\FieldExpression.cs,Evaluate,The length of the statement  "    		if (members.Length > 1 && targetObject != null) // CoolStorage' ActiveRecord and Dynamic Proxy frameworks sometimes return > 1 member " is 133.
Long Statement,Vici.Core.Parser,FieldExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\FieldExpression.cs,Evaluate,The length of the statement  "    			return new ValueExpression(TokenPosition' ((PropertyInfo)member).GetValue(targetObject' null)' ((PropertyInfo)member).PropertyType); " is 132.
Long Statement,Vici.Core.Parser,IndexExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\IndexExpression.cs,Evaluate,The length of the statement  "                    else if (t != typeof(int) & t != typeof(int?) && t != typeof(short) && t != typeof(short?) && t != typeof(ushort) && t != typeof(ushort?)) " is 138.
Long Statement,Vici.Core.Parser,RangeExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\RangeExpression.cs,Evaluate,The length of the statement  "                return Exp.Value(TokenPosition' Range((long)Convert.ChangeType(from.Value' typeof(long)' null)' (long)Convert.ChangeType(to.Value' typeof(long)' null))); " is 153.
Long Statement,Vici.Core.Parser,RangeExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\RangeExpression.cs,Evaluate,The length of the statement  "                return Exp.Value(TokenPosition' Range((int)Convert.ChangeType(from.Value' typeof(int)' null)' (int)Convert.ChangeType(to.Value' typeof(int)' null))); " is 149.
Long Statement,Vici.Core.Parser,TypeCastExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\TypeCastExpression.cs,Evaluate,The length of the statement  "            return Exp.Value(TokenPosition' Convert.ChangeType(TargetExpression.Evaluate(context).Value' className.Type' null)' className.Type); " is 132.
Long Statement,Vici.Core.Parser,ExpressionTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionTokenizer.cs,AddTernaryTokenMatcher,The length of the statement  "            ExpressionTokenMatcher partial1 = new ExpressionTokenMatcher(matcher1' TokenType.TernaryOperator1' precedence' associativity' null); " is 132.
Long Statement,Vici.Core.Parser,ExpressionTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionTokenizer.cs,AddTernaryTokenMatcher,The length of the statement  "            ExpressionTokenMatcher partial2 = new ExpressionTokenMatcher(matcher2' TokenType.TernaryOperator1' precedence' associativity' null); " is 132.
Long Statement,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,TypeCast,The length of the statement  "            return new TypeCastExpression(position' new VariableExpression(position' token.Substring(1' token.Length - 2).Trim())' terms[0]); " is 129.
Long Statement,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,Render,The length of the statement  "                Dictionary<string'TemplateNode> macros = new Dictionary<string' TemplateNode>(compiledTemplate.Macros' StringComparer.OrdinalIgnoreCase); " is 137.
Long Statement,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,Render,The length of the statement  "                    throw new TemplateRenderingException("Error rendering template: " + ex.Message' ex' ((IPositionedException)ex).Position); " is 121.
Long Statement,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,BuildOutput,The length of the statement  "                    CompiledTemplate template = EvalParseFile(this' compiledTemplate.FileName' parseFileNode.TemplateToken' context' out parameters); " is 129.
Long Statement,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,OnEvalParseFile,The length of the statement  "            string includeFile = FileIO.Delegates.BuildFullPath(Path.Combine(Path.GetDirectoryName(pExpr.MainExpression)' fileName)); " is 121.
Long Statement,Vici.Core.Parser,Tokenizer<T>,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Tokenizer\Tokenizer.cs,Tokenize,The length of the statement  "            successfulTokens.AddRange(tokenMatchers.Where(tokenMatcher => tokenMatcher.Feed('\0'' s' s.Length) == TokenizerState.Success)); " is 127.
Long Statement,Vici.Core.Json,JsonSerializer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonSerializer.cs,WriteValue,The length of the statement  "            else if (obj is sbyte || obj is byte || obj is short || obj is ushort || obj is int || obj is uint || obj is long || obj is ulong || obj is decimal || obj is double || obj is float) " is 181.
Long Statement,Vici.Core.Json,JsonParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonParser.cs,ParseValue,The length of the statement  "            if (type == typeof(int) || type == typeof(short) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(decimal)) " is 151.
Long Statement,Vici.Core.Json,StringTokenMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\Tokenizer\Tokens\JSONStringTokenMatcher.cs,TranslateToken,The length of the statement  "                token = Regex.Replace(token' @"\\[uU][a-fA-F0-9]{4}"' m => ((char)uint.Parse(m.Value.Substring(2)' NumberStyles.HexNumber)).ToString()); " is 136.
Long Statement,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The length of the statement  "                string iterator = originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim(); " is 146.
Long Statement,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The length of the statement  "                string expr = originalToken.Substring(tokenProcessor.StartIndexes[6]' tokenProcessor.StartIndexes[7] - tokenProcessor.StartIndexes[6]).Trim(); " is 142.
Long Statement,Vici.Core.Parser.Config,VelocityTagMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The length of the statement  "                return originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim(); " is 135.
Long Statement,Vici.Core.Logging,Logger,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Logger\Logger.cs,LogException,The length of the statement  "                foreach (var provider in _loggingProviders.Where(provider => (level & provider.LogLevelMask) != 0 && level >= provider.MinimumLogLevel)) " is 136.
Long Statement,Vici.Core.Logging,Logger,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Logger\Logger.cs,Log,The length of the statement  "                foreach (var provider in _loggingProviders.Where(provider => (level & provider.LogLevelMask) != 0 && level >= provider.MinimumLogLevel)) " is 136.
Complex Conditional,Vici.Core,StringConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\StringConverter.cs,Convert,The conditional expression  "type == typeof (Int32) || type == typeof (Int16) || type == typeof (Int64) || type == typeof (SByte)"  is complex.
Complex Conditional,Vici.Core,StringConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\StringConverter.cs,Convert,The conditional expression  "type == typeof (UInt32) || type == typeof (UInt16) || type == typeof (UInt64) || type == typeof (Byte)"  is complex.
Complex Conditional,Vici.Core.Parser,ParserContext,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Context\ParserContext.cs,ToBoolean,The conditional expression  "value is int || value is uint || value is short || value is ushort || value is long || value is ulong || value is byte || value is sbyte"  is complex.
Complex Conditional,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The conditional expression  "type1 == typeof(uint) || type2 == typeof(uint) && (type1 == typeof(sbyte) || type2 == typeof(sbyte) || type1 == typeof(short) || type2 == typeof(short) || type1 == typeof(int) || type2 == typeof(int))"  is complex.
Complex Conditional,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,Evaluate,The conditional expression  "type1.Inspector().IsPrimitive && type2.Inspector().IsPrimitive && type1 != typeof(bool) && type2 != typeof(bool)"  is complex.
Complex Conditional,Vici.Core.Parser,BinaryArithmicExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\BinaryArithmicExpression.cs,FindOperatorMethod,The conditional expression  "(sameType1 || canConvert1) && (sameType2 || canConvert2)"  is complex.
Complex Conditional,Vici.Core.Parser,IndexExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\IndexExpression.cs,Evaluate,The conditional expression  "t != typeof(int) & t != typeof(int?) && t != typeof(short) && t != typeof(short?) && t != typeof(ushort) && t != typeof(ushort?)"  is complex.
Complex Conditional,Vici.Core.Parser,RPNExpression,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Parser\RPNExpression.cs,ApplyToken,The conditional expression  "(token.Associativity == OperatorAssociativity.Right && token.Precedence < stackOperator.Precedence)  					|| (token.Associativity == OperatorAssociativity.Left && token.Precedence <= stackOperator.Precedence)"  is complex.
Complex Conditional,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,StringLiteral,The conditional expression  "((char.ToLower(c) < 'a' || char.ToLower(c) > 'f') && (c < '0' || c > '9')) || hexString.Length == 4"  is complex.
Complex Conditional,Vici.Core.Parser,IntegerLiteralMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\IntegerLiteralMatcher.cs,ProcessChar,The conditional expression  "(_suffix == 'l' || _suffix == 'L') && (c == 'U' || c == 'u')"  is complex.
Complex Conditional,Vici.Core.Parser,IntegerLiteralMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\IntegerLiteralMatcher.cs,ProcessChar,The conditional expression  "(_suffix == 'u' || _suffix == 'U') && (c == 'L' || c == 'l')"  is complex.
Complex Conditional,Vici.Core.Parser,TypeCastMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\TypeCastMatcher.cs,ProcessChar,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '.' || c == '_'"  is complex.
Complex Conditional,Vici.Core.Parser,TypeCastMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\TypeCastMatcher.cs,ProcessChar,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '.' || c == '_'"  is complex.
Complex Conditional,Vici.Core.Parser,TypeCastMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\TypeCastMatcher.cs,ProcessChar,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || (c >= '0' && c <= '9') || c == '('"  is complex.
Complex Conditional,Vici.Core.Parser,SmartExpressionMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\SmartExpressionMatcher.cs,ProcessChar,The conditional expression  "_parenLevel == 0 && _bracketLevel == 0 && _terminationChars.IndexOf(c) >= 0 || "{}\0".IndexOf(c) >= 0"  is complex.
Complex Conditional,Vici.Core.Json,JsonSerializer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonSerializer.cs,WriteValue,The conditional expression  "obj is sbyte || obj is byte || obj is short || obj is ushort || obj is int || obj is uint || obj is long || obj is ulong || obj is decimal || obj is double || obj is float"  is complex.
Complex Conditional,Vici.Core.Json,JsonParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonParser.cs,ParseValue,The conditional expression  "type == typeof(int) || type == typeof(short) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(decimal)"  is complex.
Empty Catch Block,Vici.Core.Scheduling,FileHistoryStore,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Scheduler\ScheduleHistory\FileHistoryStore.cs,FileHistoryStore,The method has an empty catch block.
Magic Number,Vici.Core,ByteArrayExtensions,D:\research\architectureSmells\repos\viciproject_core\Library\Source\BinaryHelper.cs,ToHex,The following statement contains a magic number: var result = new StringBuilder(bytes.Length*2);
Magic Number,Vici.Core,ObjectConverter,D:\research\architectureSmells\repos\viciproject_core\Library\Source\SmartConverter\ObjectConverter.cs,Convert,The following statement contains a magic number: return new DateTime(1970' 1' 1).AddSeconds(seconds);
Magic Number,Vici.Core.Parser,ExpressionToken,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionToken.cs,ExpressionToken,The following statement contains a magic number: switch (tokenMatcher.TokenType)              {                  case TokenType.TernaryOperator: _numTerms = 3; break;                  case TokenType.UnaryOperator: _numTerms = 1; break;                  case TokenType.Operator: _numTerms = 2; break;              }
Magic Number,Vici.Core.Parser,ExpressionToken,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionToken.cs,ExpressionToken,The following statement contains a magic number: switch (tokenMatcher.TokenType)              {                  case TokenType.TernaryOperator: _numTerms = 3; break;                  case TokenType.UnaryOperator: _numTerms = 1; break;                  case TokenType.Operator: _numTerms = 2; break;              }
Magic Number,Vici.Core.Parser,FunctionCallToken,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\FunctionCallToken.cs,FunctionCallToken,The following statement contains a magic number: Precedence = 20;
Magic Number,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,CSharpEvaluator,The following statement contains a magic number: _numberFormat = new NumberFormatInfo                                  {                                      NumberDecimalSeparator = "."'                                      NumberGroupSeparator = "'"'                                      NumberGroupSizes = new[] {3}                                  };
Magic Number,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,TypeCast,The following statement contains a magic number: return new TypeCastExpression(position' new VariableExpression(position' token.Substring(1' token.Length - 2).Trim())' terms[0]);
Magic Number,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,Ternary,The following statement contains a magic number: return new ConditionalExpression(position' terms[0]' terms[1]' terms[2]);
Magic Number,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,UnEscape,The following statement contains a magic number: s.Length == 2
Magic Number,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,CharLiteral,The following statement contains a magic number: return Exp.Value(position' UnEscape(token.Substring(1' token.Length - 2)' position));
Magic Number,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,StringLiteral,The following statement contains a magic number: string s = token.Substring(1' token.Length - 2);
Magic Number,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,Constructor,The following statement contains a magic number: string className = token.Substring(3).Trim();
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new StringMatcher("&&")' TokenType.Operator' 10' CSharpEvaluator.ShortcutOperator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new StringMatcher("||")' TokenType.Operator' 9' CSharpEvaluator.ShortcutOperator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new StringMatcher("??")' TokenType.Operator' 8' CSharpEvaluator.Coalesce);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new StringMatcher("?:")' TokenType.Operator' 8' CSharpEvaluator.DefaultValueOperator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new StringMatcher("::")' TokenType.Operator' 8' CSharpEvaluator.ValueOrNullOperator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTernaryTokenMatcher(new CharMatcher('?')' new CharMatcher(':')' 7' OperatorAssociativity.Right' CSharpEvaluator.Ternary);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyOfStringMatcher("=="'"!=")' TokenType.Operator' 14'CSharpEvaluator.Operator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new CharMatcher('.')' TokenType.Operator' 20'CSharpEvaluator.DotOperator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyCharMatcher("!-~")' TokenType.UnaryOperator' 19' OperatorAssociativity.Right' CSharpEvaluator.Unary);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyCharMatcher("*/%")' TokenType.Operator' 18'CSharpEvaluator.Operator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyCharMatcher("+-")' TokenType.Operator' 17'CSharpEvaluator.Operator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyOfStringMatcher("<<"'">>")' TokenType.Operator' 16'CSharpEvaluator.Operator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyOfStringMatcher("<="'">="'"<"'">")' TokenType.Operator' 15'CSharpEvaluator.Operator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyOfStringMatcher("as"'"is")' TokenType.Operator' 15'CSharpEvaluator.IsAsOperator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new StringMatcher("in")' TokenType.Operator' 2' CSharpEvaluator.InOperator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new AnyCharMatcher("&|")' TokenType.Operator' 13'CSharpEvaluator.Operator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new CharMatcher('^')' TokenType.Operator' 12' CSharpEvaluator.Operator);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new CharMatcher('=')' TokenType.Operator' 6' OperatorAssociativity.Right' CSharpEvaluator.Assignment);
Magic Number,Vici.Core.Parser,CSharpTokenizer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\CSharpTokenizer.cs,CSharpTokenizer,The following statement contains a magic number: AddTokenMatcher(new TypeCastMatcher()' TokenType.UnaryOperator' 19' OperatorAssociativity.Right' CSharpEvaluator.TypeCast);
Magic Number,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,OnEvalIteration,The following statement contains a magic number: localContext.SetLocal(iteratorName + "@odd"' rowNum % 2 == 1);
Magic Number,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,OnEvalIteration,The following statement contains a magic number: localContext.SetLocal(iteratorName + "@even"' rowNum % 2 == 0);
Magic Number,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,OnEvalIteration,The following statement contains a magic number: localContext.SetLocal(iteratorName + "@oddeven"' rowNum % 2 == 0 ? "even" : "odd");
Magic Number,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,OnEvalIteration,The following statement contains a magic number: localContext.SetLocal(iteratorName + "@ODDEVEN"' rowNum % 2 == 0 ? "EVEN" : "ODD");
Magic Number,Vici.Core.Parser,TemplateParserConfig,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParserConfig.cs,OnEvalIteration,The following statement contains a magic number: localContext.SetLocal(iteratorName + "@OddEven"' rowNum % 2 == 0 ? "Even" : "Odd");
Magic Number,Vici.Core.Parser,Tokenizer<T>,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Tokenizer\Tokenizer.cs,Tokenize,The following statement contains a magic number: List<TokenMatcher> successfulTokens = new List<TokenMatcher>(5);
Magic Number,Vici.Core.Json,JsonSerializer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonSerializer.cs,WriteDate,The following statement contains a magic number: long ticks = ((long)(date.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds);
Magic Number,Vici.Core.Json,JsonSerializer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonSerializer.cs,WriteString,The following statement contains a magic number: switch (c)                  {                      case '\t': _output.Append("\\t"); break;                      case '\r': _output.Append("\\r"); break;                      case '\n': _output.Append("\\n"); break;                      case '"':                      case '\\': _output.Append("\\" + c); break;                      default:                          {                              if (c >= ' ' && c < 128)                                  _output.Append(c);                              else                                  _output.Append("\\u" + ((int)c).ToString("X4"));                          }                          break;                  }
Magic Number,Vici.Core.Json,JsonParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonParser.cs,ParseObject,The following statement contains a magic number: string propName = CurrentToken().Text.Substring(1' CurrentToken().Text.Length - 2);
Magic Number,Vici.Core.Json,JsonParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonParser.cs,ParseString,The following statement contains a magic number: string s = CurrentToken().Text.Substring(1'CurrentToken().Text.Length-2);
Magic Number,Vici.Core.Json,StringTokenMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\Tokenizer\Tokens\JSONStringTokenMatcher.cs,TranslateToken,The following statement contains a magic number: token = Regex.Replace(token' @"\\[uU][a-fA-F0-9]{4}"' m => ((char)uint.Parse(m.Value.Substring(2)' NumberStyles.HexNumber)).ToString());
Magic Number,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: string iterator = originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: string iterator = originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: string iterator = originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: string expr = originalToken.Substring(tokenProcessor.StartIndexes[6]' tokenProcessor.StartIndexes[7] - tokenProcessor.StartIndexes[6]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: string expr = originalToken.Substring(tokenProcessor.StartIndexes[6]' tokenProcessor.StartIndexes[7] - tokenProcessor.StartIndexes[6]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityForEachMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: string expr = originalToken.Substring(tokenProcessor.StartIndexes[6]' tokenProcessor.StartIndexes[7] - tokenProcessor.StartIndexes[6]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityTagMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: return originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityTagMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: return originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim();
Magic Number,Vici.Core.Parser.Config,VelocityTagMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\Velocity\VelocityTokenizer.cs,TranslateToken,The following statement contains a magic number: return originalToken.Substring(tokenProcessor.StartIndexes[2]' tokenProcessor.StartIndexes[3] - tokenProcessor.StartIndexes[2]).Trim();
Magic Number,Vici.Core.Scheduling,MonthlyScheduler,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Scheduler\MonthlyScheduler.cs,MonthlyScheduler,The following statement contains a magic number: MonthDays = new bool[32];
Magic Number,Vici.Core.Scheduling,TimeOfDayScheduler,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Scheduler\TimeOfDayScheduler.cs,ShouldRun,The following statement contains a magic number: nextRun += new TimeSpan(24' 0' 0);
Magic Number,Vici.Core.Logging,LoggingProviderFile,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Logger\Providers\LoggingProviderFile.cs,LoggingProviderFile,The following statement contains a magic number: MaxLogAge = TimeSpan.FromDays(7);
Magic Number,Vici.Core.Logging,LoggingProviderFile,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Logger\Providers\LoggingProviderFile.cs,RemoveOldFiles,The following statement contains a magic number: (DateTime.Now - _lastCleanupTime).TotalMinutes >= 60
Magic Number,Vici.Core.Logging,LoggingProviderFile,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Logger\Providers\LoggingProviderFile.cs,LogText,The following statement contains a magic number: s = s.Replace("\r"' "").Replace("\n"' "\n" + new string(' ''timePart.Length+3)).Replace("\n"'"\r\n");
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt32_Int32,The following switch statement is missing a default case: switch (op)              {                  case ">>": return v1 >> v2;                  case "<<": return v1 << v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt64_Int32,The following switch statement is missing a default case: switch (op)              {                  case ">>": return v1 >> v2;                  case "<<": return v1 << v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt64_Int32,The following switch statement is missing a default case: switch (op)              {                  case ">>": return v1 >> v2;                  case "<<": return v1 << v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcBool,The following switch statement is missing a default case: switch (op)              {                  case "^": return v1 ^ v2;                  case "&": return v1 & v2;                  case "|": return v1 | v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt32,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;                  case "-": return v1 - v2;                  case "/": return v1 / v2;                  case "*": return v1 * v2;                  case "%": return v1 % v2;                  case "^": return v1 ^ v2;                  case "&": return v1 & v2;                  case "|": return v1 | v2;                  case ">>": return v1 >> v2;                  case "<<": return v1 << v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;                  case "<=": return v1 <= v2;                  case ">=": return v1 >= v2;                  case "<": return v1 < v2;                  case ">": return v1 > v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt32,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;                  case "-": return v1 - v2;                  case "/": return v1 / v2;                  case "*": return v1 * v2;                  case "%": return v1 % v2;                  case "^": return v1 ^ v2;                  case "&": return v1 & v2;                  case "|": return v1 | v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;                  case "<=": return v1 <= v2;                  case ">=": return v1 >= v2;                  case "<": return v1 < v2;                  case ">": return v1 > v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcInt64,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;                  case "-": return v1 - v2;                  case "/": return v1 / v2;                  case "*": return v1 * v2;                  case "%": return v1 % v2;                  case "^": return v1 ^ v2;                  case "&": return v1 & v2;                  case "|": return v1 | v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;                  case "<=": return v1 <= v2;                  case ">=": return v1 >= v2;                  case "<": return v1 < v2;                  case ">": return v1 > v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcUInt64,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;                  case "-": return v1 - v2;                  case "/": return v1 / v2;                  case "*": return v1 * v2;                  case "%": return v1 % v2;                  case "^": return v1 ^ v2;                  case "&": return v1 & v2;                  case "|": return v1 | v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;                  case "<=": return v1 <= v2;                  case ">=": return v1 >= v2;                  case "<": return v1 < v2;                  case ">": return v1 > v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcFloat,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;                  case "-": return v1 - v2;                  case "/": return v1 / v2;                  case "*": return v1 * v2;                  case "%": return v1 % v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;                  case "<=": return v1 <= v2;                  case ">=": return v1 >= v2;                  case "<": return v1 < v2;                  case ">": return v1 > v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcDouble,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;                  case "-": return v1 - v2;                  case "/": return v1 / v2;                  case "*": return v1 * v2;                  case "%": return v1 % v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;                  case "<=": return v1 <= v2;                  case ">=": return v1 >= v2;                  case "<": return v1 < v2;                  case ">": return v1 > v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcDecimal,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;                  case "-": return v1 - v2;                  case "/": return v1 / v2;                  case "*": return v1 * v2;                  case "%": return v1 % v2;                  case "==": return v1 == v2;                  case "!=": return v1 != v2;                  case "<=": return v1 <= v2;                  case ">=": return v1 >= v2;                  case "<": return v1 < v2;                  case ">": return v1 > v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcStringObject,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;              }
Missing Default,Vici.Core.Parser,BinaryExpressionHelper,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Expression\ExpressionHelper\BinaryExpressionHelper.cs,CalcObjectString,The following switch statement is missing a default case: switch (op)              {                  case "+": return v1 + v2;              }
Missing Default,Vici.Core.Parser,ExpressionToken,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\ExpressionParser\Tokenizer\ExpressionToken.cs,ExpressionToken,The following switch statement is missing a default case: switch (tokenMatcher.TokenType)              {                  case TokenType.TernaryOperator: _numTerms = 3; break;                  case TokenType.UnaryOperator: _numTerms = 1; break;                  case TokenType.Operator: _numTerms = 2; break;              }
Missing Default,Vici.Core.Parser,CSharpEvaluator,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Parser\CSharpEvaluator.cs,Number,The following switch statement is missing a default case: switch (suffix)                  {                      case "M":                          type = typeof(decimal);                          break;                      case "D":                          type = typeof(double);                          break;                      case "F":                          type = typeof(float);                          break;                      case "L":                          type = typeof(long);                          break;                      case "U":                          type = typeof(uint);                          break;                      case "LU":                      case "UL":                          type = typeof(ulong);                          break;                  }
Missing Default,Vici.Core.Parser,DecimalLiteralMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\DecimalLiteralMatcher.cs,ProcessChar,The following switch statement is missing a default case: switch (_stage)              {                  case Stage.Num1a:                      {                          if (!isDigit)                              return TokenizerState.Fail;                            _stage = Stage.Num1b;                      }                      break;                    case Stage.Num1b:                      {                          if (c == '.')                          {                              _stage = Stage.Num2a;                          }                          else if (!isDigit)                          {                              return TokenizerState.Fail;                          }                      }                      break;                    case Stage.Num2a:                      {                          if (!isDigit)                              return TokenizerState.Fail;                            _stage = Stage.Num2b;                      }                      break;                    case Stage.Num2b:                      {                          if (SUFFIXES.IndexOf(c) >= 0)                              _stage = Stage.Done;                          else if (!isDigit)                              return TokenizerState.Success;                      }                      break;                    case Stage.Done:                      return TokenizerState.Success;              }
Missing Default,Vici.Core.Parser,IntegerLiteralMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\Parsers\CSharp\Tokenizer\Tokens\IntegerLiteralMatcher.cs,ProcessChar,The following switch statement is missing a default case: switch (_stage)              {                  case Stage.Num1:                      {                          if (!isDigit)                              return TokenizerState.Fail;                            _stage = Stage.Num2;                      }                      break;                    case Stage.Num2:                      {                          if (SUFFIXES.IndexOf(c) >= 0)                          {                              _stage = Stage.Suffix;                              _suffix = c;                          }                          else if (!isDigit)                          {                              return TokenizerState.Success;                          }                      }                      break;                    case Stage.Suffix:                      {                          if ((_suffix == 'l' || _suffix == 'L') && (c == 'U' || c == 'u'))                          {                              _stage = Stage.Done;                          }                          else if ((_suffix == 'u' || _suffix == 'U') && (c == 'L' || c == 'l'))                          {                              _stage = Stage.Done;                          }                          else                          {                              return TokenizerState.Success;                          }                      }                      break;                    case Stage.Done:                      return TokenizerState.Success;              }
Missing Default,Vici.Core.Parser,SmartExpressionMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\SmartExpressionMatcher.cs,ProcessChar,The following switch statement is missing a default case: switch (_state)              {                  case State.MatchingExpression:                      {                          if (_parenLevel == 0 && _bracketLevel == 0 && _terminationChars.IndexOf(c) >= 0 || "{}\0".IndexOf(c) >= 0)                          {                              if (!_started)                                  return TokenizerState.Fail;                                return TokenizerState.Success;                          }                          else if (c == '"' || c == '\'')                          {                              _state = State.InLiteral;                              _literalChar = c;                          }                          else if (c == '(')                          {                              _parenLevel++;                          }                          else if (c == ')')                          {                              _parenLevel--;                          }                          else if (c == '[')                          {                              _bracketLevel++;                          }                          else if (c == ']')                          {                              _bracketLevel--;                          }                            _started = true;                      }                      break;                    case State.InEscape:                      {                          _state = State.InLiteral;                      }                      break;                    case State.InLiteral:                      {                          if (c == '\\')                              _state = State.InEscape;                          else if (c == _literalChar)                              _state = State.MatchingExpression;                      }                      break;                }
Missing Default,Vici.Core.Parser,WrappedExpressionMatcher,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateConfigs\WrappedExpressionMatcher.cs,ProcessChar,The following switch statement is missing a default case: switch (_state)              {                  case State.MatchingPart:                      {                          if (_index == 0 && _currentPart > 0 && " \t\n\r".IndexOf(c) >= 0)                              return TokenizerState.Valid;                            bool match = IsMatch(_parts[_currentPart][_index++]' c);                            if (!match)                              return TokenizerState.Fail;                            if (_index == _parts[_currentPart].Length)                          {                              _currentPart++;                              _index = 0;                                if (_currentPart == _parts.Length - 1)                              {                                  _startIndex = currentIndex + 1;                                    _state = State.MatchingExpression;                              }                          }                      }                      break;                    case State.MatchingExpression:                      {                          if (c == '\0')                              return TokenizerState.Fail;                            if (_bracketLevel == 0 && _parenLevel == 0)                          {                              if (!IsMatch(c' _parts[_parts.Length - 1][_index++]))                              {                                  _index = 0;                              }                              else if (_index == _parts[_parts.Length - 1].Length)                              {                                  _expression = fullExpression.Substring(_startIndex' currentIndex - _startIndex - _index + 1);                                    _state = State.Success;                              }                          }                          else                          {                              _index = 0;                          }                            if (c == '"' || c == '\'')                          {                              _state = State.InLiteral;                              _literalChar = c;                          }                          else if (c == '(')                          {                              _parenLevel++;                          }                          else if (c == ')')                          {                              if (_parenLevel > 0)                                  _parenLevel--;                          }                          else if (c == '[')                          {                              _bracketLevel++;                          }                          else if (c == ']')                          {                              if (_bracketLevel > 0)                                  _bracketLevel--;                          }                      }                      break;                    case State.InLiteral:                      {                          if (c == '\\')                          {                              _state = State.InEscape;                          }                          else if (c == _literalChar)                          {                              _state = State.MatchingExpression;                              _index = 0;                          }                      }                      break;                    case State.InEscape:                      {                          _state = State.InLiteral;                      }                      break;                    case State.Success:                      return TokenizerState.Success;              }
Missing Default,Vici.Core.Parser,TemplateParser,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Parser\TemplateParser\TemplateParser.cs,Parse,The following switch statement is missing a default case: switch (token.TokenType)                      {                          case TemplateTokenType.MacroCall:                              {                                  currentNode.Add(new MacroCallTemplateNode(token));                              }                              break;                            case TemplateTokenType.ParseFile:                              {                                  currentNode.Add(new ParseFileTemplateNode(token));                              }                              break;                            case TemplateTokenType.IncludeFile:                              {                                  currentNode.Add(new IncludeFileTemplateNode(token));                              }                              break;                            case TemplateTokenType.Statement:                          case TemplateTokenType.Expression:                              {                                  currentNode.Add(new ExpressionTemplateNode(token));                              }                              break;                            case TemplateTokenType.MacroDefinition:                              {                                  nodeStack.Push(currentNode);                                    currentNode = currentNode.Add(new MacroDefinitionTemplateNode(token));                                    string macroName = EvalMacroDefinition(token);                                    compiledTemplate.Macros[macroName] = currentNode;                              }                              break;                            case TemplateTokenType.ForEach:                              {                                  nodeStack.Push(currentNode);                                    currentNode = currentNode.Add(new ForEachTemplateNode((ForeachTemplateToken) token));                              }                              break;                            case TemplateTokenType.If:                              {                                  nodeStack.Push(currentNode);                                    IfTemplateNode ifNode = (IfTemplateNode) currentNode.Add(new IfTemplateNode(token));                                    ifNode.TrueNode = new TemplateNode();                                    nodeStack.Push(ifNode);                                    currentNode = ifNode.TrueNode;                              }                              break;                            case TemplateTokenType.ElseIf:                              {                                  IfTemplateNode ifNode = (IfTemplateNode) nodeStack.Peek();                                    currentNode = ifNode.FalseNode = new TemplateNode();                                    ifNode = (IfTemplateNode) currentNode.Add(new IfTemplateNode(token));                                    ifNode.TrueNode = new TemplateNode();                                    nodeStack.Push(ifNode);                                    currentNode = ifNode.TrueNode;                              }                              break;                            case TemplateTokenType.Else:                              {                                  IfTemplateNode ifNode = (IfTemplateNode) nodeStack.Peek();                                    currentNode = ifNode.FalseNode = new TemplateNode();                              }                              break;                            case TemplateTokenType.EndBlock:                              {                                  while (nodeStack.Peek() is IfTemplateNode)                                  {                                      nodeStack.Pop();                                  }                                    currentNode = nodeStack.Pop();                              }                              break;                      }
Missing Default,Vici.Core.Json,JsonSerializer,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Json\JsonSerializer.cs,WriteDate,The following switch statement is missing a default case: switch (_dateFormat)              {                  case JsonDateFormat.NewDate:                       _output.AppendFormat("new Date({0})"'ticks);                      break;                    case JsonDateFormat.Date:                      _output.AppendFormat("\"Date({0})\""' ticks);                      break;                    case JsonDateFormat.SlashDate:                      _output.AppendFormat("\"/Date({0})/\""' ticks);                      break;                    case JsonDateFormat.EscapedSlashDate:                      _output.AppendFormat("\"\\/Date({0})\\/\""' ticks);                      break;                    case JsonDateFormat.UtcISO:                      _output.AppendFormat("\"{0}\""' date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ"));                      break;                    case JsonDateFormat.LocalISO:                      _output.AppendFormat("\"{0}\""' date.ToLocalTime().ToString("yyyy-MM-ddTHH:mm:ss"));                      break;              }
Missing Default,Vici.Core.Logging,LoggingProviderFile,D:\research\architectureSmells\repos\viciproject_core\Library\Source\Logger\Providers\LoggingProviderFile.cs,GenerateFileName,The following switch statement is missing a default case: switch (tag)                       {                           case "day":                               return timeStamp.Day.ToString("00");                           case "month":                               return timeStamp.Month.ToString("00");                           case "year":                               return timeStamp.Year.ToString("0000");                           case "min":                               return timeStamp.Minute.ToString("00");                           case "hour":                               return timeStamp.Hour.ToString("00");                           case "sec":                               return timeStamp.Second.ToString("00");                           case "dow":                               return timeStamp.DayOfWeek.ToString();                       }
