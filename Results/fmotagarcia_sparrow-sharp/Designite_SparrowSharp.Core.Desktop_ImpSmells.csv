Implementation smell,Namespace,Class,File,Method,Description
Long Method,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,ArrangeCharsInArea,The method has 153 lines of code.
Long Method,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,RenderPasses,The method has 107 lines of code.
Complex Method,Sparrow.Core,BaseEffect,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\BaseEffect.cs,PrepareToDraw,Cyclomatic complexity of the method is 10
Complex Method,Sparrow.Core,RenderSupport,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\RenderSupport.cs,ApplyClipRect,Cyclomatic complexity of the method is 8
Complex Method,Sparrow.Display,DisplayObject,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\DisplayObject.cs,TransformationMatrixToSpace,Cyclomatic complexity of the method is 9
Complex Method,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Compile,Cyclomatic complexity of the method is 9
Complex Method,Sparrow.Display,Sprite,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Sprite.cs,ClipRectInSpace,Cyclomatic complexity of the method is 8
Complex Method,Sparrow.Display,Sprite,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Sprite.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,SparrowSharp.Display,MovieClip,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\MovieClip.cs,AdvanceTime,Cyclomatic complexity of the method is 8
Complex Method,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,ArrangeCharsInArea,Cyclomatic complexity of the method is 15
Long Parameter List,Sparrow.Core,BaseEffect,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\BaseEffect.cs,PrepareToDraw,The method has 5 parameters. Parameters: mvpMatrix' premultipliedAlpha' alpha' useTinting' texture
Long Parameter List,Sparrow.Core,DesktopViewController,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\DesktopViewController.cs,DesktopViewController,The method has 7 parameters. Parameters: rootClass' windowWidth' windowHeight' windowTitle' windowFlags' device' flags
Long Parameter List,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,IsStateChange,The method has 6 parameters. Parameters: tinted' texture' alpha' premultipliedAlpha' blendMode' numQuads
Long Parameter List,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Compile,The method has 6 parameters. Parameters: displayObject' quadBatches' quadBatchID' transformationMatrix' alpha' blendMode
Long Parameter List,SparrowSharp.Fonts,BitmapChar,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapChar.cs,BitmapChar,The method has 5 parameters. Parameters: charId' texture' xOffset' yOffset' xAdvance
Long Parameter List,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,FillQuadBatch,The method has 10 parameters. Parameters: quadBatch' width' height' text' size' color' hAlign' vAlign' autoScale' kerning
Long Parameter List,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,ArrangeCharsInArea,The method has 8 parameters. Parameters: width' height' text' size' hAlign' vAlign' autoScale' kerning
Long Parameter List,SparrowSharp.Fonts,TextField,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\TextField.cs,TextField,The method has 6 parameters. Parameters: width' height' text' fontName' fontSize' color
Long Parameter List,Sparrow.Geom,Matrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Geom\Matrix.cs,Create,The method has 6 parameters. Parameters: a' b' c' d' tx' ty
Long Parameter List,Sparrow.Geom,Matrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Geom\Matrix.cs,Matrix,The method has 6 parameters. Parameters: a' b' c' d' tx' ty
Long Parameter List,SparrowSharp.Core.Desktop.Rendering,OpenGLDebugCallback,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\OpenGLDebugCallback.cs,PCCallbackHandler,The method has 7 parameters. Parameters: source' type' id' severity' length' message' userParam
Long Parameter List,Sparrow.Textures,GLTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\GLTexture.cs,GLTexture,The method has 6 parameters. Parameters: name' width' height' hasMipMaps' scale' premultipliedAlpha
Long Parameter List,Sparrow.Textures,GLTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\GLTexture.cs,Init,The method has 6 parameters. Parameters: name' width' height' hasMipMaps' scale' premultipliedAlpha
Long Parameter List,Sparrow.Textures,TextureFormat,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\Texture.cs,TextureFormat,The method has 5 parameters. Parameters: format' internalFormat' bitsPerPixel' compressed' texType
Long Parameter List,Sparrow.Utils,Vertex,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\Vertex.cs,Copy,The method has 5 parameters. Parameters: source' sourceOffset' target' targetOffset' count
Long Parameter List,SparrowSharp.Filters,FilterFactory,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FilterFactory.cs,DropShadow,The method has 6 parameters. Parameters: distance' angle' color' alpha' blur' resolution
Long Parameter List,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,CalcBounds,The method has 6 parameters. Parameters: obj' stage' scale' intersectWithStage' bounds' boundsPOT
Long Identifier,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The length of the parameter maxComputeWorkGroupInvocations is 30.
Long Statement,Sparrow.Core,BaseEffect,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\BaseEffect.cs,PrepareToDraw,The length of the statement  "            GL.UniformMatrix4(_uMvpMatrix' false' ref glkMvpMatrix); // TODO check; was glUniformMatrix4fv(_uMvpMatrix' 1' NO' glkMvpMatrix.m); " is 131.
Long Statement,Sparrow.Core,Context,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\Context.cs,CreateFramebufferForTexture,The length of the statement  "            GL.FramebufferTexture2D(FramebufferTarget.Framebuffer' FramebufferSlot.ColorAttachment0' TextureTarget.Texture2D' texture.Name' 0); " is 131.
Long Statement,Sparrow.Core,Program,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\Program.cs,Description,The length of the statement  "            return string.Format("[Program {0}\n## VERTEX SHADER: ##\n{1}\n## FRAGMENT SHADER: ##\n{2}]"' Name' _vertexShader' _fragmentShader); " is 132.
Long Statement,Sparrow.Core,Program,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\Program.cs,CompileShader,The length of the statement  "                    Debug.WriteLine(string.Format("Sparrow: Error compiling {0} shader: {1}"' (type == ShaderType.VertexShader ? "vertex" : "fragment")' log)); " is 139.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Render,The length of the statement  "            GL.VertexAttribPointer(attribPosition' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.POSITION_OFFSET); " is 125.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Render,The length of the statement  "                GL.VertexAttribPointer(attribTexCoords' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.TEXTURE_OFFSET); " is 125.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Compile,The length of the statement  "            DisplayObjectContainer container = displayObject is DisplayObjectContainer ? (DisplayObjectContainer)displayObject : null; " is 122.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,CreateBuffers,The length of the statement  "            GL.BufferData(BufferTarget.ElementArrayBuffer' (IntPtr)(sizeof(ushort) * numIndices)' _indexData' BufferUsage.StaticDraw); " is 122.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The length of the statement  "                GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' IntPtr.Zero' BufferUsage.StaticDraw); " is 132.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The length of the statement  "                    GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices' BufferUsage.StaticDraw); " is 141.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The length of the statement  "                    GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices); " is 133.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The length of the statement  "                    GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' IntPtr.Zero' BufferUsage.StaticDraw); " is 131.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The length of the statement  "                        GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4 )' _vertexData.VertexColors' BufferUsage.StaticDraw); " is 145.
Long Statement,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The length of the statement  "                        GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' _vertexData.VertexColors); " is 136.
Long Statement,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,TextureReferencedByXmlData,The length of the statement  "                string absolutePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Resources)' filename); // NSBundle.MainBundle.BundlePath " is 143.
Long Statement,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,ArrangeCharsInArea,The length of the statement  "                            CharLocation charLocation = CharLocation.Create(bitmapChar' 1.0f' currentX + bitmapChar.XOffset' currentY + bitmapChar.YOffset); " is 128.
Long Statement,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The length of the statement  "            OpenTK.Graphics.ES31.GL.GetInteger(OpenTK.Graphics.ES31.All.MaxComputeWorkGroupInvocations' out maxComputeWorkGroupInvocations); " is 128.
Long Statement,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,RenderPasses,The length of the statement  "            GL.VertexAttribPointer (VertexPosID' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.POSITION_OFFSET); " is 123.
Long Statement,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,RenderPasses,The length of the statement  "            GL.VertexAttribPointer (TexCoordsID' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.TEXTURE_OFFSET); " is 122.
Long Statement,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,GetFragmentShader,The length of the statement  "            source.AppendLine("  texColor = max(texColor' MIN_COLOR);");                  // avoid division through zero in next step " is 121.
Complex Conditional,Sparrow.Display,DisplayObjectContainer,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\DisplayObjectContainer.cs,SwapChildrenAt,The conditional expression  "index1 < 0 || index1 >= numChildren || index2 < 0 || index2 >= numChildren"  is complex.
Complex Conditional,Sparrow.Touches,TouchEvent,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Touches\TouchEvent.cs,TouchesWithTarget,The conditional expression  "touch.Phase == phase &&                     (target == touch.Target ||                      (target is DisplayObjectContainer && ((DisplayObjectContainer)target).ContainsChild(touch.Target)))"  is complex.
Virtual Method Call from Constructor,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The constructor "FragmentFilter" calls a virtual method "CreatePrograms".
Magic Number,Sparrow.Core,RenderSupport,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\RenderSupport.cs,RenderSupport,The following statement contains a magic number: SetupOrthographicProjection(0' 320' 0' 480);
Magic Number,Sparrow.Core,RenderSupport,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\RenderSupport.cs,RenderSupport,The following statement contains a magic number: SetupOrthographicProjection(0' 320' 0' 480);
Magic Number,Sparrow.Core,DesktopViewController,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\DesktopViewController.cs,DesktopViewController,The following statement contains a magic number: Run(60.0);
Magic Number,Sparrow.Core,DesktopViewController,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\DesktopViewController.cs,OnMouseButtonChange,The following statement contains a magic number: if (e.Mouse.LeftButton == ButtonState.Pressed)              {                  Touch newTouch = new Touch();                  newTouch.TouchID = pointerId;                  newTouch.TimeStamp = now;                  newTouch.GlobalX = e.Mouse.X * xConversion;                  newTouch.GlobalY = e.Mouse.Y * yConversion;                  newTouch.InitialGlobalX = newTouch.GlobalX;                  newTouch.InitialGlobalY = newTouch.GlobalY;                  newTouch.Phase = TouchPhase.Began;                  Point touchPosition = Point.Create(newTouch.GlobalX' newTouch.GlobalY);                  newTouch.Target = SparrowSharpApp.Stage.HitTestPoint(touchPosition);                    _touches.Add(newTouch.TouchID' newTouch);              }              else              {                  touchInFocus = _touches[pointerId];                  touchInFocus.Phase = TouchPhase.Ended;                  long downTime = -1; // TODO                  touchInFocus.TimeStamp = now;                  double dist = Math.Sqrt(                                    (touchInFocus.GlobalX - touchInFocus.InitialGlobalX) * (touchInFocus.GlobalX - touchInFocus.InitialGlobalX) +                                    (touchInFocus.GlobalY - touchInFocus.InitialGlobalY) * (touchInFocus.GlobalY - touchInFocus.InitialGlobalY));                  // TODO: move the time out to a constant' make dist DPI dependent                  if (downTime < 300 && dist < 50)                  {                      touchInFocus.IsTap = true;                  }              }
Magic Number,Sparrow.Core,DesktopViewController,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Core\DesktopViewController.cs,OnMouseButtonChange,The following statement contains a magic number: if (e.Mouse.LeftButton == ButtonState.Pressed)              {                  Touch newTouch = new Touch();                  newTouch.TouchID = pointerId;                  newTouch.TimeStamp = now;                  newTouch.GlobalX = e.Mouse.X * xConversion;                  newTouch.GlobalY = e.Mouse.Y * yConversion;                  newTouch.InitialGlobalX = newTouch.GlobalX;                  newTouch.InitialGlobalY = newTouch.GlobalY;                  newTouch.Phase = TouchPhase.Began;                  Point touchPosition = Point.Create(newTouch.GlobalX' newTouch.GlobalY);                  newTouch.Target = SparrowSharpApp.Stage.HitTestPoint(touchPosition);                    _touches.Add(newTouch.TouchID' newTouch);              }              else              {                  touchInFocus = _touches[pointerId];                  touchInFocus.Phase = TouchPhase.Ended;                  long downTime = -1; // TODO                  touchInFocus.TimeStamp = now;                  double dist = Math.Sqrt(                                    (touchInFocus.GlobalX - touchInFocus.InitialGlobalX) * (touchInFocus.GlobalX - touchInFocus.InitialGlobalX) +                                    (touchInFocus.GlobalY - touchInFocus.InitialGlobalY) * (touchInFocus.GlobalY - touchInFocus.InitialGlobalY));                  // TODO: move the time out to a constant' make dist DPI dependent                  if (downTime < 300 && dist < 50)                  {                      touchInFocus.IsTap = true;                  }              }
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,InitImage,The following statement contains a magic number: _vertexData.Vertices[2].TexCoords.Y = 1.0f;
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,InitImage,The following statement contains a magic number: _vertexData.Vertices[3].TexCoords.X = 1.0f;
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,InitImage,The following statement contains a magic number: _vertexData.Vertices[3].TexCoords.Y = 1.0f;
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,InitImage,The following statement contains a magic number: _vertexDataCache = new VertexData(4' pma);
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,ReadjustSize,The following statement contains a magic number: _vertexData.Vertices[2].Position.Y = height;
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,ReadjustSize,The following statement contains a magic number: _vertexData.Vertices[3].Position.X = width;
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,ReadjustSize,The following statement contains a magic number: _vertexData.Vertices[3].Position.Y = height;
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,CopyVertexDataTo,The following statement contains a magic number: if (_vertexDataCacheInvalid)              {                  _vertexDataCacheInvalid = false;                  _vertexData.CopyToVertexData(_vertexDataCache' copyColor);                  _texture.AdjustVertexData(_vertexDataCache' 0' 4);              }
Magic Number,Sparrow.Display,Image,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Image.cs,CopyVertexDataTo,The following statement contains a magic number: _vertexDataCache.CopyToVertexData(targetData' copyColor' atIndex' 4);
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,Init,The following statement contains a magic number: _vertexData = new VertexData(4' premultipliedAlpha);
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,Init,The following statement contains a magic number: _vertexData.Vertices[2].Position.Y = height;
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,Init,The following statement contains a magic number: _vertexData.Vertices[3].Position.X = width;
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,Init,The following statement contains a magic number: _vertexData.Vertices[3].Position.Y = height;
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,Init,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  _vertexData.VertexColors[i] = VertexColorHelper.CreateVertexColor(color' 1.0f);              }
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,BoundsInSpace,The following statement contains a magic number: if (targetSpace == this)              {                   // optimization                  bottomRight = _vertexData.PositionAt(3);                  return new Rectangle(0.0f' 0.0f' bottomRight.X' bottomRight.Y);              }              else if (targetSpace == Parent && Rotation == 0.0f)              {                   // optimization                  float scaleX = ScaleX;                  float scaleY = ScaleY;                    bottomRight = _vertexData.PositionAt(3);                  Rectangle resultRect = new Rectangle(X - PivotX * scaleX'                                              Y - PivotY * scaleY'                                             bottomRight.X * ScaleX'                                             bottomRight.Y * ScaleY);                     if (scaleX < 0.0f)                  {                       resultRect.Width *= -1.0f;                       resultRect.X -= resultRect.Width;                    }                    if (scaleY < 0.0f)                  {                       resultRect.Height *= -1.0f;                       resultRect.Top -= resultRect.Height;                   }                    return resultRect;              }              else              {                  Matrix transformationMatrix = TransformationMatrixToSpace(targetSpace);                  return _vertexData.BoundsAfterTransformation(transformationMatrix' 0' 4);              }
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,BoundsInSpace,The following statement contains a magic number: if (targetSpace == this)              {                   // optimization                  bottomRight = _vertexData.PositionAt(3);                  return new Rectangle(0.0f' 0.0f' bottomRight.X' bottomRight.Y);              }              else if (targetSpace == Parent && Rotation == 0.0f)              {                   // optimization                  float scaleX = ScaleX;                  float scaleY = ScaleY;                    bottomRight = _vertexData.PositionAt(3);                  Rectangle resultRect = new Rectangle(X - PivotX * scaleX'                                              Y - PivotY * scaleY'                                             bottomRight.X * ScaleX'                                             bottomRight.Y * ScaleY);                     if (scaleX < 0.0f)                  {                       resultRect.Width *= -1.0f;                       resultRect.X -= resultRect.Width;                    }                    if (scaleY < 0.0f)                  {                       resultRect.Height *= -1.0f;                       resultRect.Top -= resultRect.Height;                   }                    return resultRect;              }              else              {                  Matrix transformationMatrix = TransformationMatrixToSpace(targetSpace);                  return _vertexData.BoundsAfterTransformation(transformationMatrix' 0' 4);              }
Magic Number,Sparrow.Display,Quad,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Quad.cs,BoundsInSpace,The following statement contains a magic number: if (targetSpace == this)              {                   // optimization                  bottomRight = _vertexData.PositionAt(3);                  return new Rectangle(0.0f' 0.0f' bottomRight.X' bottomRight.Y);              }              else if (targetSpace == Parent && Rotation == 0.0f)              {                   // optimization                  float scaleX = ScaleX;                  float scaleY = ScaleY;                    bottomRight = _vertexData.PositionAt(3);                  Rectangle resultRect = new Rectangle(X - PivotX * scaleX'                                              Y - PivotY * scaleY'                                             bottomRight.X * ScaleX'                                             bottomRight.Y * ScaleY);                     if (scaleX < 0.0f)                  {                       resultRect.Width *= -1.0f;                       resultRect.X -= resultRect.Width;                    }                    if (scaleY < 0.0f)                  {                       resultRect.Height *= -1.0f;                       resultRect.Top -= resultRect.Height;                   }                    return resultRect;              }              else              {                  Matrix transformationMatrix = TransformationMatrixToSpace(targetSpace);                  return _vertexData.BoundsAfterTransformation(transformationMatrix' 0' 4);              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuad,The following statement contains a magic number: if (_numQuads + 1 > _capacity)              {                  Capacity = _capacity < 8 ? 16 : _capacity * 2;              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuad,The following statement contains a magic number: if (_numQuads + 1 > _capacity)              {                  Capacity = _capacity < 8 ? 16 : _capacity * 2;              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuad,The following statement contains a magic number: if (_numQuads + 1 > _capacity)              {                  Capacity = _capacity < 8 ? 16 : _capacity * 2;              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuad,The following statement contains a magic number: int vertexID = _numQuads * 4;
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuad,The following statement contains a magic number: _vertexData.TransformVertices(matrix' vertexID' 4);
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuad,The following statement contains a magic number: if (alpha != 1.0f)              {                  _vertexData.ScaleAlphaBy(alpha' vertexID' 4);              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuadBatch,The following statement contains a magic number: int vertexID = _numQuads * 4;
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,AddQuadBatch,The following statement contains a magic number: int numVertices = numQuads * 4;
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,IsStateChange,The following statement contains a magic number: if (_numQuads == 0)              {                  return false;              }              else if (_numQuads + numQuads > 8192)              {                  return true;              }              else if (_texture == null && texture == null)              {                  return _premultipliedAlpha != premultipliedAlpha || BlendMode != blendMode;              }              else if (_texture != null && texture != null)              {                  return _tinted != (tinted || alpha != 1.0f) ||                  _texture.Name != texture.Name ||                  BlendMode != blendMode;              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,BoundsInSpace,The following statement contains a magic number: return _vertexData.BoundsAfterTransformation(matrix' 0' _numQuads * 4);
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Render,The following statement contains a magic number: GL.VertexAttribPointer(attribPosition' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.POSITION_OFFSET);
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Render,The following statement contains a magic number: if (_texture != null)              {                  GL.VertexAttribPointer(attribTexCoords' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.TEXTURE_OFFSET);              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,Render,The following statement contains a magic number: if (useTinting)              {                  GL.BindBuffer(BufferTarget.ArrayBuffer' _vertexColorsBufferName);                  GL.VertexAttribPointer(attribColor' 4' VertexAttribPointerType.UnsignedByte' true' sizeof(float)' (IntPtr)0);              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,CreateBuffers,The following statement contains a magic number: int numIndices = numVertices / 4 * INDICES_PER_QUAD;
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The following statement contains a magic number: if (GLExtensions.MapBufferSupported)              {                  GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' IntPtr.Zero' BufferUsage.StaticDraw);                  IntPtr vertexBuffer = GL.Oes.MapBuffer(All.ArrayBuffer' All.WriteOnlyOes);                    unsafe                  {                      int numVertices = _vertexData.Vertices.Length;                      Vertex[] vertices = _vertexData.Vertices;                        float* ptr = (float*)vertexBuffer.ToPointer();                      for (int i = 0; i < numVertices; i++)                      {                          Vertex vertex = vertices[i];                          *ptr++ = vertex.Position.X;                          *ptr++ = vertex.Position.Y;                          *ptr++ = vertex.TexCoords.X;                          *ptr++ = vertex.TexCoords.Y;                      }                  }                  GL.Oes.UnmapBuffer(All.ArrayBuffer);              }              else              {                  // this optimization does not seem to increase framerate (although openGL docs state it should)                  if (_vertexBufferNeedsReInit)                  {                      _vertexBufferNeedsReInit = false;                      GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices' BufferUsage.StaticDraw);                  }                  else                  {                      GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices);                  }              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The following statement contains a magic number: if (GLExtensions.MapBufferSupported)              {                  GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' IntPtr.Zero' BufferUsage.StaticDraw);                  IntPtr vertexBuffer = GL.Oes.MapBuffer(All.ArrayBuffer' All.WriteOnlyOes);                    unsafe                  {                      int numVertices = _vertexData.Vertices.Length;                      Vertex[] vertices = _vertexData.Vertices;                        float* ptr = (float*)vertexBuffer.ToPointer();                      for (int i = 0; i < numVertices; i++)                      {                          Vertex vertex = vertices[i];                          *ptr++ = vertex.Position.X;                          *ptr++ = vertex.Position.Y;                          *ptr++ = vertex.TexCoords.X;                          *ptr++ = vertex.TexCoords.Y;                      }                  }                  GL.Oes.UnmapBuffer(All.ArrayBuffer);              }              else              {                  // this optimization does not seem to increase framerate (although openGL docs state it should)                  if (_vertexBufferNeedsReInit)                  {                      _vertexBufferNeedsReInit = false;                      GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices' BufferUsage.StaticDraw);                  }                  else                  {                      GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices);                  }              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The following statement contains a magic number: if (GLExtensions.MapBufferSupported)              {                  GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' IntPtr.Zero' BufferUsage.StaticDraw);                  IntPtr vertexBuffer = GL.Oes.MapBuffer(All.ArrayBuffer' All.WriteOnlyOes);                    unsafe                  {                      int numVertices = _vertexData.Vertices.Length;                      Vertex[] vertices = _vertexData.Vertices;                        float* ptr = (float*)vertexBuffer.ToPointer();                      for (int i = 0; i < numVertices; i++)                      {                          Vertex vertex = vertices[i];                          *ptr++ = vertex.Position.X;                          *ptr++ = vertex.Position.Y;                          *ptr++ = vertex.TexCoords.X;                          *ptr++ = vertex.TexCoords.Y;                      }                  }                  GL.Oes.UnmapBuffer(All.ArrayBuffer);              }              else              {                  // this optimization does not seem to increase framerate (although openGL docs state it should)                  if (_vertexBufferNeedsReInit)                  {                      _vertexBufferNeedsReInit = false;                      GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices' BufferUsage.StaticDraw);                  }                  else                  {                      GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * 4 * sizeof(float))' _vertexData.Vertices);                  }              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The following statement contains a magic number: if (_tinted || alpha != 1.0f)              {                  GL.BindBuffer(BufferTarget.ArrayBuffer' _vertexColorsBufferName);                    if (GLExtensions.MapBufferSupported)                  {                      GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' IntPtr.Zero' BufferUsage.StaticDraw);                      IntPtr colorBuffer = GL.Oes.MapBuffer(All.ArrayBuffer' All.WriteOnlyOes);                      unsafe                      {                          int numVertices = _vertexData.Vertices.Length;                          VertexColor[] colors = _vertexData.VertexColors;                            byte* ptr = (byte*)colorBuffer.ToPointer();                          for (int i = 0; i < numVertices; i++)                          {                              VertexColor color = colors[i];                              *ptr++ = color.R;                              *ptr++ = color.G;                              *ptr++ = color.B;                              *ptr++ = color.A;                          }                      }                      GL.Oes.UnmapBuffer(All.ArrayBuffer);                  }                  else                  {                      // this optimization does not seem to increase framerate on (although openGL docs state it should)                      if (_colorBufferNeedsReInit)                      {                          _colorBufferNeedsReInit = false;                          GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4 )' _vertexData.VertexColors' BufferUsage.StaticDraw);                      }                      else                      {                          GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' _vertexData.VertexColors);                      }                  }              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The following statement contains a magic number: if (_tinted || alpha != 1.0f)              {                  GL.BindBuffer(BufferTarget.ArrayBuffer' _vertexColorsBufferName);                    if (GLExtensions.MapBufferSupported)                  {                      GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' IntPtr.Zero' BufferUsage.StaticDraw);                      IntPtr colorBuffer = GL.Oes.MapBuffer(All.ArrayBuffer' All.WriteOnlyOes);                      unsafe                      {                          int numVertices = _vertexData.Vertices.Length;                          VertexColor[] colors = _vertexData.VertexColors;                            byte* ptr = (byte*)colorBuffer.ToPointer();                          for (int i = 0; i < numVertices; i++)                          {                              VertexColor color = colors[i];                              *ptr++ = color.R;                              *ptr++ = color.G;                              *ptr++ = color.B;                              *ptr++ = color.A;                          }                      }                      GL.Oes.UnmapBuffer(All.ArrayBuffer);                  }                  else                  {                      // this optimization does not seem to increase framerate on (although openGL docs state it should)                      if (_colorBufferNeedsReInit)                      {                          _colorBufferNeedsReInit = false;                          GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4 )' _vertexData.VertexColors' BufferUsage.StaticDraw);                      }                      else                      {                          GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' _vertexData.VertexColors);                      }                  }              }
Magic Number,Sparrow.Display,QuadBatch,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\QuadBatch.cs,SyncBuffers,The following statement contains a magic number: if (_tinted || alpha != 1.0f)              {                  GL.BindBuffer(BufferTarget.ArrayBuffer' _vertexColorsBufferName);                    if (GLExtensions.MapBufferSupported)                  {                      GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' IntPtr.Zero' BufferUsage.StaticDraw);                      IntPtr colorBuffer = GL.Oes.MapBuffer(All.ArrayBuffer' All.WriteOnlyOes);                      unsafe                      {                          int numVertices = _vertexData.Vertices.Length;                          VertexColor[] colors = _vertexData.VertexColors;                            byte* ptr = (byte*)colorBuffer.ToPointer();                          for (int i = 0; i < numVertices; i++)                          {                              VertexColor color = colors[i];                              *ptr++ = color.R;                              *ptr++ = color.G;                              *ptr++ = color.B;                              *ptr++ = color.A;                          }                      }                      GL.Oes.UnmapBuffer(All.ArrayBuffer);                  }                  else                  {                      // this optimization does not seem to increase framerate on (although openGL docs state it should)                      if (_colorBufferNeedsReInit)                      {                          _colorBufferNeedsReInit = false;                          GL.BufferData(BufferTarget.ArrayBuffer' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4 )' _vertexData.VertexColors' BufferUsage.StaticDraw);                      }                      else                      {                          GL.BufferSubData(BufferTarget.ArrayBuffer' IntPtr.Zero' (IntPtr)(_vertexData.NumVertices * sizeof(byte) * 4)' _vertexData.VertexColors);                      }                  }              }
Magic Number,Sparrow.Display,Sprite,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Sprite.cs,ClipRectInSpace,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  switch (i)                  {                      case 0:                          x = clipLeft;                          y = clipTop;                          break;                      case 1:                          x = clipLeft;                          y = clipBottom;                          break;                      case 2:                          x = clipRight;                          y = clipTop;                          break;                      case 3:                          x = clipRight;                          y = clipBottom;                          break;                  }                    Point transformedPoint = transform.TransformPoint(x' y);                  if (minX > transformedPoint.X)                  {                      minX = transformedPoint.X;                  }                  if (maxX < transformedPoint.X)                  {                      maxX = transformedPoint.X;                  }                  if (minY > transformedPoint.Y)                  {                      minY = transformedPoint.Y;                  }                  if (maxY < transformedPoint.Y)                  {                      maxY = transformedPoint.Y;                  }              }
Magic Number,Sparrow.Display,Sprite,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Sprite.cs,ClipRectInSpace,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  switch (i)                  {                      case 0:                          x = clipLeft;                          y = clipTop;                          break;                      case 1:                          x = clipLeft;                          y = clipBottom;                          break;                      case 2:                          x = clipRight;                          y = clipTop;                          break;                      case 3:                          x = clipRight;                          y = clipBottom;                          break;                  }                    Point transformedPoint = transform.TransformPoint(x' y);                  if (minX > transformedPoint.X)                  {                      minX = transformedPoint.X;                  }                  if (maxX < transformedPoint.X)                  {                      maxX = transformedPoint.X;                  }                  if (minY > transformedPoint.Y)                  {                      minY = transformedPoint.Y;                  }                  if (maxY < transformedPoint.Y)                  {                      maxY = transformedPoint.Y;                  }              }
Magic Number,Sparrow.Display,Sprite,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Sprite.cs,ClipRectInSpace,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  switch (i)                  {                      case 0:                          x = clipLeft;                          y = clipTop;                          break;                      case 1:                          x = clipLeft;                          y = clipBottom;                          break;                      case 2:                          x = clipRight;                          y = clipTop;                          break;                      case 3:                          x = clipRight;                          y = clipBottom;                          break;                  }                    Point transformedPoint = transform.TransformPoint(x' y);                  if (minX > transformedPoint.X)                  {                      minX = transformedPoint.X;                  }                  if (maxX < transformedPoint.X)                  {                      maxX = transformedPoint.X;                  }                  if (minY > transformedPoint.Y)                  {                      minY = transformedPoint.Y;                  }                  if (maxY < transformedPoint.Y)                  {                      maxY = transformedPoint.Y;                  }              }
Magic Number,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,ArrangeCharsInArea,The following statement contains a magic number: while (!isFinished)              {                  scale = size / _size;                  containerWidth = width / scale;                  containerHeight = height / scale;                    if (_lineHeight <= containerHeight)                  {                      int lastWhiteSpace = -1;                      int lastCharId = -1;                      int numChars = text.Length;                      float currentX = 0;                      float currentY = 0;                      List<CharLocation> currentLine = new List<CharLocation>();                        for (int i = 0; i < numChars; i++)                      {                          bool isLineFull = false;                          int charId = text[i];                          BitmapChar bitmapChar = CharById(charId);                            if (charId == NewLineAsciiCode || charId == CarriageReturnAsciiCode)                          {                              isLineFull = true;                          }                          else if (bitmapChar == null)                          {                              Console.WriteLine("Missing character: " + charId);                          }                          else                          {                              if (charId == SpaceAsciiCode || charId == TabAsciiCode)                              {                                  lastWhiteSpace = i;                              }                                                                if (kerning)                              {                                  currentX += bitmapChar.KerningToChar(lastCharId);                              }                              CharLocation charLocation = CharLocation.Create(bitmapChar' 1.0f' currentX + bitmapChar.XOffset' currentY + bitmapChar.YOffset);                              currentLine.Add(charLocation);                              currentX += bitmapChar.XAdvance;                              lastCharId = charId;                                if (charLocation.X + bitmapChar.Width > containerWidth)                              {                                  int numCharsToRemove = (lastWhiteSpace == -1) ? 1 : i - lastWhiteSpace;                                  int removeIndex = currentLine.Count - numCharsToRemove;                                  currentLine.RemoveRange(removeIndex' numCharsToRemove);                                    if (currentLine.Count == 0)                                  {                                      break;                                  }                                    i -= numCharsToRemove;                                  isLineFull = true;                              }                          }                            if (i == numChars - 1)                          {                              lines.Add(currentLine);                              isFinished = true;                          }                          else if (isLineFull)                          {                              lines.Add(currentLine);                                if (lastWhiteSpace == i)                              {                                  currentLine.RemoveAt(currentLine.Count - 1);                              }                                if (currentY + 2 * _lineHeight <= containerHeight)                              {                                  currentLine = new List<CharLocation>();                                  currentX = 0;                                  currentY += _lineHeight;                                  lastWhiteSpace = -1;                                  lastCharId = -1;                              }                              else                              {                                  break;                              }                          }                      }                  }                    if (autoScale && !isFinished)                  {                      size -= 1;                      lines.Clear();                  }                  else                  {                      isFinished = true;                  }              }
Magic Number,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,ArrangeCharsInArea,The following statement contains a magic number: if (vAlign == VAlign.Bottom)              {                  yOffset = (int)(containerHeight - bottom);              }              else if (vAlign == VAlign.Center)              {                  yOffset = (int)((containerHeight - bottom) / 2);              }
Magic Number,SparrowSharp.Fonts,BitmapFont,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\BitmapFont.cs,ArrangeCharsInArea,The following statement contains a magic number: for (int i = 0; i < lines.Count; i++)              {                  line = lines[i];                  int numChars = line.Count;                  if (numChars == 0)                  {                      continue;                  }                    int xOffset = 0;                  CharLocation lastLocation = line[line.Count - 1];                  float right = lastLocation.X - lastLocation.BitmapChar.XOffset + lastLocation.BitmapChar.XAdvance;                    if (hAlign == HAlign.Right)                  {                      xOffset = (int)(containerWidth - right);                  }                  else if (hAlign == HAlign.Center)                  {                      xOffset = (int)((containerWidth - right) / 2);                  }                    CharLocation charLocation;                  for (int j = 0; j < line.Count; j++)                  {                      charLocation = line[j];                      charLocation.X = scale * (charLocation.X + xOffset);                      charLocation.Y = scale * (charLocation.Y + yOffset);                      charLocation.Scale = scale;                        if (charLocation.BitmapChar.Width > 0 && charLocation.BitmapChar.Height > 0)                      {                          finalLocations.Add(charLocation);                      }                  }              }
Magic Number,SparrowSharp.Fonts,TextField,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\TextField.cs,UpdateBorder,The following statement contains a magic number: Quad bottomLine = (Quad)_border.GetChild(2);
Magic Number,SparrowSharp.Fonts,TextField,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Fonts\TextField.cs,UpdateBorder,The following statement contains a magic number: Quad leftLine = (Quad)_border.GetChild(3);
Magic Number,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The following statement contains a magic number: int[] work_grp_cnt = new int[3];
Magic Number,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The following statement contains a magic number: int[] work_grp_size = new int[3];
Magic Number,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The following statement contains a magic number: if (version < 4)              {                  throw new NotSupportedException("You need at least OpenGL 4 to run on Desktop!");              }
Magic Number,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The following statement contains a magic number: GL.GetInteger(maxWorkGroupCount' 2' out work_grp_cnt[2]);
Magic Number,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The following statement contains a magic number: GL.GetInteger(maxWorkGroupCount' 2' out work_grp_cnt[2]);
Magic Number,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The following statement contains a magic number: GL.GetInteger(maxComputeGroupSize' 2' out work_grp_size[2]);
Magic Number,SparrowSharp.Core.Desktop.Rendering,GPUInfo,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Rendering\GPUInfo.cs,PrintGPUInfo,The following statement contains a magic number: GL.GetInteger(maxComputeGroupSize' 2' out work_grp_size[2]);
Magic Number,Sparrow.Textures,GLTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\GLTexture.cs,Init,The following statement contains a magic number: _smoothing = (TextureSmoothing)9999999;
Magic Number,Sparrow.Textures,GLTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\GLTexture.cs,GLTexture,The following statement contains a magic number: if (!compressed)              {                  if (imgData != IntPtr.Zero)                  {                      GL.TexSubImage2D(TextureTarget.Texture2D'                          0' // level                          0' // xOffset                          0' // yOffset                          properties.Width'                          properties.Height'                          properties.TextureFormat.PixelFormat'                          properties.TextureFormat.PixelType'                          imgData);                  }              }              else              {                  // TODO this is not tested!                  if (imgData != IntPtr.Zero)                  {                      int size = Math.Max(32' properties.Width * properties.Height * properties.TextureFormat.BitsPerPixel / 8);                      GL.CompressedTexSubImage2D(TextureTarget.Texture2D'                          0' // level                          0' // xOffset                          0' // yOffset                          properties.Width'                          properties.Height'                          properties.TextureFormat.PixelFormat'                          size'                          imgData);                  }              }
Magic Number,Sparrow.Textures,GLTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\GLTexture.cs,GLTexture,The following statement contains a magic number: if (!compressed)              {                  if (imgData != IntPtr.Zero)                  {                      GL.TexSubImage2D(TextureTarget.Texture2D'                          0' // level                          0' // xOffset                          0' // yOffset                          properties.Width'                          properties.Height'                          properties.TextureFormat.PixelFormat'                          properties.TextureFormat.PixelType'                          imgData);                  }              }              else              {                  // TODO this is not tested!                  if (imgData != IntPtr.Zero)                  {                      int size = Math.Max(32' properties.Width * properties.Height * properties.TextureFormat.BitsPerPixel / 8);                      GL.CompressedTexSubImage2D(TextureTarget.Texture2D'                          0' // level                          0' // xOffset                          0' // yOffset                          properties.Width'                          properties.Height'                          properties.TextureFormat.PixelFormat'                          size'                          imgData);                  }              }
Magic Number,Sparrow.Textures,SubTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\SubTexture.cs,AdjustPositions,The following statement contains a magic number: if (_frame != null)              {                  if (count != 4)                      throw new InvalidOperationException(@"Textures with a frame can only be used on quads");                    float deltaRight = _frame.Width + _frame.X - _width;                  float deltaBottom = _frame.Height + _frame.Top - _height;                    // top left                  vertexData.Vertices[startIndex].Position.X -= _frame.X;                  vertexData.Vertices[startIndex].Position.Y -= _frame.Top;                    // top right                  vertexData.Vertices[startIndex + 1].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 1].Position.Y -= _frame.Top;                    // bottom left                  vertexData.Vertices[startIndex + 2].Position.X -= _frame.X;                  vertexData.Vertices[startIndex + 2].Position.Y -= deltaBottom;                    // bottom right                  vertexData.Vertices[startIndex + 3].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 3].Position.Y -= deltaBottom;              }
Magic Number,Sparrow.Textures,SubTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\SubTexture.cs,AdjustPositions,The following statement contains a magic number: if (_frame != null)              {                  if (count != 4)                      throw new InvalidOperationException(@"Textures with a frame can only be used on quads");                    float deltaRight = _frame.Width + _frame.X - _width;                  float deltaBottom = _frame.Height + _frame.Top - _height;                    // top left                  vertexData.Vertices[startIndex].Position.X -= _frame.X;                  vertexData.Vertices[startIndex].Position.Y -= _frame.Top;                    // top right                  vertexData.Vertices[startIndex + 1].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 1].Position.Y -= _frame.Top;                    // bottom left                  vertexData.Vertices[startIndex + 2].Position.X -= _frame.X;                  vertexData.Vertices[startIndex + 2].Position.Y -= deltaBottom;                    // bottom right                  vertexData.Vertices[startIndex + 3].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 3].Position.Y -= deltaBottom;              }
Magic Number,Sparrow.Textures,SubTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\SubTexture.cs,AdjustPositions,The following statement contains a magic number: if (_frame != null)              {                  if (count != 4)                      throw new InvalidOperationException(@"Textures with a frame can only be used on quads");                    float deltaRight = _frame.Width + _frame.X - _width;                  float deltaBottom = _frame.Height + _frame.Top - _height;                    // top left                  vertexData.Vertices[startIndex].Position.X -= _frame.X;                  vertexData.Vertices[startIndex].Position.Y -= _frame.Top;                    // top right                  vertexData.Vertices[startIndex + 1].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 1].Position.Y -= _frame.Top;                    // bottom left                  vertexData.Vertices[startIndex + 2].Position.X -= _frame.X;                  vertexData.Vertices[startIndex + 2].Position.Y -= deltaBottom;                    // bottom right                  vertexData.Vertices[startIndex + 3].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 3].Position.Y -= deltaBottom;              }
Magic Number,Sparrow.Textures,SubTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\SubTexture.cs,AdjustPositions,The following statement contains a magic number: if (_frame != null)              {                  if (count != 4)                      throw new InvalidOperationException(@"Textures with a frame can only be used on quads");                    float deltaRight = _frame.Width + _frame.X - _width;                  float deltaBottom = _frame.Height + _frame.Top - _height;                    // top left                  vertexData.Vertices[startIndex].Position.X -= _frame.X;                  vertexData.Vertices[startIndex].Position.Y -= _frame.Top;                    // top right                  vertexData.Vertices[startIndex + 1].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 1].Position.Y -= _frame.Top;                    // bottom left                  vertexData.Vertices[startIndex + 2].Position.X -= _frame.X;                  vertexData.Vertices[startIndex + 2].Position.Y -= deltaBottom;                    // bottom right                  vertexData.Vertices[startIndex + 3].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 3].Position.Y -= deltaBottom;              }
Magic Number,Sparrow.Textures,SubTexture,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Textures\SubTexture.cs,AdjustPositions,The following statement contains a magic number: if (_frame != null)              {                  if (count != 4)                      throw new InvalidOperationException(@"Textures with a frame can only be used on quads");                    float deltaRight = _frame.Width + _frame.X - _width;                  float deltaBottom = _frame.Height + _frame.Top - _height;                    // top left                  vertexData.Vertices[startIndex].Position.X -= _frame.X;                  vertexData.Vertices[startIndex].Position.Y -= _frame.Top;                    // top right                  vertexData.Vertices[startIndex + 1].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 1].Position.Y -= _frame.Top;                    // bottom left                  vertexData.Vertices[startIndex + 2].Position.X -= _frame.X;                  vertexData.Vertices[startIndex + 2].Position.Y -= deltaBottom;                    // bottom right                  vertexData.Vertices[startIndex + 3].Position.X -= deltaRight;                  vertexData.Vertices[startIndex + 3].Position.Y -= deltaBottom;              }
Magic Number,Sparrow.Utils,ColorUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\ColorUtil.cs,GetRGB,The following statement contains a magic number: return (uint)(r << 16 | g << 8 | b);
Magic Number,Sparrow.Utils,ColorUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\ColorUtil.cs,GetRGB,The following statement contains a magic number: return (uint)(r << 16 | g << 8 | b);
Magic Number,Sparrow.Utils,ColorUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\ColorUtil.cs,GetA,The following statement contains a magic number: return (byte)((color >> 24) & 0xFF);
Magic Number,Sparrow.Utils,ColorUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\ColorUtil.cs,GetR,The following statement contains a magic number: return (byte)((color >> 16) & 0xFF);
Magic Number,Sparrow.Utils,ColorUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\ColorUtil.cs,GetG,The following statement contains a magic number: return (byte)((color >> 8) & 0xFF);
Magic Number,Sparrow.Utils,NumberUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\NumberUtil.cs,NumberUtil,The following statement contains a magic number: for (int i = 0; i < 2048; i++)              {                  SinLUT[i & 2047] = (float)Math.Sin(i * 0.00306796157577128245943617517898f); //0.003067 = 2PI/2048                  CosLUT[i & 2047] = (float)Math.Cos(i * 0.00306796157577128245943617517898f);              }
Magic Number,Sparrow.Utils,NumberUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\NumberUtil.cs,NumberUtil,The following statement contains a magic number: for (int i = 0; i < 2048; i++)              {                  SinLUT[i & 2047] = (float)Math.Sin(i * 0.00306796157577128245943617517898f); //0.003067 = 2PI/2048                  CosLUT[i & 2047] = (float)Math.Cos(i * 0.00306796157577128245943617517898f);              }
Magic Number,Sparrow.Utils,NumberUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\NumberUtil.cs,NumberUtil,The following statement contains a magic number: for (int i = 0; i < 2048; i++)              {                  SinLUT[i & 2047] = (float)Math.Sin(i * 0.00306796157577128245943617517898f); //0.003067 = 2PI/2048                  CosLUT[i & 2047] = (float)Math.Cos(i * 0.00306796157577128245943617517898f);              }
Magic Number,Sparrow.Utils,NumberUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\NumberUtil.cs,FastSin,The following statement contains a magic number: return SinLUT[(int)(angle * 325.94932345220164765467394738691f + 0.5f) & 2047];
Magic Number,Sparrow.Utils,NumberUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\NumberUtil.cs,FastCos,The following statement contains a magic number: return CosLUT[(int)(angle * 325.94932345220164765467394738691f + 0.5f) & 2047];
Magic Number,Sparrow.Utils,NumberUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\NumberUtil.cs,NextPowerOfTwo,The following statement contains a magic number: while (result < number)              {                  result *= 2;              }
Magic Number,Sparrow.Utils,NumberUtil,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\NumberUtil.cs,NextPowerOfTwo,The following statement contains a magic number: while (result < number)              {                  result *= 2;              }
Magic Number,Sparrow.Utils,VertexColorHelper,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\VertexColorHelper.cs,IsOpaqueWhite,The following statement contains a magic number: return color.A == 255 && color.R == 255 && color.G == 255 && color.B == 255;
Magic Number,Sparrow.Utils,VertexColorHelper,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\VertexColorHelper.cs,IsOpaqueWhite,The following statement contains a magic number: return color.A == 255 && color.R == 255 && color.G == 255 && color.B == 255;
Magic Number,Sparrow.Utils,VertexColorHelper,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\VertexColorHelper.cs,IsOpaqueWhite,The following statement contains a magic number: return color.A == 255 && color.R == 255 && color.G == 255 && color.B == 255;
Magic Number,Sparrow.Utils,VertexColorHelper,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\VertexColorHelper.cs,IsOpaqueWhite,The following statement contains a magic number: return color.A == 255 && color.R == 255 && color.G == 255 && color.B == 255;
Magic Number,Sparrow.Utils,VertexData,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\VertexData.cs,ScaleAlphaBy,The following statement contains a magic number: for (int i = index; i < index + numVertices; ++i)              {                  VertexColor vertexColor = _vertexColors[i];                  byte newAlpha = Convert.ToByte(NumberUtil.Clamp(vertexColor.A * factor' minAlpha' 255));                    if (_premultipliedAlpha)                  {                      vertexColor = VertexColorHelper.UnmultiplyAlpha(vertexColor);                      vertexColor.A = newAlpha;                      _vertexColors[i] = VertexColorHelper.PremultiplyAlpha(vertexColor);                  }                  else                  {                      _vertexColors[i] = VertexColorHelper.CreateVertexColor(vertexColor.R' vertexColor.G' vertexColor.B' newAlpha);                  }              }
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,StatsDisplay,The following statement contains a magic number: Quad background = new Quad(220' 18' 0x0);
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,StatsDisplay,The following statement contains a magic number: Quad background = new Quad(220' 18' 0x0);
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,OnEnterFrame,The following statement contains a magic number: if (totalTime > 1000)              {                  FramesPerSecond = Math.Round(frameCount / (totalTime/1000)' 1);                  frameCount = 0;                  totalTime = 0;                  Update();              }
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,OnEnterFrame,The following statement contains a magic number: if (totalTime > 1000)              {                  FramesPerSecond = Math.Round(frameCount / (totalTime/1000)' 1);                  frameCount = 0;                  totalTime = 0;                  Update();              }
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,Update,The following statement contains a magic number: if (textField == null)              {                  textField = new TextField(220' 18' ""' "mini"' 15' 0xFFFFFF);                  textField.HAlign = HAlign.Left;                  textField.VAlign = VAlign.Top;                  textField.X = 2;                  AddChild(textField);              }
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,Update,The following statement contains a magic number: if (textField == null)              {                  textField = new TextField(220' 18' ""' "mini"' 15' 0xFFFFFF);                  textField.HAlign = HAlign.Left;                  textField.VAlign = VAlign.Top;                  textField.X = 2;                  AddChild(textField);              }
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,Update,The following statement contains a magic number: if (textField == null)              {                  textField = new TextField(220' 18' ""' "mini"' 15' 0xFFFFFF);                  textField.HAlign = HAlign.Left;                  textField.VAlign = VAlign.Top;                  textField.X = 2;                  AddChild(textField);              }
Magic Number,SparrowSharp.Utils,StatsDisplay,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Utils\StatsDisplay.cs,Update,The following statement contains a magic number: if (textField == null)              {                  textField = new TextField(220' 18' ""' "mini"' 15' 0xFFFFFF);                  textField.HAlign = HAlign.Left;                  textField.VAlign = VAlign.Top;                  textField.X = 2;                  AddChild(textField);              }
Magic Number,Sparrow,SparrowSharpApp,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\SparrowSharpApp.cs,Step,The following statement contains a magic number: if (stats != null)              {                  stats.NumDrawCalls = renderSupport.NumDrawCalls - 2; // stats display requires 2 itself              }
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,SetUniformColor,The following statement contains a magic number: _color[2] = ColorUtil.GetB(color) / 255.0f;
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,SetUniformColor,The following statement contains a magic number: _color[3] = alpha;
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float[] sTmpWeights = new float[6];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: for (int i = 0; i < 5; ++i)                  sTmpWeights[i] = multiplier * (float)Math.Exp(-i * i / twoSigmaSq);
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: _weights[1] = sTmpWeights[1] + sTmpWeights[2];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: _weights[2] = sTmpWeights[3] + sTmpWeights[4];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: _weights[2] = sTmpWeights[3] + sTmpWeights[4];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: _weights[2] = sTmpWeights[3] + sTmpWeights[4];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float weightSum = _weights[0] + (2.0f * _weights[1]) + (2.0f * _weights[2]);
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: _weights[2] *= invWeightSum;
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float offset1 = (pixelSize * sTmpWeights[1] + 2 * pixelSize * sTmpWeights[2]) / _weights[1];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float offset1 = (pixelSize * sTmpWeights[1] + 2 * pixelSize * sTmpWeights[2]) / _weights[1];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float offset2 = (3 * pixelSize * sTmpWeights[3] + 4 * pixelSize * sTmpWeights[4]) / _weights[2];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float offset2 = (3 * pixelSize * sTmpWeights[3] + 4 * pixelSize * sTmpWeights[4]) / _weights[2];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float offset2 = (3 * pixelSize * sTmpWeights[3] + 4 * pixelSize * sTmpWeights[4]) / _weights[2];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float offset2 = (3 * pixelSize * sTmpWeights[3] + 4 * pixelSize * sTmpWeights[4]) / _weights[2];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: float offset2 = (3 * pixelSize * sTmpWeights[3] + 4 * pixelSize * sTmpWeights[4]) / _weights[2];
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: if (horizontal)              {                  _offsets[0] = offset1;                  _offsets[1] = 0;                  _offsets[2] = offset2;                  _offsets[3] = 0;              }              else              {                  _offsets[0] = 0;                  _offsets[1] = offset1;                  _offsets[2] = 0;                  _offsets[3] = offset2;              }
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: if (horizontal)              {                  _offsets[0] = offset1;                  _offsets[1] = 0;                  _offsets[2] = offset2;                  _offsets[3] = 0;              }              else              {                  _offsets[0] = 0;                  _offsets[1] = offset1;                  _offsets[2] = 0;                  _offsets[3] = offset2;              }
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: if (horizontal)              {                  _offsets[0] = offset1;                  _offsets[1] = 0;                  _offsets[2] = offset2;                  _offsets[3] = 0;              }              else              {                  _offsets[0] = 0;                  _offsets[1] = offset1;                  _offsets[2] = 0;                  _offsets[3] = offset2;              }
Magic Number,SparrowSharp.Filters,BlurFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\BlurFilter.cs,UpdateParamaters,The following statement contains a magic number: if (horizontal)              {                  _offsets[0] = offset1;                  _offsets[1] = 0;                  _offsets[2] = offset2;                  _offsets[3] = 0;              }              else              {                  _offsets[0] = 0;                  _offsets[1] = offset1;                  _offsets[2] = 0;                  _offsets[3] = offset2;              }
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _vertexData = new VertexData(4' true);
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _vertexData.Vertices[2].TexCoords.Y = 1.0f;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _vertexData.Vertices[3].TexCoords.X = 1.0f;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _vertexData.Vertices[3].TexCoords.Y = 1.0f;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _indexData[2] = 2;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _indexData[2] = 2;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _indexData[3] = 1;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _indexData[4] = 3;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _indexData[4] = 3;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _indexData[5] = 2;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,FragmentFilter,The following statement contains a magic number: _indexData[5] = 2;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,PassTextureForPass,The following statement contains a magic number: return _passTextures[pass % 2];
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,RenderPasses,The following statement contains a magic number: GL.VertexAttribPointer (VertexPosID' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.POSITION_OFFSET);
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,RenderPasses,The following statement contains a magic number: GL.VertexAttribPointer (TexCoordsID' 2' VertexAttribPointerType.Float' false' Vertex.SIZE' (IntPtr)Vertex.TEXTURE_OFFSET);
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,RenderPasses,The following statement contains a magic number: for (int i = 0; i < NumPasses; ++i)              {                  if (i < NumPasses - 1)                  { // intermediate pass                      // draw into pass texture                      support.RenderTarget = PassTextureForPass(i + 1);                      support.Clear();                  }                  else                  { // final pass                      if (intoCache)                      {                          // draw into cache texture                          support.RenderTarget = cacheTexture;                          support.Clear();                      }                      else                      {                          // draw into back buffer' at original (stage) coordinates                          support.RenderTarget = previousRenderTarget;                          support.ProjectionMatrix = _projMatrix;                          support.ModelViewMatrix.Translate(OffsetX' OffsetY);                          support.BlendMode = obj.BlendMode;                          support.ApplyBlendMode(true);                      }                  }                    Texture passTexture = PassTextureForPass(i);                    GL.ActiveTexture (TextureUnit.Texture0);                  GL.BindTexture (TextureTarget.Texture2D' passTexture.Name);                    ActivateWithPass (i' passTexture' support.MvpMatrix);                  GL.DrawElements (BeginMode.Triangles' 6' DrawElementsType.UnsignedShort' IntPtr.Zero);                                    DeactivateWithPass(i' passTexture);              }
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,UpdateBuffers,The following statement contains a magic number: vertices[2].Position = new Vector2(bounds.X' bounds.Bottom);
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,UpdateBuffers,The following statement contains a magic number: vertices[3].Position = new Vector2(bounds.Right' bounds.Bottom);
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,UpdateBuffers,The following statement contains a magic number: const int indexSize = sizeof(ushort) * 6;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,UpdateBuffers,The following statement contains a magic number: const int vertexSize = Vertex.SIZE * 4;
Magic Number,SparrowSharp.Filters,FragmentFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\FragmentFilter.cs,UpdatePassTextures,The following statement contains a magic number: int numPassTextures = NumPasses > 1 ? 2 : 1;
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ColorMatrix,The following statement contains a magic number: if (values != null)              {                  Array.Copy(values' _m' 20);              }              else              {                  Array.Copy(matrix4x5Identity' _m' 20);              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ColorMatrix,The following statement contains a magic number: if (values != null)              {                  Array.Copy(values' _m' 20);              }              else              {                  Array.Copy(matrix4x5Identity' _m' 20);              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,Invert,The following statement contains a magic number: float[] mtx =              {                  -1' 0'  0'  0' 255'                  0' -1'  0'  0' 255'                  0'  0' -1'  0' 255'                  0'  0'  0'  1'   0              };
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,Invert,The following statement contains a magic number: float[] mtx =              {                  -1' 0'  0'  0' 255'                  0' -1'  0'  0' 255'                  0'  0' -1'  0' 255'                  0'  0'  0'  1'   0              };
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,Invert,The following statement contains a magic number: float[] mtx =              {                  -1' 0'  0'  0' 255'                  0' -1'  0'  0' 255'                  0'  0' -1'  0' 255'                  0'  0'  0'  1'   0              };
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,AdjustContrast,The following statement contains a magic number: float o = 128 * (1.0f - s);
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,AdjustBrightness,The following statement contains a magic number: brightness *= 255;
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,Identity,The following statement contains a magic number: Array.Copy(matrix4x5Identity' _m' 20);
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: float[] temp = new float[20];
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrix,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrix.cs,ConcatMatrix,The following statement contains a magic number: for (int y = 0; y < 4; ++y)              {                  for (int x = 0; x < 5; ++x)                  {                      temp[i + x] = source[i] * target._m[x] +                      source[i + 1] * target._m[x + 5] +                      source[i + 2] * target._m[x + 10] +                      source[i + 3] * target._m[x + 15] + (x == 4 ? source[i + 4] : 0);                  }                  i += 5;              }
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderMatrix = new Matrix4(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[5]' matrix[6]' matrix[7]' matrix[8]'                  matrix[10]' matrix[11]' matrix[12]' matrix[13]'                  matrix[15]' matrix[16]' matrix[17]' matrix[18]              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderOffset = new Vector4(                  matrix[4] / 255.0f' matrix[9] / 255.0f' matrix[14] / 255.0f' matrix[19] / 255.0f              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderOffset = new Vector4(                  matrix[4] / 255.0f' matrix[9] / 255.0f' matrix[14] / 255.0f' matrix[19] / 255.0f              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderOffset = new Vector4(                  matrix[4] / 255.0f' matrix[9] / 255.0f' matrix[14] / 255.0f' matrix[19] / 255.0f              );
Magic Number,SparrowSharp.Filters,ColorMatrixFilter,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Filters\ColorMatrixFilter.cs,UpdateShaderMatrix,The following statement contains a magic number: _shaderOffset = new Vector4(                  matrix[4] / 255.0f' matrix[9] / 255.0f' matrix[14] / 255.0f' matrix[19] / 255.0f              );
Missing Default,Sparrow.Display,Sprite,C:\repos\fmotagarcia_sparrow-sharp\SparrowSharp.Core\Display\Sprite.cs,ClipRectInSpace,The following switch statement is missing a default case: switch (i)                  {                      case 0:                          x = clipLeft;                          y = clipTop;                          break;                      case 1:                          x = clipLeft;                          y = clipBottom;                          break;                      case 2:                          x = clipRight;                          y = clipTop;                          break;                      case 3:                          x = clipRight;                          y = clipBottom;                          break;                  }
