Implementation smell,Namespace,Class,File,Method,Description
Long Method,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The method has 133 lines of code.
Complex Method,PointsTracker,Orm,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,SqlType,Cyclomatic complexity of the method is 8
Complex Method,PointsTracker,SQLiteCommand,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,BindParameter,Cyclomatic complexity of the method is 11
Complex Method,PointsTracker,SQLiteCommand,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,ReadCol,Cyclomatic complexity of the method is 17
Complex Method,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,Cyclomatic complexity of the method is 20
Complex Method,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,GetSqlName,Cyclomatic complexity of the method is 10
Long Parameter List,PointsTracker,SQLite3,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,BindText,The method has 5 parameters.
Long Parameter List,PointsTracker,SQLite3,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,BindBlob,The method has 5 parameters.
Long Statement,PointsTracker,SQLiteConnection,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,RunInTransaction,The length of the statement  "		throw new InvalidOperationException ("The connection must not already be in a transaction when RunInTransaction is called"); " is 124.
Long Statement,PointsTracker,TableMapping,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CreateInsertCommand,The length of the statement  "	var insertSql = string.Format ("insert {3} into \"{0}\"({1}) values ({2})"' TableName' string.Join ("'"' (from c in cols " is 120.
Long Statement,PointsTracker,Orm,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,SqlType,The length of the statement  "	if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,GenerateCommand,The length of the statement  "		var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Long Statement,PointsTracker,SQLitePointsTrackerRepository,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLitePointsTrackerRepository.cs,GetPointsUsedToday,The length of the statement  "		result = _SQLiteConnection.Table<FoodEntry> ().Where (x => x.Added >= startDate && x.Added < endDate).Sum (x => x.Points); " is 122.
Long Statement,PointsTracker,SQLitePointsTrackerRepository,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLitePointsTrackerRepository.cs,GetSetting,The length of the statement  "		result = _SQLiteConnection.Table<PointsTrackerSetting> ().Where (x => x.Name == name).Select (x => x.Value).FirstOrDefault (); " is 126.
Complex Conditional,PointsTracker,Orm,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,PointsTracker,SQLiteCommand,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Magic Number,PointsTracker,SQLiteConnection,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);  
Magic Number,PointsTracker,SQLiteConnection,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) {  	_sw.Stop ();  	_elapsedMilliseconds += _sw.ElapsedMilliseconds;  	#if DEBUG  	Console.WriteLine ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0);  	#endif  }  
Magic Number,PointsTracker,SQLiteConnection,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,Execute,The following statement contains a magic number: Console.WriteLine ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0);  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  }  else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty' null) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		//  		return new CompileResult {  			CommandText = "\"" + mem.Member.Name + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		if (mem.Member.MemberType == MemberTypes.Property) {  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#if SILVERLIGHT  			val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  			#else  			                        var m = (FieldInfo)mem.Member; #pragma  			#warning disable 0219                         var eee = Expression.Lambda(expr); #pragma  			#warning restore 0219                         val = m.GetValue(obj); #endif  		}  		else {  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  }  else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty' null) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		//  		return new CompileResult {  			CommandText = "\"" + mem.Member.Name + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		if (mem.Member.MemberType == MemberTypes.Property) {  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#if SILVERLIGHT  			val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  			#else  			                        var m = (FieldInfo)mem.Member; #pragma  			#warning disable 0219                         var eee = Expression.Lambda(expr); #pragma  			#warning restore 0219                         val = m.GetValue(obj); #endif  		}  		else {  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty' null) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		//  		return new CompileResult {  			CommandText = "\"" + mem.Member.Name + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		if (mem.Member.MemberType == MemberTypes.Property) {  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#if SILVERLIGHT  			val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  			#else  			                        var m = (FieldInfo)mem.Member; #pragma  			#warning disable 0219                         var eee = Expression.Lambda(expr); #pragma  			#warning restore 0219                         val = m.GetValue(obj); #endif  		}  		else {  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty' null) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		//  		return new CompileResult {  			CommandText = "\"" + mem.Member.Name + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		if (mem.Member.MemberType == MemberTypes.Property) {  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#if SILVERLIGHT  			val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  			#else  			                        var m = (FieldInfo)mem.Member; #pragma  			#warning disable 0219                         var eee = Expression.Lambda(expr); #pragma  			#warning restore 0219                         val = m.GetValue(obj); #endif  		}  		else {  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty' null) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		//  		return new CompileResult {  			CommandText = "\"" + mem.Member.Name + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		if (mem.Member.MemberType == MemberTypes.Property) {  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#if SILVERLIGHT  			val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  			#else  			                        var m = (FieldInfo)mem.Member; #pragma  			#warning disable 0219                         var eee = Expression.Lambda(expr); #pragma  			#warning restore 0219                         val = m.GetValue(obj); #endif  		}  		else {  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty' null) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		//  		return new CompileResult {  			CommandText = "\"" + mem.Member.Name + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		if (mem.Member.MemberType == MemberTypes.Property) {  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#if SILVERLIGHT  			val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  			#else  			                        var m = (FieldInfo)mem.Member; #pragma  			#warning disable 0219                         var eee = Expression.Lambda(expr); #pragma  			#warning restore 0219                         val = m.GetValue(obj); #endif  		}  		else {  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,PointsTracker,TableQuery,C:\repos\JohnDells_PointsTracker\PointsTrackerWindowsPhone\..\PointsTrackerShared\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
