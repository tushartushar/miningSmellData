Implementation smell,Namespace,Class,File,Method,Description
Long Method,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The method has 124 lines of code.
Long Method,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The method has 112 lines of code.
Long Method,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The method has 131 lines of code.
Long Method,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The method has 146 lines of code.
Long Method,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,DownloadDepots,The method has 128 lines of code.
Long Method,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The method has 103 lines of code.
Long Method,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The method has 147 lines of code.
Long Method,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The method has 200 lines of code.
Complex Method,SteamDatabaseBackend,CommandHandler,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\CommandHandler.cs,OnIRCMessage,Cyclomatic complexity of the method is 9
Complex Method,SteamDatabaseBackend,AppCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\App.cs,OnCommand,Cyclomatic complexity of the method is 8
Complex Method,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,Cyclomatic complexity of the method is 8
Complex Method,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,Cyclomatic complexity of the method is 17
Complex Method,SteamDatabaseBackend,PlayersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Players.cs,OnCommand,Cyclomatic complexity of the method is 11
Complex Method,SteamDatabaseBackend,QueueCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Queue.cs,OnCommand,Cyclomatic complexity of the method is 8
Complex Method,SteamDatabaseBackend,SteamIDCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\SteamID.cs,OnCommand,Cyclomatic complexity of the method is 10
Complex Method,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,Cyclomatic complexity of the method is 16
Complex Method,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ReadFeedItems,Cyclomatic complexity of the method is 9
Complex Method,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,Cyclomatic complexity of the method is 24
Complex Method,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessKey,Cyclomatic complexity of the method is 11
Complex Method,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,Cyclomatic complexity of the method is 18
Complex Method,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,DownloadDepots,Cyclomatic complexity of the method is 18
Complex Method,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,Cyclomatic complexity of the method is 13
Complex Method,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,Cyclomatic complexity of the method is 14
Complex Method,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,Cyclomatic complexity of the method is 25
Complex Method,SteamDatabaseBackend,Connection,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Connection.cs,OnLoggedOn,Cyclomatic complexity of the method is 9
Complex Method,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RequestFromPackage,Cyclomatic complexity of the method is 13
Complex Method,SteamDatabaseBackend,LicenseList,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\LicenseList.cs,OnLicenseListCallback,Cyclomatic complexity of the method is 8
Complex Method,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,OnPICSChanges,Cyclomatic complexity of the method is 11
Long Parameter List,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,MakeHistory,The method has 7 parameters. Parameters: db' transaction' request' file' action' oldValue' newValue
Long Identifier,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RequestFromPackage,The length of the parameter allowPurchaseFromRestrictedCountries is 36.
Long Statement,SteamDatabaseBackend,Application,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Application.cs,ReloadImportant,The length of the statement  "                ImportantSubs = db.Query<Important>("SELECT `SubID` as `ID` FROM `ImportantSubs`").ToDictionary(x => x.ID' _ => (byte)1); " is 121.
Long Statement,SteamDatabaseBackend,CommandHandler,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\CommandHandler.cs,OnIRCMessage,The length of the statement  "                commandData.Nickname = $"@{Utils.RemoveControlCharacters(Colors.StripColors(match.Groups["name"].Value.Replace("\u200B"' "")))} "; " is 130.
Long Statement,SteamDatabaseBackend,CommandHandler,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\CommandHandler.cs,TryCommand,The length of the statement  "                commandData.Reply("Steam says this job failed. Unable to execute your {0}{1}{2} command."' Colors.OLIVE' command.Trigger' Colors.NORMAL); " is 137.
Long Statement,SteamDatabaseBackend,AppCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\App.cs,OnCommand,The length of the statement  "            var infoTask = Steam.Instance.Apps.PICSGetProductInfo(new List<SteamApps.PICSRequest> { request }' Enumerable.Empty<SteamApps.PICSRequest>()); " is 142.
Long Statement,SteamDatabaseBackend,AppCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\App.cs,OnCommand,The length of the statement  "                command.Reply("Unknown AppID: {0}{1}{2}"' Colors.BLUE' appID' LicenseList.OwnedApps.ContainsKey(appID) ? SteamDB.StringCheckmark : string.Empty); " is 145.
Long Statement,SteamDatabaseBackend,AppCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\App.cs,TrySearchAppId,The length of the statement  "                appID = await db.ExecuteScalarAsync<uint>("SELECT `AppID` FROM `Apps` LEFT JOIN `AppsTypes` ON `Apps`.`AppType` = `AppsTypes`.`AppType` WHERE (`AppsTypes`.`Name` IN ('game'' 'application'' 'video'' 'hardware') AND (`Apps`.`StoreName` LIKE @Name OR `Apps`.`Name` LIKE @Name)) OR (`AppsTypes`.`Name` = 'unknown' AND `Apps`.`LastKnownName` LIKE @Name) ORDER BY `LastUpdated` DESC LIMIT 1"' new { Name = name }); " is 408.
Long Statement,SteamDatabaseBackend,BinariesCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Binaries.cs,OnCommand,The length of the statement  "                command.Reply("Usage:{0} bins <{1}> [stable (returns publicbeta by default)]"' Colors.OLIVE' string.Join("/"' Systems)); " is 120.
Long Statement,SteamDatabaseBackend,BinariesCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Binaries.cs,OnCommand,The length of the statement  "            var uri = new Uri(string.Format("{0}steam_client_{1}{2}?_={3}"' CDN' isStable ? "" : "publicbeta_"' os' DateTime.UtcNow.Ticks)); " is 128.
Long Statement,SteamDatabaseBackend,BinariesCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Binaries.cs,PrintBinary,The length of the statement  "            command.Reply("{0}{1} {2}({3} MB)"' CDN' kv["file"].AsString()' Colors.DARKGRAY' (kv["size"].AsLong() / 1048576.0).ToString("0.###")); " is 134.
Long Statement,SteamDatabaseBackend,BlogCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Blog.cs,OnCommand,The length of the statement  "                post = (await db.QueryAsync<BlogPost>("SELECT `ID`' `Slug`' `Title` FROM `Blog` WHERE `IsHidden` = 0 ORDER BY `Time` DESC LIMIT 1")).SingleOrDefault(); " is 151.
Long Statement,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,OnCommand,The length of the statement  "                .FirstOrDefault(x => x.Name.Equals(enumType' StringComparison.OrdinalIgnoreCase) || GetDottedTypeName(x).IndexOf(enumType' StringComparison.OrdinalIgnoreCase) != -1); " is 166.
Long Statement,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,The length of the statement  "                command.Reply("{0}{1}{2} ({3}) ={4} {5}"' Colors.LIGHTGRAY' enumName' Colors.NORMAL' Enum.Format(enumType' enumValue' "D")' Colors.BLUE' ExpandEnumFlagsToString(enumValue)); " is 173.
Long Statement,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,The length of the statement  "                enumValues = enumValues.Except(enumValues.Where(x => enumType.GetMember(x.ToString())[0].GetCustomAttributes(typeof(ObsoleteAttribute)' false).Length > 0)); " is 156.
Long Statement,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,The length of the statement  "            var formatted = string.Join("' "' enumValues.Select(@enum => string.Format("{0}{1}{2} ({3})"' Colors.BLUE' @enum.ToString()' Colors.NORMAL' Enum.Format(enumType' @enum' "D")))); " is 177.
Long Statement,SteamDatabaseBackend,HelpCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Help.cs,OnCommand,The length of the statement  "            command.Notice("Available commands: {0}{1}"' Colors.OLIVE' string.Join(string.Format("{0}' {1}"' Colors.NORMAL' Colors.OLIVE)' commands)); " is 138.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                    command.Reply("App {0}{1}{2} ({3}) is already important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL); " is 163.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                        await db.ExecuteAsync("INSERT INTO `ImportantApps` (`AppID`' `Channel`) VALUES (@AppID' @Channel)"' new { AppID = id' Channel = channel }); " is 139.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                    command.Reply("Marked app {0}{1}{2} ({3}) as important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL); " is 162.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                    command.Reply("Package {0}{1}{2} ({3}) is already important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id)); " is 121.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                    command.Reply("Marked package {0}{1}{2} ({3}) as important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id)); " is 120.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                    command.Reply("App {0}{1}{2} ({3}) is not important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL); " is 159.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                        db.Execute("DELETE FROM `ImportantApps` WHERE `AppID` = @AppID AND `Channel` = @Channel"' new { AppID = id' Channel = channel }); " is 129.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                    command.Reply("Removed app {0}{1}{2} ({3}) from the important list in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL); " is 174.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "                                    command.Reply("Removed package {0}{1}{2} ({3}) from the important list."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id)); " is 132.
Long Statement,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The length of the statement  "            command.Reply("Usage:{0} important reload {1}or{2} important <add/remove> <app/sub> <id>"' Colors.OLIVE' Colors.NORMAL' Colors.OLIVE); " is 134.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,OnTimer,The length of the statement  "                keys = (await db.QueryAsync<string>($"SELECT `SteamKey` FROM `SteamKeys` WHERE `Result` IN (-1'{(int)EPurchaseResultDetail.RateLimited}) ORDER BY `ID` ASC LIMIT 25")).ToList(); " is 176.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,ActivateKey,The length of the statement  "                await db.ExecuteAsync("UPDATE `SteamKeys` SET `SteamKey` = @HashedKey' `SubID` = @SubID' `Result` = @PurchaseResultDetail WHERE `SteamKey` = @SteamKey OR `SteamKey` = @HashedKey"' " is 179.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,ActivateKey,The length of the statement  "                    IRC.Instance.SendOps($"{Colors.GREEN}[Keys]{Colors.NORMAL} Key not activated:{Colors.OLIVE} {job.Result} - {job.PurchaseResultDetail}"); " is 136.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,ActivateKey,The length of the statement  "                IRC.Instance.SendOps($"{Colors.GREEN}[Keys]{Colors.NORMAL} {response}{Colors.NORMAL}. Packages:{Colors.OLIVE} {string.Join("' "' job.Packages.Select(x => $"{x.Key}: {x.Value}"))}"); " is 181.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,ActivateKey,The length of the statement  "            JobManager.AddJob(() => Steam.Instance.Apps.PICSGetProductInfo(Enumerable.Empty<SteamApps.PICSRequest>()' job.Packages.Keys.Select(Utils.NewPICSRequest))); " is 155.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,ActivateKey,The length of the statement  "                var apps = await db.QueryAsync<uint>("SELECT `AppID` FROM `SubsApps` WHERE `Type` = \"app\" AND `SubID` IN @Ids"' new { Ids = job.Packages.Keys }); " is 147.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,ActivateKey,The length of the statement  "                    var databaseName = (await db.QueryAsync<string>("SELECT `LastKnownName` FROM `Subs` WHERE `SubID` = @SubID"' new { SubID = package.Key })).FirstOrDefault() ?? string.Empty; " is 172.
Long Statement,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,ActivateKey,The length of the statement  "                    await db.ExecuteAsync("UPDATE `Subs` SET `LastKnownName` = @Name WHERE `SubID` = @SubID"' new { SubID = package.Key' Name = package.Value }); " is 141.
Long Statement,SteamDatabaseBackend,PackageCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Package.cs,OnCommand,The length of the statement  "                command.Reply("Unknown SubID: {0}{1}{2}"' Colors.BLUE' subID' LicenseList.OwnedSubs.ContainsKey(subID) ? SteamDB.StringCheckmark : string.Empty); " is 145.
Long Statement,SteamDatabaseBackend,PlayersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Players.cs,OnCommand,The length of the statement  "                command.Reply($"Unable to request player count for {Colors.BLUE}{name}{Colors.NORMAL}: {Colors.RED}{callback.Result}{Colors.NORMAL} -{Colors.DARKBLUE} {SteamDB.GetAppURL(appID' "graphs")}"); " is 190.
Long Statement,SteamDatabaseBackend,PlayersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Players.cs,OnCommand,The length of the statement  "                dailyPlayers = await db.ExecuteScalarAsync<uint>("SELECT `MaxDailyPlayers` FROM `OnlineStats` WHERE `AppID` = @appID"' new { appID }); " is 134.
Long Statement,SteamDatabaseBackend,PlayersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Players.cs,OnCommand,The length of the statement  "                $"{Colors.OLIVE}{callback.NumPlayers:N0}{Colors.NORMAL} {type} {Colors.BLUE}{name}{Colors.NORMAL} - 24h:{Colors.GREEN} {dailyPlayers:N0}{Colors.NORMAL} -{Colors.DARKBLUE} {SteamDB.GetAppURL(appID' "graphs")}" " is 208.
Long Statement,SteamDatabaseBackend,PubFileCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\PubFile.cs,OnCommand,The length of the statement  "            File.WriteAllText(Path.Combine(Application.Path' "ugc"' string.Format("{0}.json"' details.publishedfileid))' json' Encoding.UTF8); " is 130.
Long Statement,SteamDatabaseBackend,PubFileCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\PubFile.cs,OnCommand,The length of the statement  "            command.Reply("{0}' Title: {1}{2}{3}' Creator: {4}{5}{6}' App: {7}{8}{9}{10}' File UGC: {11}{12}{13}' Preview UGC: {14}{15}{16} -{17} {18}"' " is 140.
Long Statement,SteamDatabaseBackend,PubFileCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\PubFile.cs,OnCommand,The length of the statement  "            command.Notice("{0} - https://steamcommunity.com/sharedfiles/filedetails/?id={1}"' details.file_url' details.publishedfileid); " is 126.
Long Statement,SteamDatabaseBackend,QueueCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Queue.cs,OnCommand,The length of the statement  "                        command.Reply("App {0}{1}{2} ({3}) has been added to the store update queue."' Colors.BLUE' id' Colors.NORMAL' Utils.RemoveControlCharacters(name)); " is 148.
Long Statement,SteamDatabaseBackend,QueueCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Queue.cs,OnCommand,The length of the statement  "                        command.Reply("Package {0}{1}{2} ({3}) has been added to the store update queue."' Colors.BLUE' id' Colors.NORMAL' Utils.RemoveControlCharacters(name)); " is 152.
Long Statement,SteamDatabaseBackend,ServersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Servers.cs,OnCommand,The length of the statement  "                command.Reply("Usage:{0} servers <filter> - See https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol"' Colors.OLIVE); " is 134.
Long Statement,SteamDatabaseBackend,ServersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Servers.cs,OnCommand,The length of the statement  "                command.Reply($"{server.addr} - {new SteamID(server.steamid).Render(true)} - {Colors.GREEN}{server.players}/{server.max_players}{Colors.NORMAL} - Map: {Colors.DARKGRAY}{server.map}{Colors.NORMAL} - AppID: {Colors.DARKGRAY}{server.appid}{Colors.NORMAL} - Version: {Colors.DARKGRAY}{server.version}{Colors.NORMAL} - Dir: {Colors.DARKGRAY}{server.gamedir}{Colors.NORMAL} - Tags: {Colors.DARKGRAY}{server.gametype}{Colors.NORMAL} - Name: {Colors.DARKGRAY}{server.name}"); " is 467.
Long Statement,SteamDatabaseBackend,ServersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Servers.cs,OnCommand,The length of the statement  "            command.Reply($"{Colors.GREEN}{servers.Sum(x => x.players)}{Colors.NORMAL} players on {Colors.GREEN}{servers.Count}{Colors.NORMAL} servers. First three: {string.Join(" / "' servers.Take(3).Select(x => x.addr))}"); " is 213.
Long Statement,SteamDatabaseBackend,SteamIDCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\SteamID.cs,ExpandSteamID,The length of the statement  "            return string.Format("{0} / {1} {2}(UInt64: {3}' AccountID: {4}' IsValid: {5}' Universe: {6}' Instance: {7}' Type: {8})"' " is 121.
Long Statement,SteamDatabaseBackend,SteamIDCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\SteamID.cs,ExpandSteamID,The length of the statement  "                input.Render(true)' input.Render(false)' Colors.DARKGRAY' input.ConvertToUInt64()' input.AccountID' input.IsValid' input.AccountUniverse' displayInstance' input.AccountType); " is 174.
Long Statement,SteamDatabaseBackend,IRC,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\IRC.cs,OnConnected,The length of the statement  "            Client.LogIn(Settings.Current.IRC.Nickname' Settings.Current.BaseURL.AbsoluteUri' Settings.Current.IRC.Nickname' "4"' null' Settings.Current.IRC.Password); " is 155.
Long Statement,SteamDatabaseBackend,IRC,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\IRC.cs,SendMain,The length of the statement  "                Client.Message(Settings.Current.IRC.Channel.Main' string.Concat(Settings.Current.IRC.PrioritySendPrefix' string.Format(format' args))); " is 135.
Long Statement,SteamDatabaseBackend,IRC,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\IRC.cs,SendOps,The length of the statement  "                Client.Message(Settings.Current.IRC.Channel.Ops' string.Concat(Settings.Current.IRC.PrioritySendPrefix' string.Format(format' args))); " is 134.
Long Statement,SteamDatabaseBackend,LinkExpander,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\LinkExpander.cs,OnMessage,The length of the statement  "                        data = db.Query<App>("SELECT `AppID`' `Apps`.`Name`' `LastKnownName`' `AppsTypes`.`DisplayName` as `AppTypeString` FROM `Apps` JOIN `AppsTypes` ON `Apps`.`AppType` = `AppsTypes`.`AppType` WHERE `AppID` = @AppID"' new { AppID = id }).SingleOrDefault(); " is 251.
Long Statement,SteamDatabaseBackend,LinkExpander,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\LinkExpander.cs,GetFormattedPrices,The length of the statement  "                prices = db.Query<Price>("SELECT `Country`' `PriceFinal`' `PriceDiscount` FROM `Store` WHERE `AppID` = @AppID AND `Country` IN ('us'' 'uk'' 'eu')"' new { AppID = appID }).ToList(); " is 180.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "            var items = (await db.QueryAsync<GenericFeedItem>("SELECT `Link` FROM `RSS` WHERE `Link` IN @Ids"' new { Ids = feed.Items.Select(x => x.Link) })).ToDictionary(x => x.Link' _ => (byte)1); " is 186.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                IRC.Instance.SendMain("{0}{1}{2}: {3} -{4} {5}"' Colors.BLUE' feed.Title' Colors.NORMAL' item.Title' Colors.DARKBLUE' item.Link); " is 129.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                else if (feed.Title.Contains("Counter-Strike: Global Offensive") && item.Title.StartsWith("Release Notes"' StringComparison.Ordinal)) " is 133.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                    item.Content = new Regex("<p>\\[\\s*(.+)\\s*\\]"' RegexOptions.Multiline | RegexOptions.CultureInvariant).Replace(item.Content' "## $1"); " is 137.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                        "SELECT `Builds`.`BuildID`' `Builds`.`ChangeID`' `Builds`.`AppID`' `Changelists`.`Date`' LENGTH(`Official`) as `Official` FROM `Builds` " + " is 139.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                        Log.WriteDebug("RSS"' "Got {0} update patch notes' but there is no build within last 10 minutes. {1}"' appID' item.Link); " is 121.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                        IRC.Instance.SendOps($"{Colors.GREEN}[Patch notes]{Colors.NORMAL} Got {appID} update patch notes' but there is no build within last 10 minutes. {item.Link}"); " is 158.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                        IRC.Instance.SendOps($"{Colors.GREEN}[Patch notes]{Colors.NORMAL} Got {appID} update patch notes' but official patch notes is already filled. {item.Link}"); " is 156.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                    item.Content = new Regex(@"<br( \/)?>\r?\n?"' RegexOptions.Multiline | RegexOptions.CultureInvariant).Replace(item.Content' "\n"); " is 130.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                    item.Content = new Regex("^(?:-|&#(?:8208|8209|8210|8211|8212|8213);) ?"' RegexOptions.Multiline | RegexOptions.CultureInvariant).Replace(item.Content' "* "); " is 158.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                        "VALUES (@BuildID' @AppID' @ChangeID' @Date' @Content' @Link) ON DUPLICATE KEY UPDATE `Official` = VALUES(`Official`)' `OfficialURL` = VALUES(`OfficialURL`)' `LastEditor` = @AccountID"' " is 185.
Long Statement,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The length of the statement  "                    IRC.Instance.SendMain($"\u2699 Official patch notes:{Colors.BLUE} {Steam.GetAppName(build.AppID)}{Colors.NORMAL} -{Colors.DARKBLUE} {SteamDB.GetPatchnotesURL(build.BuildID)}"); " is 176.
Long Statement,SteamDatabaseBackend,HttpServer,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Managers\HttpServer.cs,WriteJsonResponse,The length of the statement  "            using var stringInMemoryStream = new MemoryStream(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(value' Formatting.Indented))); " is 131.
Long Statement,SteamDatabaseBackend,StoreQueue,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Managers\StoreQueue.cs,InsertQuery,The length of the statement  "            await db.ExecuteAsync("INSERT INTO `StoreUpdateQueue` (`ID`' `Type`) VALUES (@ID' @Type) ON DUPLICATE KEY UPDATE `ID` = `ID`"' items); " is 134.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,LoadData,The length of the statement  "            CurrentData = (await DbConnection.QueryAsync<PICSInfo>("SELECT `Name` as `KeyName`' `Value`' `Key` FROM `AppsInfo` INNER JOIN `KeyNames` ON `AppsInfo`.`Key` = `KeyNames`.`ID` WHERE `AppID` = @AppID"' new { AppID })).ToDictionary(x => x.KeyName' x => x); " is 253.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                await DbConnection.ExecuteAsync("INSERT INTO `Changelists` (`ChangeID`) VALUES (@ChangeNumber) ON DUPLICATE KEY UPDATE `Date` = `Date`"' new { ProductInfo.ChangeNumber }); " is 171.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                await DbConnection.ExecuteAsync("INSERT INTO `ChangelistsApps` (`ChangeID`' `AppID`) VALUES (@ChangeNumber' @AppID) ON DUPLICATE KEY UPDATE `AppID` = `AppID`"' new { AppID' ProductInfo.ChangeNumber }); " is 201.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "            var app = (await DbConnection.QueryAsync<App>("SELECT `Name`' `AppType` FROM `Apps` WHERE `AppID` = @AppID LIMIT 1"' new { AppID })).SingleOrDefault(); " is 151.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                var newAppType = await DbConnection.ExecuteScalarAsync<int?>("SELECT `AppType` FROM `AppsTypes` WHERE `Name` = @Type LIMIT 1"' new { Type = currentType }) ?? -1; " is 161.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                        new { Name = currentType' DisplayName = ProductInfo.KeyValues["common"]["type"].AsString() }); // We don't need to lower display name " is 133.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    IRC.Instance.SendOps("New app type: {0}{1}{2} - {3}"' Colors.BLUE' currentType' Colors.NORMAL' SteamDB.GetAppURL(AppID' "history")); " is 132.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    newAppType = await DbConnection.ExecuteScalarAsync<int>("SELECT `AppType` FROM `AppsTypes` WHERE `Name` = @Type LIMIT 1"' new { Type = currentType }); " is 150.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("INSERT INTO `Apps` (`AppID`' `AppType`' `Name`' `LastKnownName`) VALUES (@AppID' @Type' @AppName' @AppName) ON DUPLICATE KEY UPDATE `Name` = VALUES(`Name`)' `LastKnownName` = VALUES(`LastKnownName`)' `AppType` = VALUES(`AppType`)"' " is 264.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("UPDATE `Apps` SET `Name` = @AppName' `LastKnownName` = @AppName WHERE `AppID` = @AppID"' new { AppID' AppName = newAppName }); " is 159.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("UPDATE `Apps` SET `AppType` = @Type WHERE `AppID` = @AppID"' new { AppID' Type = newAppType }); " is 128.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    if (await ProcessKey(sectionName' sectionName' Utils.JsonifyKeyValue(section)' section) && sectionName == "root_depots") " is 120.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                        await DbConnection.ExecuteAsync("UPDATE `Apps` SET `LastDepotUpdate` = CURRENT_TIMESTAMP() WHERE `AppID` = @AppID"' new { AppID }); " is 131.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                foreach (var data in CurrentData.Values.Where(data => !data.Processed && !data.KeyName.StartsWith("website"' StringComparison.Ordinal))) " is 136.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("DELETE FROM `AppsInfo` WHERE `AppID` = @AppID AND `Key` = @Key"' new { AppID' data.Key }); " is 123.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("INSERT INTO `Apps` (`AppID`' `Name`) VALUES (@AppID' @AppName) ON DUPLICATE KEY UPDATE `AppType` = `AppType`"' new { AppID' AppName = string.Format("{0} {1}"' SteamDB.UNKNOWN_APP' AppID) }); " is 223.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                else if (!app.Name.StartsWith(SteamDB.UNKNOWN_APP' StringComparison.Ordinal)) // We do have the app' replace it with default name " is 129.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("UPDATE `Apps` SET `Name` = @AppName' `AppType` = 0 WHERE `AppID` = @AppID"' new { AppID' AppName = string.Format("{0} {1}"' SteamDB.UNKNOWN_APP' AppID) }); " is 188.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessUnknown,The length of the statement  "            var name = await DbConnection.ExecuteScalarAsync<string>("SELECT `Name` FROM `Apps` WHERE `AppID` = @AppID LIMIT 1"' new { AppID }); " is 132.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessKey,The length of the statement  "                    IRC.Instance.SendOps("New app keyname: {0}{1} {2}(ID: {3}) ({4}) - {5}"' Colors.BLUE' keyName' Colors.LIGHTGRAY' key' displayName' SteamDB.GetAppURL(AppID' "history")); " is 168.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessKey,The length of the statement  "                await DbConnection.ExecuteAsync("INSERT INTO `AppsInfo` (`AppID`' `Key`' `Value`) VALUES (@AppID' @Key' @Value)"' new { AppID' Key = key' Value = value }); " is 155.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessKey,The length of the statement  "            await DbConnection.ExecuteAsync("UPDATE `AppsInfo` SET `Value` = @Value WHERE `AppID` = @AppID AND `Key` = @Key"' new { AppID' data.Key' Value = value }); " is 154.
Long Statement,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,PrintLinux,The length of the statement  "            IRC.Instance.SendLinuxAnnouncement($"\U0001F427 {name} now lists Linux{LinkExpander.GetFormattedPrices(AppID)} - {SteamDB.GetAppURL(AppID' "history")} - https://store.steampowered.com/app/{AppID}/"); " is 199.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,UpdateContentServerList,The length of the statement  "            var newServers = response["serverlist"].Children.Select(x => (CDNClient.Server)new DnsEndPoint(x.Value.ToString()' 80)).ToList(); " is 129.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                if (depot["manifests"]["public"].Value == null || !ulong.TryParse(depot["manifests"]["public"].Value' out request.ManifestID)) " is 126.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                        await db.ExecuteAsync("INSERT INTO `Depots` (`DepotID`' `Name`) VALUES (@DepotID' @DepotName) ON DUPLICATE KEY UPDATE `DepotID` = VALUES(`DepotID`)"' new { request.DepotID' request.DepotName }); " is 194.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                    Log.WriteDebug("Depot Downloader"' "Depot {0} (from {1}) has no public branch' but there is another one"' request.DepotID' appID); " is 130.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                await db.ExecuteAsync("INSERT INTO `Builds` (`BuildID`' `ChangeID`' `AppID`) VALUES (@BuildID' @ChangeNumber' @AppID) ON DUPLICATE KEY UPDATE `AppID` = VALUES(`AppID`)"' " is 169.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                var dbDepots = (await db.QueryAsync<Depot>("SELECT `DepotID`' `Name`' `BuildID`' `ManifestID`' `LastManifestID` FROM `Depots` WHERE `DepotID` IN @depotIds"' new { depotIds })) " is 175.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                var decryptionKeys = (await db.QueryAsync<DepotKey>("SELECT `DepotID`' `Key` FROM `DepotsKeys` WHERE `DepotID` IN @depotIds"' new { depotIds })) " is 144.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                            Log.WriteDebug("Depot Processor"' "Skipping depot {0} due to old buildid: {1} > {2}"' request.DepotID' dbDepot.BuildID' request.BuildID); " is 137.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                        if (dbDepot.LastManifestID == request.ManifestID && dbDepot.ManifestID == request.ManifestID && Settings.Current.FullRun != FullRunState.WithForcedDepots) " is 154.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                                await db.ExecuteAsync("UPDATE `Depots` SET `Name` = @DepotName WHERE `DepotID` = @DepotID"' new { request.DepotID' request.DepotName }); " is 136.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                    if (dbDepot.BuildID != request.BuildID || dbDepot.ManifestID != request.ManifestID || request.DepotName != dbDepot.Name) " is 120.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                        await db.ExecuteAsync(@"INSERT INTO `Depots` (`DepotID`' `Name`' `BuildID`' `ManifestID`) VALUES (@DepotID' @DepotName' @BuildID' @ManifestID) " is 142.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The length of the statement  "                                    ON DUPLICATE KEY UPDATE `LastUpdated` = CURRENT_TIMESTAMP()' `Name` = VALUES(`Name`)' `BuildID` = VALUES(`BuildID`)' `ManifestID` = VALUES(`ManifestID`)"' " is 154.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,GetDepotDecryptionKey,The length of the statement  "                await db.ExecuteAsync("INSERT INTO `DepotsKeys` (`DepotID`' `Key`) VALUES (@DepotID' @Key) ON DUPLICATE KEY UPDATE `Key` = VALUES(`Key`)"' new { depot.DepotID' Key = Utils.ByteArrayToString(callback.DepotKey) }); " is 212.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,DownloadDepots,The length of the statement  "                        depotManifest = await CDNClient.DownloadManifestAsync(depot.DepotID' depot.ManifestID' depot.Server' string.Empty' depot.DepotKey); " is 131.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,DownloadDepots,The length of the statement  "                        Log.WriteError("Depot Processor"' "Failed to download depot manifest for app {0} depot {1} ({2}: {3}) (#{4})"' appID' depot.DepotID' depot.Server' lastError' i); " is 161.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The length of the statement  "            var filesOld = (await db.QueryAsync<DepotFile>("SELECT `ID`' `File`' `Hash`' `Size`' `Flags` FROM `DepotsFiles` WHERE `DepotID` = @DepotID"' new { request.DepotID }' transaction: transaction)).ToDictionary(x => x.File' x => x); " is 227.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The length of the statement  "                        await db.ExecuteAsync("UPDATE `DepotsFiles` SET `Hash` = @Hash' `Size` = @Size' `Flags` = @Flags WHERE `DepotID` = @DepotID AND `ID` = @ID"' new DepotFile " is 154.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The length of the statement  "                await db.ExecuteAsync("DELETE FROM `DepotsFiles` WHERE `DepotID` = @DepotID AND `ID` IN @Files"' new { request.DepotID' Files = filesOld.Select(x => x.Value.ID) }' transaction: transaction); " is 190.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The length of the statement  "                await db.ExecuteAsync("INSERT INTO `DepotsFiles` (`DepotID`' `File`' `Hash`' `Size`' `Flags`) VALUES (@DepotID' @File' @Hash' @Size' @Flags)"' filesAdded' transaction: transaction); " is 181.
Long Statement,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The length of the statement  "            await db.ExecuteAsync("UPDATE `Depots` SET `LastManifestID` = @ManifestID' `LastUpdated` = CURRENT_TIMESTAMP() WHERE `DepotID` = @DepotID"' new { request.DepotID' request.ManifestID }' transaction: transaction); " is 211.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,ReloadFileList,The length of the statement  "                Files[depot.Key] = new Regex(pattern' RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture); " is 124.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFilesFromDepot,The length of the statement  "                        Console.WriteLine("{1} [{0'6:#00.00}%] {2} files left to download"' downloadedFiles / (float)files.Count * 100.0f' job.DepotName' files.Count - downloadedFiles); " is 161.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The length of the statement  "            var directory = Path.Combine(Application.Path' "files"' DownloadFolders[job.DepotID]' Path.GetDirectoryName(file.FileName)); " is 124.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The length of the statement  "            var downloadPath = new FileInfo(Path.Combine(Path.GetTempPath()' Path.ChangeExtension(Path.GetRandomFileName()' ".steamdb_tmp"))); " is 130.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The length of the statement  "            var oldChunksFile = Path.Combine(Application.Path' "files"' ".support"' "chunks"' string.Format("{0}-{1}.json"' job.DepotID' BitConverter.ToString(checksum))); " is 159.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The length of the statement  "                    var oldChunks = JsonConvert.DeserializeObject<List<DepotManifest.ChunkData>>(File.ReadAllText(oldChunksFile)' JsonHandleAllReferences); " is 135.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The length of the statement  "            Log.WriteInfo($"FileDownloader {job.DepotID}"' $"Downloading {file.FileName} ({downloadedSize} bytes' {neededChunks.Count} out of {chunks.Count} chunks)"); " is 155.
Long Statement,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The length of the statement  "                            Console.WriteLine("{2} [{0'6:#00.00}%] {1}"' downloadedSize / (float)file.TotalSize * 100.0f' file.FileName' job.DepotName); " is 124.
Long Statement,SteamDatabaseBackend,KeyNameCache,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\KeyNameCache.cs,CreateSubKey,The length of the statement  "                await db.ExecuteAsync("INSERT INTO `KeyNamesSubs` (`Name`' `Type`' `DisplayName`) VALUES(@Name' @Type' @DisplayName)"' new " is 122.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,LoadData,The length of the statement  "            PackageName = await DbConnection.ExecuteScalarAsync<string>("SELECT `Name` FROM `Subs` WHERE `SubID` = @SubID LIMIT 1"' new { SubID }); " is 135.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,LoadData,The length of the statement  "            CurrentData = (await DbConnection.QueryAsync<PICSInfo>("SELECT `Name` as `KeyName`' `Value`' `Key` FROM `SubsInfo` INNER JOIN `KeyNamesSubs` ON `SubsInfo`.`Key` = `KeyNamesSubs`.`ID` WHERE `SubID` = @SubID"' new { SubID })).ToDictionary(x => x.KeyName' x => x); " is 261.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                await DbConnection.ExecuteAsync("INSERT INTO `Changelists` (`ChangeID`) VALUES (@ChangeNumber) ON DUPLICATE KEY UPDATE `Date` = `Date`"' new { ProductInfo.ChangeNumber }); " is 171.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                await DbConnection.ExecuteAsync("INSERT INTO `ChangelistsSubs` (`ChangeID`' `SubID`) VALUES (@ChangeNumber' @SubID) ON DUPLICATE KEY UPDATE `SubID` = `SubID`"' new { SubID' ProductInfo.ChangeNumber }); " is 201.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "            var apps = (await DbConnection.QueryAsync<PackageApp>("SELECT `AppID`' `Type` FROM `SubsApps` WHERE `SubID` = @SubID"' new { SubID })).ToDictionary(x => x.AppID' x => x.Type); " is 175.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                await DbConnection.ExecuteAsync("INSERT INTO `Subs` (`SubID`' `Name`' `LastKnownName`) VALUES (@SubID' @Name' @Name)"' new { SubID' Name = newPackageName }); " is 157.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("UPDATE `Subs` SET `Name` = @Name WHERE `SubID` = @SubID"' new { SubID' Name = newPackageName }); " is 129.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                    await DbConnection.ExecuteAsync("UPDATE `Subs` SET `Name` = @Name' `LastKnownName` = @Name WHERE `SubID` = @SubID"' new { SubID' Name = newPackageName }); " is 154.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                if (string.IsNullOrEmpty(sectionName) || sectionName == "packageid" || sectionName == "changenumber" || sectionName == "name") " is 126.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                                await DbConnection.ExecuteAsync("UPDATE `SubsApps` SET `Type` = @Type WHERE `SubID` = @SubID AND `AppID` = @AppID"' new { SubID' AppID = appID' Type = type }); " is 159.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                            await DbConnection.ExecuteAsync("INSERT INTO `SubsApps` (`SubID`' `AppID`' `Type`) VALUES(@SubID' @AppID' @Type)"' new { SubID' AppID = appID' Type = type }); " is 158.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "            foreach (var data in CurrentData.Values.Where(data => !data.Processed && !data.KeyName.StartsWith("website"' StringComparison.Ordinal))) " is 136.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                await DbConnection.ExecuteAsync("DELETE FROM `SubsInfo` WHERE `SubID` = @SubID AND `Key` = @Key"' new { SubID' data.Key }); " is 123.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                await DbConnection.ExecuteAsync("DELETE FROM `SubsApps` WHERE `SubID` = @SubID AND `AppID` = @AppID AND `Type` = @Type"' new { SubID' AppID = app.Key' Type = app.Value }); " is 171.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The length of the statement  "                JobManager.AddJob(() => Steam.Instance.Apps.PICSGetAccessTokens(ProductInfo.KeyValues["appids"].Children.Select(x => (uint)x.AsInteger())' Enumerable.Empty<uint>())); " is 166.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessKey,The length of the statement  "                    IRC.Instance.SendOps("New package keyname: {0}{1} {2}(ID: {3}) ({4}) - {5}"' Colors.BLUE' keyName' Colors.LIGHTGRAY' key' displayName' SteamDB.GetPackageURL(SubID' "history")); " is 176.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessKey,The length of the statement  "                await DbConnection.ExecuteAsync("INSERT INTO `SubsInfo` (`SubID`' `Key`' `Value`) VALUES (@SubID' @Key' @Value)"' new { SubID' Key = key' Value = value }); " is 155.
Long Statement,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessKey,The length of the statement  "            await DbConnection.ExecuteAsync("UPDATE `SubsInfo` SET `Value` = @Value WHERE `SubID` = @SubID AND `Key` = @Key"' new { SubID' data.Key' Value = value }); " is 154.
Long Statement,SteamDatabaseBackend,Connection,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Connection.cs,OnDisconnected,The length of the statement  "            Log.WriteInfo("Steam"' "Disconnected from Steam. Retrying in {0} seconds... {1}"' RETRY_DELAY' callback.UserInitiated ? " (user initiated)" : ""); " is 146.
Long Statement,SteamDatabaseBackend,Connection,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Connection.cs,OnLoggedOn,The length of the statement  "                    JobManager.AddJob(() => Steam.Instance.Apps.PICSGetAccessTokens(Application.ImportantApps.Keys' Enumerable.Empty<uint>())); " is 123.
Long Statement,SteamDatabaseBackend,Connection,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Connection.cs,OnLoggedOn,The length of the statement  "                    JobManager.AddJob(() => Steam.Instance.Apps.PICSGetProductInfo(Enumerable.Empty<SteamApps.PICSRequest>()' Application.ImportantSubs.Keys.Select(package => Utils.NewPICSRequest(package)))); " is 188.
Long Statement,SteamDatabaseBackend,Connection,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Connection.cs,OnMachineAuth,The length of the statement  "                ErrorReporter.Notify("Steam"' new InvalidDataException(string.Format("Data.Length ({0}) != BytesToWrite ({1}) in OnMachineAuth"' callback.Data.Length' callback.BytesToWrite))); " is 176.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RefreshPackageNames,The length of the statement  "            var packageData = await db.QueryAsync<Package>("SELECT `SubID`' `LastKnownName` FROM `Subs` WHERE `SubID` IN @Ids AND `StoreName` = ''"' new { Ids = names.Keys }); " is 163.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RefreshPackageNames,The length of the statement  "                    Log.WriteInfo("FreeLicense"' "Changed package name for {0} from \"{1}\" to \"{2}\""' package.SubID' package.LastKnownName' newName); " is 132.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RefreshPackageNames,The length of the statement  "                    await db.ExecuteAsync("UPDATE `Subs` SET `LastKnownName` = @Name WHERE `SubID` = @SubID"' new { package.SubID' Name = newName }); " is 129.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,OnTimer,The length of the statement  "                startTimes = db.Query("SELECT `SubID`' `Value` FROM `SubsInfo` WHERE `Key` = (SELECT `ID` FROM `KeyNamesSubs` WHERE `Name` = \"extended_starttime\") AND `SubID` IN @Ids"' new { Ids = list.Select(x => x.Key) }).ToDictionary(x => (uint)x.SubID' x => Convert.ToUInt64((string)x.Value)); " is 283.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,OnTimer,The length of the statement  "            Log.WriteDebug(nameof(FreeLicense)' $"Requesting {AppsRequestedInHour} free apps as the rate limit timer ran: {string.Join("' "' appids)}"); " is 140.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RequestFromPackage,The length of the statement  "            if (purchaseRestrictedCountries != null && purchaseRestrictedCountries.Contains(AccountInfo.Country) != allowPurchaseFromRestrictedCountries) " is 141.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RequestFromPackage,The length of the statement  "                available = db.ExecuteScalar<bool>("SELECT IFNULL(`Value`' \"\") = \"released\" FROM `Apps` LEFT JOIN `AppsInfo` ON `Apps`.`AppID` = `AppsInfo`.`AppID` AND `Key` = (SELECT `ID` FROM `KeyNames` WHERE `Name` = \"common_releasestate\") WHERE `Apps`.`AppID` = @AppID"' new { AppID = appId }); " is 288.
Long Statement,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,RequestFromPackage,The length of the statement  "                parentAppId = db.ExecuteScalar<uint>("SELECT `Value` FROM `Apps` JOIN `AppsInfo` ON `Apps`.`AppID` = `AppsInfo`.`AppID` WHERE `Key` = (SELECT `ID` FROM `KeyNames` WHERE `Name` = \"common_parent\") AND `Apps`.`AppID` = @AppID AND `AppType` != 3"' new { AppID = appId }); " is 269.
Long Statement,SteamDatabaseBackend,LicenseList,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\LicenseList.cs,OnLicenseListCallback,The length of the statement  "                    Log.WriteInfo("LicenseList"' $"New license granted: {license.PackageID} ({license.PaymentMethod}' {license.LicenseFlags})"); " is 124.
Long Statement,SteamDatabaseBackend,LicenseList,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\LicenseList.cs,OnLicenseListCallback,The length of the statement  "            var apps = db.Query<uint>("SELECT `AppID` FROM `SubsApps` WHERE `Type` = \"app\" AND `SubID` IN @Ids"' new { Ids = newSubs }); " is 126.
Long Statement,SteamDatabaseBackend,LicenseList,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\LicenseList.cs,RefreshApps,The length of the statement  "            OwnedApps = db.Query<App>("SELECT DISTINCT `AppID` FROM `SubsApps` WHERE `SubID` IN @Ids"' new { Ids = OwnedSubs.Keys }).ToDictionary(x => x.AppID' _ => (byte)1); " is 162.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PerformSync,The length of the statement  "                    var lastAppID = 50000 + db.ExecuteScalar<int>("SELECT `AppID` FROM `Apps` WHERE `AppID` != 2032727 ORDER BY `AppID` DESC LIMIT 1"); " is 131.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PerformSync,The length of the statement  "                        apps = db.Query<uint>("(SELECT `AppID` FROM `Apps` ORDER BY `AppID` DESC) UNION DISTINCT (SELECT `AppID` FROM `SubsApps` WHERE `Type` = 'app') ORDER BY `AppID` DESC").ToList(); " is 176.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,OnPICSChanges,The length of the statement  "            Log.WriteInfo("PICSChanges"' $"Changelist {PreviousChangeNumber} -> {callback.CurrentChangeNumber} ({callback.AppChanges.Count} apps' {callback.PackageChanges.Count} packages)"); " is 178.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,OnPICSChanges,The length of the statement  "                IRC.Instance.SendAnnounce("{0}»{1} Changelist {2}{3}{4} (empty)"' Colors.RED' Colors.NORMAL' Colors.BLUE' PreviousChangeNumber' Colors.DARKGRAY); " is 145.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,OnPICSChanges,The length of the statement  "                JobManager.AddJob(() => Steam.Instance.Apps.PICSGetProductInfo(Enumerable.Empty<SteamApps.PICSRequest>()' callback.PackageChanges.Keys.Select(Utils.NewPICSRequest))); " is 166.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandleApps,The length of the statement  "            await db.ExecuteAsync("INSERT INTO `ChangelistsApps` (`ChangeID`' `AppID`) VALUES (@ChangeNumber' @ID) ON DUPLICATE KEY UPDATE `AppID` = `AppID`"' callback.AppChanges.Values); " is 175.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandleApps,The length of the statement  "            await db.ExecuteAsync("UPDATE `Apps` SET `LastUpdated` = CURRENT_TIMESTAMP() WHERE `AppID` IN @Ids"' new { Ids = callback.AppChanges.Values.Select(x => x.ID) }); " is 161.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandlePackagesChangelists,The length of the statement  "            await db.ExecuteAsync("INSERT INTO `ChangelistsSubs` (`ChangeID`' `SubID`) VALUES (@ChangeNumber' @ID) ON DUPLICATE KEY UPDATE `SubID` = `SubID`"' callback.PackageChanges.Values); " is 179.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandlePackagesChangelists,The length of the statement  "            await db.ExecuteAsync("UPDATE `Subs` SET `LastUpdated` = CURRENT_TIMESTAMP() WHERE `SubID` IN @Ids"' new { Ids = callback.PackageChanges.Values.Select(x => x.ID) }); " is 165.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandlePackages,The length of the statement  "                ignoredPackages = (await db.QueryAsync("SELECT `SubID`' `SubID` FROM `SubsInfo` WHERE `SubID` IN @Subs AND `Key` = @Key AND `Value` IN @Types"' " is 143.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandlePackages,The length of the statement  "                appids = (await db.QueryAsync<uint>("SELECT `AppID` FROM `SubsApps` WHERE `SubID` IN @Ids AND `Type` = 'app'"' new { Ids = subids })).ToList(); " is 143.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandleChangeNumbers,The length of the statement  "            await db.ExecuteAsync("INSERT INTO `Changelists` (`ChangeID`) VALUES (@ChangeID) ON DUPLICATE KEY UPDATE `Date` = `Date`"' changeLists); " is 136.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PrintImportants,The length of the statement  "                        message = $"[Changelist {callback.CurrentChangeNumber}] {appType} update: {appName}\n{SteamDB.GetAppURL(app' "history")}?utm_source=Steam&utm_medium=Steam&utm_campaign=SteamDB%20Group%20Chat" " is 191.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PrintImportants,The length of the statement  "                IRC.Instance.AnnounceImportantPackageUpdate("Package update: {0}{1}{2} -{3} {4}"' Colors.BLUE' Steam.GetPackageName(package)' Colors.NORMAL' Colors.DARKBLUE' SteamDB.GetPackageURL(package' "history")); " is 201.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,SendChangelistsToIRC,The length of the statement  "                var message = $"Changelist {Colors.BLUE}{changeNumber}{Colors.NORMAL} {Colors.DARKGRAY}({appCount:N0} apps and {packageCount:N0} packages)"; " is 140.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,SendChangelistsToIRC,The length of the statement  "                        apps = (await db.QueryAsync<App>("SELECT `AppID`' `Name`' `LastKnownName` FROM `Apps` WHERE `AppID` IN @Ids"' new { Ids = changeList.Apps })).ToDictionary(x => x.AppID' x => x); " is 177.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,SendChangelistsToIRC,The length of the statement  "                        packages = (await db.QueryAsync<Package>("SELECT `SubID`' `Name`' `LastKnownName` FROM `Subs` WHERE `SubID` IN @Ids"' new { Ids = changeList.Packages })).ToDictionary(x => x.SubID' x => x); " is 189.
Long Statement,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,SendChangelistsToIRC,The length of the statement  "                        IRC.Instance.SendAnnounce($"  Package: {Colors.BLUE}{packageId}{Colors.NORMAL} - {Steam.FormatPackageName(packageId' data)}"); " is 126.
Long Statement,SteamDatabaseBackend,PICSProductInfo,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSProductInfo.cs,OnPICSProductInfo,The length of the statement  "                TaskManager.RegisterErrorHandler(workerItem.ContinueWith(RemoveProcessorLock' TaskManager.TaskCancellationToken.Token)); " is 120.
Long Statement,SteamDatabaseBackend,PICSTokens,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSTokens.cs,Reload,The length of the statement  "                SecretTokens = db.Query<PICSToken>("SELECT `AppID`' `Token` FROM `PICSTokens`").ToDictionary(x => x.AppID' x => x.Token); " is 121.
Long Statement,SteamDatabaseBackend,PICSTokens,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSTokens.cs,OnPICSTokens,The length of the statement  "            Log.WriteDebug("PICSTokens"' "Tokens granted: {0} - Tokens denied: {1}"' callback.AppTokens.Count' callback.AppTokensDenied.Count); " is 131.
Long Statement,SteamDatabaseBackend,PICSTokens,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSTokens.cs,HandleToken,The length of the statement  "                IRC.Instance.SendOps($"{Colors.GREEN}[Tokens]{Colors.NORMAL} Added a new token that the bot got itself:{Colors.BLUE} {id} {Colors.NORMAL}({Steam.GetAppName(id)})"); " is 164.
Long Statement,SteamDatabaseBackend,PICSTokens,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSTokens.cs,HandleToken,The length of the statement  "                IRC.Instance.SendOps($"{Colors.GREEN}[Tokens]{Colors.NORMAL} Bot got a token that mismatches the one in database: {SecretTokens[id]} != {accessToken}"); " is 152.
Long Statement,SteamDatabaseBackend,PurchaseResponse,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PurchaseResponse.cs,HandleMsg,The length of the statement  "            Log.WriteInfo("Steam Keys"' $"PurchaseResponse (EResult: {callback.Result}' PurchaseResultDetail: {callback.PurchaseResultDetail})"); " is 133.
Long Statement,SteamDatabaseBackend,Steam,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Steam.cs,GetPackageName,The length of the statement  "                data = db.Query<Package>("SELECT `SubID`' `Name`' `LastKnownName` FROM `Subs` WHERE `SubID` = @SubID"' new { SubID = subID }).FirstOrDefault(); " is 143.
Long Statement,SteamDatabaseBackend,Steam,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Steam.cs,GetAppName,The length of the statement  "                data = db.Query<App>("SELECT `AppID`' `Name`' `LastKnownName` FROM `Apps` WHERE `AppID` = @AppID"' new { AppID = appID }).SingleOrDefault(); " is 140.
Long Statement,SteamDatabaseBackend,Steam,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Steam.cs,GetAppName,The length of the statement  "                data = db.Query<App>("SELECT `AppID`' `Apps`.`Name`' `LastKnownName`' `Apps`.`AppType`' `AppsTypes`.`DisplayName` as `AppTypeString` FROM `Apps` LEFT JOIN `AppsTypes` ON `Apps`.`AppType` = `AppsTypes`.`AppType` WHERE `AppID` = @AppID"' new { AppID = appID }).SingleOrDefault(); " is 277.
Long Statement,SteamDatabaseBackend,Steam,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\Steam.cs,FormatPackageName,The length of the statement  "            if (!name.Equals(nameLast' StringComparison.CurrentCultureIgnoreCase) && !name.StartsWith("Steam Sub "' StringComparison.Ordinal)) " is 130.
Long Statement,SteamDatabaseBackend,SteamKitLogger,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Log.cs,WriteLine,The length of the statement  "                if (msg.StartsWith("Sent ->"' StringComparison.InvariantCulture) || msg.StartsWith("<- Recv'd"' StringComparison.InvariantCulture)) " is 131.
Long Statement,SteamDatabaseBackend,Settings,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Settings.cs,Load,The length of the statement  "            Current = JsonConvert.DeserializeObject<SettingsJson>(File.ReadAllText(settingsFile)' new JsonSerializerSettings { MissingMemberHandling = MissingMemberHandling.Error }) ?? new SettingsJson(); " is 192.
Complex Conditional,SteamDatabaseBackend,CommandHandler,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\CommandHandler.cs,OnSteamFriendMessage,The conditional expression  "callback.EntryType != EChatEntryType.ChatMsg        // Is chat message              || callback.Sender == Steam.Instance.Client.SteamID    // Is not sent by the bot              || callback.Message[0] != Settings.Current.IRC.CommandPrefix              || callback.Message.Contains('\n')"  is complex.
Complex Conditional,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The conditional expression  "(newAppType > 9 && newAppType != 13 && newAppType != 15 && newAppType != 17) || Triggers.Any(newAppName.Contains)"  is complex.
Complex Conditional,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The conditional expression  "keyName == "common_type" || keyName == "common_gameid" || keyName == "common_name" || keyName == "extended_order""  is complex.
Complex Conditional,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The conditional expression  "string.IsNullOrEmpty(sectionName) || sectionName == "packageid" || sectionName == "changenumber" || sectionName == "name""  is complex.
Magic Number,SteamDatabaseBackend,Application,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Application.cs,Cleanup,The following statement contains a magic number: thread.Join(TimeSpan.FromSeconds(5));
Magic Number,SteamDatabaseBackend,Price,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Database\Price.cs,Format,The following statement contains a magic number: var cents = PriceFinal / 100.0;
Magic Number,SteamDatabaseBackend,CommandHandler,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\CommandHandler.cs,OnIRCMessage,The following statement contains a magic number: trigger.Length < 2
Magic Number,SteamDatabaseBackend,AppCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\App.cs,OnCommand,The following statement contains a magic number: tokenTask.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,AppCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\App.cs,OnCommand,The following statement contains a magic number: infoTask.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,BinariesCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Binaries.cs,PrintBinary,The following statement contains a magic number: command.Reply("{0}{1} {2}({3} MB)"' CDN' kv["file"].AsString()' Colors.DARKGRAY' (kv["size"].AsLong() / 1048576.0).ToString("0.###"));
Magic Number,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,OnCommand,The following statement contains a magic number: var includeDeprecated = args.Length > 2 && args[2].Equals("deprecated"' StringComparison.OrdinalIgnoreCase);
Magic Number,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,OnCommand,The following statement contains a magic number: var includeDeprecated = args.Length > 2 && args[2].Equals("deprecated"' StringComparison.OrdinalIgnoreCase);
Magic Number,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,The following statement contains a magic number: enumValues = enumValues.Take(10);
Magic Number,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,The following statement contains a magic number: count > 10
Magic Number,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,The following statement contains a magic number: formatted = string.Format("{0}' and {1} more..."' formatted' count - 10);
Magic Number,SteamDatabaseBackend,EnumCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Enum.cs,RunForEnum,The following statement contains a magic number: count > 10
Magic Number,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The following statement contains a magic number: switch (s[0])                  {                      case "reload":                          Application.ReloadImportant(command);                          PICSTokens.Reload(command);                          FileDownloader.ReloadFileList();                            return;                        case "add":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  var exists = Application.ImportantApps.TryGetValue(id' out var channels);                                    if (exists && channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is already important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (exists)                                      {                                          Application.ImportantApps[id].Add(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Add(id' new List<string> { channel });                                      }                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantApps` (`AppID`' `Channel`) VALUES (@AppID' @Channel)"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Marked app {0}{1}{2} ({3}) as important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is already important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Add(id' 1);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantSubs` (`SubID`) VALUES (@SubID)"' new { SubID = id });                                      }                                        command.Reply("Marked package {0}{1}{2} ({3}) as important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                        case "remove":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  if (!Application.ImportantApps.TryGetValue(id' out var channels) || !channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is not important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (channels.Count > 1)                                      {                                          Application.ImportantApps[id].Remove(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Remove(id);                                      }                                        using (var db = Database.Get())                                      {                                          db.Execute("DELETE FROM `ImportantApps` WHERE `AppID` = @AppID AND `Channel` = @Channel"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Removed app {0}{1}{2} ({3}) from the important list in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (!Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is not important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Remove(id);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("DELETE FROM `ImportantSubs` WHERE `SubID` = @SubID"' new { SubID = id });                                      }                                        command.Reply("Removed package {0}{1}{2} ({3}) from the important list."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                  }
Magic Number,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The following statement contains a magic number: switch (s[0])                  {                      case "reload":                          Application.ReloadImportant(command);                          PICSTokens.Reload(command);                          FileDownloader.ReloadFileList();                            return;                        case "add":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  var exists = Application.ImportantApps.TryGetValue(id' out var channels);                                    if (exists && channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is already important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (exists)                                      {                                          Application.ImportantApps[id].Add(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Add(id' new List<string> { channel });                                      }                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantApps` (`AppID`' `Channel`) VALUES (@AppID' @Channel)"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Marked app {0}{1}{2} ({3}) as important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is already important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Add(id' 1);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantSubs` (`SubID`) VALUES (@SubID)"' new { SubID = id });                                      }                                        command.Reply("Marked package {0}{1}{2} ({3}) as important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                        case "remove":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  if (!Application.ImportantApps.TryGetValue(id' out var channels) || !channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is not important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (channels.Count > 1)                                      {                                          Application.ImportantApps[id].Remove(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Remove(id);                                      }                                        using (var db = Database.Get())                                      {                                          db.Execute("DELETE FROM `ImportantApps` WHERE `AppID` = @AppID AND `Channel` = @Channel"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Removed app {0}{1}{2} ({3}) from the important list in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (!Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is not important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Remove(id);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("DELETE FROM `ImportantSubs` WHERE `SubID` = @SubID"' new { SubID = id });                                      }                                        command.Reply("Removed package {0}{1}{2} ({3}) from the important list."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                  }
Magic Number,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The following statement contains a magic number: switch (s[0])                  {                      case "reload":                          Application.ReloadImportant(command);                          PICSTokens.Reload(command);                          FileDownloader.ReloadFileList();                            return;                        case "add":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  var exists = Application.ImportantApps.TryGetValue(id' out var channels);                                    if (exists && channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is already important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (exists)                                      {                                          Application.ImportantApps[id].Add(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Add(id' new List<string> { channel });                                      }                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantApps` (`AppID`' `Channel`) VALUES (@AppID' @Channel)"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Marked app {0}{1}{2} ({3}) as important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is already important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Add(id' 1);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantSubs` (`SubID`) VALUES (@SubID)"' new { SubID = id });                                      }                                        command.Reply("Marked package {0}{1}{2} ({3}) as important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                        case "remove":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  if (!Application.ImportantApps.TryGetValue(id' out var channels) || !channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is not important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (channels.Count > 1)                                      {                                          Application.ImportantApps[id].Remove(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Remove(id);                                      }                                        using (var db = Database.Get())                                      {                                          db.Execute("DELETE FROM `ImportantApps` WHERE `AppID` = @AppID AND `Channel` = @Channel"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Removed app {0}{1}{2} ({3}) from the important list in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (!Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is not important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Remove(id);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("DELETE FROM `ImportantSubs` WHERE `SubID` = @SubID"' new { SubID = id });                                      }                                        command.Reply("Removed package {0}{1}{2} ({3}) from the important list."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                  }
Magic Number,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The following statement contains a magic number: switch (s[0])                  {                      case "reload":                          Application.ReloadImportant(command);                          PICSTokens.Reload(command);                          FileDownloader.ReloadFileList();                            return;                        case "add":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  var exists = Application.ImportantApps.TryGetValue(id' out var channels);                                    if (exists && channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is already important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (exists)                                      {                                          Application.ImportantApps[id].Add(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Add(id' new List<string> { channel });                                      }                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantApps` (`AppID`' `Channel`) VALUES (@AppID' @Channel)"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Marked app {0}{1}{2} ({3}) as important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is already important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Add(id' 1);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantSubs` (`SubID`) VALUES (@SubID)"' new { SubID = id });                                      }                                        command.Reply("Marked package {0}{1}{2} ({3}) as important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                        case "remove":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  if (!Application.ImportantApps.TryGetValue(id' out var channels) || !channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is not important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (channels.Count > 1)                                      {                                          Application.ImportantApps[id].Remove(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Remove(id);                                      }                                        using (var db = Database.Get())                                      {                                          db.Execute("DELETE FROM `ImportantApps` WHERE `AppID` = @AppID AND `Channel` = @Channel"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Removed app {0}{1}{2} ({3}) from the important list in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (!Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is not important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Remove(id);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("DELETE FROM `ImportantSubs` WHERE `SubID` = @SubID"' new { SubID = id });                                      }                                        command.Reply("Removed package {0}{1}{2} ({3}) from the important list."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                  }
Magic Number,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,KeyCommand,The following statement contains a magic number: ActivationTimer = new Timer(TimeSpan.FromMinutes(30).TotalMilliseconds);
Magic Number,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,OnTimer,The following statement contains a magic number: var failuresAllowed = 5;
Magic Number,SteamDatabaseBackend,KeyCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Key.cs,OnCommand,The following statement contains a magic number: key.Length < 17
Magic Number,SteamDatabaseBackend,PackageCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Package.cs,OnCommand,The following statement contains a magic number: task.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,PlayersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Players.cs,OnCommand,The following statement contains a magic number: task.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,PlayersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Players.cs,OnCommand,The following statement contains a magic number: appID = 753;
Magic Number,SteamDatabaseBackend,PubFileCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\PubFile.cs,OnMessage,The following statement contains a magic number: task.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,PubFileCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\PubFile.cs,OnMessage,The following statement contains a magic number: title = title.Substring(0' 49) + "…";
Magic Number,SteamDatabaseBackend,PubFileCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\PubFile.cs,OnMessage,The following statement contains a magic number: title.Length > 49
Magic Number,SteamDatabaseBackend,PubFileCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\PubFile.cs,OnCommand,The following statement contains a magic number: task.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,QueueCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Queue.cs,OnCommand,The following statement contains a magic number: s.Length < 2
Magic Number,SteamDatabaseBackend,ServersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Servers.cs,OnCommand,The following statement contains a magic number: task.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,ServersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Servers.cs,OnCommand,The following statement contains a magic number: command.Reply($"{Colors.GREEN}{servers.Sum(x => x.players)}{Colors.NORMAL} players on {Colors.GREEN}{servers.Count}{Colors.NORMAL} servers. First three: {string.Join(" / "' servers.Take(3).Select(x => x.addr))}");
Magic Number,SteamDatabaseBackend,SteamIDCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\SteamID.cs,ResolveVanityURL,The following statement contains a magic number: steamUser.Timeout = TimeSpan.FromSeconds(5);
Magic Number,SteamDatabaseBackend,UGCCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\UGC.cs,OnCommand,The following statement contains a magic number: task.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,UGCCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\UGC.cs,GetByteSizeString,The following statement contains a magic number: var place = Convert.ToInt32(Math.Floor(Math.Log(size' 1024)));
Magic Number,SteamDatabaseBackend,UGCCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\UGC.cs,GetByteSizeString,The following statement contains a magic number: var num = Math.Round(size / Math.Pow(1024' place)' 1);
Magic Number,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,RSS,The following statement contains a magic number: Timer.Interval = TimeSpan.FromSeconds(60).TotalMilliseconds;
Magic Number,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The following statement contains a magic number: appID = 570;
Magic Number,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ProcessFeed,The following statement contains a magic number: DateTime.UtcNow > build.Date.AddMinutes(60)
Magic Number,SteamDatabaseBackend,Watchdog,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Managers\Watchdog.cs,Watchdog,The following statement contains a magic number: Timer = new Timer(OnTimer' null' TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(20));
Magic Number,SteamDatabaseBackend,Watchdog,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Managers\Watchdog.cs,Watchdog,The following statement contains a magic number: Timer = new Timer(OnTimer' null' TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(20));
Magic Number,SteamDatabaseBackend,Watchdog,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Managers\Watchdog.cs,OnTimer,The following statement contains a magic number: DateTime.Now.Subtract(Steam.Instance.DepotProcessor.LastServerRefreshTime).TotalHours >= 6.0
Magic Number,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The following statement contains a magic number: (newAppType > 9 && newAppType != 13 && newAppType != 15 && newAppType != 17) || Triggers.Any(newAppName.Contains)
Magic Number,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The following statement contains a magic number: (newAppType > 9 && newAppType != 13 && newAppType != 15 && newAppType != 17) || Triggers.Any(newAppName.Contains)
Magic Number,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The following statement contains a magic number: (newAppType > 9 && newAppType != 13 && newAppType != 15 && newAppType != 17) || Triggers.Any(newAppName.Contains)
Magic Number,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessData,The following statement contains a magic number: (newAppType > 9 && newAppType != 13 && newAppType != 15 && newAppType != 17) || Triggers.Any(newAppName.Contains)
Magic Number,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessKey,The following statement contains a magic number: keyName.Length > 90
Magic Number,SteamDatabaseBackend,AppProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\AppProcessor.cs,ProcessKey,The following statement contains a magic number: var type = newKv != null ? 86 : 0;
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,DepotProcessor,The following statement contains a magic number: CDNServers = new List<CDNClient.Server>              {                  new DnsEndPoint("valve500.steamcontent.com"' 80)              };
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,DepotProcessor,The following statement contains a magic number: CDNClient.RequestTimeout = TimeSpan.FromSeconds(30);
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,UpdateContentServerList,The following statement contains a magic number: steamDirectory.Timeout = TimeSpan.FromSeconds(30);
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,UpdateContentServerList,The following statement contains a magic number: var newServers = response["serverlist"].Children.Select(x => (CDNClient.Server)new DnsEndPoint(x.Value.ToString()' 80)).ToList();
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,Process,The following statement contains a magic number: appID == 250820                      && depot["manifests"]["beta"].Value != null                      && depots["branches"]["beta"]["buildid"].AsInteger() > depots["branches"]["public"]["buildid"].AsInteger()
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,GetDepotDecryptionKey,The following statement contains a magic number: task.Timeout = TimeSpan.FromMinutes(15);
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,DownloadDepots,The following statement contains a magic number: i <= 5
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,RunUpdateScript,The following statement contains a magic number: process.WaitForExit(120000);
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The following statement contains a magic number: name = $"{{SteamDB file name is too long}}/{nameHash}/...{name.Substring(name.Length - 150)}";
Magic Number,SteamDatabaseBackend,DepotProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\DepotProcessor.cs,ProcessDepotAfterDownload,The following statement contains a magic number: name.Length > 260
Magic Number,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFilesFromDepot,The following statement contains a magic number: fileTasks[i] = TaskManager.Run(async () =>                  {                      hashes.TryGetValue(file.FileName' out var hash);                        var fileState = await DownloadFile(job' file' hash);                        if (fileState == EResult.OK || fileState == EResult.SameAsPreviousValue)                      {                          hashes[file.FileName] = file.FileHash;                            downloadedFiles++;                      }                        if (fileState != EResult.SameAsPreviousValue)                      {                          // Do not write progress info to log file                          Console.WriteLine("{1} [{0'6:#00.00}%] {2} files left to download"' downloadedFiles / (float)files.Count * 100.0f' job.DepotName' files.Count - downloadedFiles);                      }                        if (downloadState == EResult.DataCorruption)                      {                          return;                      }                        if (fileState == EResult.OK || fileState == EResult.DataCorruption)                      {                          downloadState = fileState;                      }                  }).Unwrap();
Magic Number,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadFile,The following statement contains a magic number: chunkTasks[i] = TaskManager.Run(async () =>                  {                      try                      {                          chunkCancellation.Token.ThrowIfCancellationRequested();                            await ChunkDownloadingSemaphore.WaitAsync(chunkCancellation.Token).ConfigureAwait(false);                            var result = await DownloadChunk(job' chunk' downloadPath);                            if (!result)                          {                              Log.WriteWarn($"FileDownloader {job.DepotID}"' $"Failed to download chunk for {file.FileName} ({chunk.Offset})");                                chunkCancellation.Cancel();                          }                          else                          {                              downloadedSize += chunk.UncompressedLength;                                // Do not write progress info to log file                              Console.WriteLine("{2} [{0'6:#00.00}%] {1}"' downloadedSize / (float)file.TotalSize * 100.0f' file.FileName' job.DepotName);                          }                      }                      finally                      {                          ChunkDownloadingSemaphore.Release();                      }                  }).Unwrap();
Magic Number,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,DownloadChunk,The following statement contains a magic number: i <= 5
Magic Number,SteamDatabaseBackend,FileDownloader,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\FileDownloader.cs,ConvertFileMatch,The following statement contains a magic number: return input.Substring(6);
Magic Number,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,SubProcessor,The following statement contains a magic number: Id = subID + 1000000000;
Magic Number,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessData,The following statement contains a magic number: !packageOwned && SubID != 17906 && Settings.Current.CanQueryStore
Magic Number,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessKey,The following statement contains a magic number: keyName.Length > 90
Magic Number,SteamDatabaseBackend,SubProcessor,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Processors\SubProcessor.cs,ProcessKey,The following statement contains a magic number: var type = isJSON ? 86 : 0;
Magic Number,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,FreeLicense,The following statement contains a magic number: FreeLicenseTimer = new Timer              {                  AutoReset = false'                  Interval = TimeSpan.FromMinutes(61).TotalMilliseconds              };
Magic Number,SteamDatabaseBackend,FreeLicense,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\FreeLicense.cs,OnTimer,The following statement contains a magic number: var now = DateUtils.DateTimeToUnixTime(DateTime.UtcNow) - 60;
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PICSChanges,The following statement contains a magic number: var timer = new Timer                  {                      Interval = TimeSpan.FromSeconds(10).TotalMilliseconds                  };
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PerformSync,The following statement contains a magic number: PreviousChangeNumber = 2;
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PerformSync,The following statement contains a magic number: var lastAppID = 50000 + db.ExecuteScalar<int>("SELECT `AppID` FROM `Apps` WHERE `AppID` != 2032727 ORDER BY `AppID` DESC LIMIT 1");
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PerformSync,The following statement contains a magic number: var lastSubID = 10000 + db.ExecuteScalar<int>("SELECT `SubID` FROM `Subs` ORDER BY `SubID` DESC LIMIT 1");
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,IsBusy,The following statement contains a magic number: return TaskManager.TasksCount > 0                     || JobManager.JobsCount > 0                     || PICSProductInfo.CurrentlyProcessingCount > 50                     || Steam.Instance.DepotProcessor.DepotLocksCount > 4;
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,IsBusy,The following statement contains a magic number: return TaskManager.TasksCount > 0                     || JobManager.JobsCount > 0                     || PICSProductInfo.CurrentlyProcessingCount > 50                     || Steam.Instance.DepotProcessor.DepotLocksCount > 4;
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,RequestUpdateForList,The following statement contains a magic number: await Task.Delay(100);
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,RequestUpdateForList,The following statement contains a magic number: appIDs.Split(200)
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,RequestUpdateForList,The following statement contains a magic number: await Task.Delay(100);
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,RequestUpdateForList,The following statement contains a magic number: packages.Split(1000)
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,OnPICSChanges,The following statement contains a magic number: const int appsPerJob = 50;
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandlePackages,The following statement contains a magic number: ignoredPackages.Add(17906' 1);
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,HandlePackages,The following statement contains a magic number: !ignoredPackages.ContainsKey(17906)
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PrintImportants,The following statement contains a magic number: Steam.Instance.UnifiedMessages.SendMessage("ChatRoom.SendChatMessage#1"' new CChatRoom_SendChatMessage_Request                      {                          chat_group_id = 1147'                          chat_id = 10208600'                          message = $"[Changelist {callback.CurrentChangeNumber}] {appType} update: {appName}\n{SteamDB.GetAppURL(app' "history")}?utm_source=Steam&utm_medium=Steam&utm_campaign=SteamDB%20Group%20Chat"                      });
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,PrintImportants,The following statement contains a magic number: Steam.Instance.UnifiedMessages.SendMessage("ChatRoom.SendChatMessage#1"' new CChatRoom_SendChatMessage_Request                      {                          chat_group_id = 1147'                          chat_id = 10208600'                          message = $"[Changelist {callback.CurrentChangeNumber}] {appType} update: {appName}\n{SteamDB.GetAppURL(app' "history")}?utm_source=Steam&utm_medium=Steam&utm_campaign=SteamDB%20Group%20Chat"                      });
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,SendChangelistsToIRC,The following statement contains a magic number: ChangelistBurstTime = DateTime.Now.AddMinutes(5);
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,SendChangelistsToIRC,The following statement contains a magic number: changesCount >= 50
Magic Number,SteamDatabaseBackend,PICSChanges,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\PICSChanges.cs,SendChangelistsToIRC,The following statement contains a magic number: ChangelistBurstCount++ >= CHANGELIST_BURST_MIN || changesCount > 300
Magic Number,SteamDatabaseBackend,WebAuth,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\WebAuth.cs,AuthenticateUser,The following statement contains a magic number: var sessionKey = CryptoHelper.GenerateRandomBlock(32);
Magic Number,SteamDatabaseBackend,WebAuth,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Steam\WebAuth.cs,PerformRequest,The following statement contains a magic number: i < 3
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,Utils,The following statement contains a magic number: HttpClient.Timeout = TimeSpan.FromSeconds(10);
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,ExponentionalBackoff,The following statement contains a magic number: return ((1 << i) * 1000) + NextRandom(1001);
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,ExponentionalBackoff,The following statement contains a magic number: return ((1 << i) * 1000) + NextRandom(1001);
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,AdlerHash,The following statement contains a magic number: a = (a + t) % 65521;
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,AdlerHash,The following statement contains a magic number: b = (b + a) % 65521;
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,AdlerHash,The following statement contains a magic number: return BitConverter.GetBytes(a | (b << 16));
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,StringToByteArray,The following statement contains a magic number: var HexAsBytes = new byte[str.Length / 2];
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,StringToByteArray,The following statement contains a magic number: var byteValue = str.Substring(index * 2' 2);
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,StringToByteArray,The following statement contains a magic number: var byteValue = str.Substring(index * 2' 2);
Magic Number,SteamDatabaseBackend,Utils,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\Util\Utils.cs,IsEqualSHA1,The following statement contains a magic number: const int SHA1_LENGTH = 20;
Missing Default,SteamDatabaseBackend,CommandArguments,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Command.cs,ReplyToCommand,The following switch statement is missing a default case: switch (CommandType)              {                  case ECommandType.IRC:                      var isChannelMessage = IRC.IsRecipientChannel(Recipient);                      var recipient = Recipient;                        if (isChannelMessage)                      {                          if (!notice)                          {                              message = $"{Nickname}: {message}";                          }                          else                          {                              recipient = SenderIdentity.Nickname.ToString();                          }                      }                      else                      {                          recipient = SenderIdentity.Nickname.ToString();                      }                        IRC.Instance.SendReply(recipient' message' notice);                        break;                    case ECommandType.SteamIndividual:                      if (!Steam.Instance.Client.IsConnected)                      {                          break;                      }                        Steam.Instance.Friends.SendChatMessage(                          SenderID'                          EChatEntryType.ChatMsg'                          Colors.StripColors(message)                      );                        break;              }
Missing Default,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The following switch statement is missing a default case: switch (s[0])                  {                      case "reload":                          Application.ReloadImportant(command);                          PICSTokens.Reload(command);                          FileDownloader.ReloadFileList();                            return;                        case "add":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  var exists = Application.ImportantApps.TryGetValue(id' out var channels);                                    if (exists && channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is already important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (exists)                                      {                                          Application.ImportantApps[id].Add(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Add(id' new List<string> { channel });                                      }                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantApps` (`AppID`' `Channel`) VALUES (@AppID' @Channel)"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Marked app {0}{1}{2} ({3}) as important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is already important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Add(id' 1);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantSubs` (`SubID`) VALUES (@SubID)"' new { SubID = id });                                      }                                        command.Reply("Marked package {0}{1}{2} ({3}) as important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                        case "remove":                          if (count < 3)                          {                              break;                          }                            if (!uint.TryParse(s[2]' out id))                          {                              break;                          }                            switch (s[1])                          {                              case "app":                                  if (!Application.ImportantApps.TryGetValue(id' out var channels) || !channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is not important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (channels.Count > 1)                                      {                                          Application.ImportantApps[id].Remove(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Remove(id);                                      }                                        using (var db = Database.Get())                                      {                                          db.Execute("DELETE FROM `ImportantApps` WHERE `AppID` = @AppID AND `Channel` = @Channel"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Removed app {0}{1}{2} ({3}) from the important list in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (!Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is not important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Remove(id);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("DELETE FROM `ImportantSubs` WHERE `SubID` = @SubID"' new { SubID = id });                                      }                                        command.Reply("Removed package {0}{1}{2} ({3}) from the important list."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }                            break;                  }
Missing Default,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The following switch statement is missing a default case: switch (s[1])                          {                              case "app":                                  var exists = Application.ImportantApps.TryGetValue(id' out var channels);                                    if (exists && channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is already important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (exists)                                      {                                          Application.ImportantApps[id].Add(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Add(id' new List<string> { channel });                                      }                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantApps` (`AppID`' `Channel`) VALUES (@AppID' @Channel)"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Marked app {0}{1}{2} ({3}) as important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is already important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Add(id' 1);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("INSERT INTO `ImportantSubs` (`SubID`) VALUES (@SubID)"' new { SubID = id });                                      }                                        command.Reply("Marked package {0}{1}{2} ({3}) as important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }
Missing Default,SteamDatabaseBackend,ImportantCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Important.cs,OnCommand,The following switch statement is missing a default case: switch (s[1])                          {                              case "app":                                  if (!Application.ImportantApps.TryGetValue(id' out var channels) || !channels.Contains(channel))                                  {                                      command.Reply("App {0}{1}{2} ({3}) is not important in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                  else                                  {                                      if (channels.Count > 1)                                      {                                          Application.ImportantApps[id].Remove(channel);                                      }                                      else                                      {                                          Application.ImportantApps.Remove(id);                                      }                                        using (var db = Database.Get())                                      {                                          db.Execute("DELETE FROM `ImportantApps` WHERE `AppID` = @AppID AND `Channel` = @Channel"' new { AppID = id' Channel = channel });                                      }                                        command.Reply("Removed app {0}{1}{2} ({3}) from the important list in {4}{5}{6}."' Colors.BLUE' id' Colors.NORMAL' Steam.GetAppName(id)' Colors.BLUE' channel' Colors.NORMAL);                                  }                                    return;                                case "sub":                                  if (!Application.ImportantSubs.ContainsKey(id))                                  {                                      command.Reply("Package {0}{1}{2} ({3}) is not important."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                  else                                  {                                      Application.ImportantSubs.Remove(id);                                        using (var db = Database.Get())                                      {                                          await db.ExecuteAsync("DELETE FROM `ImportantSubs` WHERE `SubID` = @SubID"' new { SubID = id });                                      }                                        command.Reply("Removed package {0}{1}{2} ({3}) from the important list."' Colors.BLUE' id' Colors.NORMAL' Steam.GetPackageName(id));                                  }                                    return;                          }
Missing Default,SteamDatabaseBackend,PlayersCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\Players.cs,OnCommand,The following switch statement is missing a default case: switch (appType)              {                  case "Tool":                  case "Config":                  case "Application":                      type = "using";                      break;                    case "Legacy Media":                  case "Series":                  case "Video":                      type = "watching";                      break;                    case "Demo":                      type = "demoing";                      break;                    case "Guide":                      type = "reading";                      break;                    case "Hardware":                      type = "bricking";                      break;              }
Missing Default,SteamDatabaseBackend,SteamIDCommand,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\Commands\SteamID.cs,ExpandSteamID,The following switch statement is missing a default case: switch (input.AccountInstance)              {                  case SteamID.AllInstances:                      displayInstance = "All";                      break;                    case SteamID.DesktopInstance:                      displayInstance = "Desktop";                      break;                    case SteamID.ConsoleInstance:                      displayInstance = "Console";                      break;                    case SteamID.WebInstance:                      displayInstance = "Web";                      break;                    case (uint)SteamID.ChatInstanceFlags.Clan:                      displayInstance = "Clan";                      break;                    case (uint)SteamID.ChatInstanceFlags.Lobby:                      displayInstance = "Lobby";                      break;                    case (uint)SteamID.ChatInstanceFlags.MMSLobby:                      displayInstance = "MMS Lobby";                      break;              }
Missing Default,SteamDatabaseBackend,IRC,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\IRC.cs,OnError,The following switch statement is missing a default case: switch (e.Error)              {                  case IrcReplyCode.MissingMOTD:                      return;              }
Missing Default,SteamDatabaseBackend,RSS,D:\research\architectureSmells\repos1\SteamDatabase_SteamDatabaseBackend\IRC\RSS.cs,ReadFeedItems,The following switch statement is missing a default case: switch (name)                          {                              case "title":                                  currentItem.Title = reader.Value.Trim();                                  break;                              case "link":                                  currentItem.Link = reader.Value;                                  break;                              case "description":                              case "content":                              case "content:encoded":                                  currentItem.Content = reader.Value;                                  break;                          }
