Implementation smell,Namespace,Class,File,Method,Description
Long Method,UserSimulation,ErrorGenerator,C:\repos\plasma-umass_DataDebug\UserSimulation\ErrorGenerator.cs,GenerateErrorString,The method has 100 lines of code.
Long Method,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,SimulateUser,The method has 163 lines of code.
Long Parameter List,UserSimulation,ErrorDB,C:\repos\plasma-umass_DataDebug\UserSimulation\Error.cs,AddError,The method has 6 parameters. Parameters: r' c' worksheet' workbook' path' value
Long Parameter List,UserSimulation,LogEntry,C:\repos\plasma-umass_DataDebug\UserSimulation\LogEntry.cs,LogEntry,The method has 12 parameters. Parameters: procedure' filename' address' original_value' erroneous_value' output_error_magnitude' num_input_error_magnitude' str_input_error_magnitude' was_flagged' was_error' significance' threshold
Long Parameter List,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSimulationPaperMain,The method has 12 parameters. Parameters: app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' ignore_parse_errors
Long Parameter List,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunProportionExperiment,The method has 12 parameters. Parameters: app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' ignore_parse_errors
Long Parameter List,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSubletyExperiment,The method has 12 parameters. Parameters: app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' ignore_parse_errors
Long Parameter List,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSimulation,The method has 13 parameters. Parameters: app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' prepdata' errors
Long Parameter List,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,TopOfKErrors,The method has 8 parameters. Parameters: terminal_formula_nodes' inputs' k' correct_outputs' app' wb' classification_file' dag
Long Parameter List,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,Run,The method has 19 parameters. Parameters: nboots' xlfile' significance' ck' app' c' r' analysisType' weighted' all_outputs' dag' wb' terminal_formula_cells' terminal_input_vectors' original_inputs' correct_outputs' max_duration_in_ms' logfile' pb
Long Parameter List,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,RunFromBatch,The method has 19 parameters. Parameters: nboots' xlfile' significance' app' ck' c' r' analysisType' weighted' all_outputs' dag' wb' errors' terminal_input_vectors' terminal_formula_cells' original_inputs' correct_outputs' max_duration_in_ms' logfile
Long Parameter List,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,SimulateUser,The method has 16 parameters. Parameters: nboots' significance' ck' dag' original_inputs' errord' correct_outputs' wb' app' analysis_type' weighted' all_outputs' max_duration_in_ms' sw' logfile' pb
Long Parameter List,UserSimulation,SimulationStep,C:\repos\plasma-umass_DataDebug\UserSimulation\SimulationStep.cs,CheckCell_Step,The method has 14 parameters. Parameters: o' significance' ck' nboots' dag' app' weighted' all_outputs' run_bootstrap' known_good' filtered_high_scores' max_duration_in_ms' sw' pb
Long Parameter List,UserSimulation,SimulationStep,C:\repos\plasma-umass_DataDebug\UserSimulation\SimulationStep.cs,NormalPerRange_Step,The method has 5 parameters. Parameters: dag' wb' known_good' max_duration_in_ms' sw
Long Parameter List,UserSimulation,SimulationStep,C:\repos\plasma-umass_DataDebug\UserSimulation\SimulationStep.cs,NormalAllOutputs_Step,The method has 6 parameters. Parameters: dag' app' wb' known_good' max_duration_in_ms' sw
Long Parameter List,UserSimulation,Utility,C:\repos\plasma-umass_DataDebug\UserSimulation\Utility.cs,GenImportantErrors,The method has 8 parameters. Parameters: output_nodes' inputs' k' correct_outputs' app' wb' c' dag
Long Identifier,UserSimulation,ErrorGenerator,C:\repos\plasma-umass_DataDebug\UserSimulation\ErrorGenerator.cs,,The length of the parameter _transpositions_distribution_dict is 33.
Long Statement,UserSimulation,Classification,C:\repos\plasma-umass_DataDebug\UserSimulation\Classification.cs,Deserialize,The length of the statement  "            //string file_name = "C:\\\\Users\\Dimitar Gochev\\Documents\\GitHub\\papers\\DataDebug\\PLDI-2014\\Experiments\\ClassificationData_2013-11-14.bin"; " is 148.
Long Statement,UserSimulation,Classification,C:\repos\plasma-umass_DataDebug\UserSimulation\Classification.cs,Deserialize,The length of the statement  "            string file_name = "C:\\\\Users\\\\Dimitar Gochev\\\\Documents\\\\GitHub\\\\papers\\\\DataDebug\\\\PLDI-2014\\\\Experiments\\\\ClassificationData_2013-11-14.bin"; " is 162.
Long Statement,UserSimulation,QuantileCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The length of the statement  "                //If the number of entries with the current value is fewer than the significance cutoff' add all values of this score to the high_scores list; the number of entries is equal to the end_ptr since end_ptr is zero-based " is 216.
Long Statement,UserSimulation,QuantileCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The length of the statement  "                //The purpose of the wiggle room is to allow us to deal with small ranges (less than 20 entries)' since a single entry accounts " is 127.
Long Statement,UserSimulation,QuantileCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The length of the statement  "                else    //if this score region extends past the cutoff' we don't add any of its values to the high_scores list' and stop " is 120.
Long Statement,UserSimulation,ErrorGenerator,C:\repos\plasma-umass_DataDebug\UserSimulation\ErrorGenerator.cs,GenerateTranspositionsDistribution,The length of the statement  "            var distribution = transposition_dict.Select(pair => new KeyValuePair<int' double>(pair.Key' (double)pair.Value / sum)); " is 120.
Long Statement,UserSimulation,Prep,C:\repos\plasma-umass_DataDebug\UserSimulation\PrepData.cs,PrepSimulation,The length of the statement  "            var terminal_formula_nodes = dag.terminalFormulaNodes(true);  ///the boolean indicates whether to use all outputs or not " is 120.
Long Statement,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSimulationPaperMain,The length of the statement  "            RunSimulation(app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' prepdata' errors); " is 123.
Long Statement,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunProportionExperiment,The length of the statement  "                RunSimulation(app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' prepdata' errors); " is 123.
Long Statement,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSubletyExperiment,The length of the statement  "                RunSimulation(app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' prepdata' errors); " is 123.
Long Statement,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,Run,The length of the statement  "            _user = SimulateUser(nboots' significance' ck' dag' original_inputs' _errors' correct_outputs' wb' app' analysisType' weighted' all_outputs' max_duration_in_ms' sw' logfile' pb); " is 178.
Long Statement,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,RunFromBatch,The length of the statement  "            return Run(nboots' xlfile' significance' ck' app' c' r' analysisType' weighted' all_outputs' dag' wb' terminal_formula_cells' terminal_input_vectors' original_inputs' correct_outputs' max_duration_in_ms' logfile' null); " is 219.
Long Statement,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,HeaderRowForCSV,The length of the statement  "            return String.Format("{0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}'{8}'{9}'{10}'{11}'{12}'{13}'{14}'{15}'{16}'{17}'{18}'{19}'{20}'{21}{22}"' " is 127.
Long Statement,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,SimulateUser,The length of the statement  "                            num_input_error_magnitude = Utility.NumericalMagnitudeChange(Double.Parse(errord[flagged_cell])' Double.Parse(original_inputs[flagged_cell])); " is 142.
Long Statement,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,SimulateUser,The length of the statement  "                    num_input_error_magnitude = Utility.NumericalMagnitudeChange(Double.Parse(errord[fn])' Double.Parse(original_inputs[fn])); " is 122.
Long Statement,UserSimulation,SimulationStep,C:\repos\plasma-umass_DataDebug\UserSimulation\SimulationStep.cs,CheckCell_Step,The length of the statement  "                TreeScore scores = Analysis.DataDebug(nboots' dag' app' weighted' all_outputs' max_duration_in_ms' sw' significance' pb); " is 121.
Long Statement,UserSimulation,Utility,C:\repos\plasma-umass_DataDebug\UserSimulation\Utility.cs,GenImportantErrors,The length of the statement  "            var maxen = max_error_produced_dictionary.OrderByDescending(pair => pair.Value.Item2).Select(pair => new Tuple<AST.Address' string>(pair.Key' pair.Value.Item1)).ToList(); " is 170.
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: foreach (double d in scores.Values)              {                  distance_sum_sq += Math.Pow(mean - d' 2);              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,NormalCutoff,C:\repos\plasma-umass_DataDebug\UserSimulation\CutoffKind.cs,applyCutoff,The following statement contains a magic number: if (_t == 0.05)              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.6448).ToList();              }              else if (_t == 0.1)   //10% cutoff 1.2815              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.2815).ToList();              }              else if (_t == 0.025) //2.5% cutoff 1.9599              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.9599).ToList();              }              else if (_t == 0.075) //7.5% cutoff 1.4395              {                  filtered_high_scores = scores_list.Where(kvp => kvp.Value > mean + std_deviation * 1.4395).ToList();              }              else              {                  throw new Exception("Uhhh.... What's my cutoff?");              }
Magic Number,UserSimulation,ErrorGenerator,C:\repos\plasma-umass_DataDebug\UserSimulation\ErrorGenerator.cs,MultinomialSample,The following statement contains a magic number: const double EPSILON = 0.01;
Magic Number,UserSimulation,ErrorGenerator,C:\repos\plasma-umass_DataDebug\UserSimulation\ErrorGenerator.cs,GenerateSubtleErrorString,The following statement contains a magic number: double errmag = 100;
Magic Number,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSimulationPaperMain,The following statement contains a magic number: pb.setMax(5);
Magic Number,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSimulationPaperMain,The following statement contains a magic number: CellDict errors = UserSimulation.Utility.GenImportantErrors(prepdata.terminal_formula_nodes'                                                                 prepdata.original_inputs'                                                                 5'                                                                 prepdata.correct_outputs'                                                                 app'                                                                 wbh'                                                                 c'                                                                 prepdata.dag);
Magic Number,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunProportionExperiment,The following statement contains a magic number: pb.setMax(5);
Magic Number,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunProportionExperiment,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  // randomly choose an input address                  AST.Address rand_addr = inputs[r.Next(inputs.Length)];                    // get the value                  String input_value = prepdata.original_inputs[rand_addr];                    // perturb it                  String erroneous_input = eg.GenerateErrorString(input_value' c);                    // create an error dictionary with this one perturbed value                  var errors = new CellDict();                  errors.Add(rand_addr' erroneous_input);                    // run simulations; simulation code does insertion of errors and restore of originals                  RunSimulation(app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' prepdata' errors);              }
Magic Number,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSubletyExperiment,The following statement contains a magic number: pb.setMax(5);
Magic Number,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSubletyExperiment,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  // randomly choose a *numeric* input                  // TODO: use Fischer-Yates and take values until                  // either we have a satisfactory input value or none                  // remain                  var rnd_addrs = inputs.Shuffle().ToList();                  bool num_found = false;                  String input_string;                  double input_value;                  AST.Address rand_addr;                  do                  {                      // randomly choose an address; if there are none left' fail                      if (rnd_addrs.Count == 0) {                          return false;                      }                      rand_addr = rnd_addrs.First();                      rnd_addrs = rnd_addrs.Skip(1).ToList();                        // get the value                      input_string = prepdata.original_inputs[rand_addr];                        // try parsing it                      if (Double.TryParse(input_string' out input_value))                      {                          num_found = true;                      }                  } while (!num_found);                    // perturb it                  String erroneous_input = eg.GenerateSubtleErrorString(input_value' c);                    // create an error dictionary with this one perturbed value                  var errors = new CellDict();                  errors.Add(rand_addr' erroneous_input);                    // run simulations; simulation code does insertion of errors and restore of originals                  RunSimulation(app' wbh' nboots' significance' threshold' c' r' outfile' max_duration_in_ms' logfile' pb' prepdata' errors);              }
Magic Number,UserSimulation,Config,C:\repos\plasma-umass_DataDebug\UserSimulation\Config.cs,RunSimulation,The following statement contains a magic number: s_4.RunFromBatch(nboots'                                   // number of bootstraps                                  wbh.FullName'                          // Excel filename                                  significance'                          // statistical significance of threshold                                  app'                                   // Excel.Application                                  new QuantileCutoff(0.10)'              // max % extreme values to flag                                  c'                                     // classification data                                  r'                                     // random number generator                                  UserSimulation.AnalysisType.CheckCell10'// analysis type                                  true'                                  // weighted analysis                                  true'                                  // use all outputs for analysis                                  prepdata.dag'                                 // AnalysisData                                  wbh'                                   // Excel.Workbook                                  errors'                                // pre-generated errors                                  prepdata.terminal_input_nodes'                  // input range nodes                                  prepdata.terminal_formula_nodes'                // output nodes                                  prepdata.original_inputs'                       // original input values                                  prepdata.correct_outputs'                       // original output values                                  max_duration_in_ms'                    // max duration of simulation                                   logfile);
Magic Number,UserSimulation,Simulation,C:\repos\plasma-umass_DataDebug\UserSimulation\Simulation.cs,Run,The following statement contains a magic number: _tree_construct_time = dag.AnalysisMilliseconds / 1000.0;
Magic Number,UserSimulation,Utility,C:\repos\plasma-umass_DataDebug\UserSimulation\Utility.cs,NumericalMagnitudeChange,The following statement contains a magic number: if (error - correct != 0)              {                  // we add a tiny value to c to avoid divide-by-zero                  return Math.Log10(Math.Abs(error - correct) / Math.Abs(correct + 0.000000000001));              }              else              {                  return 0;              }
Magic Number,UserSimulation,Utility,C:\repos\plasma-umass_DataDebug\UserSimulation\Utility.cs,GenImportantErrors,The following statement contains a magic number: return maxen.Take((int)Math.Ceiling(0.05 * inputs.Count)).ToDictionary(tup => tup.Item1' tup => tup.Item2);
