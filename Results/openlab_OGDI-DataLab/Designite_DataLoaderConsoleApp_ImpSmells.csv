Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseCommandLine,The method has 103 lines of code.
Complex Method,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseCommandLine,Cyclomatic complexity of the method is 19
Complex Method,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,Cyclomatic complexity of the method is 13
Long Statement,Ogdi.Data.DataLoaderConsoleApp,Program,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\Program.cs,LoadDataset,The length of the statement  "                IDataLoader loader = DataLoaderFactory.CreateDataLoader(cmdLineParams.DataType' cmdLineParams.LoadingTarget' cmdLineParams.FileSetName' cmdLineParams.OverwriteMode'cmdLineParams.SourceOrder);" is 191.
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseCommandLine,The following statement contains a magic number: int count = 3;
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: parts = spliter.Split(txt' 3);
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: switch (parts.Length)                 {                     // Found a value (for the last parameter                      // found (space separator))                     case 1:                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parts[0] =                                     remover.Replace(parts[0]' "$1");                                  parameters.Add(parameter.ToLowerInvariant()' parts[0]);                             }                              parameter = null;                         }                          // else Error: no parameter waiting for a value (skipped)                         break;                      // Found just a parameter                     case 2:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                         break;                      // Parameter with enclosed value                     case 3:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                          // Remove possible enclosing characters ("'')                         if (!parameters.ContainsKey(parameter))                         {                             parts[2] = remover.Replace(parts[2]' "$1");                             parameters.Add(parameter.ToLowerInvariant()' parts[2]);                         }                          parameter = null;                         break;                 }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: switch (parts.Length)                 {                     // Found a value (for the last parameter                      // found (space separator))                     case 1:                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parts[0] =                                     remover.Replace(parts[0]' "$1");                                  parameters.Add(parameter.ToLowerInvariant()' parts[0]);                             }                              parameter = null;                         }                          // else Error: no parameter waiting for a value (skipped)                         break;                      // Found just a parameter                     case 2:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                         break;                      // Parameter with enclosed value                     case 3:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                          // Remove possible enclosing characters ("'')                         if (!parameters.ContainsKey(parameter))                         {                             parts[2] = remover.Replace(parts[2]' "$1");                             parameters.Add(parameter.ToLowerInvariant()' parts[2]);                         }                          parameter = null;                         break;                 }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: switch (parts.Length)                 {                     // Found a value (for the last parameter                      // found (space separator))                     case 1:                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parts[0] =                                     remover.Replace(parts[0]' "$1");                                  parameters.Add(parameter.ToLowerInvariant()' parts[0]);                             }                              parameter = null;                         }                          // else Error: no parameter waiting for a value (skipped)                         break;                      // Found just a parameter                     case 2:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                         break;                      // Parameter with enclosed value                     case 3:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                          // Remove possible enclosing characters ("'')                         if (!parameters.ContainsKey(parameter))                         {                             parts[2] = remover.Replace(parts[2]' "$1");                             parameters.Add(parameter.ToLowerInvariant()' parts[2]);                         }                          parameter = null;                         break;                 }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: switch (parts.Length)                 {                     // Found a value (for the last parameter                      // found (space separator))                     case 1:                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parts[0] =                                     remover.Replace(parts[0]' "$1");                                  parameters.Add(parameter.ToLowerInvariant()' parts[0]);                             }                              parameter = null;                         }                          // else Error: no parameter waiting for a value (skipped)                         break;                      // Found just a parameter                     case 2:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                         break;                      // Parameter with enclosed value                     case 3:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                          // Remove possible enclosing characters ("'')                         if (!parameters.ContainsKey(parameter))                         {                             parts[2] = remover.Replace(parts[2]' "$1");                             parameters.Add(parameter.ToLowerInvariant()' parts[2]);                         }                          parameter = null;                         break;                 }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: switch (parts.Length)                 {                     // Found a value (for the last parameter                      // found (space separator))                     case 1:                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parts[0] =                                     remover.Replace(parts[0]' "$1");                                  parameters.Add(parameter.ToLowerInvariant()' parts[0]);                             }                              parameter = null;                         }                          // else Error: no parameter waiting for a value (skipped)                         break;                      // Found just a parameter                     case 2:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                         break;                      // Parameter with enclosed value                     case 3:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                          // Remove possible enclosing characters ("'')                         if (!parameters.ContainsKey(parameter))                         {                             parts[2] = remover.Replace(parts[2]' "$1");                             parameters.Add(parameter.ToLowerInvariant()' parts[2]);                         }                          parameter = null;                         break;                 }
Missing Default,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\research\architectureSmells\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following switch statement is missing a default case: switch (parts.Length)                 {                     // Found a value (for the last parameter                      // found (space separator))                     case 1:                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parts[0] =                                     remover.Replace(parts[0]' "$1");                                  parameters.Add(parameter.ToLowerInvariant()' parts[0]);                             }                              parameter = null;                         }                          // else Error: no parameter waiting for a value (skipped)                         break;                      // Found just a parameter                     case 2:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                         break;                      // Parameter with enclosed value                     case 3:                         // The last parameter is still waiting.                          // With no value' set it to true.                         if (parameter != null)                         {                             if (!parameters.ContainsKey(parameter))                             {                                 parameters.Add(parameter.ToLowerInvariant()' "true");                             }                         }                          parameter = parts[1];                          // Remove possible enclosing characters ("'')                         if (!parameters.ContainsKey(parameter))                         {                             parts[2] = remover.Replace(parts[2]' "$1");                             parameters.Add(parameter.ToLowerInvariant()' parts[2]);                         }                          parameter = null;                         break;                 }
