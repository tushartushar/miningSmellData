Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseCommandLine,Cyclomatic complexity of the method is 8
Long Statement,Ogdi.Data.DataLoaderConsoleApp,Program,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\Program.cs,LoadDataset,The length of the statement  "                IDataLoader loader = DataLoaderFactory.CreateDataLoader(cmdLineParams.DataType' cmdLineParams.LoadingTarget' cmdLineParams.FileSetName' cmdLineParams.OverwriteMode'cmdLineParams.SourceOrder); " is 191.
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseCommandLine,The following statement contains a magic number: int count = 3;
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: foreach (string txt in args)              {                  // Look for new parameters (-'/ or --) and a                  // possible enclosed value (=':)                  parts = spliter.Split(txt' 3);                    switch (parts.Length)                  {                      // Found a value (for the last parameter                       // found (space separator))                      case 1:                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parts[0] =                                      remover.Replace(parts[0]' "$1");                                    parameters.Add(parameter.ToLowerInvariant()' parts[0]);                              }                                parameter = null;                          }                            // else Error: no parameter waiting for a value (skipped)                          break;                        // Found just a parameter                      case 2:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                          break;                        // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                            // Remove possible enclosing characters ("'')                          if (!parameters.ContainsKey(parameter))                          {                              parts[2] = remover.Replace(parts[2]' "$1");                              parameters.Add(parameter.ToLowerInvariant()' parts[2]);                          }                            parameter = null;                          break;                  }              }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: foreach (string txt in args)              {                  // Look for new parameters (-'/ or --) and a                  // possible enclosed value (=':)                  parts = spliter.Split(txt' 3);                    switch (parts.Length)                  {                      // Found a value (for the last parameter                       // found (space separator))                      case 1:                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parts[0] =                                      remover.Replace(parts[0]' "$1");                                    parameters.Add(parameter.ToLowerInvariant()' parts[0]);                              }                                parameter = null;                          }                            // else Error: no parameter waiting for a value (skipped)                          break;                        // Found just a parameter                      case 2:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                          break;                        // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                            // Remove possible enclosing characters ("'')                          if (!parameters.ContainsKey(parameter))                          {                              parts[2] = remover.Replace(parts[2]' "$1");                              parameters.Add(parameter.ToLowerInvariant()' parts[2]);                          }                            parameter = null;                          break;                  }              }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: foreach (string txt in args)              {                  // Look for new parameters (-'/ or --) and a                  // possible enclosed value (=':)                  parts = spliter.Split(txt' 3);                    switch (parts.Length)                  {                      // Found a value (for the last parameter                       // found (space separator))                      case 1:                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parts[0] =                                      remover.Replace(parts[0]' "$1");                                    parameters.Add(parameter.ToLowerInvariant()' parts[0]);                              }                                parameter = null;                          }                            // else Error: no parameter waiting for a value (skipped)                          break;                        // Found just a parameter                      case 2:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                          break;                        // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                            // Remove possible enclosing characters ("'')                          if (!parameters.ContainsKey(parameter))                          {                              parts[2] = remover.Replace(parts[2]' "$1");                              parameters.Add(parameter.ToLowerInvariant()' parts[2]);                          }                            parameter = null;                          break;                  }              }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: foreach (string txt in args)              {                  // Look for new parameters (-'/ or --) and a                  // possible enclosed value (=':)                  parts = spliter.Split(txt' 3);                    switch (parts.Length)                  {                      // Found a value (for the last parameter                       // found (space separator))                      case 1:                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parts[0] =                                      remover.Replace(parts[0]' "$1");                                    parameters.Add(parameter.ToLowerInvariant()' parts[0]);                              }                                parameter = null;                          }                            // else Error: no parameter waiting for a value (skipped)                          break;                        // Found just a parameter                      case 2:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                          break;                        // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                            // Remove possible enclosing characters ("'')                          if (!parameters.ContainsKey(parameter))                          {                              parts[2] = remover.Replace(parts[2]' "$1");                              parameters.Add(parameter.ToLowerInvariant()' parts[2]);                          }                            parameter = null;                          break;                  }              }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: foreach (string txt in args)              {                  // Look for new parameters (-'/ or --) and a                  // possible enclosed value (=':)                  parts = spliter.Split(txt' 3);                    switch (parts.Length)                  {                      // Found a value (for the last parameter                       // found (space separator))                      case 1:                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parts[0] =                                      remover.Replace(parts[0]' "$1");                                    parameters.Add(parameter.ToLowerInvariant()' parts[0]);                              }                                parameter = null;                          }                            // else Error: no parameter waiting for a value (skipped)                          break;                        // Found just a parameter                      case 2:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                          break;                        // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                            // Remove possible enclosing characters ("'')                          if (!parameters.ContainsKey(parameter))                          {                              parts[2] = remover.Replace(parts[2]' "$1");                              parameters.Add(parameter.ToLowerInvariant()' parts[2]);                          }                            parameter = null;                          break;                  }              }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following statement contains a magic number: foreach (string txt in args)              {                  // Look for new parameters (-'/ or --) and a                  // possible enclosed value (=':)                  parts = spliter.Split(txt' 3);                    switch (parts.Length)                  {                      // Found a value (for the last parameter                       // found (space separator))                      case 1:                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parts[0] =                                      remover.Replace(parts[0]' "$1");                                    parameters.Add(parameter.ToLowerInvariant()' parts[0]);                              }                                parameter = null;                          }                            // else Error: no parameter waiting for a value (skipped)                          break;                        // Found just a parameter                      case 2:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                          break;                        // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                            // Remove possible enclosing characters ("'')                          if (!parameters.ContainsKey(parameter))                          {                              parts[2] = remover.Replace(parts[2]' "$1");                              parameters.Add(parameter.ToLowerInvariant()' parts[2]);                          }                            parameter = null;                          break;                  }              }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,Program,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\Program.cs,LoadDataset,The following statement contains a magic number: if (cmdLineParams != null)              {                  Console.WriteLine("Loading {0}..."' cmdLineParams.FileSetName);                  if (cmdLineParams.RefreshLastUpdateDate)                  {                      RefreshLastUpdatedDate(cmdLineParams.FileSetName + DataLoaderConstants.FileExtConfig);                  }                    IDataLoader loader = DataLoaderFactory.CreateDataLoader(cmdLineParams.DataType' cmdLineParams.LoadingTarget' cmdLineParams.FileSetName' cmdLineParams.OverwriteMode'cmdLineParams.SourceOrder);                    if (cmdLineParams.LoadingTarget == DataLoadingTarget.Console)                  {                      loader.Load(null'null);                  }                  else                  {                      loader.Load((tc' cc) =>                       {                          if ((tc - cc) % 100 == 0 || tc <= 500)                              Console.WriteLine("\t{0} entities remain to be processed...\r"' tc - cc);                       }' ExceptionNotifier);                      Console.WriteLine();                  }              }
Magic Number,Ogdi.Data.DataLoaderConsoleApp,Program,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\Program.cs,LoadDataset,The following statement contains a magic number: if (cmdLineParams != null)              {                  Console.WriteLine("Loading {0}..."' cmdLineParams.FileSetName);                  if (cmdLineParams.RefreshLastUpdateDate)                  {                      RefreshLastUpdatedDate(cmdLineParams.FileSetName + DataLoaderConstants.FileExtConfig);                  }                    IDataLoader loader = DataLoaderFactory.CreateDataLoader(cmdLineParams.DataType' cmdLineParams.LoadingTarget' cmdLineParams.FileSetName' cmdLineParams.OverwriteMode'cmdLineParams.SourceOrder);                    if (cmdLineParams.LoadingTarget == DataLoadingTarget.Console)                  {                      loader.Load(null'null);                  }                  else                  {                      loader.Load((tc' cc) =>                       {                          if ((tc - cc) % 100 == 0 || tc <= 500)                              Console.WriteLine("\t{0} entities remain to be processed...\r"' tc - cc);                       }' ExceptionNotifier);                      Console.WriteLine();                  }              }
Missing Default,Ogdi.Data.DataLoaderConsoleApp,CommandLineParser,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoaderConsoleApp\CommandLineParser.cs,ParseArguments,The following switch statement is missing a default case: switch (parts.Length)                  {                      // Found a value (for the last parameter                       // found (space separator))                      case 1:                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parts[0] =                                      remover.Replace(parts[0]' "$1");                                    parameters.Add(parameter.ToLowerInvariant()' parts[0]);                              }                                parameter = null;                          }                            // else Error: no parameter waiting for a value (skipped)                          break;                        // Found just a parameter                      case 2:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                          break;                        // Parameter with enclosed value                      case 3:                          // The last parameter is still waiting.                           // With no value' set it to true.                          if (parameter != null)                          {                              if (!parameters.ContainsKey(parameter))                              {                                  parameters.Add(parameter.ToLowerInvariant()' "true");                              }                          }                            parameter = parts[1];                            // Remove possible enclosing characters ("'')                          if (!parameters.ContainsKey(parameter))                          {                              parts[2] = remover.Replace(parts[2]' "$1");                              parameters.Add(parameter.ToLowerInvariant()' parts[2]);                          }                            parameter = null;                          break;                  }
