Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ogdi.Data.DataLoader.Csv,CsvEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvEntityProducer.cs,GetEntitiesEnumerator,The method has 153 lines of code.
Long Method,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The method has 200 lines of code.
Complex Method,Ogdi.Data.DataLoader,TableMetadataEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableMetadataEntity.cs,TableMetadataEntity,Cyclomatic complexity of the method is 23
Complex Method,Ogdi.Data.DataLoader,TableDataLoader,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\TableDataLoader.cs,OnLoadStart,Cyclomatic complexity of the method is 10
Complex Method,Ogdi.Data.DataLoader,TableEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntity.cs,ConvertClrTypeToEdmType,Cyclomatic complexity of the method is 8
Complex Method,Ogdi.Data.DataLoader,TableEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntity.cs,FindDifferences,Cyclomatic complexity of the method is 9
Complex Method,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,StoreEntity,Cyclomatic complexity of the method is 11
Complex Method,Ogdi.Data.DataLoader,TableProcessorParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableProcessorParams.cs,TableProcessorParams,Cyclomatic complexity of the method is 13
Complex Method,Ogdi.Data.DataLoader.Csv,CsvEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvEntityProducer.cs,GetEntitiesEnumerator,Cyclomatic complexity of the method is 24
Complex Method,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,Cyclomatic complexity of the method is 23
Long Parameter List,Ogdi.Data.DataLoader,EntityAlreadyExistsException,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Exceptions\EntityAlreadyExistsException.cs,EntityAlreadyExistsException,The method has 5 parameters. Parameters: entitySetName' rowKeyColumn' rowKeyValue' parKeyColumn' parKeyValue
Long Parameter List,Ogdi.Data.DataLoader,EntityAlreadyExistsException,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Exceptions\EntityAlreadyExistsException.cs,ConstructMessage,The method has 5 parameters. Parameters: entitySetName' rowKeyColumn' rowKeyValue' parKeyColumn' parKeyValue
Long Parameter List,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateDataLoader,The method has 5 parameters. Parameters: type' target' fileSetName' overwriteMode' sourceOrder
Long Parameter List,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateLoader,The method has 5 parameters. Parameters: fileSetName' target' stream' sourceOrder' overwriteMode
Long Parameter List,Ogdi.Data.DataLoader,TableDataLoader,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\TableDataLoader.cs,CheckMetadataChanges,The method has 6 parameters. Parameters: metadataSet' entitySet' entityKind' entity' Params' metadataKind
Long Parameter List,Ogdi.Data.DataLoader,TableDataLoader,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\TableDataLoader.cs,CheckAndUpdateMetadataLastUpdateDate,The method has 5 parameters. Parameters: metadataSet' entitySet' entityKind' lastUpdateDate' Params
Long Parameter List,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,LoadEntity,The method has 8 parameters. Parameters: context' entitySetName' rowKeyColumn' rowKeyValue' origianlRowKeyValue' parKeyColumn' parKeyValue' origianlParKeyValue
Long Parameter List,Ogdi.Data.DataLoader.Csv,CsvEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvEntityProducer.cs,CsvEntityProducer,The method has 5 parameters. Parameters: fileSetName' entitySet' entityKind' parameters' sourceOrder
Long Parameter List,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,ReadMapInfo,The method has 5 parameters. Parameters: csv' encode' path' lon' lat
Long Parameter List,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,WriteMapInfo,The method has 5 parameters. Parameters: csv' encode' path' lon' lat
Long Parameter List,Ogdi.Data.DataLoader.DbaseKml,DbaseKmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\DbaseKml\DbaseKmlEntityProducer.cs,DbaseKmlEntityProducer,The method has 5 parameters. Parameters: fileSetName' entitySet' entityKind' parameters' sourceOrder
Long Parameter List,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,KmlEntityProducer,The method has 5 parameters. Parameters: fileSetName' entitySet' entityKind' parameters' sourceOrder
Long Identifier,Ogdi.Data.DataLoader,DataLoaderConstants,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\DataLoader\DataLoaderConstants.cs,,The length of the parameter TableColumnsMetadataColumnSemantic is 34.
Long Identifier,Ogdi.Data.DataLoader,DataLoaderConstants,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\DataLoader\DataLoaderConstants.cs,,The length of the parameter TableColumnsMetadataColumnNamespace is 35.
Long Identifier,Ogdi.Data.DataLoader,DataLoaderConstants,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\DataLoader\DataLoaderConstants.cs,,The length of the parameter TableColumnsMetadataColumnDescription is 37.
Long Statement,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateDataLoader,The length of the statement  "                        return CreateLoader<DbaseKmlToTablesDataLoaderParams' DbaseKmlEntityProducer>(fileSetName' target' stream' sourceOrder' overwriteMode); " is 135.
Long Statement,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateDataLoader,The length of the statement  "                        return CreateLoader<CsvToTablesDataLoaderParams' CsvEntityProducer>(fileSetName' target' stream' sourceOrder' overwriteMode); " is 125.
Long Statement,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateDataLoader,The length of the statement  "                        return CreateLoader<KmlToTablesDataLoaderParams' KmlEntityProducer>(fileSetName' target' stream' sourceOrder' overwriteMode); " is 125.
Long Statement,Ogdi.Data.DataLoader,TableDataLoader,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\TableDataLoader.cs,OnLoadStart,The length of the statement  "            // create table metadata table if it doesn't exist' otherwise delete entity related to the entity set being loaded or check that metadata not changed " is 149.
Long Statement,Ogdi.Data.DataLoader,TableDataLoader,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\TableDataLoader.cs,OnLoadStart,The length of the statement  "                //CheckMetadataChanges(DataLoaderConstants.EntitySetTableMetadata' Params.TableMetadataEntity.EntitySet' Params.TableMetadataEntity.EntityKind' Params.TableMetadataEntity' Params' MetadataKind.Table); " is 200.
Long Statement,Ogdi.Data.DataLoader,TableDataLoader,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\TableDataLoader.cs,GetRdfMetadataColumnNamespace,The length of the statement  "            List<TableColumnsMetadataEntity> resultsQuery = tableServiceContext.Execute<TableColumnsMetadataEntity>(new Uri(query' UriKind.Relative)).ToList(); " is 147.
Long Statement,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,LoadEntity,The length of the statement  "            string query = string.Format(S_ENTITY_QUERY_TEMPLATE' entitySetName' rowKeyColumn.ToLower()' rk' parKeyColumn.ToLower()' pk); " is 125.
Long Statement,Ogdi.Data.DataLoader.Csv,CsvEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                rdfXmlDescriptionElement.Add(new XElement(customNS + cleanHeader' v.ToString()' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 134.
Long Statement,Ogdi.Data.DataLoader.Csv,CsvEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                var coords = new XElement(XNamespace.Get(DataLoaderConstants.NsKmlNew) + DataLoaderConstants.ElemNameCoordinates' lon.ToString(CultureInfo.InvariantCulture) + "'" + lat.ToString(CultureInfo.InvariantCulture)); " is 209.
Long Statement,Ogdi.Data.DataLoader.Csv,CsvEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                placemark.Add(new XElement(XNamespace.Get(DataLoaderConstants.NsKmlNew) + DataLoaderConstants.ElemNameDescription' entity.Id)); " is 127.
Long Statement,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,FromFile,The length of the statement  "                configFileName = Path.Combine(uploadParam.Directory' string.Concat(uploadParam.Name' DataLoaderConstants.FileExtConfig)); " is 121.
Long Statement,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,FromFile,The length of the statement  "                        TableMetadataEntity = new TableMetadataEntity { IsEmpty = true' ReleasedDate = DateTime.Now' ExpiredDate = DateTime.Now.AddDays(1)' LastUpdateDate = DateTime.Now }' " is 164.
Long Statement,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,CreateEmptyData,The length of the statement  "                    dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(header.Trim()' string.Empty' defaultDescriptionToAdd' "ogdi=\"ogdiUrl\""); " is 146.
Long Statement,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,Validate,The length of the statement  "                missedFields.AddRange(headers.Where(header => ProducerParams.PropertyToTypeMap.GetProperties().Where(r => r.Key == header).Count() == 0)); " is 138.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                    rdfXmlDescriptionElement.Add(new XElement(customNS + "latitude"' ExtractLatitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 151.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                    rdfXmlDescriptionElement.Add(new XElement(customNS + "longitude"' ExtractLongitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 153.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                        rdfXmlDescriptionElement.Add(new XElement(customNS + "altitude"' ExtractAltitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 151.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                    rdfXmlDescriptionElement.Add(new XElement(customNS + DataLoaderConstants.PropNameLatitude' ExtractLatitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 177.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                    rdfXmlDescriptionElement.Add(new XElement(customNS + DataLoaderConstants.PropNameLongitude' ExtractLongitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 179.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                        rdfXmlDescriptionElement.Add(new XElement(customNS + "altitude"' ExtractAltitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 151.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                            var property = schemaData.FirstOrDefault(e => e.HasAttributes && e.Attributes("name").First().Value == item.Key.Remove(0' 3)); " is 126.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                        if (item.Key == DataLoaderConstants.ElemNameName || item.Key == DataLoaderConstants.ElemNameDescription || item.Key.StartsWith("sd0")) " is 134.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The length of the statement  "                                rdfXmlDescriptionElement.Add(new XElement(customNS + cleanHeader' rdfValue.ToString()' new XAttribute(rdfNamespace + "datatype"' datatype))); " is 141.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,FromFile,The length of the statement  "                configFileName = Path.Combine(uploadParam.Directory' string.Concat(uploadParam.Name' DataLoaderConstants.FileExtConfig)); " is 121.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,CreateEmptyData,The length of the statement  "                        dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.ElemNameName.Trim()' string.Empty' FormattedDescription(defaultDescription' DataLoaderConstants.ElemNameName)' rdfNamespace); " is 217.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,CreateEmptyData,The length of the statement  "                        dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.ElemNameDescription.Trim()' string.Empty' FormattedDescription(defaultDescription' DataLoaderConstants.ElemNameDescription)' rdfNamespace); " is 231.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,CreateEmptyData,The length of the statement  "                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.PropNameLongitude.Trim()' string.Empty' FormattedDescription(defaultDescription' DataLoaderConstants.PropNameLongitude)' rdfNamespace); " is 227.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,CreateEmptyData,The length of the statement  "                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.PropNameLatitude.Trim()' string.Empty' FormattedDescription(defaultDescription' DataLoaderConstants.PropNameLatitude)' rdfNamespace); " is 225.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,CreateEmptyData,The length of the statement  "                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.PropNameKmlCoords.Trim()' string.Empty' FormattedDescription(defaultDescription' DataLoaderConstants.PropNameKmlCoords)' rdfNamespace); " is 227.
Long Statement,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,CreateEmptyData,The length of the statement  "                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(val.Trim()' string.Empty' FormattedDescription(defaultDescription' val)' rdfNamespace); " is 159.
Complex Conditional,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateTablesLoader,The conditional expression  "sourceOrder && p.ProcessorParams != null && !String.IsNullOrEmpty(p.ProcessorParams.PartitionKeyPropertyName)                      && p.ProcessorParams.PartitionKeyPropertyName.ToLower() != DataLoaderConstants.ValueUniqueAutoGen"  is complex.
Complex Conditional,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateTablesLoader,The conditional expression  "overwriteMode == TableOverwriteMode.Update && p.ProcessorParams != null                  && (String.IsNullOrEmpty(p.ProcessorParams.PartitionKeyPropertyName)                      || p.ProcessorParams.PartitionKeyPropertyName.ToLower() == DataLoaderConstants.ValueUniqueAutoGen                      || String.IsNullOrEmpty(p.ProcessorParams.PartitionKeyPropertyName)                      || p.ProcessorParams.PartitionKeyPropertyName.ToLower() == DataLoaderConstants.ValueUniqueAutoGen)"  is complex.
Complex Conditional,Ogdi.Data.DataLoader,Entity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Entity\Entity.cs,ValidateProperty,The conditional expression  "string.IsNullOrEmpty(propertyName)                  || string.Compare(propertyName' DataLoaderConstants.PropNameEntityId.ToLower()' true) == 0                  || string.Compare(propertyName' DataLoaderConstants.PropNameKmlSnippet.ToLower()' true) == 0                  || string.Compare(propertyName' DataLoaderConstants.PropNameEntitySet.ToLower()' true) == 0                  || string.Compare(propertyName' DataLoaderConstants.PropNameEntityKind.ToLower()' true) == 0                  || string.Compare(propertyName' DataLoaderConstants.PropNameLastUpdateDate.ToLower()' true) == 0                  || string.Compare(propertyName' DataLoaderConstants.ValueUniqueAutoGen.ToLower()' true) == 0"  is complex.
Magic Number,Ogdi.Data.DataLoader,EntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Entity\EntityProducer.cs,GetSecondsFrom2000Prefix,The following statement contains a magic number: var seconds = (int) ((DateTime.Now.Ticks - DataLoaderConstants.InitialDateTime2000)/10000000);
Magic Number,Ogdi.Data.DataLoader,EntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Entity\EntityProducer.cs,GetPropertyValue,The following statement contains a magic number: switch (type)              {                  case ("string"):                      return value;                  case ("int32"):                      return Int32.Parse(value);                  case ("int64"):                      return Int64.Parse(value);                  case ("double"):                      var formatInfo = CultureInfo.InvariantCulture.NumberFormat;                      return double.Parse(value.Replace('''' '.')' formatInfo);                  case ("bool"):                      return bool.Parse(value);                  case ("bool-0or1"):                      return int.Parse(value) == 1 ? true : false;                  case ("datetime"):                      return DateTime.Parse(value);                  case ("datetime-yyyymmdd"):                      {                          var s = value.Trim();                          var y = int.Parse(s.Substring(0' 4));                          var m = int.Parse(s.Substring(4' 2));                          var d = int.Parse(s.Substring(6' 2));                          return new DateTime(y' m' d);                      }                  default:                      throw new ArgumentException(DataLoaderConstants.MsgUnsupportedType' type);              }
Magic Number,Ogdi.Data.DataLoader,EntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Entity\EntityProducer.cs,GetPropertyValue,The following statement contains a magic number: switch (type)              {                  case ("string"):                      return value;                  case ("int32"):                      return Int32.Parse(value);                  case ("int64"):                      return Int64.Parse(value);                  case ("double"):                      var formatInfo = CultureInfo.InvariantCulture.NumberFormat;                      return double.Parse(value.Replace('''' '.')' formatInfo);                  case ("bool"):                      return bool.Parse(value);                  case ("bool-0or1"):                      return int.Parse(value) == 1 ? true : false;                  case ("datetime"):                      return DateTime.Parse(value);                  case ("datetime-yyyymmdd"):                      {                          var s = value.Trim();                          var y = int.Parse(s.Substring(0' 4));                          var m = int.Parse(s.Substring(4' 2));                          var d = int.Parse(s.Substring(6' 2));                          return new DateTime(y' m' d);                      }                  default:                      throw new ArgumentException(DataLoaderConstants.MsgUnsupportedType' type);              }
Magic Number,Ogdi.Data.DataLoader,EntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Entity\EntityProducer.cs,GetPropertyValue,The following statement contains a magic number: switch (type)              {                  case ("string"):                      return value;                  case ("int32"):                      return Int32.Parse(value);                  case ("int64"):                      return Int64.Parse(value);                  case ("double"):                      var formatInfo = CultureInfo.InvariantCulture.NumberFormat;                      return double.Parse(value.Replace('''' '.')' formatInfo);                  case ("bool"):                      return bool.Parse(value);                  case ("bool-0or1"):                      return int.Parse(value) == 1 ? true : false;                  case ("datetime"):                      return DateTime.Parse(value);                  case ("datetime-yyyymmdd"):                      {                          var s = value.Trim();                          var y = int.Parse(s.Substring(0' 4));                          var m = int.Parse(s.Substring(4' 2));                          var d = int.Parse(s.Substring(6' 2));                          return new DateTime(y' m' d);                      }                  default:                      throw new ArgumentException(DataLoaderConstants.MsgUnsupportedType' type);              }
Magic Number,Ogdi.Data.DataLoader,EntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Entity\EntityProducer.cs,GetPropertyValue,The following statement contains a magic number: switch (type)              {                  case ("string"):                      return value;                  case ("int32"):                      return Int32.Parse(value);                  case ("int64"):                      return Int64.Parse(value);                  case ("double"):                      var formatInfo = CultureInfo.InvariantCulture.NumberFormat;                      return double.Parse(value.Replace('''' '.')' formatInfo);                  case ("bool"):                      return bool.Parse(value);                  case ("bool-0or1"):                      return int.Parse(value) == 1 ? true : false;                  case ("datetime"):                      return DateTime.Parse(value);                  case ("datetime-yyyymmdd"):                      {                          var s = value.Trim();                          var y = int.Parse(s.Substring(0' 4));                          var m = int.Parse(s.Substring(4' 2));                          var d = int.Parse(s.Substring(6' 2));                          return new DateTime(y' m' d);                      }                  default:                      throw new ArgumentException(DataLoaderConstants.MsgUnsupportedType' type);              }
Magic Number,Ogdi.Data.DataLoader,EntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Entity\EntityProducer.cs,GetPropertyValue,The following statement contains a magic number: switch (type)              {                  case ("string"):                      return value;                  case ("int32"):                      return Int32.Parse(value);                  case ("int64"):                      return Int64.Parse(value);                  case ("double"):                      var formatInfo = CultureInfo.InvariantCulture.NumberFormat;                      return double.Parse(value.Replace('''' '.')' formatInfo);                  case ("bool"):                      return bool.Parse(value);                  case ("bool-0or1"):                      return int.Parse(value) == 1 ? true : false;                  case ("datetime"):                      return DateTime.Parse(value);                  case ("datetime-yyyymmdd"):                      {                          var s = value.Trim();                          var y = int.Parse(s.Substring(0' 4));                          var m = int.Parse(s.Substring(4' 2));                          var d = int.Parse(s.Substring(6' 2));                          return new DateTime(y' m' d);                      }                  default:                      throw new ArgumentException(DataLoaderConstants.MsgUnsupportedType' type);              }
Magic Number,Ogdi.Data.DataLoader,TableMetadataEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableMetadataEntity.cs,TableMetadataEntity,The following statement contains a magic number: foreach (var prop in data.GetProperties())              {                  if (prop.Name.ToLower() == "name")                      Name = prop.Value.ToString();                  if (prop.Name.ToLower() == "category")                      Category = prop.Value.ToString();                  if (prop.Name.ToLower() == "description")                      Description = prop.Value.ToString();                  if (prop.Name.ToLower() == "source")                      Source = prop.Value.ToString();                  if (prop.Name.ToLower() == "metadataurl")                      MetadataUrl = prop.Value.ToString();                  if (prop.Name.ToLower() == "entityset")                      EntitySet = prop.Value.ToString();                  if (prop.Name.ToLower() == "updatefrequency")                      UpdateFrequency = prop.Value.ToString();                  if (prop.Name.ToLower() == "entitykind")                      EntityKind = prop.Value.ToString();                  if (prop.Name.ToLower() == "keywords")                      Keywords = prop.Value.ToString();                  if (prop.Name.ToLower() == "links")                      Links = prop.Value.ToString();                  if (prop.Name.ToLower() == "periodcovered")                      PeriodCovered = prop.Value.ToString();                  if (prop.Name.ToLower() == "geographiccoverage")                      GeographicCoverage = prop.Value.ToString();                  if (prop.Name.ToLower() == "collectionmode")                      CollectionMode = prop.Value.ToString();                    if (prop.Name.ToLower() == "lastupdatedate")                  {                      LastUpdateDate = DateTime.Parse(prop.Value.ToString());                  }                  if (prop.Name.ToLower() == "releaseddate")                  {                      ReleasedDate = DateTime.Parse(prop.Value.ToString());                  }                  if (prop.Name.ToLower() == "expireddate")                  {                      ExpiredDate = DateTime.Parse(prop.Value.ToString());                  }                    if (prop.Name.ToLower() == "technicalinfo")                      TechnicalInfo = prop.Value.ToString();                  if (prop.Name.ToLower() == "collectioninstruments")                      CollectionInstruments = prop.Value.ToString();                  if (prop.Name.ToLower() == "datadictionary_variables")                      DataDictionary_Variables = prop.Value.ToString();                  if (prop.Name.ToLower() == "additionalinfo")                      AdditionalInfo = prop.Value.ToString();    				if (prop.Name.ToLower() == "isempty")  					IsEmpty = prop.Value.ToString().Length == 4;              }
Magic Number,Ogdi.Data.DataLoader,TableEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntity.cs,IsValidPropertyValue,The following statement contains a magic number: if (p.GetType() == typeof(DateTime))              {                  var d = (DateTime)p;                  if (d < new DateTime(1600' 1' 1) || d > new DateTime(9999' 12' 31))                  {                      isValid = false;                  }              }
Magic Number,Ogdi.Data.DataLoader,TableEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntity.cs,IsValidPropertyValue,The following statement contains a magic number: if (p.GetType() == typeof(DateTime))              {                  var d = (DateTime)p;                  if (d < new DateTime(1600' 1' 1) || d > new DateTime(9999' 12' 31))                  {                      isValid = false;                  }              }
Magic Number,Ogdi.Data.DataLoader,TableEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntity.cs,IsValidPropertyValue,The following statement contains a magic number: if (p.GetType() == typeof(DateTime))              {                  var d = (DateTime)p;                  if (d < new DateTime(1600' 1' 1) || d > new DateTime(9999' 12' 31))                  {                      isValid = false;                  }              }
Magic Number,Ogdi.Data.DataLoader,TableEntity,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntity.cs,IsValidPropertyValue,The following statement contains a magic number: if (p.GetType() == typeof(DateTime))              {                  var d = (DateTime)p;                  if (d < new DateTime(1600' 1' 1) || d > new DateTime(9999' 12' 31))                  {                      isValid = false;                  }              }
Magic Number,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,StoreEntity,The following statement contains a magic number: var context = new TableContext(account.TableEndpoint.ToString()' account.Credentials' _parameters)                                {                                    RetryPolicy = RetryPolicies.RetryExponential(5' new TimeSpan(0' 0' 1))                                };
Magic Number,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,StoreEntity,The following statement contains a magic number: if (kmlSnippet != null && kmlSnippet.Length > 32 * 1024)              {                  string blobName = Guid.NewGuid().ToString();                  string containerName = entitySetName.ToLower();                  StoreKmlSnippetAsBlob(containerName' blobName' kmlSnippet);                  entity[DataLoaderConstants.PropNameKmlSnippet] = string.Format(DataLoaderConstants.KmlSnippetReference'                                                                                 containerName' blobName);              }
Magic Number,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,StoreEntity,The following statement contains a magic number: if (kmlSnippet != null && kmlSnippet.Length > 32 * 1024)              {                  string blobName = Guid.NewGuid().ToString();                  string containerName = entitySetName.ToLower();                  StoreKmlSnippetAsBlob(containerName' blobName' kmlSnippet);                  entity[DataLoaderConstants.PropNameKmlSnippet] = string.Format(DataLoaderConstants.KmlSnippetReference'                                                                                 containerName' blobName);              }
Magic Number,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,StoreEntity,The following statement contains a magic number: if (kmlCoords != null && kmlCoords.Length > 32 * 1024)              {                  string blobName = Guid.NewGuid().ToString();                  string containerName = entitySetName.ToLower();                  StoreKmlSnippetAsBlob(containerName' blobName' kmlCoords);                  entity[DataLoaderConstants.PropNameKmlCoords] = string.Format(DataLoaderConstants.KmlSnippetReference'                                                                                containerName' blobName);              }
Magic Number,Ogdi.Data.DataLoader,TableEntityProcessor,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableEntityProcessor.cs,StoreEntity,The following statement contains a magic number: if (kmlCoords != null && kmlCoords.Length > 32 * 1024)              {                  string blobName = Guid.NewGuid().ToString();                  string containerName = entitySetName.ToLower();                  StoreKmlSnippetAsBlob(containerName' blobName' kmlCoords);                  entity[DataLoaderConstants.PropNameKmlCoords] = string.Format(DataLoaderConstants.KmlSnippetReference'                                                                                containerName' blobName);              }
Magic Number,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,FromFile,The following statement contains a magic number: if (!string.IsNullOrEmpty(configFileName) && File.Exists(configFileName))              {                  CsvToTablesDataLoaderParams data;                    using (var stream = File.Open(configFileName' FileMode.Open' FileAccess.Read))                  {                      data = SerializationHelper.DeserializeFromFile<CsvToTablesDataLoaderParams>(stream);                  }                  if (data.TableMetadataEntity.ReleasedDate.Year < 2008)                      data.TableMetadataEntity.ReleasedDate = DateTime.Now;                    if (data.TableMetadataEntity.ExpiredDate.Year < 2008)                      data.TableMetadataEntity.ExpiredDate = DateTime.Now.AddDays(1);                    parameters = data;              }              else              {                  //if there's no (*.cfg)' check if (*.csv) file exists                  parameters = File.Exists(csvFileName)                      ? CreateEmptyData(csvFileName)                      : new CsvToTablesDataLoaderParams                      {                          TableMetadataEntity = new TableMetadataEntity { IsEmpty = true' ReleasedDate = DateTime.Now' ExpiredDate = DateTime.Now.AddDays(1)' LastUpdateDate = DateTime.Now }'                          ProcessorParams = new TableProcessorParams                          {                              PartitionKeyPropertyName = string.Empty'                              RowKeyPropertyName = string.Empty'                              TableMetadataPartitionKeyPropertyName = string.Empty'                              TableMetadataRowKeyPropertyName = string.Empty'                              EntityMetadataPartitionKeyPropertyName = string.Empty'                              EntityMetadataRowKeyPropertyName = string.Empty'                              SourceTimeZoneName = string.Empty                          }'                          TableColumnsMetadata = new TableColumnsMetadata                          {                              TableColumnsMetadataPartitionKeyPropertyName = string.Empty'                              TableColumnsMetadataRowKeyPropertyName = string.Empty                          }                      };              }
Magic Number,Ogdi.Data.DataLoader.Csv,CsvToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Csv\CsvToTablesDataLoaderParams.cs,FromFile,The following statement contains a magic number: if (!string.IsNullOrEmpty(configFileName) && File.Exists(configFileName))              {                  CsvToTablesDataLoaderParams data;                    using (var stream = File.Open(configFileName' FileMode.Open' FileAccess.Read))                  {                      data = SerializationHelper.DeserializeFromFile<CsvToTablesDataLoaderParams>(stream);                  }                  if (data.TableMetadataEntity.ReleasedDate.Year < 2008)                      data.TableMetadataEntity.ReleasedDate = DateTime.Now;                    if (data.TableMetadataEntity.ExpiredDate.Year < 2008)                      data.TableMetadataEntity.ExpiredDate = DateTime.Now.AddDays(1);                    parameters = data;              }              else              {                  //if there's no (*.cfg)' check if (*.csv) file exists                  parameters = File.Exists(csvFileName)                      ? CreateEmptyData(csvFileName)                      : new CsvToTablesDataLoaderParams                      {                          TableMetadataEntity = new TableMetadataEntity { IsEmpty = true' ReleasedDate = DateTime.Now' ExpiredDate = DateTime.Now.AddDays(1)' LastUpdateDate = DateTime.Now }'                          ProcessorParams = new TableProcessorParams                          {                              PartitionKeyPropertyName = string.Empty'                              RowKeyPropertyName = string.Empty'                              TableMetadataPartitionKeyPropertyName = string.Empty'                              TableMetadataRowKeyPropertyName = string.Empty'                              EntityMetadataPartitionKeyPropertyName = string.Empty'                              EntityMetadataRowKeyPropertyName = string.Empty'                              SourceTimeZoneName = string.Empty                          }'                          TableColumnsMetadata = new TableColumnsMetadata                          {                              TableColumnsMetadataPartitionKeyPropertyName = string.Empty'                              TableColumnsMetadataRowKeyPropertyName = string.Empty                          }                      };              }
Magic Number,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,GetEntitiesEnumerator,The following statement contains a magic number: for (var i = 0; i < placemarks.Count; i++)              {                  var entity = new Entity();                  isExceptionOccurred = false;                    #region RDF                    XNamespace rdfNamespace = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";                    XElement rdfXml = new XElement(rdfNamespace + "RDF"'                  new XAttribute(XNamespace.Xmlns + "rdf"' rdfNamespace.ToString()));                    // add new namespaces to the rdf snippet if they exist                  if (namespacesRdf != null)                  {                      foreach (string ns in namespacesRdf)                      {                          if (!string.IsNullOrEmpty(ns))                          {                              rdfXml.Add(new XAttribute(XNamespace.Xmlns + ns.ToString().Split('=')[0]' ns.ToString().Split('=')[1]));                          }                      }                  }                    XElement rdfXmlDescriptionElement = new XElement(rdfNamespace + "Description");                  rdfXml.Add(rdfXmlDescriptionElement);                  #endregion                    try                  {                      XElement placemark = placemarks[i];                        if (placemark == null)                          continue;                        foreach (var item in properties)                      {                          #region RDF                            var header = item.Key;                          var stringValue = item.Value;                          var rdfValue = String.Empty;                            if (header == Params.ProcessorParams.PartitionKeyPropertyName)                          {                              rdfXmlDescriptionElement.Add(new XAttribute(rdfNamespace + "about"' stringValue));                          }                            var datatype = GetRdfType(stringValue);                          var cleanHeader = CleanStringLower(header);                            var columnNs = columnMetadata.First(column => column.column == header);                          XNamespace customNS = columnNs.columnnamespace.ToString().Split('=')[1];                            #endregion                            // Name & Description of Placemark                          if (item.Key == DataLoaderConstants.ElemNameName || item.Key == DataLoaderConstants.ElemNameDescription)                          {                              entity.AddProperty(item.Key'                                                 placemark.Element(kmlNamespace + item.Key).Value);                                #region RDF                              rdfValue = placemark.Element(kmlNamespace + header).Value;                              #endregion                          }                            if (item.Key == DataLoaderConstants.PropNameKmlCoords                              || (item.Key == DataLoaderConstants.PropNameLatitude && properties.ContainsKey(DataLoaderConstants.PropNameLongitude)))                          {                              if (placemark.Element(kmlNamespace + DataLoaderConstants.ElemNamePoint) != null)                              {                                  var point = placemark.Element(kmlNamespace + DataLoaderConstants.ElemNamePoint);                                  var positionTuple =                                      point.Element(kmlNamespace + DataLoaderConstants.ElemNameCoordinates).Value.Split(''');                                    entity.AddProperty(DataLoaderConstants.PropNameLatitude' ExtractLatitude(positionTuple));                                  entity.AddProperty("longitude"' ExtractLongitude(positionTuple));                                  entity.AddProperty("altitude"' ExtractAltitude(positionTuple));                                  //entity.AddProperty(DataLoaderConstants.PropNameKmlSnippet'                                  //                   string.Concat("<Placemark>"' point.ToString(SaveOptions.DisableFormatting)' "</Placemark>"));                                    #region RDF                                    if (stringValue != string.Empty)                                  {                                      rdfXmlDescriptionElement.Add(new XElement(customNS + "latitude"' ExtractLatitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype)));                                      rdfXmlDescriptionElement.Add(new XElement(customNS + "longitude"' ExtractLongitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype)));                                      if (!string.IsNullOrEmpty(ExtractAltitude(positionTuple)))                                          rdfXmlDescriptionElement.Add(new XElement(customNS + "altitude"' ExtractAltitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype)));                                  }                                  else                                  {                                      rdfXmlDescriptionElement.Add(new XElement(customNS + "latitude"));                                      rdfXmlDescriptionElement.Add(new XElement(customNS + "longitude"));                                      if (!string.IsNullOrEmpty(ExtractAltitude(positionTuple)))                                          rdfXmlDescriptionElement.Add(new XElement(customNS + "altitude"));                                  }                                    #endregion                              }                              else if (placemark.Element(kmlNamespace + DataLoaderConstants.ElemNamePolygon) != null)                              {                                  var polygon =                                      placemark.Element(kmlNamespace + DataLoaderConstants.ElemNamePolygon);                                    var outerBoundary =                                      polygon.Element(kmlNamespace + DataLoaderConstants.ElemNameOuterBoundaryIs);                                    var linearRing =                                      outerBoundary.Element(kmlNamespace + DataLoaderConstants.ElemNameLinearRing);                                    var polygonTupleList =                                      linearRing.Element(kmlNamespace + DataLoaderConstants.ElemNameCoordinates).Value;                                      entity.AddProperty(DataLoaderConstants.PropNameKmlCoords'                                                     polygonTupleList);                                    string[] positionTuple = polygonTupleList.Split(separators' StringSplitOptions.RemoveEmptyEntries);                                    entity.AddProperty(DataLoaderConstants.PropNameLatitude' ExtractLatitude(positionTuple));                                  entity.AddProperty(DataLoaderConstants.PropNameLongitude' ExtractLongitude(positionTuple));                                  entity.AddProperty("altitude"' ExtractAltitude(positionTuple));                                 // entity.AddProperty(DataLoaderConstants.PropNameKmlSnippet'                                 //                   string.Concat("<Placemark>"' polygon.ToString(SaveOptions.DisableFormatting)' "</Placemark>"));                                    #region RDF                                    if (stringValue != string.Empty)                                  {                                      rdfXmlDescriptionElement.Add(new XElement(customNS + DataLoaderConstants.PropNameLatitude' ExtractLatitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype)));                                      rdfXmlDescriptionElement.Add(new XElement(customNS + DataLoaderConstants.PropNameLongitude' ExtractLongitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype)));                                      if (!string.IsNullOrEmpty(ExtractAltitude(positionTuple)))                                          rdfXmlDescriptionElement.Add(new XElement(customNS + "altitude"' ExtractAltitude(positionTuple)' new XAttribute(rdfNamespace + "datatype"' datatype)));                                  }                                  else                                  {                                      rdfXmlDescriptionElement.Add(new XElement(customNS + DataLoaderConstants.PropNameLatitude));                                      rdfXmlDescriptionElement.Add(new XElement(customNS + DataLoaderConstants.PropNameLongitude));                                      if (!string.IsNullOrEmpty(ExtractAltitude(positionTuple)))                                          rdfXmlDescriptionElement.Add(new XElement(customNS + "altitude"));                                  }                                                                   #endregion                              }                          }                            if (item.Key.StartsWith("sd0"))                          {                              var schemaData =                                  placemark.Descendants(kmlNamespace + DataLoaderConstants.ElemNameSimpleData);                                var property = schemaData.FirstOrDefault(e => e.HasAttributes && e.Attributes("name").First().Value == item.Key.Remove(0' 3));                              string value = (property != null) ? property.Value : string.Empty;                                entity.AddProperty(item.Key' GetPropertyValue(item.Value' value));                                #region RDF                              rdfValue = GetPropertyValue(item.Value' value).ToString();                              #endregion                          }                                                      #region RDF                            if (item.Key == DataLoaderConstants.ElemNameName || item.Key == DataLoaderConstants.ElemNameDescription || item.Key.StartsWith("sd0"))                          {                              if (stringValue != string.Empty)                              {                                  rdfXmlDescriptionElement.Add(new XElement(customNS + cleanHeader' rdfValue.ToString()' new XAttribute(rdfNamespace + "datatype"' datatype)));                              }                              else                                  rdfXmlDescriptionElement.Add(new XElement(customNS + cleanHeader));                          }                            #endregion                      }                        #region RDF                      entity.AddProperty(DataLoaderConstants.PropNameRdfSnippet' rdfXml.ToString(SaveOptions.DisableFormatting));                      #endregion                        var ps = placemark.ToString(SaveOptions.DisableFormatting).Replace(                                                              DataLoaderConstants.NsKmlOld'                                                              DataLoaderConstants.NsKmlNew);                        entity.AddProperty(DataLoaderConstants.PropNameKmlSnippet' ps);                        if (_sourceOrder)                      {                          entity.SetNumber(count' initialTimePrefix);                      }                  }                  catch (Exception ex)                  {                      exceptionNotifier(new EntityProcessingException(ex.Message' ex));                      isExceptionOccurred = true;                  }                    if (isExceptionOccurred) continue;                    yield return entity;                  count++;              }
Magic Number,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,ExtractAltitude,The following statement contains a magic number: if (positionTuple.Length > 2)                  return positionTuple[2];
Magic Number,Ogdi.Data.DataLoader.Kml,KmlEntityProducer,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlEntityProducer.cs,ExtractAltitude,The following statement contains a magic number: if (positionTuple.Length > 2)                  return positionTuple[2];
Magic Number,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,FromFile,The following statement contains a magic number: if (!string.IsNullOrEmpty(configFileName) && File.Exists(configFileName))              {                  KmlToTablesDataLoaderParams data;                    using (var stream = File.Open(configFileName' FileMode.Open' FileAccess.Read))                  {                      data = SerializationHelper.DeserializeFromFile<KmlToTablesDataLoaderParams>(stream);                  }                  if (data.TableMetadataEntity.ReleasedDate.Year < 2008)                      data.TableMetadataEntity.ReleasedDate = DateTime.Now;                    if (data.TableMetadataEntity.ExpiredDate.Year < 2008)                      data.TableMetadataEntity.ExpiredDate = DateTime.Now.AddDays(1);                    parameters = data;              }              else              {                  parameters = File.Exists(kmlFileName)                                   ? CreateEmptyData(kmlFileName)                                   : new KmlToTablesDataLoaderParams                                         {                                             TableMetadataEntity =                                                 new TableMetadataEntity                                                     {                                                         IsEmpty = true'                                                         ReleasedDate = DateTime.Now'                                                         ExpiredDate = DateTime.Now.AddDays(1)'                                                         LastUpdateDate = DateTime.Now                                                     }'                                             ProcessorParams =                                                  new TableProcessorParams                                                      {                                                          PartitionKeyPropertyName = string.Empty'                                                          RowKeyPropertyName = string.Empty'                                                          TableMetadataPartitionKeyPropertyName = string.Empty'                                                          TableMetadataRowKeyPropertyName = string.Empty'                                                          EntityMetadataPartitionKeyPropertyName = string.Empty'                                                          EntityMetadataRowKeyPropertyName = string.Empty'                                                          SourceTimeZoneName = string.Empty                                                      }'                                                      TableColumnsMetadata = new TableColumnsMetadata                                                      {                                                          TableColumnsMetadataPartitionKeyPropertyName = string.Empty'                                                          TableColumnsMetadataRowKeyPropertyName = string.Empty                                                      }                                         };              }
Magic Number,Ogdi.Data.DataLoader.Kml,KmlToTablesDataLoaderParams,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Implementations\Kml\KmlToTablesDataLoaderParams.cs,FromFile,The following statement contains a magic number: if (!string.IsNullOrEmpty(configFileName) && File.Exists(configFileName))              {                  KmlToTablesDataLoaderParams data;                    using (var stream = File.Open(configFileName' FileMode.Open' FileAccess.Read))                  {                      data = SerializationHelper.DeserializeFromFile<KmlToTablesDataLoaderParams>(stream);                  }                  if (data.TableMetadataEntity.ReleasedDate.Year < 2008)                      data.TableMetadataEntity.ReleasedDate = DateTime.Now;                    if (data.TableMetadataEntity.ExpiredDate.Year < 2008)                      data.TableMetadataEntity.ExpiredDate = DateTime.Now.AddDays(1);                    parameters = data;              }              else              {                  parameters = File.Exists(kmlFileName)                                   ? CreateEmptyData(kmlFileName)                                   : new KmlToTablesDataLoaderParams                                         {                                             TableMetadataEntity =                                                 new TableMetadataEntity                                                     {                                                         IsEmpty = true'                                                         ReleasedDate = DateTime.Now'                                                         ExpiredDate = DateTime.Now.AddDays(1)'                                                         LastUpdateDate = DateTime.Now                                                     }'                                             ProcessorParams =                                                  new TableProcessorParams                                                      {                                                          PartitionKeyPropertyName = string.Empty'                                                          RowKeyPropertyName = string.Empty'                                                          TableMetadataPartitionKeyPropertyName = string.Empty'                                                          TableMetadataRowKeyPropertyName = string.Empty'                                                          EntityMetadataPartitionKeyPropertyName = string.Empty'                                                          EntityMetadataRowKeyPropertyName = string.Empty'                                                          SourceTimeZoneName = string.Empty                                                      }'                                                      TableColumnsMetadata = new TableColumnsMetadata                                                      {                                                          TableColumnsMetadataPartitionKeyPropertyName = string.Empty'                                                          TableColumnsMetadataRowKeyPropertyName = string.Empty                                                      }                                         };              }
Missing Default,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateDataLoader,The following switch statement is missing a default case: switch (type)                  {                      case SourceDataType.DbfAndKml:                          return CreateLoader<DbaseKmlToTablesDataLoaderParams' DbaseKmlEntityProducer>(fileSetName' target' stream' sourceOrder' overwriteMode);                        case SourceDataType.Csv:                          return CreateLoader<CsvToTablesDataLoaderParams' CsvEntityProducer>(fileSetName' target' stream' sourceOrder' overwriteMode);                        case SourceDataType.Kml:                          return CreateLoader<KmlToTablesDataLoaderParams' KmlEntityProducer>(fileSetName' target' stream' sourceOrder' overwriteMode);                  }
Missing Default,Ogdi.Data.DataLoader,DataLoaderFactory,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\DataLoaderFactory.cs,CreateLoader,The following switch statement is missing a default case: switch (target)              {                  case DataLoadingTarget.Console:                      return CreateConsoleLoader<DLParams' Producer>(stream' fileSetName' sourceOrder);                  case DataLoadingTarget.Tables:                      return CreateTablesLoader<DLParams' Producer>(stream' fileSetName' sourceOrder' overwriteMode);              }
Missing Default,Ogdi.Data.DataLoader,PropertyToTypeColumnsMetadataMapper,C:\repos\openlab_OGDI-DataLab\DataLoader\DataLoader\Abstractions\Table\TableColumnsMetadata.cs,ReadXml,The following switch statement is missing a default case: switch (columnMetadata.Name.LocalName)                      {                          case DataLoaderConstants.TableColumnsMetadataColumn:                              column = columnMetadata.Value;                              break;                          case DataLoaderConstants.TableColumnsMetadataColumnSemantic:                              columnSemantic = columnMetadata.Value;                              break;                          case DataLoaderConstants.TableColumnsMetadataColumnNamespace:                              columnNamespace = columnMetadata.Value;                              break;                          case DataLoaderConstants.TableColumnsMetadataColumnDescription:                              columnDescription = columnMetadata.Value;                              break;                      }
