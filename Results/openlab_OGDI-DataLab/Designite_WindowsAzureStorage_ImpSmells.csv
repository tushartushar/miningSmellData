Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,LoadServiceUri,The method has 6 parameters. Parameters: container' tableName' filter' pageSize' nextPartitionKey' nextRowKey
Long Parameter List,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetData,The method has 6 parameters. Parameters: container' tableName' filter' pageSize' nextPartitionKey' nextRowKey
Long Statement,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,StripNamespaces,The length of the statement  "            // found this code at http://social.msdn.microsoft.com/Forums/en-US/linqprojectgeneral/thread/bed57335-827a-4731-b6da-a7636ac29f21/ " is 131.
Long Statement,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,StripNamespaces,The length of the statement  "                    e.ReplaceAttributes(e.Attributes().Select(a => a.IsNamespaceDeclaration ? null : a.Name.Namespace != XNamespace.None ? new XAttribute(XNamespace.None.GetName(a.Name.LocalName)' a.Value) : a)); " is 192.
Long Statement,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetData,The length of the statement  "            var propertiesElements = feed.Elements(XNamespace.Get(AzureResources.nsAtom) + "entry").Elements(XNamespace.Get(AzureResources.nsAtom) + "content").Elements(XNamespace.Get(AzureResources.nsMetadata) + "properties"); " is 215.
Long Statement,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetDataAsXElement,The length of the statement  "            string root = string.Format("<Root tableName=\"{0}\" currentPartitionKey=\"\" currentRowKey=\"\" nextPartitionKey=\"\" nextRowKey=\"\" />"'tableName); " is 150.
Magic Number,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetData,The following statement contains a magic number: do              {                  if (tempGetData == null)                  {                      // 1000 is the max results Azure Table Storage allows per query                      tempGetData = GetData(container' tableName' filter' 1000' null' null);                      tempNextPartitionKey = tempGetData.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tempGetData.Attribute("nextRowKey").Value;                  }                  else                  {                      // 1000 is the max results Azure Table Storage allows per query                      XElement tp = GetData(container' tableName' filter' 1000' tempNextPartitionKey' tempNextRowKey);                      tempGetData.Add(tp.Elements("properties"));                        // Update the partitionkey values at the top.                      tempGetData.SetAttributeValue("currentPartitionKey"' tp.Attribute("currentPartitionKey").Value);                      tempGetData.SetAttributeValue("currentRowKey"' tp.Attribute("currentRowKey").Value);                      tempGetData.SetAttributeValue("nextPartitionKey"' tp.Attribute("nextPartitionKey").Value);                      tempGetData.SetAttributeValue("nextRowKey"' tp.Attribute("nextRowKey").Value);                        tempNextPartitionKey = tp.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tp.Attribute("nextRowKey").Value;                  }              }              while (!string.IsNullOrEmpty(tempNextPartitionKey) && !string.IsNullOrEmpty(tempNextRowKey));
Magic Number,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetData,The following statement contains a magic number: do              {                  if (tempGetData == null)                  {                      // 1000 is the max results Azure Table Storage allows per query                      tempGetData = GetData(container' tableName' filter' 1000' null' null);                      tempNextPartitionKey = tempGetData.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tempGetData.Attribute("nextRowKey").Value;                  }                  else                  {                      // 1000 is the max results Azure Table Storage allows per query                      XElement tp = GetData(container' tableName' filter' 1000' tempNextPartitionKey' tempNextRowKey);                      tempGetData.Add(tp.Elements("properties"));                        // Update the partitionkey values at the top.                      tempGetData.SetAttributeValue("currentPartitionKey"' tp.Attribute("currentPartitionKey").Value);                      tempGetData.SetAttributeValue("currentRowKey"' tp.Attribute("currentRowKey").Value);                      tempGetData.SetAttributeValue("nextPartitionKey"' tp.Attribute("nextPartitionKey").Value);                      tempGetData.SetAttributeValue("nextRowKey"' tp.Attribute("nextRowKey").Value);                        tempNextPartitionKey = tp.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tp.Attribute("nextRowKey").Value;                  }              }              while (!string.IsNullOrEmpty(tempNextPartitionKey) && !string.IsNullOrEmpty(tempNextRowKey));
Magic Number,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetDataAsDaisy,The following statement contains a magic number: do              {                  if (tempGetData == null)                  {                      // 1000 is the max results Azure Table Storage allows per query                      tempGetData = GetData(container' tableName' filter' 1000' null' null);                      tempNextPartitionKey = tempGetData.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tempGetData.Attribute("nextRowKey").Value;                  }                  else                  {                      // 1000 is the max results Azure Table Storage allows per query                      XElement tp = GetData(container' tableName' filter' 1000' tempNextPartitionKey' tempNextRowKey);                      tempGetData.Add(tp.Elements("properties"));                        // Update the partitionkey values at the top.                      tempGetData.SetAttributeValue("currentPartitionKey"' tp.Attribute("currentPartitionKey").Value);                      tempGetData.SetAttributeValue("currentRowKey"' tp.Attribute("currentRowKey").Value);                      tempGetData.SetAttributeValue("nextPartitionKey"' tp.Attribute("nextPartitionKey").Value);                      tempGetData.SetAttributeValue("nextRowKey"' tp.Attribute("nextRowKey").Value);                        tempNextPartitionKey = tp.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tp.Attribute("nextRowKey").Value;                  }              }              while (!string.IsNullOrEmpty(tempNextPartitionKey) && !string.IsNullOrEmpty(tempNextRowKey));
Magic Number,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetDataAsDaisy,The following statement contains a magic number: do              {                  if (tempGetData == null)                  {                      // 1000 is the max results Azure Table Storage allows per query                      tempGetData = GetData(container' tableName' filter' 1000' null' null);                      tempNextPartitionKey = tempGetData.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tempGetData.Attribute("nextRowKey").Value;                  }                  else                  {                      // 1000 is the max results Azure Table Storage allows per query                      XElement tp = GetData(container' tableName' filter' 1000' tempNextPartitionKey' tempNextRowKey);                      tempGetData.Add(tp.Elements("properties"));                        // Update the partitionkey values at the top.                      tempGetData.SetAttributeValue("currentPartitionKey"' tp.Attribute("currentPartitionKey").Value);                      tempGetData.SetAttributeValue("currentRowKey"' tp.Attribute("currentRowKey").Value);                      tempGetData.SetAttributeValue("nextPartitionKey"' tp.Attribute("nextPartitionKey").Value);                      tempGetData.SetAttributeValue("nextRowKey"' tp.Attribute("nextRowKey").Value);                        tempNextPartitionKey = tp.Attribute("nextPartitionKey").Value;                      tempNextRowKey = tp.Attribute("nextRowKey").Value;                  }              }              while (!string.IsNullOrEmpty(tempNextPartitionKey) && !string.IsNullOrEmpty(tempNextRowKey));
Magic Number,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetDataAsXElement,The following statement contains a magic number: do              {                  // TODO Refactor paging handling. This loop logic is confusing.                    // 1000 is the max results Azure Table Storage allows per query                  XElement tp = GetData(container' tableName' filter' 1000' tempNextPartitionKey' tempNextRowKey);                  tempGetData.Add(tp.Elements("properties"));                    // Update the partitionkey values at the top.                  tempGetData.SetAttributeValue("currentPartitionKey"' tp.Attribute("currentPartitionKey").Value);                  tempGetData.SetAttributeValue("currentRowKey"' tp.Attribute("currentRowKey").Value);                  tempGetData.SetAttributeValue("nextPartitionKey"' tp.Attribute("nextPartitionKey").Value);                  tempGetData.SetAttributeValue("nextRowKey"' tp.Attribute("nextRowKey").Value);                    tempNextPartitionKey = tp.Attribute("nextPartitionKey").Value;                  tempNextRowKey = tp.Attribute("nextRowKey").Value;                }              while (!string.IsNullOrEmpty(tempNextPartitionKey) && !string.IsNullOrEmpty(tempNextRowKey));
Magic Number,Ogdi.InteractiveSdk.Mvc,IsdkWindowsAzureStorageProvider,C:\repos\openlab_OGDI-DataLab\DataBrowser\Microsoft.Samples\WindowsAzureStorage\IsdkWindowsAzureStorageProvider.cs,GetMetadata,The following statement contains a magic number: return GetData(container' tableName' filter' 1000' null' null);
