Implementation smell,Namespace,Class,File,Method,Description
Magic Number,InteractiveSdk.WorkerRole,WorkerRole,C:\repos\openlab_OGDI-DataLab\DataBrowser\DataBrowser.WorkerRole\WorkerRole.cs,Run,The following statement contains a magic number: while (true)  			{  				try  				{  					CloudQueueMessage msg = queue.GetMessage();  					if (msg != null)  					{  						queue.DeleteMessage(msg);  						ProcessMessage(msg);  					}  					else  					{  						Thread.Sleep(1000);  					}  				}  				catch (Exception e)  				{  					Trace.TraceError("Exception when processing queue item. Message: '{0}'"' e.Message);  					Thread.Sleep(10000);  				}  			}
Magic Number,InteractiveSdk.WorkerRole,WorkerRole,C:\repos\openlab_OGDI-DataLab\DataBrowser\DataBrowser.WorkerRole\WorkerRole.cs,Run,The following statement contains a magic number: while (true)  			{  				try  				{  					CloudQueueMessage msg = queue.GetMessage();  					if (msg != null)  					{  						queue.DeleteMessage(msg);  						ProcessMessage(msg);  					}  					else  					{  						Thread.Sleep(1000);  					}  				}  				catch (Exception e)  				{  					Trace.TraceError("Exception when processing queue item. Message: '{0}'"' e.Message);  					Thread.Sleep(10000);  				}  			}
Magic Number,InteractiveSdk.WorkerRole,WorkerRole,C:\repos\openlab_OGDI-DataLab\DataBrowser\DataBrowser.WorkerRole\WorkerRole.cs,OnStart,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 12;
Magic Number,InteractiveSdk.WorkerRole,WorkerRole,C:\repos\openlab_OGDI-DataLab\DataBrowser\DataBrowser.WorkerRole\WorkerRole.cs,OnStart,The following statement contains a magic number: while (!storageInitialized)  			{  				try  				{  					// create the blob container and allow public access  					container.CreateIfNotExist();  					var permissions = container.GetPermissions();  					permissions.PublicAccess = BlobContainerPublicAccessType.Container;  					container.SetPermissions(permissions);      					// create the message queue  					queue.CreateIfNotExist();  					storageInitialized = true;  				}  				catch (StorageClientException e)  				{  					if (e.ErrorCode == StorageErrorCode.TransportError)  					{  						Trace.TraceError("Storage services initialization failure. "  						  + "Check your storage account configuration settings. If running locally' "  						  + "ensure that the Development Storage service is running. Message: '{0}'"' e.Message);  						Thread.Sleep(5000);  					}  					else  					{  						throw;  					}  				}  			}
Magic Number,InteractiveSdk.WorkerRole.MessageHandlers,SendMailHandler,C:\repos\openlab_OGDI-DataLab\DataBrowser\DataBrowser.WorkerRole\MessageHandlers\SendMessageHandler.cs,SendMessage,The following statement contains a magic number: if(parts.Length < 6)  			{  				Trace.TraceError("SmtpSettings must contain 6 parts: host' [port#]' [<ssl>]' from' [user]'[password].");  				return;  			}
