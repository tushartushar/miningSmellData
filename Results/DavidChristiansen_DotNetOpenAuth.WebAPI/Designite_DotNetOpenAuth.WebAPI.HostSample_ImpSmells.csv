Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSample,Cyclomatic complexity of the method is 8
Complex Method,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,ObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,GenerateObject,Cyclomatic complexity of the method is 11
Complex Method,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,ObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,GenerateGenericType,Cyclomatic complexity of the method is 12
Complex Method,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage.ModelDescriptions,ModelDescriptionGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\ModelDescriptions\ModelDescriptionGenerator.cs,GetOrCreateModelDescription,Cyclomatic complexity of the method is 17
Complex Method,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,ReadOnlyXmlMembershipProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\ReadOnlyXmlMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 8
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The method has 5 parameters. Parameters: config' sample' mediaType' controllerName' actionName
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The method has 6 parameters. Parameters: config' sample' mediaType' controllerName' actionName' parameterNames
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The method has 5 parameters. Parameters: config' sample' mediaType' controllerName' actionName
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The method has 6 parameters. Parameters: config' sample' mediaType' controllerName' actionName' parameterNames
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualRequestType,The method has 5 parameters. Parameters: config' type' controllerName' actionName' parameterNames
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualResponseType,The method has 5 parameters. Parameters: config' type' controllerName' actionName' parameterNames
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The method has 7 parameters. Parameters: controllerName' actionName' parameterNames' type' formatter' mediaType' sampleDirection
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The method has 6 parameters. Parameters: api' controllerName' actionName' parameterNames' sampleDirection' formatters
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleKey,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleKey.cs,HelpPageSampleKey,The method has 5 parameters. Parameters: mediaType' sampleDirection' controllerName' actionName' parameterNames
Long Parameter List,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,ReadOnlyXmlMembershipProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\ReadOnlyXmlMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Identifier,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,,The length of the parameter ResourceServerEncryptionPublicKey is 33.
Long Statement,DotNetOpenAuth.WebAPI.HostSample,WebApiApplication,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Global.asax.cs,Application_Error,The length of the statement  "            // In the event of an unhandled exception' reverse any changes that were made to the database to avoid any partial database updates. " is 132.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //config.SetDocumentationProvider(new XmlDocumentationProvider(HttpContext.Current.Server.MapPath("~/App_Data/XmlDocument.xml"))); " is 130.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use "sample string" as the sample for all actions that have string as the body parameter or return type. " is 136.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Also' the string arrays will be used for IEnumerable<string>. The sample objects will be serialized into different media type  " is 130.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use "[0]=foo&[1]=bar" directly as the sample for all actions that support form URL encoded format " is 129.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //config.SetSampleForType("[0]=foo&[1]=bar"' new MediaTypeHeaderValue("application/x-www-form-urlencoded")' typeof(IEnumerable<string>)); " is 137.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use "1234" directly as the request sample for media type "text/plain" on the controller named "Values" " is 134.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to use the image on "../images/aspNetHome.png" directly as the response sample for media type "image/png" " is 134.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //config.SetSampleResponse(new ImageSample("../images/aspNetHome.png")' new MediaTypeHeaderValue("image/png")' "Values"' "Get"' "id"); " is 134.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to correct the sample request when the action expects an HttpRequestMessage with ObjectContent<string>. " is 132.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// The sample will be generated as if the controller named "Values" and action named "Get" were having string as the body parameter. " is 134.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfig,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\App_Start\HelpPageConfig.cs,Register,The length of the statement  "            //// Uncomment the following to correct the sample response when the action returns an HttpResponseMessage with ObjectContent<string>. " is 134.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Request' controllerName' actionName' new[] { "*" })' sample); " is 164.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleRequest,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Request' controllerName' actionName' parameterNames)' sample); " is 165.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Response' controllerName' actionName' new[] { "*" })' sample); " is 165.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetSampleResponse,The length of the statement  "            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType' SampleDirection.Response' controllerName' actionName' parameterNames)' sample); " is 166.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualRequestType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Request' controllerName' actionName' new[] { "*" })' type); " is 160.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualRequestType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Request' controllerName' actionName' parameterNames)' type); " is 161.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualResponseType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Response' controllerName' actionName' new[] { "*" })' type); " is 161.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,SetActualResponseType,The length of the statement  "            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Response' controllerName' actionName' parameterNames)' type); " is 162.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,GetHelpPageApiModel,The length of the statement  "                ApiDescription apiDescription = apiDescriptions.FirstOrDefault(api => String.Equals(api.GetFriendlyId()' apiDescriptionId' StringComparison.OrdinalIgnoreCase)); " is 160.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageConfigurationExtensions,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\HelpPageConfigurationExtensions.cs,GenerateUriParameters,The length of the statement  "                            uriParameter.Annotations.Add(new ParameterAnnotation() { Documentation = "Default value is " + Convert.ToString(defaultValue' CultureInfo.InvariantCulture) }); " is 159.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSample,The length of the statement  "            // Here we cannot rely on formatters because we don't know what's in the HttpResponseMessage' it might not even use formatters. " is 127.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSample,The length of the statement  "                            object sample = GetActionSample(controllerName' actionName' parameterNames' type' formatter' mediaType' sampleDirection); " is 121.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "            // First' try to get the sample provided for the specified mediaType' sampleDirection' controllerName' actionName and parameterNames. " is 133.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "            // If not found' try to get the sample provided for the specified mediaType' sampleDirection' controllerName and actionName regardless of the parameterNames. " is 157.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "            if (ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' parameterNames)' out sample) || " is 139.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The length of the statement  "                ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' new[] { "*" })' out sample) || " is 134.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The length of the statement  "            if (ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(sampleDirection' controllerName' actionName' parameterNames)' out type) || " is 135.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The length of the statement  "                ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(sampleDirection' controllerName' actionName' new[] { "*" })' out type)) " is 128.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,ResolveType,The length of the statement  "                        ApiParameterDescription requestBodyParameter = api.ParameterDescriptions.FirstOrDefault(p => p.Source == ApiParameterSource.FromBody); " is 134.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,WriteSampleObjectUsingFormatter,The length of the statement  "                    "An exception has occurred while using the formatter '{0}' to generate sample for media type '{1}'. Exception message: {2}"' " is 124.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,XmlDocumentationProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\XmlDocumentationProvider.cs,GetDocumentation,The length of the statement  "            ReflectedHttpParameterDescriptor reflectedParameterDescriptor = parameterDescriptor as ReflectedHttpParameterDescriptor; " is 120.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,XmlDocumentationProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\XmlDocumentationProvider.cs,GetDocumentation,The length of the statement  "                    XPathNavigator parameterNode = methodNode.SelectSingleNode(String.Format(CultureInfo.InvariantCulture' ParameterExpression' parameterName)); " is 140.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,XmlDocumentationProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\XmlDocumentationProvider.cs,GetDocumentation,The length of the statement  "            string memberName = String.Format(CultureInfo.InvariantCulture' "{0}.{1}"' GetTypeName(member.DeclaringType)' member.Name); " is 123.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,XmlDocumentationProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\XmlDocumentationProvider.cs,GetMethodNode,The length of the statement  "                string selectExpression = String.Format(CultureInfo.InvariantCulture' MethodExpression' GetMemberName(reflectedActionDescriptor.MethodInfo)); " is 141.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage.ModelDescriptions,ModelNameHelper,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\ModelDescriptions\ModelNameHelper.cs,GetModelName,The length of the statement  "                modelName = String.Format(CultureInfo.InvariantCulture' "{0}Of{1}"' genericTypeName' String.Join("And"' argumentTypeNames)); " is 124.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Controllers,OAuthController,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Controllers\OAuthController.cs,Authorise,The length of the statement  "            var requestingClient = WebApiApplication.DataContext.Clients.First(c => c.ClientIdentifier == pendingRequest.ClientIdentifier); " is 127.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Controllers,OAuthController,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Controllers\OAuthController.cs,Authorise,The length of the statement  "            if (((OAuth2AuthorizationServer)this.authorizationServer.AuthorizationServerServices).CanBeAutoApproved(pendingRequest)) { " is 122.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Controllers,OAuthController,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Controllers\OAuthController.cs,Authorise,The length of the statement  "                var approval = this.authorizationServer.PrepareApproveAuthorizationRequest(pendingRequest' HttpContext.User.Identity.Name); " is 123.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Controllers,OAuthController,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Controllers\OAuthController.cs,AuthoriseResponse,The length of the statement  "                WebApiApplication.DataContext.SubmitChanges(); // submit now so that this new row can be retrieved later in this same HTTP request " is 130.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Controllers,OAuthController,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Controllers\OAuthController.cs,AuthoriseResponse,The length of the statement  "                // But in a real app' you could grant a reduced scope of access to the client by passing a scope parameter to this method. " is 122.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,Client,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\Client.cs,IsCallbackAllowed,The length of the statement  "			if (string.Equals(acceptableCallbackPattern.GetLeftPart(UriPartial.Authority)' callback.GetLeftPart(UriPartial.Authority)' StringComparison.Ordinal)) { " is 151.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,DatabaseKeyNonceStore,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\DatabaseKeyNonceStore.cs,StoreNonce,The length of the statement  "			WebApiApplication.DataContext.Nonces.InsertOnSubmit(new Nonce { Context = context' Code = nonce' Timestamp = timestampUtc }); " is 125.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,DatabaseKeyNonceStore,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\DatabaseKeyNonceStore.cs,GetKey,The length of the statement  "            var _db = WebApiApplication.DataContext.SymmetricCryptoKeys.Where(k => k.Bucket == bucket && k.Handle == handle).ToList(); " is 122.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,DatabaseKeyNonceStore,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\DatabaseKeyNonceStore.cs,RemoveKey,The length of the statement  "			var match = WebApiApplication.DataContext.SymmetricCryptoKeys.FirstOrDefault(k => k.Bucket == bucket && k.Handle == handle); " is 124.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,IsAuthorizationValid,The length of the statement  "			return this.IsAuthorizationValid(authorization.Scope' authorization.ClientIdentifier' authorization.UtcIssued' authorization.User); " is 131.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CheckAuthorizeClientCredentialsGrant,The length of the statement  "            // This web site delegates user authentication to OpenID Providers' and as such no users have local passwords with this server. " is 127.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,TryAuthorizeResourceOwnerCredentialGrant,The length of the statement  "			// This web site delegates user authentication to OpenID Providers' and as such no users have local passwords with this server. " is 127.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CanBeAutoApproved,The length of the statement  "				var requestingClient = WebApiApplication.DataContext.Clients.First(c => c.ClientIdentifier == authorizationRequest.ClientIdentifier); " is 133.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "			// we hard-code a FOR SAMPLE USE ONLY key pair.  The matching public key information is hard-coded into the OAuthResourceServer sample. " is 135.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "			// In a real app' the RSA parameters would typically come from a certificate that may already exist.  It may simply be the HTTPS certificate for the auth server. " is 161.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }' " is 603.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }' " is 310.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }' " is 311.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }' " is 314.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }' " is 317.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }' " is 318.
Long Statement,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }' " is 605.
Complex Conditional,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetActionSample,The conditional expression  "ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' parameterNames)' out sample) ||                  ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' sampleDirection' controllerName' actionName' new[] { "*" })' out sample) ||                  ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType' type)' out sample) ||                  ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType)' out sample)"  is complex.
Complex Conditional,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetAllActionSamples,The conditional expression  "String.Equals(controllerName' sampleKey.ControllerName' StringComparison.OrdinalIgnoreCase) &&                      String.Equals(actionName' sampleKey.ActionName' StringComparison.OrdinalIgnoreCase) &&                      (sampleKey.ParameterNames.SetEquals(new[] { "*" }) || parameterNamesSet.SetEquals(sampleKey.ParameterNames)) &&                      sampleDirection == sampleKey.SampleDirection"  is complex.
Empty Catch Block,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,GetSampleObject,The method has an empty catch block.
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,ObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,GenerateGenericType,The following statement contains a magic number: if (genericArguments.Length == 2)              {                  if (genericTypeDefinition == typeof(IDictionary<'>))                  {                      Type dictionaryType = typeof(Dictionary<'>).MakeGenericType(genericArguments);                      return GenerateDictionary(dictionaryType' collectionSize' createdObjectReferences);                  }                    Type closedDictionaryType = typeof(IDictionary<'>).MakeGenericType(genericArguments[0]' genericArguments[1]);                  if (closedDictionaryType.IsAssignableFrom(type))                  {                      return GenerateDictionary(type' collectionSize' createdObjectReferences);                  }              }
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,SimpleTypeObjectGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\ObjectGenerator.cs,InitializeGenerators,The following statement contains a magic number: return new Dictionary<Type' Func<long' object>>                  {                      { typeof(Boolean)' index => true }'                      { typeof(Byte)' index => (Byte)64 }'                      { typeof(Char)' index => (Char)65 }'                      { typeof(DateTime)' index => DateTime.Now }'                      { typeof(DateTimeOffset)' index => new DateTimeOffset(DateTime.Now) }'                      { typeof(DBNull)' index => DBNull.Value }'                      { typeof(Decimal)' index => (Decimal)index }'                      { typeof(Double)' index => (Double)(index + 0.1) }'                      { typeof(Guid)' index => Guid.NewGuid() }'                      { typeof(Int16)' index => (Int16)(index % Int16.MaxValue) }'                      { typeof(Int32)' index => (Int32)(index % Int32.MaxValue) }'                      { typeof(Int64)' index => (Int64)index }'                      { typeof(Object)' index => new object() }'                      { typeof(SByte)' index => (SByte)64 }'                      { typeof(Single)' index => (Single)(index + 0.1) }'                      {                           typeof(String)' index =>                          {                              return String.Format(CultureInfo.CurrentCulture' "sample string {0}"' index);                          }                      }'                      {                           typeof(TimeSpan)' index =>                          {                              return TimeSpan.FromTicks(1234567);                          }                      }'                      { typeof(UInt16)' index => (UInt16)(index % UInt16.MaxValue) }'                      { typeof(UInt32)' index => (UInt32)(index % UInt32.MaxValue) }'                      { typeof(UInt64)' index => (UInt64)index }'                      {                           typeof(Uri)' index =>                          {                              return new Uri(String.Format(CultureInfo.CurrentCulture' "http://webapihelppage{0}.com"' index));                          }                      }'                  };
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage.ModelDescriptions,ModelDescriptionGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\ModelDescriptions\ModelDescriptionGenerator.cs,GetOrCreateModelDescription,The following statement contains a magic number: if (modelType.IsGenericType)              {                  Type[] genericArguments = modelType.GetGenericArguments();                    if (genericArguments.Length == 1)                  {                      Type enumerableType = typeof(IEnumerable<>).MakeGenericType(genericArguments);                      if (enumerableType.IsAssignableFrom(modelType))                      {                          return GenerateCollectionModelDescription(modelType' genericArguments[0]);                      }                  }                  if (genericArguments.Length == 2)                  {                      Type dictionaryType = typeof(IDictionary<'>).MakeGenericType(genericArguments);                      if (dictionaryType.IsAssignableFrom(modelType))                      {                          return GenerateDictionaryModelDescription(modelType' genericArguments[0]' genericArguments[1]);                      }                        Type keyValuePairType = typeof(KeyValuePair<'>).MakeGenericType(genericArguments);                      if (keyValuePairType.IsAssignableFrom(modelType))                      {                          return GenerateKeyValuePairModelDescription(modelType' genericArguments[0]' genericArguments[1]);                      }                  }              }
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAccessToken,The following statement contains a magic number: accessToken.Lifetime = TimeSpan.FromMinutes(2);
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,OAuth2AuthorizationServer,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,ReadOnlyXmlMembershipProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  				if (this.users == null) {  					this.users = new Dictionary<string' MembershipUser>(16' StringComparer.InvariantCultureIgnoreCase);  					XmlDocument doc = new XmlDocument();  					doc.Load(this.xmlFileName);  					XmlNodeList nodes = doc.GetElementsByTagName("User");    					foreach (XmlNode node in nodes) {  						// Yes' we're misusing some of these fields.  A real app would  						// have the right fields from a database to use.  						MembershipUser user = new MembershipUser(  							Name'                       // Provider name  							node["UserName"].InnerText' // Username  							null'                       // providerUserKey  							node["Salt"].InnerText'     // Email  							string.Empty'               // passwordQuestion  							node["Password"].InnerText' // Comment  							true'                       // isApproved  							false'                      // isLockedOut  							DateTime.Now'               // creationDate  							DateTime.Now'               // lastLoginDate  							DateTime.Now'               // lastActivityDate  							DateTime.Now' // lastPasswordChangedDate  							new DateTime(1980' 1' 1));  // lastLockoutDate    						this.users.Add(user.UserName' user);  					}  				}  			}
Magic Number,DotNetOpenAuth.WebAPI.HostSample.Infrastructure.OAuth,ReadOnlyXmlMembershipProvider,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Infrastructure\OAuth\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  				if (this.users == null) {  					this.users = new Dictionary<string' MembershipUser>(16' StringComparer.InvariantCultureIgnoreCase);  					XmlDocument doc = new XmlDocument();  					doc.Load(this.xmlFileName);  					XmlNodeList nodes = doc.GetElementsByTagName("User");    					foreach (XmlNode node in nodes) {  						// Yes' we're misusing some of these fields.  A real app would  						// have the right fields from a database to use.  						MembershipUser user = new MembershipUser(  							Name'                       // Provider name  							node["UserName"].InnerText' // Username  							null'                       // providerUserKey  							node["Salt"].InnerText'     // Email  							string.Empty'               // passwordQuestion  							node["Password"].InnerText' // Comment  							true'                       // isApproved  							false'                      // isLockedOut  							DateTime.Now'               // creationDate  							DateTime.Now'               // lastLoginDate  							DateTime.Now'               // lastActivityDate  							DateTime.Now' // lastPasswordChangedDate  							new DateTime(1980' 1' 1));  // lastLockoutDate    						this.users.Add(user.UserName' user);  					}  				}  			}
Missing Default,DotNetOpenAuth.WebAPI.HostSample.Areas.HelpPage,HelpPageSampleGenerator,C:\repos\DavidChristiansen_DotNetOpenAuth.WebAPI\source\DotNetOpenAuth.WebAPI.HostSample\Areas\HelpPage\SampleGeneration\HelpPageSampleGenerator.cs,IsFormatSupported,The following switch statement is missing a default case: switch (sampleDirection)              {                  case SampleDirection.Request:                      return formatter.CanReadType(type);                  case SampleDirection.Response:                      return formatter.CanWriteType(type);              }
