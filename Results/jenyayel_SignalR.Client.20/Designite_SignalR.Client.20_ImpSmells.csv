Implementation smell,Namespace,Class,File,Method,Description
Long Method,SignalR.Client._20.Transports,LongPollingTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\LongPollingTransport.cs,PollingLoop,The method has 90 lines of code.
Long Method,SignalR.Client._20.Transports,ServerSentEventsTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\ServerSentEventsTransport.cs,OpenConnection,The method has 84 lines of code.
Complex Method,SignalR.Client._20.Http,HttpHelper,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Http\HttpHelper.cs,ReadAsString,Cyclomatic complexity of the method is 8
Complex Method,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlEncode,Cyclomatic complexity of the method is 8
Complex Method,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,Cyclomatic complexity of the method is 9
Complex Method,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,Cyclomatic complexity of the method is 7
Complex Method,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,IsUrlSafeChar,Cyclomatic complexity of the method is 7
Complex Method,SignalR.Client._20.Transports,AsyncStreamReader,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\AsyncStreamReader.cs,ProcessChunks,Cyclomatic complexity of the method is 13
Complex Method,SignalR.Client._20.Transports,HttpBasedTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\HttpBasedTransport.cs,ProcessResponse,Cyclomatic complexity of the method is 9
Long Parameter List,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlEncode,The method has 4 parameters.
Long Parameter List,SignalR.Client._20.Transports,AsyncStreamReader,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\AsyncStreamReader.cs,AsyncStreamReader,The method has 4 parameters.
Long Parameter List,SignalR.Client._20.Transports,HttpBasedTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\HttpBasedTransport.cs,OnStart,The method has 4 parameters.
Long Parameter List,SignalR.Client._20.Transports,HttpBasedTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\HttpBasedTransport.cs,ProcessResponse,The method has 4 parameters.
Long Parameter List,SignalR.Client._20.Transports,LongPollingTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\LongPollingTransport.cs,OnStart,The method has 4 parameters.
Long Parameter List,SignalR.Client._20.Transports,LongPollingTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\LongPollingTransport.cs,PollingLoop,The method has 5 parameters.
Long Parameter List,SignalR.Client._20.Transports,ServerSentEventsTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\ServerSentEventsTransport.cs,OnStart,The method has 4 parameters.
Long Parameter List,SignalR.Client._20.Transports,ServerSentEventsTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\ServerSentEventsTransport.cs,OpenConnection,The method has 4 parameters.
Long Statement,SignalR.Client._20,Connection,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Connection.cs,VerifyProtocolVersion,The length of the statement  "	if (String.IsNullOrEmpty (versionString) || !TryParseVersion (versionString' out version) || !(version.Major == 1 && version.Minor == 2)) { " is 139.
Long Statement,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,HexToInt,The length of the statement  "	return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1; " is 125.
Long Statement,SignalR.Client._20.Transports,EventSignal,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\EventSignal.cs,handleNoEventHandler,The length of the statement  "	throw new InvalidOperationException ("You must attach an event handler to the event signal within a reasonable amount of time."); " is 129.
Long Statement,SignalR.Client._20.Transports,HttpBasedTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\HttpBasedTransport.cs,Send,The length of the statement  "	_url += String.Format (c_sendQueryString' m_transport' Uri.EscapeDataString (connection.ConnectionToken)' _customQueryString); " is 126.
Long Statement,SignalR.Client._20.Transports,HttpBasedTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\HttpBasedTransport.cs,GetReceiveQueryStringWithGroups,The length of the statement  "	return String.Format (c_receiveQueryStringWithGroups' m_transport' Uri.EscapeDataString (connection.ConnectionId)' Convert.ToString (connection.MessageId)' GetSerializedGroups (connection)' data' GetCustomQueryString (connection)' Uri.EscapeDataString (connection.ConnectionToken)' connection.GroupsToken); " is 306.
Long Statement,SignalR.Client._20.Transports,HttpBasedTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\HttpBasedTransport.cs,GetReceiveQueryString,The length of the statement  "	return String.Format (c_receiveQueryString' m_transport' Uri.EscapeDataString (connection.ConnectionId)' Convert.ToString (connection.MessageId)' data' GetCustomQueryString (connection)' Uri.EscapeDataString (connection.ConnectionToken)); " is 238.
Complex Conditional,SignalR.Client._20,Connection,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Connection.cs,VerifyProtocolVersion,The conditional expression  "String.IsNullOrEmpty (versionString) || !TryParseVersion (versionString' out version) || !(version.Major == 1 && version.Minor == 2)"  is complex.
Complex Conditional,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The conditional expression  "h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0"  is complex.
Complex Conditional,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,IsUrlSafeChar,The conditional expression  "ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'"  is complex.
Empty Catch Block,SignalR.Client._20.Transports,HttpBasedTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\HttpBasedTransport.cs,Stop,The method has an empty catch block.
Magic Number,SignalR.Client._20,Connection,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Connection.cs,VerifyProtocolVersion,The following statement contains a magic number: if (String.IsNullOrEmpty (versionString) || !TryParseVersion (versionString' out version) || !(version.Major == 1 && version.Minor == 2)) {  	throw new InvalidOperationException ("Incompatible protocol version.");  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	byte b = bytes [offset + i];  	char ch = (char)b;  	if (IsUrlSafeChar (ch)) {  		expandedBytes [pos++] = b;  	} else if (ch == ' ') {  		expandedBytes [pos++] = (byte)'+';  	} else {  		expandedBytes [pos++] = (byte)'%';  		expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  		expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: if (IsUrlSafeChar (ch)) {  	expandedBytes [pos++] = b;  } else if (ch == ' ') {  	expandedBytes [pos++] = (byte)'+';  } else {  	expandedBytes [pos++] = (byte)'%';  	expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  	expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: if (ch == ' ') {  	expandedBytes [pos++] = (byte)'+';  } else {  	expandedBytes [pos++] = (byte)'%';  	expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  	expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: pos += 5;  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	// don't add as char  	helper.AddByte (b);  	continue;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	// don't add as char  	helper.AddByte (b);  	continue;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: pos += 2;  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	b = (byte)((h1 << 4) | h2);  	i += 2;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	b = (byte)((h1 << 4) | h2);  	i += 2;  }  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: b = (byte)((h1 << 4) | h2);  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: i += 2;  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + (int)'0');  else  	return (char)(n - 10 + (int)'a');  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + (int)'0');  else  	return (char)(n - 10 + (int)'a');  
Magic Number,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,IntToHex,The following statement contains a magic number: return (char)(n - 10 + (int)'a');  
Magic Number,SignalR.Client._20.Transports,EventSignal,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\EventSignal.cs,OnFinish,The following statement contains a magic number: if (_handler == null) {  	if (maxAttemptsReached ()) {  		handleNoEventHandler ();  		return;  	}  	m_attemptCount++;  	Thread.SpinWait (1000);  	OnFinish (result);  	return;  }  
Magic Number,SignalR.Client._20.Transports,EventSignal,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\EventSignal.cs,OnFinish,The following statement contains a magic number: Thread.SpinWait (1000);  
Magic Number,SignalR.Client._20.Transports,LongPollingTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\LongPollingTransport.cs,LongPollingTransport,The following statement contains a magic number: ReconnectDelay = TimeSpan.FromSeconds (5);  
Magic Number,SignalR.Client._20.Transports,ServerSentEventsTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\ServerSentEventsTransport.cs,ServerSentEventsTransport,The following statement contains a magic number: m_connectionTimeout = TimeSpan.FromSeconds (2);  
Magic Number,SignalR.Client._20.Transports,ServerSentEventsTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\ServerSentEventsTransport.cs,ServerSentEventsTransport,The following statement contains a magic number: m_connectionRetry = 30;  
Magic Number,SignalR.Client._20.Transports,ServerSentEventsTransport,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\ServerSentEventsTransport.cs,shouldUsePost,The following statement contains a magic number: return new List<string> (connection.Groups).Count > 20;  
Missing Default,SignalR.Infrastructure,UriQueryUtility,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Infrastructure\UriQueryUtility.cs,IsUrlSafeChar,The following switch statement is missing a default case: switch (ch) {  case '-':  case '_':  case '.':  case '!':  case '*':  case '(':  case ')':  	return true;  }  
Missing Default,SignalR.Client._20.Transports,AsyncStreamReader,D:\newReposJune17\jenyayel_SignalR.Client.20\source\SignalR.Client.20\Transports\AsyncStreamReader.cs,ProcessChunks,The following switch statement is missing a default case: switch (_sseEvent.Type) {  case EventType.Id:  	m_connection.MessageId = _sseEvent.Data;  	break;  case EventType.Data:  	if (_sseEvent.Data.Equals ("initialized"' StringComparison.OrdinalIgnoreCase)) {  		if (m_initializeCallback != null)  			// Mark the connection as started  			m_initializeCallback ();  	} else {  		if (Reading) {  			// We don't care about timeout messages here since it will just reconnect  			// as part of being a long running request  			bool _timedOutReceived;  			bool _disconnectReceived;  			HttpBasedTransport.ProcessResponse (m_connection' _sseEvent.Data' out _timedOutReceived' out _disconnectReceived);  			if (_disconnectReceived)  				m_connection.Stop ();  			if (_timedOutReceived)  				return;  		}  	}  	break;  }  
