Implementation smell,Namespace,Class,File,Method,Description
Long Method,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The method has 134 lines of code.
Long Method,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,InitEntities,The method has 258 lines of code.
Complex Method,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlEncode,Cyclomatic complexity of the method is 8
Complex Method,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlAttributeEncode,Cyclomatic complexity of the method is 8
Complex Method,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,Cyclomatic complexity of the method is 12
Complex Method,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 14
Complex Method,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Long Parameter List,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyResponseStream,The method has 5 parameters. Parameters: httpWebRequest' httpWebResponse' innerException' responseStream' responseSaveStream
Long Parameter List,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,RequestCallback,The method has 5 parameters. Parameters: asyncResult' httpWebRequest' requestBody' callback' state
Long Parameter List,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyRequestStream,The method has 5 parameters. Parameters: httpWebRequest' requestBody' requestStream' callback' state
Long Parameter List,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,ResponseCallback,The method has 5 parameters. Parameters: asyncResult' httpWebRequest' requestBody' callback' state
Long Parameter List,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,ReadResponseStream,The method has 6 parameters. Parameters: httpWebRequest' httpWebResponse' innerException' responseSaveStream' callback' state
Long Parameter List,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyResponseStream,The method has 7 parameters. Parameters: httpWebRequest' httpWebResponse' innerException' responseStream' responseSaveStream' callback' state
Long Parameter List,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyStreamAsync,The method has 5 parameters. Parameters: input' output' flushInput' flushOutput' completed
Long Parameter List,FluentHttp,FluentHttpAsyncResult,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\FluentHttpAsyncResult.cs,FluentHttpAsyncResult,The method has 9 parameters. Parameters: request' response' asyncState' asyncWaitHandle' completedSynchronously' isCompleted' isCancelled' exception' innerException
Long Parameter List,CombinationStream,CombinationStream,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\CombinationStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,GetResponse,The length of the statement  "                    httpWebHelperAsyncResult = new HttpWebHelperResult(httpWebRequest' httpWebResponse' exception' null' false' true' null' null); " is 126.
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,ReadResponseStream,The length of the statement  "            return exception == null ? CopyResponseStream(httpWebRequest' httpWebResponse' innerException' responseStream' responseSaveStream) : new HttpWebHelperResult(httpWebRequest' httpWebResponse' exception' innerException' false' true' responseSaveStream' null); " is 256.
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyResponseStream,The length of the statement  "                return new HttpWebHelperResult(httpWebRequest' httpWebResponse' null' innerException' false' true' responseSaveStream' null); " is 125.
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyResponseStream,The length of the statement  "                return new HttpWebHelperResult(httpWebRequest' httpWebResponse' ex' innerException' false' true' responseSaveStream' null); " is 123.
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,ReadResponseStream,The length of the statement  "                    CopyResponseStream(httpWebRequest' httpWebResponse' innerException' responseStream' responseSaveStream' callback' state); " is 121.
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,ReadResponseStream,The length of the statement  "                        callback(new HttpWebHelperResult(httpWebRequest' httpWebResponse' exception' null' false' false' responseSaveStream' state)); " is 125.
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyResponseStream,The length of the statement  "                                    callback(new HttpWebHelperResult(httpWebRequest' httpWebResponse' exception' null' false' false' responseSaveStream' state)); " is 125.
Long Statement,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyResponseStream,The length of the statement  "                        callback(new HttpWebHelperResult(httpWebRequest' httpWebResponse' null' innerException' false' false' responseSaveStream' state)); " is 130.
Long Statement,FluentHttp,FluentHttpRequest,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\FluentHttpRequest.cs,ExecuteAsync,The length of the statement  "                        var fluentHttpAsyncResult = new FluentHttpAsyncResult(this' fluentHttpResponse' state' null' ar.CompletedSynchronously' true' false' asyncResult.Exception' asyncResult.InnerException); " is 184.
Long Statement,FluentHttp,FluentHttpRequest,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\FluentHttpRequest.cs,Execute,The length of the statement  "            return new FluentHttpAsyncResult(this' fluentHttpResponse' null' null' true' true' false' httpWebHelperResult.Exception' httpWebHelperResult.InnerException); " is 157.
Long Statement,FluentHttp,FluentHttpRequestBody,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\FluentHttpRequestBody.cs,Append,The length of the statement  "                sb.AppendFormat("{0}={1}&"' FluentHttpRequest.UrlEncode(parameter.Key)' FluentHttpRequest.UrlEncode(parameter.Value.ToString())); " is 129.
Complex Conditional,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||  				(c < 'A' && c > '9') ||  				(c > 'Z' && c < 'a') ||  				(c > 'z')"  is complex.
Complex Conditional,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Magic Number,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[1024 * 4];
Magic Number,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[1024 * 4];
Magic Number,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,ReadStream,The following statement contains a magic number: byte[] buffer = new byte[1024 * 4];
Magic Number,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,ReadStream,The following statement contains a magic number: byte[] buffer = new byte[1024 * 4];
Magic Number,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyStreamAsync,The following statement contains a magic number: byte[] buffer = new byte[1024 * 4];
Magic Number,FluentHttp,HttpWebHelper,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\Core\HttpWebHelper.cs,CopyStreamAsync,The following statement contains a magic number: byte[] buffer = new byte[1024 * 4];
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  				ch = input [i];    				if ((ch < 32 && ch != 9) || ch == 127)  					StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  				ch = input [i];    				if ((ch < 32 && ch != 9) || ch == 127)  					StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  				ch = input [i];    				if ((ch < 32 && ch != 9) || ch == 127)  					StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  				char c = s [i];  				if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  #if NET_4_0  				    || c == '\''  #endif  				) {  					needEncode = true;  					break;  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				switch (s [i]) {  					case '&' :  						output.Append ("&amp;");  						break;  					case '>' :   						output.Append ("&gt;");  						break;  					case '<' :  						output.Append ("&lt;");  						break;  					case '"' :  						output.Append ("&quot;");  						break;  #if NET_4_0  					case '\'':  						output.Append ("&#39;");  						break;  #endif  					case '\uff1c':  						output.Append ("&#65308;");  						break;    					case '\uff1e':  						output.Append ("&#65310;");  						break;  						  					default:  						ch = s [i];  						if (ch > 159 && ch < 256) {  							output.Append ("&#");  							output.Append (((int) ch).ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else  							output.Append (ch);  						break;  				}	  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				switch (s [i]) {  					case '&' :  						output.Append ("&amp;");  						break;  					case '>' :   						output.Append ("&gt;");  						break;  					case '<' :  						output.Append ("&lt;");  						break;  					case '"' :  						output.Append ("&quot;");  						break;  #if NET_4_0  					case '\'':  						output.Append ("&#39;");  						break;  #endif  					case '\uff1c':  						output.Append ("&#65308;");  						break;    					case '\uff1e':  						output.Append ("&#65310;");  						break;  						  					default:  						ch = s [i];  						if (ch > 159 && ch < 256) {  							output.Append ("&#");  							output.Append (((int) ch).ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else  							output.Append (ch);  						break;  				}	  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				char c = s [i];  				if (state == 0) {  					if (c == '&') {  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  						state = 1;  					} else {  						output.Append (c);  					}  					continue;  				}    				if (c == '&') {  					state = 1;  					if (have_trailing_digits) {  						entity.Append (number.ToString (Helpers.InvariantCulture));  						have_trailing_digits = false;  					}    					output.Append (entity.ToString ());  					entity.Length = 0;  					entity.Append ('&');  					continue;  				}    				if (state == 1) {  					if (c == ';') {  						state = 0;  						output.Append (entity.ToString ());  						output.Append (c);  						entity.Length = 0;  					} else {  						number = 0;  						is_hex_value = false;  						if (c != '#') {  							state = 2;  						} else {  							state = 3;  						}  						entity.Append (c);  #if NET_4_0  						rawEntity.Append (c);  #endif  					}  				} else if (state == 2) {  					entity.Append (c);  					if (c == ';') {  						string key = entity.ToString ();  						if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  							key = Entities [key.Substring (1' key.Length - 2)].ToString ();    						output.Append (key);  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  					}  				} else if (state == 3) {  					if (c == ';') {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif  						if (number > 65535) {  							output.Append ("&#");  							output.Append (number.ToString (Helpers.InvariantCulture));  							output.Append (";");  						} else {  							output.Append ((char) number);  						}  						state = 0;  						entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif  						have_trailing_digits = false;  					} else if (is_hex_value &&  Uri.IsHexDigit(c)) {  						number = number * 16 + Uri.FromHex(c);  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (Char.IsDigit (c)) {  						number = number * 10 + ((int) c - '0');  						have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else if (number == 0 && (c == 'x' || c == 'X')) {  						is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif  					} else {  						state = 2;  						if (have_trailing_digits) {  							entity.Append (number.ToString (Helpers.InvariantCulture));  							have_trailing_digits = false;  						}  						entity.Append (c);  					}  				}  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  				//FIXME: what happens when there is an internal error?  				//if (!isUnicode)  				//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  				int idx;  				int i = (int) c;    				result.WriteByte ((byte)'%');  				result.WriteByte ((byte)'u');  				idx = i >> 12;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 8) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = (i >> 4) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				idx = i & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  				return;  			}
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (	(c < '0') ||  				(c < 'A' && c > '9') ||  				(c > 'Z' && c < 'a') ||  				(c > 'z')) {  				if (isUnicode && c > 127) {  					result.WriteByte ((byte)'%');  					result.WriteByte ((byte)'u');  					result.WriteByte ((byte)'0');  					result.WriteByte ((byte)'0');  				}  				else  					result.WriteByte ((byte)'%');  				  				int idx = ((int) c) >> 4;  				result.WriteByte ((byte)hexChars [idx]);  				idx = ((int) c) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  			}  			else  				result.WriteByte ((byte)c);
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (	(c < '0') ||  				(c < 'A' && c > '9') ||  				(c > 'Z' && c < 'a') ||  				(c > 'z')) {  				if (isUnicode && c > 127) {  					result.WriteByte ((byte)'%');  					result.WriteByte ((byte)'u');  					result.WriteByte ((byte)'0');  					result.WriteByte ((byte)'0');  				}  				else  					result.WriteByte ((byte)'%');  				  				int idx = ((int) c) >> 4;  				result.WriteByte ((byte)hexChars [idx]);  				idx = ((int) c) & 0x0F;  				result.WriteByte ((byte)hexChars [idx]);  			}  			else  				result.WriteByte ((byte)c);
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  				byte [] bIn = Encoding.UTF8.GetBytes (c.ToString ());  				for (int i = 0; i < bIn.Length; i++) {  					result.WriteByte ((byte) '%');  					int idx = ((int) bIn [i]) >> 4;  					result.WriteByte ((byte) hexChars [idx]);  					idx = ((int) bIn [i]) & 0x0F;  					result.WriteByte ((byte) hexChars [idx]);  				}  			}  			else if (c == ' ') {  				result.WriteByte ((byte) '%');  				result.WriteByte ((byte) '2');  				result.WriteByte ((byte) '0');  			}  			else  				result.WriteByte ((byte) c);
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  				byte [] bIn = Encoding.UTF8.GetBytes (c.ToString ());  				for (int i = 0; i < bIn.Length; i++) {  					result.WriteByte ((byte) '%');  					int idx = ((int) bIn [i]) >> 4;  					result.WriteByte ((byte) hexChars [idx]);  					idx = ((int) bIn [i]) & 0x0F;  					result.WriteByte ((byte) hexChars [idx]);  				}  			}  			else if (c == ' ') {  				result.WriteByte ((byte) '%');  				result.WriteByte ((byte) '2');  				result.WriteByte ((byte) '0');  			}  			else  				result.WriteByte ((byte) c);
Magic Number,FluentHttp.External,HttpEncoder,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  				byte [] bIn = Encoding.UTF8.GetBytes (c.ToString ());  				for (int i = 0; i < bIn.Length; i++) {  					result.WriteByte ((byte) '%');  					int idx = ((int) bIn [i]) >> 4;  					result.WriteByte ((byte) hexChars [idx]);  					idx = ((int) bIn [i]) & 0x0F;  					result.WriteByte ((byte) hexChars [idx]);  				}  			}  			else if (c == ' ') {  				result.WriteByte ((byte) '%');  				result.WriteByte ((byte) '2');  				result.WriteByte ((byte) '0');  			}  			else  				result.WriteByte ((byte) c);
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255) {  				foreach (byte b in e.GetBytes (new char[] { ch }))  					buf.Add (b);  			} else  				buf.Add ((byte)ch);
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				ch = s [i];  				if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  					if (s [i + 1] == 'u' && i + 5 < len) {  						// unicode hex sequence  						xchar = GetChar (s' i + 2' 4);  						if (xchar != -1) {  							WriteCharBytes (bytes' (char)xchar' e);  							i += 5;  						} else  							WriteCharBytes (bytes' '%'' e);  					} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  						WriteCharBytes (bytes' (char)xchar' e);  						i += 2;  					} else {  						WriteCharBytes (bytes' '%'' e);  					}  					continue;  				}    				if (ch == '+')  					WriteCharBytes (bytes' ' '' e);  				else  					WriteCharBytes (bytes' ch' e);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  				return c - 'a' + 10;
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  				return c - 'A' + 10;
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				int current = GetInt (bytes [i]);  				if (current == -1)  					return -1;  				value = (value << 4) + current;  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				char c = str [i];  				if (c > 127)  					return -1;    				int current = GetInt ((byte) c);  				if (current == -1)  					return -1;  				val = (val << 4) + current;  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				char c = str [i];  				if (c > 127)  					return -1;    				int current = GetInt ((byte) c);  				if (current == -1)  					return -1;  				val = (val << 4) + current;  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {  						if (acc.Length > 0) {  							output.Append (GetChars (acc' e));  							acc.SetLength (0);  						}  						xchar = GetChar (bytes' i + 2' 4);  						if (xchar != -1) {  							output.Append ((char) xchar);  							i += 5;  							continue;  						}  					} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  						acc.WriteByte ((byte) xchar);  						i += 2;  						continue;  					}  				}    				if (acc.Length > 0) {  					output.Append (GetChars (acc' e));  					acc.SetLength (0);  				}    				if (bytes [i] == '+') {  					output.Append (' ');  				} else {  					output.Append ((char) bytes [i]);  				}  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++){  				char c = (char) bytes [i];  				if (c == '+') {  					c = ' ';  				} else if (c == '%' && i < end - 2) {  					int xchar = GetChar (bytes' i + 1' 2);  					if (xchar != -1) {  						c = (char) xchar;  						i += 2;  					}  				}  				result.WriteByte ((byte) c);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++){  				char c = (char) bytes [i];  				if (c == '+') {  					c = ' ';  				} else if (c == '%' && i < end - 2) {  					int xchar = GetChar (bytes' i + 1' 2);  					if (xchar != -1) {  						c = (char) xchar;  						i += 2;  					}  				}  				result.WriteByte ((byte) c);  			}
Magic Number,FluentHttp.External,HttpUtility,C:\repos\prabirshrestha_FluentHttp\src\FluentHttp\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++){  				char c = (char) bytes [i];  				if (c == '+') {  					c = ' ';  				} else if (c == '%' && i < end - 2) {  					int xchar = GetChar (bytes' i + 1' 2);  					if (xchar != -1) {  						c = (char) xchar;  						i += 2;  					}  				}  				result.WriteByte ((byte) c);  			}
