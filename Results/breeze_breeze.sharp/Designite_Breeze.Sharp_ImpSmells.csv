Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Breeze.Sharp,EntityAspect,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityAspect.cs,SetNpValueCore,Cyclomatic complexity of the method is 9
Complex Method,Breeze.Sharp,CsdlMetadataProcessor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CsdlMetadataProcessor.cs,ParseCsdlSimpleProperty,Cyclomatic complexity of the method is 8
Complex Method,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,SaveChanges,Cyclomatic complexity of the method is 8
Long Identifier,Breeze.Sharp,CacheQueryOptions,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CacheQueryOptions.cs,CacheQueryOptions,The length of the parameter useSql92CompliantStringComparison is 33.
Long Identifier,Breeze.Sharp,RequiredValidator,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Validators.cs,,The length of the parameter __defaultTreatEmptyStringAsNull is 31.
Long Statement,Breeze.Sharp,CacheQueryExpressionVisitor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CacheQueryExpressionVisitor.cs,ProcessOrderByExpr,The length of the statement  "        // var orderByMethods = TypeFns.FindGenericMethods(typeof(Enumerable)' methodName' BindingFlags.Public | BindingFlags.Static' genericArgs).ToList(); " is 148.
Long Statement,Breeze.Sharp,WebApiDataServiceAdapter,C:\repos\breeze_breeze.sharp\Breeze.Sharp\DataServiceAdapter.WebApi.cs,BuildOriginalValuesMapNode,The length of the statement  "          var ovmNodes = ((IEnumerable) co).Cast<IComplexObject>().Select(co2 => BuildOriginalValuesMapNode(co2.ComplexAspect' nc)); " is 122.
Long Statement,Breeze.Sharp,WebApiDataServiceAdapter,C:\repos\breeze_breeze.sharp\Breeze.Sharp\DataServiceAdapter.WebApi.cs,ProcessSaveResult,The length of the statement  "      var keyMappings = kms.Select(km => ToEntityKeys(km' entityManager.MetadataStore)).ToDictionary(tpl => tpl.Item1' tpl => tpl.Item2); " is 131.
Long Statement,Breeze.Sharp,EntityQueryBuilder,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityQueryBuilder.cs,BuildQuery,The length of the statement  "        throw new ArgumentException("The EntityQueryBuilder.BuildQuery method requires that the 'keys' parameter consist of EntityKeys all with the same EntityType."); " is 159.
Long Statement,Breeze.Sharp,StructuralProperty,C:\repos\breeze_breeze.sharp\Breeze.Sharp\StructuralProperty.cs,Check,The length of the statement  "      var msg = "Metadata mismatch - values do not match between server and client for " + FormatName() + " Metadata property: " + name; " is 130.
Long Statement,Breeze.Sharp,ComplexAspect,C:\repos\breeze_breeze.sharp\Breeze.Sharp\ComplexAspect.cs,InitializeDefaultValues,The length of the statement  "          Debug.WriteLine("Exception caught during initialization of {0}.{1}: {2}"' this.ComplexObject.GetType().Name' dp.Name' e.Message); " is 129.
Long Statement,Breeze.Sharp,EntityAspect,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityAspect.cs,SetDpValueComplex,The length of the statement  "        throw new Exception(String.Format("You cannot set the '{0}' property to null because it's datatype is the ComplexType: '{1}'"' property.Name' property.ComplexType.Name)); " is 170.
Long Statement,Breeze.Sharp,EntityAspect,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityAspect.cs,ManageAttachment,The length of the statement  "            throw new Exception("An Entity cannot be attached to an entity in another EntityManager. One of the two entities must be detached first."); " is 139.
Long Statement,Breeze.Sharp,EntityAspect,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityAspect.cs,OnErrorsChanged,The length of the statement  "      // _inErrorsChanged is needed because some environments try to reinvoke validation every time in the ErrorsChanged event fires. " is 127.
Long Statement,Breeze.Sharp,EntityGroup,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityGroup.cs,AddToKeyMap,The length of the statement  "        throw new InvalidOperationException("An entity with this key: " + aspect.EntityKey.ToString() + " already exists in this EntityManager"); " is 137.
Long Statement,Breeze.Sharp,EntityQuery,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityQuery.cs,CheckEm,The length of the statement  "        throw new ArgumentException("entityManager parameter is null and this EntityQuery does not have its own EntityManager specified"); " is 130.
Long Statement,Breeze.Sharp,JsonEntityConverter,C:\repos\breeze_breeze.sharp\Breeze.Sharp\JsonEntityConverter.cs,PopulateEntity,The length of the statement  "      } else if (_mappingContext.MergeStrategy == MergeStrategy.OverwriteChanges || aspect.EntityState == EntityState.Unchanged) { " is 124.
Long Statement,Breeze.Sharp,JsonEntityConverter,C:\repos\breeze_breeze.sharp\Breeze.Sharp\JsonEntityConverter.cs,PopulateEntity,The length of the statement  "        aspect.OnEntityChanged(_mappingContext.LoadingOperation == LoadingOperation.Query ? EntityAction.MergeOnQuery : EntityAction.MergeOnSave); " is 138.
Long Statement,Breeze.Sharp,CsdlMetadataProcessor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CsdlMetadataProcessor.cs,ParseCsdlComplexProperty,The length of the statement  "        MetadataStore.OnMetadataMismatch(parentType.Name' name' MetadataMismatchTypes.InconsistentCLRPropertyDefinition' detail); " is 121.
Long Statement,Breeze.Sharp,CsdlMetadataProcessor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CsdlMetadataProcessor.cs,IsIdentityProperty,The length of the statement  "      var subProp = csdlProperty.Properties().FirstOrDefault(p => p.Name.IndexOf("StoreGeneratedPattern"' StringComparison.Ordinal) > 0); " is 131.
Long Statement,Breeze.Sharp,CsdlMetadataProcessor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CsdlMetadataProcessor.cs,CheckProperty,The length of the statement  "      MetadataStore.OnMetadataMismatch(prop.ParentType.Name' prop.Name' MetadataMismatchTypes.InconsistentCLRPropertyDefinition' detail); " is 131.
Long Statement,Breeze.Sharp,EntityType,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityType.cs,Check,The length of the statement  "      var msg = String.Format("EntityType metadata mismatch. EntityType: '{0}'.  Metadata property: '{1}'.  Client value: '{2}''  Server value: '{3}'"' " is 145.
Long Statement,Breeze.Sharp,NamingConvention,C:\repos\breeze_breeze.sharp\Breeze.Sharp\NamingConvention.cs,TestPropertyName,The length of the statement  "        throw new Exception("NamingConvention: " + this.Name + " does not roundtrip the following value correctly: " + testVal); " is 120.
Long Statement,Breeze.Sharp,DataProperty,C:\repos\breeze_breeze.sharp\Breeze.Sharp\DataProperty.cs,UpdateFromJNode,The length of the statement  "      ConcurrencyMode = (ConcurrencyMode)Enum.Parse(typeof(ConcurrencyMode)' jNode.Get<String>("concurrencyMode"' ConcurrencyMode.None.ToString())); " is 142.
Long Statement,Breeze.Sharp,DataProperty,C:\repos\breeze_breeze.sharp\Breeze.Sharp\DataProperty.cs,ToJNode,The length of the statement  "      jn.AddPrimitive("concurrencyMode"' this.ConcurrencyMode == ConcurrencyMode.None ? null : this.ConcurrencyMode.ToString()); " is 122.
Long Statement,Breeze.Sharp,MetadataStore,C:\repos\breeze_breeze.sharp\Breeze.Sharp\MetadataStore.cs,AddDataService,The length of the statement  "          throw new Exception("A dataService with this name '" + dataService.ServiceName + "' already exists in this MetadataStore"); " is 123.
Long Statement,Breeze.Sharp,MetadataStore,C:\repos\breeze_breeze.sharp\Breeze.Sharp\MetadataStore.cs,ToJNode,The length of the statement  "        jo.AddMap("resourceEntityTypeMap"' this._resourceNameEntityTypeMap.ToDictionary(kvp => kvp.Key' kvp => kvp.Value.Name)); " is 120.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,CheckAuthorizedThreadId,The length of the statement  "      //  String msg = "An EntityManager can only execute on a single thread. This EntityManager is authorized to execute on the thread with id=’{0}’; "; " is 147.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,CheckAuthorizedThreadId,The length of the statement  "      //  msg += "Please review our documentation on multi-threading issues and the EntityManager.AuthorizedThreadId property."; " is 122.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,ExecuteQuery,The length of the statement  "      var fetchStrategy = query.QueryOptions.FetchStrategy ?? this.DefaultQueryOptions.FetchStrategy ?? QueryOptions.Default.FetchStrategy; " is 133.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,ExecuteQuery,The length of the statement  "      var mergeStrategy = query.QueryOptions.MergeStrategy ?? this.DefaultQueryOptions.MergeStrategy ?? QueryOptions.Default.MergeStrategy; " is 133.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,ImportEntities,The length of the statement  "        ek => this.GetEntityByKey(ek) == null ? ek : EntityKey.Create(ek.EntityType' KeyGenerator.GetNextTempId(ek.EntityType.KeyProperties.First()))  " is 141.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,ImportEntities,The length of the statement  "      var mergeStrategy = (importOptions.MergeStrategy ?? this.DefaultQueryOptions.MergeStrategy ?? QueryOptions.Default.MergeStrategy).Value; " is 136.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,ExportEntityGroupsAndTempKeys,The length of the statement  "        map = aspects.GroupBy(ea => ea.EntityGroup.EntityType).ToDictionary(grp => grp.Key.Name' grp => ExportAspects(grp' grp.Key)); " is 125.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,PrepareForAttach,The length of the statement  "        throw new Exception("Cannot attach this entity because the EntityType (" + aspect.EntityType.Name + ") and MetadataStore associated with this entity does not match this EntityManager's MetadataStore."); " is 202.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,InitializeEntityKey,The length of the statement  "              ") to an EntityManager without first setting its key or setting its entityType 'AutoGeneratedKeyType' property to something other than 'None'"); " is 144.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,GenerateId,The length of the statement  "          "Cannot call GenerateId on '{0}.{1}'. GenerateId cannot be called on ForeignKey properties ( even if they are also part of a PrimaryKey).  Call GenerateId instead on the 'source' primary key."' " is 193.
Long Statement,Breeze.Sharp,EntityManager,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityManager.cs,GenerateId,The length of the statement  "        String msg = String.Format("The EntityType '{0}' for Property '{1}' must be of EntityType '{2}' or one of its subtypes"' entityProperty.ParentType' entityProperty.Name' entityType); " is 181.
Long Statement,Breeze.Sharp,ValidatorExtensions,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Validator.cs,WithMessage,The length of the statement  "      return WithMessage(validator' new LocalizedMessage(key: validator.LocalizedKey' baseName: baseName' assembly: assembly)); " is 121.
Long Statement,Breeze.Sharp.Core,MethodReflector,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Core\MethodReflector.cs,GetMethodByExample,The length of the statement  "      //Example: var method = TypeFns.GetMethodByExample((IQueryable<String> s) => s.FirstOrDefault(s1 => s1.Any())' source.ElementType); " is 131.
Long Statement,Breeze.Sharp.Core,NotifiableCollection<T>,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Core\NotifiableCollection.cs,RemoveItem,The length of the statement  "      this.RaiseCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' removedItem' index)); " is 124.
Long Statement,Breeze.Sharp.Core,NotifiableCollection<T>,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Core\NotifiableCollection.cs,SetItem,The length of the statement  "      this.RaiseCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace' originalItem' item' index)); " is 132.
Long Statement,Breeze.Sharp.Core,NotifiableCollection<T>,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Core\NotifiableCollection.cs,CheckReentrancy,The length of the statement  "      if ((this._monitor.Busy && (this.CollectionChanged != null)) && (this.CollectionChanged.GetInvocationList().Length > 1)) { " is 122.
Long Statement,Breeze.Sharp.Core,NotifiableCollection<T>,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Core\NotifiableCollection.cs,CheckReentrancy,The length of the statement  "        throw new InvalidOperationException("There are additional attempts to change this hash set during a CollectionChanged event."); " is 127.
Magic Number,Breeze.Sharp,CacheQueryExpressionVisitor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CacheQueryExpressionVisitor.cs,IsResourceSetExpression,The following statement contains a magic number: return (int)expr.NodeType == 10000;
Magic Number,Breeze.Sharp,CacheQueryExpressionVisitor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CacheQueryExpressionVisitor.cs,ProcessOrderByExpr,The following statement contains a magic number: try {          var args = mce.Arguments;          if (args.Count != 2) return mce;          var lambda = args[1] as LambdaExpression;          if (lambda == null) return mce;          if (lambda.ReturnType != returnType) return mce;            // convert from method Queryable<A'B>.OrderBy( a' b) -> Queryable<A' B>.OrderBy( a' b' IComparer<B>);          var genericArgs = mce.Method.GetGenericArguments();          // var orderByMethods = TypeFns.FindGenericMethods(typeof(Enumerable)' methodName' BindingFlags.Public | BindingFlags.Static' genericArgs).ToList();          var methodCandidates = typeof(Enumerable).GetTypeInfo().DeclaredMethods            .Where(mi => mi.Name == methodName && mi.IsGenericMethod && (mi.IsPublic || mi.IsStatic));          var orderByMethods = methodCandidates.Where(mi => mi.GetGenericArguments().Length == genericArgs.Length)            .Select(mi => mi.MakeGenericMethod(genericArgs));          var selectedMethod = orderByMethods.First(m => m.GetParameters().Count() == 3);          Expression comparerExpr;          if (returnType == typeof(Guid)) {            comparerExpr = Expression.Constant(new SqlServerGuidComparer());          } else if (returnType == typeof(String)) {            var stringComparer = GetStringComparer(_cacheQueryOptions.StringComparison);            comparerExpr = Expression.Constant(stringComparer);          } else {            return mce;          }          var argsList = args.ToList();          argsList.Add(comparerExpr);          var expr = Expression.Call(selectedMethod' argsList);          return expr;        } catch (Exception e) {          Debug.WriteLine("Unable to handle CacheQuery " + returnType + " ordering:" + e.Message);          return null;        }
Magic Number,Breeze.Sharp,CacheQueryExpressionVisitor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CacheQueryExpressionVisitor.cs,ProcessOrderByExpr,The following statement contains a magic number: try {          var args = mce.Arguments;          if (args.Count != 2) return mce;          var lambda = args[1] as LambdaExpression;          if (lambda == null) return mce;          if (lambda.ReturnType != returnType) return mce;            // convert from method Queryable<A'B>.OrderBy( a' b) -> Queryable<A' B>.OrderBy( a' b' IComparer<B>);          var genericArgs = mce.Method.GetGenericArguments();          // var orderByMethods = TypeFns.FindGenericMethods(typeof(Enumerable)' methodName' BindingFlags.Public | BindingFlags.Static' genericArgs).ToList();          var methodCandidates = typeof(Enumerable).GetTypeInfo().DeclaredMethods            .Where(mi => mi.Name == methodName && mi.IsGenericMethod && (mi.IsPublic || mi.IsStatic));          var orderByMethods = methodCandidates.Where(mi => mi.GetGenericArguments().Length == genericArgs.Length)            .Select(mi => mi.MakeGenericMethod(genericArgs));          var selectedMethod = orderByMethods.First(m => m.GetParameters().Count() == 3);          Expression comparerExpr;          if (returnType == typeof(Guid)) {            comparerExpr = Expression.Constant(new SqlServerGuidComparer());          } else if (returnType == typeof(String)) {            var stringComparer = GetStringComparer(_cacheQueryOptions.StringComparison);            comparerExpr = Expression.Constant(stringComparer);          } else {            return mce;          }          var argsList = args.ToList();          argsList.Add(comparerExpr);          var expr = Expression.Call(selectedMethod' argsList);          return expr;        } catch (Exception e) {          Debug.WriteLine("Unable to handle CacheQuery " + returnType + " ordering:" + e.Message);          return null;        }
Magic Number,Breeze.Sharp,EntityQueryBuilder,C:\repos\breeze_breeze.sharp\Breeze.Sharp\EntityQueryBuilder.cs,GetFuncType,The following statement contains a magic number: if (typeArgs == null || typeArgs.Length < 1 || typeArgs.Length > 5) throw new ArgumentException();
Magic Number,Breeze.Sharp,DataType,C:\repos\breeze_breeze.sharp\Breeze.Sharp\DataType.cs,FromEdmType,The following statement contains a magic number: if (parts.Length > 1) {          var simpleName = parts[1];          if (simpleName == "image") {            // hack            dt = DataType.Byte;          } else if (parts.Length == 2) {            dt = DataType.FromName(simpleName);          } else {            // enum            // dt = DataType.Int32;            dt = DataType.Undefined;          }        }
Magic Number,Breeze.Sharp,TypeNameInfo,C:\repos\breeze_breeze.sharp\Breeze.Sharp\TypeNameInfo.cs,FromStructuralTypeName,The following statement contains a magic number: if (ix == -1) {          shortName = name;          ns = String.Empty;        } else {          shortName = name.Substring(0' ix);          ns = name.Substring(ix + 2);        }
Magic Number,Breeze.Sharp,CsdlMetadataProcessor,C:\repos\breeze_breeze.sharp\Breeze.Sharp\CsdlMetadataProcessor.cs,ParseCsdlDataProperty,The following statement contains a magic number: if (typeParts.Length == 2) {          dp = ParseCsdlSimpleProperty(parentType' csdlProperty' keyNamesOnServer);        } else {          if (IsEnumType(csdlProperty)) {            dp = ParseCsdlSimpleProperty(parentType' csdlProperty' keyNamesOnServer);            dp.EnumTypeName = (String)csdlProperty["type"];          } else {            dp = ParseCsdlComplexProperty(parentType' csdlProperty);          }        }
Magic Number,Breeze.Sharp,MetadataStore,C:\repos\breeze_breeze.sharp\Breeze.Sharp\MetadataStore.cs,FetchMetadata,The following statement contains a magic number: if (metadata.Substring(0' 1) == "\"" && metadata.Substring(metadata.Length - 1' 1) == "\"") {          metadata = Regex.Unescape(metadata.Substring(1' metadata.Length - 2));        }
Magic Number,Breeze.Sharp.Core,EnumerableFns,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Core\EnumerableFns.cs,GetAggregateHashCode,The following statement contains a magic number: unchecked {          int hash = 17;          foreach (Object item in items) {            if (item != null) {              hash = hash * 23 + item.GetHashCode();            }          }          return hash;        }
Magic Number,Breeze.Sharp.Core,EnumerableFns,C:\repos\breeze_breeze.sharp\Breeze.Sharp\Core\EnumerableFns.cs,GetAggregateHashCode,The following statement contains a magic number: unchecked {          int hash = 17;          foreach (Object item in items) {            if (item != null) {              hash = hash * 23 + item.GetHashCode();            }          }          return hash;        }
