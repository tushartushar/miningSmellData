Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,client_UploadDataCompleted,Cyclomatic complexity of the method is 12
Complex Method,Plugin_IPQuery,IPOnlineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOnlineQuery.cs,client_UploadDataCompleted_json,Cyclomatic complexity of the method is 11
Complex Method,Plugin_IPQuery,IPOnlineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOnlineQuery.cs,GetIpInfo,Cyclomatic complexity of the method is 10
Long Statement,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The length of the statement  "	//_otherTable.Add(new Panel { Content = ColumnTitle("From IPB")' Padding = new Padding(1' 0' 0' 0) }' 0' 3' true' false); " is 121.
Long Statement,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The length of the statement  "	//_otherTable.Add(new Panel { Content = ColumnTitle("From MaxMind GeoLite2")' Padding = new Padding(0' 0' 1' 0) }' 2' 3' true' false); " is 134.
Long Statement,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The length of the statement  "		long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3])); " is 121.
Long Statement,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The length of the statement  "			if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) { " is 135.
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _textBoxInput = new TextBox {  	Size = new Size (200' -1)  };  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _buttonOnline = new Button {  	Text = "Online Query"'  	Size = new Size (150' -1)  };  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _buttonOffline = new Button {  	Text = "Offline Query"'  	Size = new Size (150' -1)  };  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _otherTable = new TableLayout (3' 5);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _otherTable = new TableLayout (3' 5);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _otherTable.Add (new Panel {  	Content = ColumnTitle ("From Sina")'  	Padding = new Padding (0' 0' 1' 0)  }' 2' 1' true' false);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _otherTable.Add (new Panel {  	Content = _labelA'  	Padding = cellPaddingLeft  }' 0' 2' true' true);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _otherTable.Add (new Panel {  	Content = _labelB'  	Padding = cellPaddingLeft  }' 1' 2' true' true);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _otherTable.Add (new Panel {  	Content = _labelC'  	Padding = cellPadding  }' 2' 2' true' true);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _otherTable.Add (new Panel {  	Content = _labelC'  	Padding = cellPadding  }' 2' 2' true' true);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _mainTable = new TableLayout (1' 2) {  	BackgroundColor = Colors.LightGrey  };  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _mainTable.Add (new Panel {  	Content = _lableIp = new Label {  		Text = ""'  		Font = new Font (FontFamilies.Sans' 20)'  		VerticalAlign = VerticalAlign.Middle'  		HorizontalAlign = HorizontalAlign.Center'  		Size = new Size (-1' 100)'  		BackgroundColor = Colors.White  	}'  	Padding = cellPadding  }' 0' 0' true' false);  
Magic Number,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,Init,The following statement contains a magic number: _mainTable.Add (new Panel {  	Content = _lableIp = new Label {  		Text = ""'  		Font = new Font (FontFamilies.Sans' 20)'  		VerticalAlign = VerticalAlign.Middle'  		HorizontalAlign = HorizontalAlign.Center'  		Size = new Size (-1' 100)'  		BackgroundColor = Colors.White  	}'  	Padding = cellPadding  }' 0' 0' true' false);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: Array.Copy (dataBuffer' 4' indexBuffer' 0' indexLength);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: for (int loop = 0; loop < 256; loop++) {  	index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: for (int loop = 0; loop < 256; loop++) {  	index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: for (int loop = 0; loop < 256; loop++) {  	index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: for (int loop = 0; loop < 256; loop++) {  	index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: for (int loop = 0; loop < 256; loop++) {  	index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: for (int loop = 0; loop < 256; loop++) {  	index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: for (int loop = 0; loop < 256; loop++) {  	index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,IPOfflineQuery,The following statement contains a magic number: index [loop] = BytesToLong (indexBuffer [loop * 4 + 3]' indexBuffer [loop * 4 + 2]' indexBuffer [loop * 4 + 1]' indexBuffer [loop * 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,BytesToLong,The following statement contains a magic number: return ((uint)a << 24) | ((uint)b << 16) | ((uint)c << 8) | (uint)d;  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,BytesToLong,The following statement contains a magic number: return ((uint)a << 24) | ((uint)b << 16) | ((uint)c << 8) | (uint)d;  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,BytesToLong,The following statement contains a magic number: return ((uint)a << 24) | ((uint)b << 16) | ((uint)c << 8) | (uint)d;  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: try {  	if (!IsValidIP (ip)) {  		throw new FormatException ("Sorry' please input valid ip");  	}  	var ips = ip.Split ('.');  	int ipPrefixValue = int.Parse (ips [0]);  	long ip2LongValue = BytesToLong (byte.Parse (ips [0])' byte.Parse (ips [1])' byte.Parse (ips [2])' byte.Parse (ips [3]));  	uint start = index [ipPrefixValue];  	int maxCompLen = offset - 1028;  	long indexOffset = -1;  	int indexLength = -1;  	byte b = 0;  	for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  		if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  			indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  			indexLength = 0xFF & indexBuffer [start + 7];  			break;  		}  	}  	var areaBytes = new byte[indexLength];  	Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  	return Encoding.UTF8.GetString (areaBytes).Split ('\t');  } catch (Exception ex) {  	return new[] {  		ex.Message  	};  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: for (start = start * 8 + 1024; start < maxCompLen; start += 8) {  	if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  		indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  		indexLength = 0xFF & indexBuffer [start + 7];  		break;  	}  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: start = start * 8 + 1024
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: start = start * 8 + 1024
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: start += 8
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  	indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  	indexLength = 0xFF & indexBuffer [start + 7];  	break;  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  	indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  	indexLength = 0xFF & indexBuffer [start + 7];  	break;  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  	indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  	indexLength = 0xFF & indexBuffer [start + 7];  	break;  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  	indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  	indexLength = 0xFF & indexBuffer [start + 7];  	break;  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  	indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  	indexLength = 0xFF & indexBuffer [start + 7];  	break;  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: if (BytesToLong (indexBuffer [start + 0]' indexBuffer [start + 1]' indexBuffer [start + 2]' indexBuffer [start + 3]) >= ip2LongValue) {  	indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  	indexLength = 0xFF & indexBuffer [start + 7];  	break;  }  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: indexOffset = BytesToLong (b' indexBuffer [start + 6]' indexBuffer [start + 5]' indexBuffer [start + 4]);  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: indexLength = 0xFF & indexBuffer [start + 7];  
Magic Number,Plugin_IPQuery,IPOfflineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOfflineQuery.cs,Find,The following statement contains a magic number: Array.Copy (dataBuffer' offset + (int)indexOffset - 1024' areaBytes' 0' indexLength);  
Missing Default,Plugin_IPQuery.Interface,PanelIPQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\Interface\PanelIPQuery.cs,client_UploadDataCompleted,The following switch statement is missing a default case: switch (e.Token) {  case "taobao":  	_labelA.Text = result;  	break;  case "tencent":  	_labelB.Text = result;  	break;  case "sina":  	_labelC.Text = result;  	break;  case "17mon":  	_lableIp.Text = result;  	break;  }  
Missing Default,Plugin_IPQuery,IPOnlineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOnlineQuery.cs,client_UploadDataCompleted_html,The following switch statement is missing a default case: switch (token) {  case "17mon":  	data = Normalize17Mon (srcString);  	break;  }  
Missing Default,Plugin_IPQuery,IPOnlineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOnlineQuery.cs,client_UploadDataCompleted_json,The following switch statement is missing a default case: switch (token) {  case "taobao":  	data = NormalizeTaobao (json);  	break;  case "sina":  	data = NormalizeSina (json);  	break;  case "tencent":  	data = NormalizeTencent (json);  	break;  }  
Missing Default,Plugin_IPQuery,IPOnlineQuery,F:\newReposMay17\keepwn_Altman\Source\Plugin_IPQuery\IPOnlineQuery.cs,GetIpInfo,The following switch statement is missing a default case: switch (type) {  case "taobao":  case "sina":  case "tencent":  	GetJson (url' post' type);  	break;  case "17mon":  	url = "http://tool.17mon.cn/ip.php";  	post = string.Format ("ip={0}"' ip);  	GetHtml (url' post' type);  	break;  }  
