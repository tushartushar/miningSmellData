Implementation smell,Namespace,Class,File,Method,Description
Long Method,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The method has 148 lines of code.
Complex Method,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,ShowTab,Cyclomatic complexity of the method is 8
Complex Method,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,OnResize,Cyclomatic complexity of the method is 8
Complex Method,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,CustomPaint,Cyclomatic complexity of the method is 11
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,ShowTab,The length of the statement  "				TabPage tab = this._TabPages.Find(delegate(TabPage page){return page.Name.Equals(key' StringComparison.OrdinalIgnoreCase);}); " is 125.
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,WndProc,The length of the statement  "					this.OnHScroll(new ScrollEventArgs(((ScrollEventType)NativeMethods.LoWord(m.WParam))'_oldValue' NativeMethods.HiWord(m.WParam)' ScrollOrientation.HorizontalScroll)); " is 165.
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,OnMouseClick,The length of the statement  "			} else if (!this.DesignMode && index > -1 && this._StyleProvider.ShowTabCloser && this.GetTabCloserRect(index).Contains(this.MousePosition)){ " is 141.
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,CustomPaint,The length of the statement  "						this._TabBufferGraphics.Clip = new Region(new RectangleF(this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height)); " is 171.
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,DrawTabImage,The length of the statement  "			if (this.TabPages[index].ImageIndex > -1 && this.ImageList != null && this.ImageList.Images.Count > this.TabPages[index].ImageIndex){ " is 133.
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,DrawTabImage,The length of the statement  "			} else if ((!string.IsNullOrEmpty(this.TabPages[index].ImageKey) && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)) " is 152.
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The length of the statement  "					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16); " is 199.
Long Statement,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The length of the statement  "					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16); " is 198.
Long Statement,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The length of the statement  "						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical); " is 122.
Long Statement,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The length of the statement  "						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal); " is 124.
Long Statement,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The length of the statement  "						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal); " is 124.
Long Statement,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,GetCurrentThemeIndex,The length of the statement  "			if (VisualStyleInformation.IsSupportedByOS && VisualStyleInformation.IsEnabledByUser && Application.RenderWithVisualStyles) " is 123.
Long Statement,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The length of the statement  "					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90); " is 128.
Long Statement,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The length of the statement  "					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90); " is 128.
Long Statement,Altman,Program,C:\repos\keepwn_Altman\Source\Altman.WinForm\Program.cs,Main,The length of the statement  "				var appDomain = AppDomain.CreateDomain("Host_AppDomain"' AppDomain.CurrentDomain.Evidence' setup' trustedLoadFromRemoteSource); " is 127.
Complex Conditional,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,OnMouseClick,The conditional expression  "index > -1 && this.TabImageClick != null  			    && (this.TabPages[index].ImageIndex > -1 || !string.IsNullOrEmpty(this.TabPages[index].ImageKey))  			    && this.GetTabImageRect(index).Contains(this.MousePosition)"  is complex.
Complex Conditional,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,OnMouseClick,The conditional expression  "!this.DesignMode && index > -1 && this._StyleProvider.ShowTabCloser && this.GetTabCloserRect(index).Contains(this.MousePosition)"  is complex.
Complex Conditional,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,DrawTabImage,The conditional expression  "(!string.IsNullOrEmpty(this.TabPages[index].ImageKey) && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase))  			           && this.ImageList != null && this.ImageList.Images.ContainsKey(this.TabPages[index].ImageKey)"  is complex.
Complex Conditional,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The conditional expression  "this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))"  is complex.
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,CustomPaint,The following statement contains a magic number: if (this.Width > 0 && this.Height > 0){  				if (this._BackImage == null){  					//	Cached Background Image  					this._BackImage = new Bitmap(this.Width' this.Height);  					Graphics backGraphics = Graphics.FromImage(this._BackImage);  					backGraphics.Clear(Color.Transparent);  					this.PaintTransparentBackground(backGraphics' this.ClientRectangle);  				}  		  				this._BackBufferGraphics.Clear(Color.Transparent);  				this._BackBufferGraphics.DrawImageUnscaled(this._BackImage' 0' 0);  	  				this._TabBufferGraphics.Clear(Color.Transparent);  				  				if (this.TabCount > 0) {  	  					//	When top or bottom and scrollable we need to clip the sides from painting the tabs.  					//	Left and right are always multiline.  					if (this.Alignment <= TabAlignment.Bottom && !this.Multiline){  						this._TabBufferGraphics.Clip = new Region(new RectangleF(this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  					}  					  					//	Draw each tabpage from right to left.  We do it this way to handle  					//	the overlap correctly.  					if (this.Multiline) {  						for (int row = 0; row < this.RowCount; row++) {  							for (int index = this.TabCount - 1; index >= 0; index--) {  								if (index != this.SelectedIndex && (this.RowCount == 1 || this.GetTabRow(index) == row)) {  									this.DrawTabPage(index' this._TabBufferGraphics);  								}  							}  						}  					} else {  						for (int index = this.TabCount - 1; index >= 0; index--) {  							if (index != this.SelectedIndex) {  								this.DrawTabPage(index' this._TabBufferGraphics);  							}  						}  					}  	  					//	The selected tab must be drawn last so it appears on top.  					if (this.SelectedIndex > -1) {  						this.DrawTabPage(this.SelectedIndex' this._TabBufferGraphics);  					}  				}  				this._TabBufferGraphics.Flush();  				  				//	Paint the tabs on top of the background  				  				// Create a new color matrix and set the alpha value to 0.5  				ColorMatrix alphaMatrix = new ColorMatrix();  				alphaMatrix.Matrix00 = alphaMatrix.Matrix11 = alphaMatrix.Matrix22 = alphaMatrix.Matrix44 = 1;  				alphaMatrix.Matrix33 = this._StyleProvider.Opacity;  				  				// Create a new image attribute object and set the color matrix to  				// the one just created  				using (ImageAttributes alphaAttributes = new ImageAttributes()){  					  					alphaAttributes.SetColorMatrix(alphaMatrix);  					  					// Draw the original image with the image attributes specified  					this._BackBufferGraphics.DrawImage(this._TabBuffer'  					                                   new Rectangle(0'0'this._TabBuffer.Width' this._TabBuffer.Height)'  					                                   0'0'this._TabBuffer.Width' this._TabBuffer.Height' GraphicsUnit.Pixel'  					                                   alphaAttributes);  				}  				  				this._BackBufferGraphics.Flush();  				  				//	Now paint this to the screen  				  				  				//	We want to paint the whole tabstrip and border every time  				//	so that the hot areas update correctly' along with any overlaps  				  				//	paint the tabs etc.  				if (this.RightToLeftLayout){  					screenGraphics.DrawImageUnscaled(this._BackBuffer' -1' 0);  				} else {  					screenGraphics.DrawImageUnscaled(this._BackBuffer' 0' 0);  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,CustomPaint,The following statement contains a magic number: if (this.Width > 0 && this.Height > 0){  				if (this._BackImage == null){  					//	Cached Background Image  					this._BackImage = new Bitmap(this.Width' this.Height);  					Graphics backGraphics = Graphics.FromImage(this._BackImage);  					backGraphics.Clear(Color.Transparent);  					this.PaintTransparentBackground(backGraphics' this.ClientRectangle);  				}  		  				this._BackBufferGraphics.Clear(Color.Transparent);  				this._BackBufferGraphics.DrawImageUnscaled(this._BackImage' 0' 0);  	  				this._TabBufferGraphics.Clear(Color.Transparent);  				  				if (this.TabCount > 0) {  	  					//	When top or bottom and scrollable we need to clip the sides from painting the tabs.  					//	Left and right are always multiline.  					if (this.Alignment <= TabAlignment.Bottom && !this.Multiline){  						this._TabBufferGraphics.Clip = new Region(new RectangleF(this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  					}  					  					//	Draw each tabpage from right to left.  We do it this way to handle  					//	the overlap correctly.  					if (this.Multiline) {  						for (int row = 0; row < this.RowCount; row++) {  							for (int index = this.TabCount - 1; index >= 0; index--) {  								if (index != this.SelectedIndex && (this.RowCount == 1 || this.GetTabRow(index) == row)) {  									this.DrawTabPage(index' this._TabBufferGraphics);  								}  							}  						}  					} else {  						for (int index = this.TabCount - 1; index >= 0; index--) {  							if (index != this.SelectedIndex) {  								this.DrawTabPage(index' this._TabBufferGraphics);  							}  						}  					}  	  					//	The selected tab must be drawn last so it appears on top.  					if (this.SelectedIndex > -1) {  						this.DrawTabPage(this.SelectedIndex' this._TabBufferGraphics);  					}  				}  				this._TabBufferGraphics.Flush();  				  				//	Paint the tabs on top of the background  				  				// Create a new color matrix and set the alpha value to 0.5  				ColorMatrix alphaMatrix = new ColorMatrix();  				alphaMatrix.Matrix00 = alphaMatrix.Matrix11 = alphaMatrix.Matrix22 = alphaMatrix.Matrix44 = 1;  				alphaMatrix.Matrix33 = this._StyleProvider.Opacity;  				  				// Create a new image attribute object and set the color matrix to  				// the one just created  				using (ImageAttributes alphaAttributes = new ImageAttributes()){  					  					alphaAttributes.SetColorMatrix(alphaMatrix);  					  					// Draw the original image with the image attributes specified  					this._BackBufferGraphics.DrawImage(this._TabBuffer'  					                                   new Rectangle(0'0'this._TabBuffer.Width' this._TabBuffer.Height)'  					                                   0'0'this._TabBuffer.Width' this._TabBuffer.Height' GraphicsUnit.Pixel'  					                                   alphaAttributes);  				}  				  				this._BackBufferGraphics.Flush();  				  				//	Now paint this to the screen  				  				  				//	We want to paint the whole tabstrip and border every time  				//	so that the hot areas update correctly' along with any overlaps  				  				//	paint the tabs etc.  				if (this.RightToLeftLayout){  					screenGraphics.DrawImageUnscaled(this._BackBuffer' -1' 0);  				} else {  					screenGraphics.DrawImageUnscaled(this._BackBuffer' 0' 0);  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetPageBounds,The following statement contains a magic number: if (pageBounds.Bottom > this.Height - 4){  				pageBounds.Height -= (pageBounds.Bottom - this.Height + 4);  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetPageBounds,The following statement contains a magic number: if (pageBounds.Bottom > this.Height - 4){  				pageBounds.Height -= (pageBounds.Bottom - this.Height + 4);  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF tabBounds = path.GetBounds();  			  				textRect = new Rectangle((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}    				//	If there is an image allow for it  				if (this.ImageList != null && (this.TabPages[index].ImageIndex > -1   				                               || (!string.IsNullOrEmpty(this.TabPages[index].ImageKey)  				                                   && !this.TabPages[index].ImageKey.Equals("(none)"' StringComparison.OrdinalIgnoreCase)))){  					Rectangle imageRect = this.GetTabImageRect(index);  					if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)) {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.X = imageRect.Right + 4;  							textRect.Width -= (textRect.Right - (int)tabBounds.Right);  						} else {  							textRect.Y = imageRect.Y + 4;  							textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)) {  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					} else {  						if (this.Alignment <= TabAlignment.Bottom) {  							textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  						} else {  							textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  						}  						//	If there is a closer allow for it  						if (this._StyleProvider.ShowTabCloser) {  							Rectangle closerRect = this.GetTabCloserRect(index);  							if (this.Alignment <= TabAlignment.Bottom) {  								if (this.RightToLeftLayout){  									textRect.Width -= (closerRect.Right + 4 - textRect.X);  									textRect.X = closerRect.Right + 4;  								} else {  									textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  								}  							} else {  								if (this.RightToLeftLayout){  									textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  									textRect.Y = closerRect.Bottom + 4;  								} else {  									textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  								}  							}  						}  					}  				} else {  					//	If there is a closer allow for it  					if (this._StyleProvider.ShowTabCloser) {  						Rectangle closerRect = this.GetTabCloserRect(index);  						if (this.Alignment <= TabAlignment.Bottom) {  							if (this.RightToLeftLayout){  								textRect.Width -= (closerRect.Right + 4 - textRect.X);  								textRect.X = closerRect.Right + 4;  							} else {  								textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  							}  						} else {  							if (this.RightToLeftLayout){  								textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  								textRect.Y = closerRect.Bottom + 4;  							} else {  								textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  							}  						}  					}  				}  	  		  				//	Ensure it fits inside the path at the centre line  				if (this.Alignment <= TabAlignment.Bottom) {  					while (!path.IsVisible(textRect.Right' textRect.Y) && textRect.Width > 0){  						textRect.Width -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Width > 0) {  						textRect.X += 1;  						textRect.Width -= 1;  					}  				} else {  					while (!path.IsVisible(textRect.X' textRect.Bottom) && textRect.Height > 0) {  						textRect.Height -= 1;  					}  					while (!path.IsVisible(textRect.X' textRect.Y) && textRect.Height > 0) {  						textRect.Y += 1;  						textRect.Height -= 1;  					}  				}			  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					row = (rect.Y - 2)/rect.Height;  					break;  				case TabAlignment.Bottom:  					row = ((this.Height - rect.Y - 2)/rect.Height) - 1;  					break;  				case TabAlignment.Left:  					row = (rect.X - 2)/rect.Width;  					break;  				case TabAlignment.Right:  					row = ((this.Width - rect.X - 2)/rect.Width) - 1;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					row = (rect.Y - 2)/rect.Height;  					break;  				case TabAlignment.Bottom:  					row = ((this.Height - rect.Y - 2)/rect.Height) - 1;  					break;  				case TabAlignment.Left:  					row = (rect.X - 2)/rect.Width;  					break;  				case TabAlignment.Right:  					row = ((this.Width - rect.X - 2)/rect.Width) - 1;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					row = (rect.Y - 2)/rect.Height;  					break;  				case TabAlignment.Bottom:  					row = ((this.Height - rect.Y - 2)/rect.Height) - 1;  					break;  				case TabAlignment.Left:  					row = (rect.X - 2)/rect.Width;  					break;  				case TabAlignment.Right:  					row = ((this.Width - rect.X - 2)/rect.Width) - 1;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					row = (rect.Y - 2)/rect.Height;  					break;  				case TabAlignment.Bottom:  					row = ((this.Height - rect.Y - 2)/rect.Height) - 1;  					break;  				case TabAlignment.Left:  					row = (rect.X - 2)/rect.Width;  					break;  				case TabAlignment.Right:  					row = ((this.Width - rect.X - 2)/rect.Width) - 1;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,IsFirstTabInRow,The following statement contains a magic number: if (!firstTabinRow){  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.GetTabRect(index).X == 2){  						firstTabinRow = true;  					}  				} else {  					if (this.GetTabRect(index).Y == 2){  						firstTabinRow = true;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,IsFirstTabInRow,The following statement contains a magic number: if (!firstTabinRow){  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.GetTabRect(index).X == 2){  						firstTabinRow = true;  					}  				} else {  					if (this.GetTabRect(index).Y == 2){  						firstTabinRow = true;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.X += 1;	  					}  					imageRect.X += 4;    				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2)/2))' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 16)/2)' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.Right' imageRect.Y)) {  						imageRect.X -= 1;	  					}  					imageRect.X -= 4;  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.X -= 10;  					}  				}  			} else {  				if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Y)) {  						imageRect.Y += 1;	  					}  					imageRect.Y += 4;  				} else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment) 0)){  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Y + (int)Math.Floor((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2)/2))' 16' 16);  				} else {  					imageRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 16)/2)' (int)rect.Bottom ' 16' 16);  					while (!tabBorderPath.IsVisible(imageRect.X' imageRect.Bottom)) {  						imageRect.Y -= 1;	  					}  					imageRect.Y -= 4;	  					  					//	Move it in further to allow for the tab closer  					if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout){  						imageRect.Y -= 10;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder(index)){  				RectangleF rect = path.GetBounds();  				  				//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  				switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.Left' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  							closerRect.X += 1;	  						}  						closerRect.X += 4;  					} else {  						closerRect = new Rectangle((int)rect.Right' (int)rect.Y + (int)Math.Floor((double)((int)rect.Height - 6)/2)' 6' 6);  						while (!path.IsVisible(closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  							closerRect.X -= 1;	  						}  						closerRect.X -= 4;  						}  				} else {  					if (this.RightToLeftLayout){  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Top' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  							closerRect.Y += 1;	  						}  						closerRect.Y += 4;  					} else {  						closerRect = new Rectangle((int)rect.X + (int)Math.Floor((double)((int)rect.Width - 6)/2)' (int)rect.Bottom' 6' 6);  						while (!path.IsVisible(closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  							closerRect.Y -= 1;	  						}  						closerRect.Y -= 4;  					}  				}  			}
Magic Number,Altman.CustomControl,NativeMethods,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\NativeMethods.cs,HiWord,The following statement contains a magic number: if ((dWord.ToInt32() & 0x80000000) == 0x80000000)                  return (dWord.ToInt32() >> 16);              else                  return (dWord.ToInt32() >> 16) & 0xffff;
Magic Number,Altman.CustomControl,NativeMethods,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\NativeMethods.cs,HiWord,The following statement contains a magic number: if ((dWord.ToInt32() & 0x80000000) == 0x80000000)                  return (dWord.ToInt32() >> 16);              else                  return (dWord.ToInt32() >> 16) & 0xffff;
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,TabStyleProvider,The following statement contains a magic number: this.Padding = new Point(6'3);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,TabStyleProvider,The following statement contains a magic number: this.Padding = new Point(6'3);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					tabBounds.Height += 2;  					break;  				case TabAlignment.Bottom:  					tabBounds.Height += 2;  					tabBounds.Y -= 2;  					break;  				case TabAlignment.Left:  					tabBounds.Width += 2;  					break;  				case TabAlignment.Right:  					tabBounds.X -= 2;  					tabBounds.Width += 2;  					break;  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					tabBounds.Height += 2;  					break;  				case TabAlignment.Bottom:  					tabBounds.Height += 2;  					tabBounds.Y -= 2;  					break;  				case TabAlignment.Left:  					tabBounds.Width += 2;  					break;  				case TabAlignment.Right:  					tabBounds.X -= 2;  					tabBounds.Width += 2;  					break;  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					tabBounds.Height += 2;  					break;  				case TabAlignment.Bottom:  					tabBounds.Height += 2;  					tabBounds.Y -= 2;  					break;  				case TabAlignment.Left:  					tabBounds.Width += 2;  					break;  				case TabAlignment.Right:  					tabBounds.X -= 2;  					tabBounds.Width += 2;  					break;  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					tabBounds.Height += 2;  					break;  				case TabAlignment.Bottom:  					tabBounds.Height += 2;  					tabBounds.Y -= 2;  					break;  				case TabAlignment.Left:  					tabBounds.Width += 2;  					break;  				case TabAlignment.Right:  					tabBounds.X -= 2;  					tabBounds.Width += 2;  					break;  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					tabBounds.Height += 2;  					break;  				case TabAlignment.Bottom:  					tabBounds.Height += 2;  					tabBounds.Y -= 2;  					break;  				case TabAlignment.Left:  					tabBounds.Width += 2;  					break;  				case TabAlignment.Right:  					tabBounds.X -= 2;  					tabBounds.Width += 2;  					break;  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					tabBounds.Height += 2;  					break;  				case TabAlignment.Bottom:  					tabBounds.Height += 2;  					tabBounds.Y -= 2;  					break;  				case TabAlignment.Left:  					tabBounds.Width += 2;  					break;  				case TabAlignment.Right:  					tabBounds.X -= 2;  					tabBounds.Width += 2;  					break;  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color dark = Color.FromArgb(207' 207' 207);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color dark = Color.FromArgb(207' 207' 207);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color dark = Color.FromArgb(207' 207' 207);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(242' 242' 242);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(242' 242' 242);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(242' 242' 242);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = SystemColors.ControlLight;  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  				dark = Color.FromArgb(167' 217' 245);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = SystemColors.ControlLight;  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  				dark = Color.FromArgb(167' 217' 245);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = SystemColors.ControlLight;  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  				dark = Color.FromArgb(167' 217' 245);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = SystemColors.ControlLight;  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  				dark = Color.FromArgb(167' 217' 245);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = SystemColors.ControlLight;  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  				dark = Color.FromArgb(167' 217' 245);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = SystemColors.ControlLight;  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  				dark = Color.FromArgb(167' 217' 245);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate(3'3);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate(3'3);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  				Brush focusBrush = null;  				RectangleF pathRect = tabpath.GetBounds();  				Rectangle focusRect = Rectangle.Empty;  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect'this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Bottom:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Left:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  						break;  					case TabAlignment.Right:  						focusRect = new Rectangle((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  						break;  				}  				  				//	Ensure the focus stip does not go outside the tab  				Region focusRegion = new Region(focusRect);  				focusRegion.Intersect(tabpath);  				graphics.FillRegion(focusBrush' focusRegion);  				focusRegion.Dispose();  				focusBrush.Dispose();  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  				Brush focusBrush = null;  				RectangleF pathRect = tabpath.GetBounds();  				Rectangle focusRect = Rectangle.Empty;  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect'this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Bottom:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Left:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  						break;  					case TabAlignment.Right:  						focusRect = new Rectangle((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  						break;  				}  				  				//	Ensure the focus stip does not go outside the tab  				Region focusRegion = new Region(focusRect);  				focusRegion.Intersect(tabpath);  				graphics.FillRegion(focusBrush' focusRegion);  				focusRegion.Dispose();  				focusBrush.Dispose();  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  				Brush focusBrush = null;  				RectangleF pathRect = tabpath.GetBounds();  				Rectangle focusRect = Rectangle.Empty;  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect'this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Bottom:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Left:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  						break;  					case TabAlignment.Right:  						focusRect = new Rectangle((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  						break;  				}  				  				//	Ensure the focus stip does not go outside the tab  				Region focusRegion = new Region(focusRect);  				focusRegion.Intersect(tabpath);  				graphics.FillRegion(focusBrush' focusRegion);  				focusRegion.Dispose();  				focusBrush.Dispose();  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  				Brush focusBrush = null;  				RectangleF pathRect = tabpath.GetBounds();  				Rectangle focusRect = Rectangle.Empty;  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect'this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Bottom:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Left:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  						break;  					case TabAlignment.Right:  						focusRect = new Rectangle((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  						break;  				}  				  				//	Ensure the focus stip does not go outside the tab  				Region focusRegion = new Region(focusRect);  				focusRegion.Intersect(tabpath);  				graphics.FillRegion(focusBrush' focusRegion);  				focusRegion.Dispose();  				focusBrush.Dispose();  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  				Brush focusBrush = null;  				RectangleF pathRect = tabpath.GetBounds();  				Rectangle focusRect = Rectangle.Empty;  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect'this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Bottom:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Left:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  						break;  					case TabAlignment.Right:  						focusRect = new Rectangle((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  						break;  				}  				  				//	Ensure the focus stip does not go outside the tab  				Region focusRegion = new Region(focusRect);  				focusRegion.Intersect(tabpath);  				graphics.FillRegion(focusBrush' focusRegion);  				focusRegion.Dispose();  				focusBrush.Dispose();  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  				Brush focusBrush = null;  				RectangleF pathRect = tabpath.GetBounds();  				Rectangle focusRect = Rectangle.Empty;  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect'this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Bottom:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Left:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  						break;  					case TabAlignment.Right:  						focusRect = new Rectangle((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  						break;  				}  				  				//	Ensure the focus stip does not go outside the tab  				Region focusRegion = new Region(focusRect);  				focusRegion.Intersect(tabpath);  				graphics.FillRegion(focusBrush' focusRegion);  				focusRegion.Dispose();  				focusBrush.Dispose();  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(242' 242' 242);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(242' 242' 242);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(242' 242' 242);
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.Alignment == TabAlignment.Top){  				light = Color.FromArgb(207' 207' 207);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.Alignment == TabAlignment.Top){  				light = Color.FromArgb(207' 207' 207);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.Alignment == TabAlignment.Top){  				light = Color.FromArgb(207' 207' 207);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl,ThemedColors,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {Color.FromArgb(127' 157' 185)' Color.FromArgb(164' 185' 127)' Color.FromArgb(165' 172' 178)' Color.FromArgb(132' 130' 132)};
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this._Overlap = 7;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this._Radius = 10;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this.Padding = new Point(10' 3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this.Padding = new Point(10' 3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this._Overlap = 16;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this._Radius = 16;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this.Padding = new Point(7' 5);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this.Padding = new Point(7' 5);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom){  				spread = (int)Math.Floor((decimal)tabBounds.Height * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Height * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Height * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Height * 1/4);  			} else {  				spread = (int)Math.Floor((decimal)tabBounds.Width * 2/3);  				eigth = (int)Math.Floor((decimal)tabBounds.Width * 1/8);  				sixth = (int)Math.Floor((decimal)tabBounds.Width * 1/6);  				quarter = (int)Math.Floor((decimal)tabBounds.Width * 1/4);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						using (SolidBrush closerBrush = new SolidBrush(Color.FromArgb(193' 53' 53))){  							graphics.FillPath(closerBrush' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColor)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				}    				  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						using (SolidBrush closerBrush = new SolidBrush(Color.FromArgb(193' 53' 53))){  							graphics.FillPath(closerBrush' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColor)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				}    				  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						using (SolidBrush closerBrush = new SolidBrush(Color.FromArgb(193' 53' 53))){  							graphics.FillPath(closerBrush' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColor)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				}    				  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse(new Rectangle(closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse(new Rectangle(closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse(new Rectangle(closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse(new Rectangle(closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,TabStyleDefaultProvider,The following statement contains a magic number: this._Radius = 2;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						if (tabBounds.Y > 0){  							tabBounds.Y -= 1;  							tabBounds.Height += 1;  						}  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						if (tabBounds.Bottom < this._TabControl.Bottom){  							tabBounds.Height += 1;  						}  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						if (tabBounds.X > 0){  							tabBounds.X -= 1;  							tabBounds.Width += 1;  						}    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						if (tabBounds.Right < this._TabControl.Right){  							tabBounds.Width += 1;  						}  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						if (tabBounds.Y > 0){  							tabBounds.Y -= 1;  							tabBounds.Height += 1;  						}  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						if (tabBounds.Bottom < this._TabControl.Bottom){  							tabBounds.Height += 1;  						}  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						if (tabBounds.X > 0){  							tabBounds.X -= 1;  							tabBounds.Width += 1;  						}    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						if (tabBounds.Right < this._TabControl.Right){  							tabBounds.Width += 1;  						}  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						if (tabBounds.Y > 0){  							tabBounds.Y -= 1;  							tabBounds.Height += 1;  						}  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						if (tabBounds.Bottom < this._TabControl.Bottom){  							tabBounds.Height += 1;  						}  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						if (tabBounds.X > 0){  							tabBounds.X -= 1;  							tabBounds.Width += 1;  						}    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						if (tabBounds.Right < this._TabControl.Right){  							tabBounds.Width += 1;  						}  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						if (tabBounds.Y > 0){  							tabBounds.Y -= 1;  							tabBounds.Height += 1;  						}  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						if (tabBounds.Bottom < this._TabControl.Bottom){  							tabBounds.Height += 1;  						}  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						if (tabBounds.X > 0){  							tabBounds.X -= 1;  							tabBounds.Width += 1;  						}    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						if (tabBounds.Right < this._TabControl.Right){  							tabBounds.Width += 1;  						}  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,TabStyleIE8Provider,The following statement contains a magic number: this._Radius = 3;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,TabStyleIE8Provider,The following statement contains a magic number: this.Padding = new Point(6' 5);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,TabStyleIE8Provider,The following statement contains a magic number: this.Padding = new Point(6' 5);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y -= 1;  						tabBounds.Height += 1;  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						tabBounds.Height += 1;    						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						tabBounds.X -= 1;  						tabBounds.Width += 1;    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						tabBounds.Width += 1;  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y -= 1;  						tabBounds.Height += 1;  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						tabBounds.Height += 1;    						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						tabBounds.X -= 1;  						tabBounds.Width += 1;    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						tabBounds.Width += 1;  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y -= 1;  						tabBounds.Height += 1;  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						tabBounds.Height += 1;    						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						tabBounds.X -= 1;  						tabBounds.Width += 1;    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						tabBounds.Width += 1;  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}  			} else {  				switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y -= 1;  						tabBounds.Height += 1;  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						tabBounds.Height += 1;    						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						tabBounds.X -= 1;  						tabBounds.Width += 1;    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						tabBounds.Width += 1;  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color dark = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color dark = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color dark = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(196' 222' 251);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = SystemColors.Window;  				dark = Color.FromArgb(166' 203' 248);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(196' 222' 251);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = SystemColors.Window;  				dark = Color.FromArgb(166' 203' 248);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(196' 222' 251);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = SystemColors.Window;  				dark = Color.FromArgb(166' 203' 248);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(196' 222' 251);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = SystemColors.Window;  				dark = Color.FromArgb(166' 203' 248);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(196' 222' 251);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = SystemColors.Window;  				dark = Color.FromArgb(166' 203' 248);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(196' 222' 251);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = SystemColors.Window;  				dark = Color.FromArgb(166' 203' 248);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate(3'3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate(3'3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(this.BorderColor)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColor)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);    						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(this.BorderColor)){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColor)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);    						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: Color light = Color.FromArgb(227' 238' 251);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.FromArgb(207' 207' 207);  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.FromArgb(234' 246' 253);  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,TabStyleRoundedProvider,The following statement contains a magic number: this._Radius = 10;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,TabStyleRoundedProvider,The following statement contains a magic number: this.Padding = new Point(6' 3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,TabStyleRoundedProvider,The following statement contains a magic number: this.Padding = new Point(6' 3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,TabStyleVisualStudioProvider,The following statement contains a magic number: this._Overlap = 7;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,TabStyleVisualStudioProvider,The following statement contains a magic number: this.Padding = new Point(14' 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._Radius = 3;
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._CloserColor = Color.FromArgb(117' 99' 61);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._CloserColor = Color.FromArgb(117' 99' 61);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._CloserColor = Color.FromArgb(117' 99' 61);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._BorderColorHot = Color.FromArgb(155' 167' 183);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._BorderColorHot = Color.FromArgb(155' 167' 183);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._BorderColorHot = Color.FromArgb(155' 167' 183);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this.Padding = new Point(6' 5);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this.Padding = new Point(6' 5);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(229' 195' 101);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				dark = Color.FromArgb(108' 116' 118);  				light = dark;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(229' 195' 101);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				dark = Color.FromArgb(108' 116' 118);  				light = dark;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(229' 195' 101);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				dark = Color.FromArgb(108' 116' 118);  				light = dark;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(229' 195' 101);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				dark = Color.FromArgb(108' 116' 118);  				light = dark;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(229' 195' 101);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				dark = Color.FromArgb(108' 116' 118);  				light = dark;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				dark = Color.FromArgb(229' 195' 101);  				light = SystemColors.Window;  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = dark;  			} else if (this.HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				dark = Color.FromArgb(108' 116' 118);  				light = dark;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate(3'3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate(3'3);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = Color.FromArgb(229' 195' 101);  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.Transparent;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.Transparent;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = Color.FromArgb(229' 195' 101);  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.Transparent;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.Transparent;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  				light = Color.FromArgb(229' 195' 101);  			} else if (!this._TabControl.TabPages[index].Enabled){  				light = Color.Transparent;  			} else if (this._HotTrack && index == this._TabControl.ActiveIndex){  				//	Enable hot tracking  				light = Color.Transparent;  			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser){  				Rectangle closerRect = this._TabControl.GetTabCloserRect(index);  				graphics.SmoothingMode = SmoothingMode.AntiAlias;  				if (closerRect.Contains(this._TabControl.MousePosition)){  					using (GraphicsPath closerPath = GetCloserButtonPath(closerRect)){  						graphics.FillPath(Brushes.White' closerPath);  						using (Pen closerPen = new Pen(Color.FromArgb(229' 195' 101))){  							graphics.DrawPath(closerPen' closerPath);  						}  					}  					using (GraphicsPath closerPath = GetCloserPath(closerRect)){  						using (Pen closerPen = new Pen(this._CloserColorActive)){  							closerPen.Width = 2;  							graphics.DrawPath(closerPen' closerPath);  						}  					}  				} else {  					if (index == this._TabControl.SelectedIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(this._CloserColor)){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					} else if (index == this._TabControl.ActiveIndex){  						using (GraphicsPath closerPath = GetCloserPath(closerRect)){  							using (Pen closerPen = new Pen(Color.FromArgb(155' 167' 183))){  								closerPen.Width = 2;  								graphics.DrawPath(closerPen' closerPath);  							}  						}  					}  				}    			}
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);
Magic Number,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine(closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);
Duplicate Code,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The method contains a code clone-set at the following line numbers (starting from the method definition): ((40' 59)' (85' 104)' (86' 105)' (107' 126))
Missing Default,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetStringFormat,The following switch statement is missing a default case: switch (this.Alignment) {  				case TabAlignment.Top:  				case TabAlignment.Bottom:  					format = new StringFormat();  					break;  				case TabAlignment.Left:  				case TabAlignment.Right:  					format = new StringFormat(StringFormatFlags.DirectionVertical);  					break;  			}
Missing Default,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabTextRect,The following switch statement is missing a default case: switch (this.Alignment) {  					case TabAlignment.Top:  						textRect.Y += 4;  						textRect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						textRect.Y += 2;  						textRect.Height -= 6;  						break;  					case TabAlignment.Left:  						textRect.X += 4;  						textRect.Width -= 6;  						break;  					case TabAlignment.Right:  						textRect.X += 2;  						textRect.Width -= 6;  						break;  				}
Missing Default,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabRow,The following switch statement is missing a default case: switch (this.Alignment) {  				case TabAlignment.Top:  					row = (rect.Y - 2)/rect.Height;  					break;  				case TabAlignment.Bottom:  					row = ((this.Height - rect.Y - 2)/rect.Height) - 1;  					break;  				case TabAlignment.Left:  					row = (rect.X - 2)/rect.Width;  					break;  				case TabAlignment.Right:  					row = ((this.Width - rect.X - 2)/rect.Width) - 1;  					break;  			}
Missing Default,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,AddPageBorder,The following switch statement is missing a default case: switch (this.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Y);  					path.AddLine(pageBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Bottom);  					path.AddLine(pageBounds.Right' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  					path.AddLine(pageBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Y);  					path.AddLine(pageBounds.X' pageBounds.Y' tabBounds.X' pageBounds.Y);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  					path.AddLine(pageBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Y);  					path.AddLine(pageBounds.X' pageBounds.Y' pageBounds.Right' pageBounds.Y);  					path.AddLine(pageBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Bottom);  					path.AddLine(pageBounds.Right' pageBounds.Bottom' tabBounds.Right' pageBounds.Bottom);  					break;  				case TabAlignment.Left:  					path.AddLine(pageBounds.X' tabBounds.Y' pageBounds.X' pageBounds.Y);  					path.AddLine(pageBounds.X' pageBounds.Y' pageBounds.Right' pageBounds.Y);  					path.AddLine(pageBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Bottom);  					path.AddLine(pageBounds.Right' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  					path.AddLine(pageBounds.X' pageBounds.Bottom' pageBounds.X' tabBounds.Bottom);  					break;  				case TabAlignment.Right:  					path.AddLine(pageBounds.Right' tabBounds.Bottom' pageBounds.Right' pageBounds.Bottom);  					path.AddLine(pageBounds.Right' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  					path.AddLine(pageBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Y);  					path.AddLine(pageBounds.X' pageBounds.Y' pageBounds.Right' pageBounds.Y);  					path.AddLine(pageBounds.Right' pageBounds.Y' pageBounds.Right' tabBounds.Y);  					break;  			}
Missing Default,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabImageRect,The following switch statement is missing a default case: switch (this.Alignment) {  				case TabAlignment.Top:  					rect.Y += 4;  					rect.Height -= 6;  					break;  				case TabAlignment.Bottom:  					rect.Y += 2;  					rect.Height -= 6;  					break;  				case TabAlignment.Left:  					rect.X += 4;  					rect.Width -= 6;  					break;  				case TabAlignment.Right:  					rect.X += 2;  					rect.Width -= 6;  					break;  			}
Missing Default,Altman.CustomControl,TabControlPlus,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabControlPlus.cs,GetTabCloserRect,The following switch statement is missing a default case: switch (this.Alignment) {  					case TabAlignment.Top:  						rect.Y += 4;  						rect.Height -= 6;  						break;  					case TabAlignment.Bottom:  						rect.Y += 2;  						rect.Height -= 6;  						break;  					case TabAlignment.Left:  						rect.X += 4;  						rect.Width -= 6;  						break;  					case TabAlignment.Right:  						rect.X += 2;  						rect.Width -= 6;  						break;  				}
Missing Default,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					tabBounds.Height += 2;  					break;  				case TabAlignment.Bottom:  					tabBounds.Height += 2;  					tabBounds.Y -= 2;  					break;  				case TabAlignment.Left:  					tabBounds.Width += 2;  					break;  				case TabAlignment.Right:  					tabBounds.X -= 2;  					tabBounds.Width += 2;  					break;  			}
Missing Default,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,GetTabBackgroundBrush,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					if (this._TabControl.SelectedIndex == index) {  						dark = light;  					}  					fillBrush = new LinearGradientBrush(tabBounds' light' dark' LinearGradientMode.Vertical);  					break;  				case TabAlignment.Bottom:  					fillBrush = new LinearGradientBrush(tabBounds' light' dark' LinearGradientMode.Vertical);  					break;  				case TabAlignment.Left:  					fillBrush = new LinearGradientBrush(tabBounds' dark' light' LinearGradientMode.Horizontal);  					break;  				case TabAlignment.Right:  					fillBrush = new LinearGradientBrush(tabBounds' light' dark' LinearGradientMode.Horizontal);  					break;  			}
Missing Default,Altman.CustomControl,TabStyleProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProvider.cs,DrawTabFocusIndicator,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect'this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Bottom:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  						break;  					case TabAlignment.Left:  						focusRect = new Rectangle((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  						break;  					case TabAlignment.Right:  						focusRect = new Rectangle((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  						focusBrush = new LinearGradientBrush(focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  						break;  				}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddLine(tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddLine(tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddLine(tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  					break;  			}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					  					path.AddCurve(new Point[] {  new Point(tabBounds.X' tabBounds.Bottom)  					              		'new Point(tabBounds.X + sixth' tabBounds.Bottom - eigth)  					              		'new Point(tabBounds.X + spread - quarter' tabBounds.Y + eigth)  					              		'new Point(tabBounds.X + spread' tabBounds.Y)});  					path.AddLine(tabBounds.X + spread' tabBounds.Y' tabBounds.Right - spread' tabBounds.Y);  					path.AddCurve(new Point[] {  new Point(tabBounds.Right - spread' tabBounds.Y)  					              		'new Point(tabBounds.Right - spread + quarter' tabBounds.Y + eigth)  					              		'new Point(tabBounds.Right - sixth' tabBounds.Bottom - eigth)  					              		'new Point(tabBounds.Right' tabBounds.Bottom)});  					break;  				case TabAlignment.Bottom:  					path.AddCurve(new Point[] {  new Point(tabBounds.Right' tabBounds.Y)  					              		'new Point(tabBounds.Right - sixth' tabBounds.Y + eigth)  					              		'new Point(tabBounds.Right - spread + quarter' tabBounds.Bottom - eigth)  					              		'new Point(tabBounds.Right - spread' tabBounds.Bottom)});  					path.AddLine(tabBounds.Right - spread' tabBounds.Bottom' tabBounds.X + spread' tabBounds.Bottom);  					path.AddCurve(new Point[] {  new Point(tabBounds.X + spread' tabBounds.Bottom)  					              		'new Point(tabBounds.X + spread - quarter' tabBounds.Bottom - eigth)  					              		'new Point(tabBounds.X + sixth' tabBounds.Y + eigth)  					              		'new Point(tabBounds.X' tabBounds.Y)});  					break;  				case TabAlignment.Left:  					path.AddCurve(new Point[] {  new Point(tabBounds.Right' tabBounds.Bottom)  					              		'new Point(tabBounds.Right - eigth' tabBounds.Bottom - sixth)  					              		'new Point(tabBounds.X + eigth' tabBounds.Bottom - spread + quarter)  					              		'new Point(tabBounds.X' tabBounds.Bottom - spread)});  					path.AddLine(tabBounds.X' tabBounds.Bottom - spread' tabBounds.X 'tabBounds.Y + spread);  					path.AddCurve(new Point[] {  new Point(tabBounds.X' tabBounds.Y + spread)  					              		'new Point(tabBounds.X + eigth' tabBounds.Y + spread - quarter)  					              		'new Point(tabBounds.Right - eigth' tabBounds.Y + sixth)  					              		'new Point(tabBounds.Right' tabBounds.Y)});    					break;  				case TabAlignment.Right:  					path.AddCurve(new Point[] {  new Point(tabBounds.X' tabBounds.Y)  					              		'new Point(tabBounds.X + eigth' tabBounds.Y + sixth)  					              		'new Point(tabBounds.Right - eigth' tabBounds.Y + spread - quarter)  					              		'new Point(tabBounds.Right' tabBounds.Y + spread)});  					path.AddLine(tabBounds.Right' tabBounds.Y + spread' tabBounds.Right' tabBounds.Bottom - spread);  					path.AddCurve(new Point[] {  new Point(tabBounds.Right' tabBounds.Bottom - spread)  					              		'new Point(tabBounds.Right - eigth' tabBounds.Bottom - spread + quarter)  					              		'new Point(tabBounds.X + eigth' tabBounds.Bottom - sixth)  					              		'new Point(tabBounds.X' tabBounds.Bottom)});  					break;  			}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y);  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom);  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y);  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom);  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						if (tabBounds.Y > 0){  							tabBounds.Y -= 1;  							tabBounds.Height += 1;  						}  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						if (tabBounds.Bottom < this._TabControl.Bottom){  							tabBounds.Height += 1;  						}  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						if (tabBounds.X > 0){  							tabBounds.X -= 1;  							tabBounds.Width += 1;  						}    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						if (tabBounds.Right < this._TabControl.Right){  							tabBounds.Width += 1;  						}  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y += 1;  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Bottom:  						tabBounds.Height -= 1;  						break;  					case TabAlignment.Left:  						tabBounds.X += 1;  						tabBounds.Width -= 1;  						break;  					case TabAlignment.Right:  						tabBounds.Width -= 1;  						break;  				}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  					case TabAlignment.Top:  						tabBounds.Y -= 1;  						tabBounds.Height += 1;  						  						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Bottom:  						tabBounds.Height += 1;    						if (firstTabinRow){  							tabBounds.Width += 1;  						} else {  							tabBounds.X -= 1;  							tabBounds.Width += 2;  						}  						break;  					case TabAlignment.Left:  						tabBounds.X -= 1;  						tabBounds.Width += 1;    						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  					case TabAlignment.Right:  						tabBounds.Width += 1;  						if (firstTabinRow){  							tabBounds.Height += 1;  						} else {  							tabBounds.Y -= 1;  							tabBounds.Height += 2;  						}  						break;  				}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					fillBrush = new LinearGradientBrush(tabBounds' dark' light' LinearGradientMode.Vertical);  					break;  				case TabAlignment.Bottom:  					fillBrush = new LinearGradientBrush(tabBounds' light' dark' LinearGradientMode.Vertical);  					break;  				case TabAlignment.Left:  					fillBrush = new LinearGradientBrush(tabBounds' dark' light' LinearGradientMode.Horizontal);  					break;  				case TabAlignment.Right:  					fillBrush = new LinearGradientBrush(tabBounds' light' dark' LinearGradientMode.Horizontal);  					break;  			}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  					path.AddArc(tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  					path.AddLine(tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  					path.AddArc(tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  					path.AddLine(tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					path.AddLine(tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  					path.AddLine(tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  					path.AddArc(tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  					path.AddLine(tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  					break;  				case TabAlignment.Bottom:  					path.AddLine(tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  					path.AddLine(tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  					break;  				case TabAlignment.Left:  					path.AddLine(tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  					path.AddArc(tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  					path.AddLine(tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  					path.AddLine(tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  					break;  				case TabAlignment.Right:  					path.AddLine(tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  					path.AddLine(tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  					path.AddArc(tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  					path.AddLine(tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  					break;  			}
Missing Default,Altman.CustomControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\keepwn_Altman\Source\Altman.WinForm\CustomControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  				case TabAlignment.Top:  					fillBrush = new LinearGradientBrush(tabBounds' light' dark' LinearGradientMode.Vertical);  					break;  				case TabAlignment.Bottom:  					fillBrush = new LinearGradientBrush(tabBounds' dark' light' LinearGradientMode.Vertical);  					break;  				case TabAlignment.Left:  					fillBrush = new LinearGradientBrush(tabBounds' light' dark' LinearGradientMode.Horizontal);  					break;  				case TabAlignment.Right:  					fillBrush = new LinearGradientBrush(tabBounds' dark' light' LinearGradientMode.Horizontal);  					break;  			}
