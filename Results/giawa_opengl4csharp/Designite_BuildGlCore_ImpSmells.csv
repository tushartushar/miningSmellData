Implementation smell,Namespace,Class,File,Method,Description
Long Method,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The method has 114 lines of code.
Long Method,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The method has 119 lines of code.
Complex Method,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,Cyclomatic complexity of the method is 78
Complex Method,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,WriteBinding,Cyclomatic complexity of the method is 8
Long Parameter List,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,WriteBinding,The method has 5 parameters. Parameters: function' funcdef' paramTypes' paramNames' output
Long Statement,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The length of the statement  "                                output.WriteLine(string.Format("            [DllImport(Gl.Library' EntryPoint = \"{0}\"' ExactSpelling = true)]"' function)); " is 125.
Long Statement,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The length of the statement  "                                if (function == "glTextureParameterfv") csharpType = "Single[]";    // due to an error in the formatting of glTextureParameterfv " is 128.
Long Statement,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,LoadManPage,The length of the statement  "                        string page = client.DownloadString("https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/" + function + ".xhtml"); " is 120.
Long Statement,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The length of the statement  "                (functionName.StartsWith("glDraw") || functionName.StartsWith("glMultiDraw") || functionName.Contains("NamedFramebufferReadBuffer"))) return "OpenGL.BeginMode"; " is 160.
Long Statement,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The length of the statement  "                if ((functionName.Contains("VertexAttrib") || functionName.Contains("VertexArrayAttrib")) && functionName.Contains("Format")) return "OpenGL.VertexAttribFormat"; " is 161.
Long Statement,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,WriteBinding,The length of the statement  "            output.WriteLine(string.Format("            [DllImport(Gl.Library' EntryPoint = \"{0}\"' ExactSpelling = true)]"' function)); " is 125.
Complex Conditional,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The conditional expression  "((paramName == "size" || paramName == "offset") && function.Contains("SubData")) ||                                          (paramName == "sync" && function.Contains("GetSynciv"))"  is complex.
Complex Conditional,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The conditional expression  "glName == "mode" &&                   (functionName.StartsWith("glDraw") || functionName.StartsWith("glMultiDraw") || functionName.Contains("NamedFramebufferReadBuffer"))"  is complex.
Complex Conditional,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The conditional expression  "functionName.Contains("TexParameter") || functionName.Contains("TexStorage") ||                       functionName.Contains("TexImage") || functionName.Contains("TexSubImage") ||                      functionName.Contains("GetInternalformat")"  is complex.
Complex Conditional,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The conditional expression  "functionName.Contains("TexBuffer") || functionName.Contains("TextureBuffer") ||                       functionName.Contains("TextureStorage") || functionName.Contains("TexStorage") ||                      functionName.Contains("ClearBuffer") || functionName.Contains("ClearNamedBuffer")"  is complex.
Complex Conditional,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The conditional expression  "glName == "format" && (functionName.Contains("BindImage") || functionName.StartsWith("glClear") ||                  functionName.Contains("CompressedTex"))"  is complex.
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The following statement contains a magic number: using (StreamReader stream = new StreamReader("../OpenGL4.txt"))              using (StreamWriter output = new StreamWriter("GlCore.cs"))              using (StreamWriter errors = new StreamWriter("errors.txt"))              {                  output.WriteLine(@"using System;  using System.Runtime.InteropServices;    namespace OpenGL  {      partial class Gl      {          internal static partial class NativeMethods          {");                  while (!stream.EndOfStream)                  {                      string function = stream.ReadLine();                      if (ExploredFunctions.Contains(function)) continue;                      //if (function.StartsWith("glDebugMessage")) continue;                      if (function.Contains("Debug")) continue;                      functionCount++;                        string page = LoadManPage(function);                        StringReader reader = new StringReader(page);                      string funcdef = String.Empty;                      List<string> paramTypes = new List<string>();                      List<string> paramNames = new List<string>();                        while (true)                      {                          string line = reader.ReadLine();                          if (line == null || line.Length == 0) break;                            if (line.Contains("funcdef"))                          {                              if (paramTypes.Count != 0)                              {                                  WriteBinding(function' funcdef' paramTypes' paramNames' output);                                    paramTypes.Clear();                                  paramNames.Clear();                              }                                funcdef = line.Substring(line.IndexOf("<code class=\"funcdef\">") + 22);                              funcdef = funcdef.Substring(0' funcdef.IndexOf('<')).Trim();                              funcdef = (funcdef == "void" ? "void" : GetCSharpType(funcdef));                                function = line.Substring(line.IndexOf("fsfunc") + 8);                              function = function.Substring(0' function.IndexOf('<'));                                if (function.StartsWith("glGetString")) funcdef = "IntPtr";                                if (funcdef == "Unknown")                              {                                  if (function.Contains("FramebufferStatus")) funcdef = "OpenGL.FramebufferErrorCode";                                  else if (function.Contains("ClientWaitSync")) funcdef = "OpenGL.ArbSync";                                  else if (function.Contains("GetError")) funcdef = "OpenGL.ErrorCode";                                  else if (function.Contains("GetGraphicsResetStatus")) funcdef = "OpenGL.GraphicResetStatus";                              }                          }                          else if (line.Contains("pdparam"))                          {                              if (line.Contains("void") && !line.Contains("*"))                              {                                  output.WriteLine(string.Format("            [DllImport(Gl.Library' EntryPoint = \"{0}\"' ExactSpelling = true)]"' function));                                  output.WriteLine(string.Format("            internal extern static {0} {1}();"' funcdef' function.Substring(2)));                                  if (funcdef == "Unknown") unknowns++;                                  continue;                              }                                string paramType = line.Substring(line.IndexOf("<td>") + 4);                              paramType = paramType.Substring(0' paramType.IndexOf('<')).Trim(new char[] { '<' });                                string paramName = line.Substring(line.IndexOf("<var class=\"pdparam\">") + 21);                              paramName = paramName.Substring(0' paramName.IndexOf('<'));                              paramName = paramName.Trim(new char[] { '.' }); // to remove a trailing . from glTextureParameterfv                                if (paramName.ToLower() == "internalformat") paramName = "internalFormat";                              if (paramName == "internalFormat" && paramType.Trim() == "GLint") paramType = "GLenum";                              if (paramName == "mask" && paramType.StartsWith("GL")) paramType = "GLenum";                              if (paramName == "access" && function.Contains("MapBuffer")) paramType = "GLenum";                              if (paramName == "framebuffer" && function.Contains("NamedFramebufferReadBuffer")) paramType = "GLenum";                                string csharpType = GetCSharpType(paramType);                              if (csharpType == "Unknown") csharpType = GetUnknownType(paramName' function);                              if (csharpType == "Unknown[]")                              {                                  if (function == "glTextureParameterfv") csharpType = "Single[]";    // due to an error in the formatting of glTextureParameterfv                                  else csharpType = GetUnknownType(paramName' function) + "[]";                              }                              if (csharpType.Contains("[]") || csharpType == "IntPtr")// || csharpType == "String")                              {                                  // figure out if this is an output or input type                                  if (function.Contains("Gen") || function.Contains("Get") || function.Contains("Read"))                                  {                                      //if (paramName != "size" && paramName != "offset")                                      if (((paramName == "size" || paramName == "offset") && function.Contains("SubData")) ||                                          (paramName == "sync" && function.Contains("GetSynciv")))                                      {                                        }                                      else                                      {                                          csharpType = "[OutAttribute] " + csharpType;                                      }                                  }                              }                              if (paramName == "varyings") csharpType = "String[]";                              if (paramName == "string" && function.Contains("ShaderSource")) csharpType = "String[]";                              if (paramName == "data" && function.Contains("Pixels")) csharpType = "Int32[]";                              paramTypes.Add(csharpType);                                if (paramName == "params") paramName = "@params";                              if (paramName == "ref") paramName = "@ref";                              if (paramName == "string") paramName = "@string";                              if (paramName == "bifSize") paramName = "bufSize";                              paramNames.Add(paramName);                          }                      }                        if (paramTypes.Count != 0)                          WriteBinding(function' funcdef' paramTypes' paramNames' output);                  }                    output.WriteLine(@"        }      }  }");              }
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The following statement contains a magic number: using (StreamReader stream = new StreamReader("../OpenGL4.txt"))              using (StreamWriter output = new StreamWriter("GlCore.cs"))              using (StreamWriter errors = new StreamWriter("errors.txt"))              {                  output.WriteLine(@"using System;  using System.Runtime.InteropServices;    namespace OpenGL  {      partial class Gl      {          internal static partial class NativeMethods          {");                  while (!stream.EndOfStream)                  {                      string function = stream.ReadLine();                      if (ExploredFunctions.Contains(function)) continue;                      //if (function.StartsWith("glDebugMessage")) continue;                      if (function.Contains("Debug")) continue;                      functionCount++;                        string page = LoadManPage(function);                        StringReader reader = new StringReader(page);                      string funcdef = String.Empty;                      List<string> paramTypes = new List<string>();                      List<string> paramNames = new List<string>();                        while (true)                      {                          string line = reader.ReadLine();                          if (line == null || line.Length == 0) break;                            if (line.Contains("funcdef"))                          {                              if (paramTypes.Count != 0)                              {                                  WriteBinding(function' funcdef' paramTypes' paramNames' output);                                    paramTypes.Clear();                                  paramNames.Clear();                              }                                funcdef = line.Substring(line.IndexOf("<code class=\"funcdef\">") + 22);                              funcdef = funcdef.Substring(0' funcdef.IndexOf('<')).Trim();                              funcdef = (funcdef == "void" ? "void" : GetCSharpType(funcdef));                                function = line.Substring(line.IndexOf("fsfunc") + 8);                              function = function.Substring(0' function.IndexOf('<'));                                if (function.StartsWith("glGetString")) funcdef = "IntPtr";                                if (funcdef == "Unknown")                              {                                  if (function.Contains("FramebufferStatus")) funcdef = "OpenGL.FramebufferErrorCode";                                  else if (function.Contains("ClientWaitSync")) funcdef = "OpenGL.ArbSync";                                  else if (function.Contains("GetError")) funcdef = "OpenGL.ErrorCode";                                  else if (function.Contains("GetGraphicsResetStatus")) funcdef = "OpenGL.GraphicResetStatus";                              }                          }                          else if (line.Contains("pdparam"))                          {                              if (line.Contains("void") && !line.Contains("*"))                              {                                  output.WriteLine(string.Format("            [DllImport(Gl.Library' EntryPoint = \"{0}\"' ExactSpelling = true)]"' function));                                  output.WriteLine(string.Format("            internal extern static {0} {1}();"' funcdef' function.Substring(2)));                                  if (funcdef == "Unknown") unknowns++;                                  continue;                              }                                string paramType = line.Substring(line.IndexOf("<td>") + 4);                              paramType = paramType.Substring(0' paramType.IndexOf('<')).Trim(new char[] { '<' });                                string paramName = line.Substring(line.IndexOf("<var class=\"pdparam\">") + 21);                              paramName = paramName.Substring(0' paramName.IndexOf('<'));                              paramName = paramName.Trim(new char[] { '.' }); // to remove a trailing . from glTextureParameterfv                                if (paramName.ToLower() == "internalformat") paramName = "internalFormat";                              if (paramName == "internalFormat" && paramType.Trim() == "GLint") paramType = "GLenum";                              if (paramName == "mask" && paramType.StartsWith("GL")) paramType = "GLenum";                              if (paramName == "access" && function.Contains("MapBuffer")) paramType = "GLenum";                              if (paramName == "framebuffer" && function.Contains("NamedFramebufferReadBuffer")) paramType = "GLenum";                                string csharpType = GetCSharpType(paramType);                              if (csharpType == "Unknown") csharpType = GetUnknownType(paramName' function);                              if (csharpType == "Unknown[]")                              {                                  if (function == "glTextureParameterfv") csharpType = "Single[]";    // due to an error in the formatting of glTextureParameterfv                                  else csharpType = GetUnknownType(paramName' function) + "[]";                              }                              if (csharpType.Contains("[]") || csharpType == "IntPtr")// || csharpType == "String")                              {                                  // figure out if this is an output or input type                                  if (function.Contains("Gen") || function.Contains("Get") || function.Contains("Read"))                                  {                                      //if (paramName != "size" && paramName != "offset")                                      if (((paramName == "size" || paramName == "offset") && function.Contains("SubData")) ||                                          (paramName == "sync" && function.Contains("GetSynciv")))                                      {                                        }                                      else                                      {                                          csharpType = "[OutAttribute] " + csharpType;                                      }                                  }                              }                              if (paramName == "varyings") csharpType = "String[]";                              if (paramName == "string" && function.Contains("ShaderSource")) csharpType = "String[]";                              if (paramName == "data" && function.Contains("Pixels")) csharpType = "Int32[]";                              paramTypes.Add(csharpType);                                if (paramName == "params") paramName = "@params";                              if (paramName == "ref") paramName = "@ref";                              if (paramName == "string") paramName = "@string";                              if (paramName == "bifSize") paramName = "bufSize";                              paramNames.Add(paramName);                          }                      }                        if (paramTypes.Count != 0)                          WriteBinding(function' funcdef' paramTypes' paramNames' output);                  }                    output.WriteLine(@"        }      }  }");              }
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The following statement contains a magic number: using (StreamReader stream = new StreamReader("../OpenGL4.txt"))              using (StreamWriter output = new StreamWriter("GlCore.cs"))              using (StreamWriter errors = new StreamWriter("errors.txt"))              {                  output.WriteLine(@"using System;  using System.Runtime.InteropServices;    namespace OpenGL  {      partial class Gl      {          internal static partial class NativeMethods          {");                  while (!stream.EndOfStream)                  {                      string function = stream.ReadLine();                      if (ExploredFunctions.Contains(function)) continue;                      //if (function.StartsWith("glDebugMessage")) continue;                      if (function.Contains("Debug")) continue;                      functionCount++;                        string page = LoadManPage(function);                        StringReader reader = new StringReader(page);                      string funcdef = String.Empty;                      List<string> paramTypes = new List<string>();                      List<string> paramNames = new List<string>();                        while (true)                      {                          string line = reader.ReadLine();                          if (line == null || line.Length == 0) break;                            if (line.Contains("funcdef"))                          {                              if (paramTypes.Count != 0)                              {                                  WriteBinding(function' funcdef' paramTypes' paramNames' output);                                    paramTypes.Clear();                                  paramNames.Clear();                              }                                funcdef = line.Substring(line.IndexOf("<code class=\"funcdef\">") + 22);                              funcdef = funcdef.Substring(0' funcdef.IndexOf('<')).Trim();                              funcdef = (funcdef == "void" ? "void" : GetCSharpType(funcdef));                                function = line.Substring(line.IndexOf("fsfunc") + 8);                              function = function.Substring(0' function.IndexOf('<'));                                if (function.StartsWith("glGetString")) funcdef = "IntPtr";                                if (funcdef == "Unknown")                              {                                  if (function.Contains("FramebufferStatus")) funcdef = "OpenGL.FramebufferErrorCode";                                  else if (function.Contains("ClientWaitSync")) funcdef = "OpenGL.ArbSync";                                  else if (function.Contains("GetError")) funcdef = "OpenGL.ErrorCode";                                  else if (function.Contains("GetGraphicsResetStatus")) funcdef = "OpenGL.GraphicResetStatus";                              }                          }                          else if (line.Contains("pdparam"))                          {                              if (line.Contains("void") && !line.Contains("*"))                              {                                  output.WriteLine(string.Format("            [DllImport(Gl.Library' EntryPoint = \"{0}\"' ExactSpelling = true)]"' function));                                  output.WriteLine(string.Format("            internal extern static {0} {1}();"' funcdef' function.Substring(2)));                                  if (funcdef == "Unknown") unknowns++;                                  continue;                              }                                string paramType = line.Substring(line.IndexOf("<td>") + 4);                              paramType = paramType.Substring(0' paramType.IndexOf('<')).Trim(new char[] { '<' });                                string paramName = line.Substring(line.IndexOf("<var class=\"pdparam\">") + 21);                              paramName = paramName.Substring(0' paramName.IndexOf('<'));                              paramName = paramName.Trim(new char[] { '.' }); // to remove a trailing . from glTextureParameterfv                                if (paramName.ToLower() == "internalformat") paramName = "internalFormat";                              if (paramName == "internalFormat" && paramType.Trim() == "GLint") paramType = "GLenum";                              if (paramName == "mask" && paramType.StartsWith("GL")) paramType = "GLenum";                              if (paramName == "access" && function.Contains("MapBuffer")) paramType = "GLenum";                              if (paramName == "framebuffer" && function.Contains("NamedFramebufferReadBuffer")) paramType = "GLenum";                                string csharpType = GetCSharpType(paramType);                              if (csharpType == "Unknown") csharpType = GetUnknownType(paramName' function);                              if (csharpType == "Unknown[]")                              {                                  if (function == "glTextureParameterfv") csharpType = "Single[]";    // due to an error in the formatting of glTextureParameterfv                                  else csharpType = GetUnknownType(paramName' function) + "[]";                              }                              if (csharpType.Contains("[]") || csharpType == "IntPtr")// || csharpType == "String")                              {                                  // figure out if this is an output or input type                                  if (function.Contains("Gen") || function.Contains("Get") || function.Contains("Read"))                                  {                                      //if (paramName != "size" && paramName != "offset")                                      if (((paramName == "size" || paramName == "offset") && function.Contains("SubData")) ||                                          (paramName == "sync" && function.Contains("GetSynciv")))                                      {                                        }                                      else                                      {                                          csharpType = "[OutAttribute] " + csharpType;                                      }                                  }                              }                              if (paramName == "varyings") csharpType = "String[]";                              if (paramName == "string" && function.Contains("ShaderSource")) csharpType = "String[]";                              if (paramName == "data" && function.Contains("Pixels")) csharpType = "Int32[]";                              paramTypes.Add(csharpType);                                if (paramName == "params") paramName = "@params";                              if (paramName == "ref") paramName = "@ref";                              if (paramName == "string") paramName = "@string";                              if (paramName == "bifSize") paramName = "bufSize";                              paramNames.Add(paramName);                          }                      }                        if (paramTypes.Count != 0)                          WriteBinding(function' funcdef' paramTypes' paramNames' output);                  }                    output.WriteLine(@"        }      }  }");              }
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The following statement contains a magic number: using (StreamReader stream = new StreamReader("../OpenGL4.txt"))              using (StreamWriter output = new StreamWriter("GlCore.cs"))              using (StreamWriter errors = new StreamWriter("errors.txt"))              {                  output.WriteLine(@"using System;  using System.Runtime.InteropServices;    namespace OpenGL  {      partial class Gl      {          internal static partial class NativeMethods          {");                  while (!stream.EndOfStream)                  {                      string function = stream.ReadLine();                      if (ExploredFunctions.Contains(function)) continue;                      //if (function.StartsWith("glDebugMessage")) continue;                      if (function.Contains("Debug")) continue;                      functionCount++;                        string page = LoadManPage(function);                        StringReader reader = new StringReader(page);                      string funcdef = String.Empty;                      List<string> paramTypes = new List<string>();                      List<string> paramNames = new List<string>();                        while (true)                      {                          string line = reader.ReadLine();                          if (line == null || line.Length == 0) break;                            if (line.Contains("funcdef"))                          {                              if (paramTypes.Count != 0)                              {                                  WriteBinding(function' funcdef' paramTypes' paramNames' output);                                    paramTypes.Clear();                                  paramNames.Clear();                              }                                funcdef = line.Substring(line.IndexOf("<code class=\"funcdef\">") + 22);                              funcdef = funcdef.Substring(0' funcdef.IndexOf('<')).Trim();                              funcdef = (funcdef == "void" ? "void" : GetCSharpType(funcdef));                                function = line.Substring(line.IndexOf("fsfunc") + 8);                              function = function.Substring(0' function.IndexOf('<'));                                if (function.StartsWith("glGetString")) funcdef = "IntPtr";                                if (funcdef == "Unknown")                              {                                  if (function.Contains("FramebufferStatus")) funcdef = "OpenGL.FramebufferErrorCode";                                  else if (function.Contains("ClientWaitSync")) funcdef = "OpenGL.ArbSync";                                  else if (function.Contains("GetError")) funcdef = "OpenGL.ErrorCode";                                  else if (function.Contains("GetGraphicsResetStatus")) funcdef = "OpenGL.GraphicResetStatus";                              }                          }                          else if (line.Contains("pdparam"))                          {                              if (line.Contains("void") && !line.Contains("*"))                              {                                  output.WriteLine(string.Format("            [DllImport(Gl.Library' EntryPoint = \"{0}\"' ExactSpelling = true)]"' function));                                  output.WriteLine(string.Format("            internal extern static {0} {1}();"' funcdef' function.Substring(2)));                                  if (funcdef == "Unknown") unknowns++;                                  continue;                              }                                string paramType = line.Substring(line.IndexOf("<td>") + 4);                              paramType = paramType.Substring(0' paramType.IndexOf('<')).Trim(new char[] { '<' });                                string paramName = line.Substring(line.IndexOf("<var class=\"pdparam\">") + 21);                              paramName = paramName.Substring(0' paramName.IndexOf('<'));                              paramName = paramName.Trim(new char[] { '.' }); // to remove a trailing . from glTextureParameterfv                                if (paramName.ToLower() == "internalformat") paramName = "internalFormat";                              if (paramName == "internalFormat" && paramType.Trim() == "GLint") paramType = "GLenum";                              if (paramName == "mask" && paramType.StartsWith("GL")) paramType = "GLenum";                              if (paramName == "access" && function.Contains("MapBuffer")) paramType = "GLenum";                              if (paramName == "framebuffer" && function.Contains("NamedFramebufferReadBuffer")) paramType = "GLenum";                                string csharpType = GetCSharpType(paramType);                              if (csharpType == "Unknown") csharpType = GetUnknownType(paramName' function);                              if (csharpType == "Unknown[]")                              {                                  if (function == "glTextureParameterfv") csharpType = "Single[]";    // due to an error in the formatting of glTextureParameterfv                                  else csharpType = GetUnknownType(paramName' function) + "[]";                              }                              if (csharpType.Contains("[]") || csharpType == "IntPtr")// || csharpType == "String")                              {                                  // figure out if this is an output or input type                                  if (function.Contains("Gen") || function.Contains("Get") || function.Contains("Read"))                                  {                                      //if (paramName != "size" && paramName != "offset")                                      if (((paramName == "size" || paramName == "offset") && function.Contains("SubData")) ||                                          (paramName == "sync" && function.Contains("GetSynciv")))                                      {                                        }                                      else                                      {                                          csharpType = "[OutAttribute] " + csharpType;                                      }                                  }                              }                              if (paramName == "varyings") csharpType = "String[]";                              if (paramName == "string" && function.Contains("ShaderSource")) csharpType = "String[]";                              if (paramName == "data" && function.Contains("Pixels")) csharpType = "Int32[]";                              paramTypes.Add(csharpType);                                if (paramName == "params") paramName = "@params";                              if (paramName == "ref") paramName = "@ref";                              if (paramName == "string") paramName = "@string";                              if (paramName == "bifSize") paramName = "bufSize";                              paramNames.Add(paramName);                          }                      }                        if (paramTypes.Count != 0)                          WriteBinding(function' funcdef' paramTypes' paramNames' output);                  }                    output.WriteLine(@"        }      }  }");              }
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,Main,The following statement contains a magic number: using (StreamReader stream = new StreamReader("../OpenGL4.txt"))              using (StreamWriter output = new StreamWriter("GlCore.cs"))              using (StreamWriter errors = new StreamWriter("errors.txt"))              {                  output.WriteLine(@"using System;  using System.Runtime.InteropServices;    namespace OpenGL  {      partial class Gl      {          internal static partial class NativeMethods          {");                  while (!stream.EndOfStream)                  {                      string function = stream.ReadLine();                      if (ExploredFunctions.Contains(function)) continue;                      //if (function.StartsWith("glDebugMessage")) continue;                      if (function.Contains("Debug")) continue;                      functionCount++;                        string page = LoadManPage(function);                        StringReader reader = new StringReader(page);                      string funcdef = String.Empty;                      List<string> paramTypes = new List<string>();                      List<string> paramNames = new List<string>();                        while (true)                      {                          string line = reader.ReadLine();                          if (line == null || line.Length == 0) break;                            if (line.Contains("funcdef"))                          {                              if (paramTypes.Count != 0)                              {                                  WriteBinding(function' funcdef' paramTypes' paramNames' output);                                    paramTypes.Clear();                                  paramNames.Clear();                              }                                funcdef = line.Substring(line.IndexOf("<code class=\"funcdef\">") + 22);                              funcdef = funcdef.Substring(0' funcdef.IndexOf('<')).Trim();                              funcdef = (funcdef == "void" ? "void" : GetCSharpType(funcdef));                                function = line.Substring(line.IndexOf("fsfunc") + 8);                              function = function.Substring(0' function.IndexOf('<'));                                if (function.StartsWith("glGetString")) funcdef = "IntPtr";                                if (funcdef == "Unknown")                              {                                  if (function.Contains("FramebufferStatus")) funcdef = "OpenGL.FramebufferErrorCode";                                  else if (function.Contains("ClientWaitSync")) funcdef = "OpenGL.ArbSync";                                  else if (function.Contains("GetError")) funcdef = "OpenGL.ErrorCode";                                  else if (function.Contains("GetGraphicsResetStatus")) funcdef = "OpenGL.GraphicResetStatus";                              }                          }                          else if (line.Contains("pdparam"))                          {                              if (line.Contains("void") && !line.Contains("*"))                              {                                  output.WriteLine(string.Format("            [DllImport(Gl.Library' EntryPoint = \"{0}\"' ExactSpelling = true)]"' function));                                  output.WriteLine(string.Format("            internal extern static {0} {1}();"' funcdef' function.Substring(2)));                                  if (funcdef == "Unknown") unknowns++;                                  continue;                              }                                string paramType = line.Substring(line.IndexOf("<td>") + 4);                              paramType = paramType.Substring(0' paramType.IndexOf('<')).Trim(new char[] { '<' });                                string paramName = line.Substring(line.IndexOf("<var class=\"pdparam\">") + 21);                              paramName = paramName.Substring(0' paramName.IndexOf('<'));                              paramName = paramName.Trim(new char[] { '.' }); // to remove a trailing . from glTextureParameterfv                                if (paramName.ToLower() == "internalformat") paramName = "internalFormat";                              if (paramName == "internalFormat" && paramType.Trim() == "GLint") paramType = "GLenum";                              if (paramName == "mask" && paramType.StartsWith("GL")) paramType = "GLenum";                              if (paramName == "access" && function.Contains("MapBuffer")) paramType = "GLenum";                              if (paramName == "framebuffer" && function.Contains("NamedFramebufferReadBuffer")) paramType = "GLenum";                                string csharpType = GetCSharpType(paramType);                              if (csharpType == "Unknown") csharpType = GetUnknownType(paramName' function);                              if (csharpType == "Unknown[]")                              {                                  if (function == "glTextureParameterfv") csharpType = "Single[]";    // due to an error in the formatting of glTextureParameterfv                                  else csharpType = GetUnknownType(paramName' function) + "[]";                              }                              if (csharpType.Contains("[]") || csharpType == "IntPtr")// || csharpType == "String")                              {                                  // figure out if this is an output or input type                                  if (function.Contains("Gen") || function.Contains("Get") || function.Contains("Read"))                                  {                                      //if (paramName != "size" && paramName != "offset")                                      if (((paramName == "size" || paramName == "offset") && function.Contains("SubData")) ||                                          (paramName == "sync" && function.Contains("GetSynciv")))                                      {                                        }                                      else                                      {                                          csharpType = "[OutAttribute] " + csharpType;                                      }                                  }                              }                              if (paramName == "varyings") csharpType = "String[]";                              if (paramName == "string" && function.Contains("ShaderSource")) csharpType = "String[]";                              if (paramName == "data" && function.Contains("Pixels")) csharpType = "Int32[]";                              paramTypes.Add(csharpType);                                if (paramName == "params") paramName = "@params";                              if (paramName == "ref") paramName = "@ref";                              if (paramName == "string") paramName = "@string";                              if (paramName == "bifSize") paramName = "bufSize";                              paramNames.Add(paramName);                          }                      }                        if (paramTypes.Count != 0)                          WriteBinding(function' funcdef' paramTypes' paramNames' output);                  }                    output.WriteLine(@"        }      }  }");              }
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetUnknownType,The following statement contains a magic number: using (StreamReader stream = new StreamReader("../GlCoreOld.cs"))              {                  string fname = functionName.Substring(2);                    if (fname == "ReadnPixels") fname = "ReadPixels";                    while (!stream.EndOfStream)                  {                      string line = stream.ReadLine();                        if ((line.Contains(fname) || line.Contains(fname.Replace("Named"' ""))) && line.Contains(glName))                      {                          string[] split = line.Split(new char[] { '('' '''' ' '' ')' }' StringSplitOptions.RemoveEmptyEntries);                          for (int i = 0; i < split.Length; i++)                              if (split[i] == glName && split[i - 1] != "IntPtr") return split[i - 1].Trim(new char[] { '['' ']' });                      }                  }              }
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,GetCSharpType,The following statement contains a magic number: if (glType.StartsWith("const")) glType = glType.Substring(6);
Magic Number,BuildGlCore,Program,C:\repos\giawa_opengl4csharp\BindingsGen\BuildGlCore\Program.cs,WriteBinding,The following statement contains a magic number: output.Write(string.Format("            internal extern static {0} {1}("' funcdef' function.Substring(2)));
