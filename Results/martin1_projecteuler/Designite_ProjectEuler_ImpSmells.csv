Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,Cyclomatic complexity of the method is 48
Long Statement,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,RunSolution,The length of the statement  "	Console.WriteLine (string.Format ("Longest Collatz sequence length under one million is {0} and it starts with \n{1}"' longestSequenceLength' longestSequenceStart)); " is 165.
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,getNextPrime,The following statement contains a magic number: yield return 2;  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,getNextPrime,The following statement contains a magic number: foreach (var num in Enumerable.Range (2' Int32.MaxValue - 2).Where (x => x % 2 != 0)) {  	//Console.WriteLine(num);  	if (num >= limit)  		break;  	if (isPrime (num))  		yield return num;  }  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,getNextPrime,The following statement contains a magic number: foreach (var num in Enumerable.Range (2' Int32.MaxValue - 2).Where (x => x % 2 != 0)) {  	//Console.WriteLine(num);  	if (num >= limit)  		break;  	if (isPrime (num))  		yield return num;  }  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,getNextPrime,The following statement contains a magic number: foreach (var num in Enumerable.Range (2' Int32.MaxValue - 2).Where (x => x % 2 != 0)) {  	//Console.WriteLine(num);  	if (num >= limit)  		break;  	if (isPrime (num))  		yield return num;  }  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,isPrime,The following statement contains a magic number: if (number < 4)  	return true;  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,isPrime,The following statement contains a magic number: if (number < 9)  	return true;  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,isPrime,The following statement contains a magic number: if (number % 3 == 0)  	return false;  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,isPrime,The following statement contains a magic number: while (f <= r) {  	if (number % f == 0)  		return false;  	if (number % (f + 2) == 0)  		return false;  	f += 6;  }  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,isPrime,The following statement contains a magic number: while (f <= r) {  	if (number % f == 0)  		return false;  	if (number % (f + 2) == 0)  		return false;  	f += 6;  }  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,isPrime,The following statement contains a magic number: if (number % (f + 2) == 0)  	return false;  
Magic Number,ProjectEuler,SummationOfPrimes,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\10_SummationOfPrimes.cs,isPrime,The following statement contains a magic number: f += 6;  
Magic Number,ProjectEuler,LargestProductInAGrid,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\11_LargestProductInAGrid.cs,RunSolution,The following statement contains a magic number: maxProduct (matrix' 4);  
Magic Number,ProjectEuler,HighlyDivisibleTriangularNumber,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\12_HighlyDivisibleTriangularNumber.cs,RunSolution,The following statement contains a magic number: foreach (var i in getNextTriangularNumber ()) {  	var a = getNumberOfDivisors (i);  	if (a > maxDivisors) {  		maxDivisors = a;  		Console.WriteLine (maxDivisors + " " + i);  	}  	//Console.WriteLine(i + " " + getNumberOfDivisors(i));  	if (getNumberOfDivisors (i) > 500) {  		Console.WriteLine (i);  		break;  	}  }  
Magic Number,ProjectEuler,HighlyDivisibleTriangularNumber,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\12_HighlyDivisibleTriangularNumber.cs,RunSolution,The following statement contains a magic number: if (getNumberOfDivisors (i) > 500) {  	Console.WriteLine (i);  	break;  }  
Magic Number,ProjectEuler,HighlyDivisibleTriangularNumber,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\12_HighlyDivisibleTriangularNumber.cs,getNextTriangularNumber,The following statement contains a magic number: foreach (var number in Enumerable.Range (1' Int32.MaxValue - 1)) {  	yield return number * (number + 1) / 2;  }  
Magic Number,ProjectEuler,HighlyDivisibleTriangularNumber,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\12_HighlyDivisibleTriangularNumber.cs,getNextTriangularNumber,The following statement contains a magic number: yield return number * (number + 1) / 2;  
Magic Number,ProjectEuler,HighlyDivisibleTriangularNumber,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\12_HighlyDivisibleTriangularNumber.cs,getNumberOfDivisors,The following statement contains a magic number: if (number % 100 != 0)  	return 0;  
Magic Number,ProjectEuler,HighlyDivisibleTriangularNumber,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\12_HighlyDivisibleTriangularNumber.cs,getNumberOfDivisors,The following statement contains a magic number: for (int i = number / 2; i >= 1; i--) {  	if (number % i == 0) {  		numDivisors++;  	}  }  
Magic Number,ProjectEuler,LargeSum,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\13_LargeSum.cs,RunSolution,The following statement contains a magic number: Console.WriteLine (CalculateSum (12));  
Magic Number,ProjectEuler,LargeSum,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\13_LargeSum.cs,CalculateSum,The following statement contains a magic number: return sum.ToString ().Substring (0' 10);  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,RunSolution,The following statement contains a magic number: foreach (var n in Enumerable.Range (1' 999999).Where (i => i % 2 != 0 && ((3 * i + 1) / 2) % 2 != 0).Reverse ()) {  	//Console.WriteLine(n + "...");  	var sequenceLength = GetCollatzSequenceLength (n);  	if (sequenceLength > longestSequenceLength) {  		longestSequenceLength = sequenceLength;  		longestSequenceStart = n;  		Console.WriteLine (n + " " + longestSequenceLength);  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,RunSolution,The following statement contains a magic number: foreach (var n in Enumerable.Range (1' 999999).Where (i => i % 2 != 0 && ((3 * i + 1) / 2) % 2 != 0).Reverse ()) {  	//Console.WriteLine(n + "...");  	var sequenceLength = GetCollatzSequenceLength (n);  	if (sequenceLength > longestSequenceLength) {  		longestSequenceLength = sequenceLength;  		longestSequenceStart = n;  		Console.WriteLine (n + " " + longestSequenceLength);  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,RunSolution,The following statement contains a magic number: foreach (var n in Enumerable.Range (1' 999999).Where (i => i % 2 != 0 && ((3 * i + 1) / 2) % 2 != 0).Reverse ()) {  	//Console.WriteLine(n + "...");  	var sequenceLength = GetCollatzSequenceLength (n);  	if (sequenceLength > longestSequenceLength) {  		longestSequenceLength = sequenceLength;  		longestSequenceStart = n;  		Console.WriteLine (n + " " + longestSequenceLength);  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,RunSolution,The following statement contains a magic number: foreach (var n in Enumerable.Range (1' 999999).Where (i => i % 2 != 0 && ((3 * i + 1) / 2) % 2 != 0).Reverse ()) {  	//Console.WriteLine(n + "...");  	var sequenceLength = GetCollatzSequenceLength (n);  	if (sequenceLength > longestSequenceLength) {  		longestSequenceLength = sequenceLength;  		longestSequenceStart = n;  		Console.WriteLine (n + " " + longestSequenceLength);  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,RunSolution,The following statement contains a magic number: foreach (var n in Enumerable.Range (1' 999999).Where (i => i % 2 != 0 && ((3 * i + 1) / 2) % 2 != 0).Reverse ()) {  	//Console.WriteLine(n + "...");  	var sequenceLength = GetCollatzSequenceLength (n);  	if (sequenceLength > longestSequenceLength) {  		longestSequenceLength = sequenceLength;  		longestSequenceStart = n;  		Console.WriteLine (n + " " + longestSequenceLength);  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: while (true) {  	length++;  	if (lastElement == 1)  		break;  	if (lastElement % 2 == 0) {  		lastElement = lastElement / 2;  	}  	else//lastElement is odd  	 {  		lastElement = (3 * lastElement) + 1;  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: while (true) {  	length++;  	if (lastElement == 1)  		break;  	if (lastElement % 2 == 0) {  		lastElement = lastElement / 2;  	}  	else//lastElement is odd  	 {  		lastElement = (3 * lastElement) + 1;  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: while (true) {  	length++;  	if (lastElement == 1)  		break;  	if (lastElement % 2 == 0) {  		lastElement = lastElement / 2;  	}  	else//lastElement is odd  	 {  		lastElement = (3 * lastElement) + 1;  	}  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: if (lastElement % 2 == 0) {  	lastElement = lastElement / 2;  }  else//lastElement is odd   {  	lastElement = (3 * lastElement) + 1;  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: if (lastElement % 2 == 0) {  	lastElement = lastElement / 2;  }  else//lastElement is odd   {  	lastElement = (3 * lastElement) + 1;  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: if (lastElement % 2 == 0) {  	lastElement = lastElement / 2;  }  else//lastElement is odd   {  	lastElement = (3 * lastElement) + 1;  }  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: lastElement = lastElement / 2;  
Magic Number,ProjectEuler,LongestCollatzSequence,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\14_LongestCollatzSequence.cs,GetCollatzSequenceLength,The following statement contains a magic number: lastElement = (3 * lastElement) + 1;  
Magic Number,ProjectEuler,LatticePaths,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\15_LatticePaths.cs,RunSolution,The following statement contains a magic number: foreach (var num in Enumerable.Range (1' maxValue)) {  	var numBinary = Convert.ToString (num' 2).PadLeft (squareSize * 2' '0');  	if (numBinary.Length > squareSize * 2) {  		break;  	}  	if (numBinary.Count (c => c == '0') == squareSize && !paths.Contains (num)) {  		paths.Add (num);  	}  }  
Magic Number,ProjectEuler,LatticePaths,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\15_LatticePaths.cs,RunSolution,The following statement contains a magic number: foreach (var num in Enumerable.Range (1' maxValue)) {  	var numBinary = Convert.ToString (num' 2).PadLeft (squareSize * 2' '0');  	if (numBinary.Length > squareSize * 2) {  		break;  	}  	if (numBinary.Count (c => c == '0') == squareSize && !paths.Contains (num)) {  		paths.Add (num);  	}  }  
Magic Number,ProjectEuler,LatticePaths,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\15_LatticePaths.cs,RunSolution,The following statement contains a magic number: foreach (var num in Enumerable.Range (1' maxValue)) {  	var numBinary = Convert.ToString (num' 2).PadLeft (squareSize * 2' '0');  	if (numBinary.Length > squareSize * 2) {  		break;  	}  	if (numBinary.Count (c => c == '0') == squareSize && !paths.Contains (num)) {  		paths.Add (num);  	}  }  
Magic Number,ProjectEuler,LatticePaths,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\15_LatticePaths.cs,RunSolution,The following statement contains a magic number: if (numBinary.Length > squareSize * 2) {  	break;  }  
Magic Number,ProjectEuler,LatticePaths,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\15_LatticePaths.cs,GetMaxValue,The following statement contains a magic number: return Convert.ToInt32 (value' 2);  
Magic Number,ProjectEuler,CountingSundays,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\19_CountingSundays.cs,RunSolution,The following statement contains a magic number: for (int year = 1901; year <= 2000; year++) {  	for (int month = 1; month <= 12; month++) {  		if ((new DateTime (year' month' 1)).DayOfWeek == DayOfWeek.Sunday) {  			sundays++;  		}  	}  }  
Magic Number,ProjectEuler,CountingSundays,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\19_CountingSundays.cs,RunSolution,The following statement contains a magic number: for (int year = 1901; year <= 2000; year++) {  	for (int month = 1; month <= 12; month++) {  		if ((new DateTime (year' month' 1)).DayOfWeek == DayOfWeek.Sunday) {  			sundays++;  		}  	}  }  
Magic Number,ProjectEuler,CountingSundays,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\19_CountingSundays.cs,RunSolution,The following statement contains a magic number: for (int year = 1901; year <= 2000; year++) {  	for (int month = 1; month <= 12; month++) {  		if ((new DateTime (year' month' 1)).DayOfWeek == DayOfWeek.Sunday) {  			sundays++;  		}  	}  }  
Magic Number,ProjectEuler,CountingSundays,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\19_CountingSundays.cs,RunSolution,The following statement contains a magic number: for (int month = 1; month <= 12; month++) {  	if ((new DateTime (year' month' 1)).DayOfWeek == DayOfWeek.Sunday) {  		sundays++;  	}  }  
Magic Number,ProjectEuler,EvenFibonacci,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\2_EvenFibonacci.cs,RunSolution,The following statement contains a magic number: foreach (var number in fibonacci (4000000)) {  	if (number % 2 == 0) {  		//Console.WriteLine(number);  		sum += number;  	}  }  
Magic Number,ProjectEuler,EvenFibonacci,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\2_EvenFibonacci.cs,RunSolution,The following statement contains a magic number: foreach (var number in fibonacci (4000000)) {  	if (number % 2 == 0) {  		//Console.WriteLine(number);  		sum += number;  	}  }  
Magic Number,ProjectEuler,EvenFibonacci,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\2_EvenFibonacci.cs,RunSolution,The following statement contains a magic number: if (number % 2 == 0) {  	//Console.WriteLine(number);  	sum += number;  }  
Magic Number,ProjectEuler,MultiplesOf3or5,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\1_MultiplesOf3or5.cs,RunSolution,The following statement contains a magic number: foreach (var number in getNumbers (1000)) {  	sum += number;  }  
Magic Number,ProjectEuler,MultiplesOf3or5,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\1_MultiplesOf3or5.cs,getNumbers,The following statement contains a magic number: for (int i = 0; i < upperLimit; i++) {  	if (i % 3 == 0 || i % 5 == 0) {  		yield return i;  	}  }  
Magic Number,ProjectEuler,MultiplesOf3or5,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\1_MultiplesOf3or5.cs,getNumbers,The following statement contains a magic number: for (int i = 0; i < upperLimit; i++) {  	if (i % 3 == 0 || i % 5 == 0) {  		yield return i;  	}  }  
Magic Number,ProjectEuler,MultiplesOf3or5,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\1_MultiplesOf3or5.cs,getNumbers,The following statement contains a magic number: if (i % 3 == 0 || i % 5 == 0) {  	yield return i;  }  
Magic Number,ProjectEuler,MultiplesOf3or5,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\1_MultiplesOf3or5.cs,getNumbers,The following statement contains a magic number: if (i % 3 == 0 || i % 5 == 0) {  	yield return i;  }  
Magic Number,ProjectEuler,FactorLargePrime,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\3_FactorLargePrime.cs,RunSolution,The following statement contains a magic number: while (i < 5) {  	if (bigNumber == 1) {  		Console.WriteLine ("All Done");  		break;  	}  	var factor = getFirstPrimeFactor (bigNumber);  	primeFactors.Add (factor);  	bigNumber /= factor;  	i++;  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: Console.WriteLine (2002.ToString ().Length);  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var outer in nums) {  	foreach (var inner in nums) {  		product = outer * inner;  		numString = product.ToString ();  		if (numString [numString.Length - 1] == 0) {  			continue;  		}  		if (numString.Length % 2 == 0) {  			beginning = numString.Substring (0' (numString.Length) / 2);  			end = numString.Substring ((numString.Length) / 2);  		}  		else// numString.Length % 2 == 1  		 {  			beginning = numString.Substring (0' (int)(numString.Length / 2));  			end = numString.Substring ((int)numString.Length / 2 + 1);  		}  		if (beginning.Equals (reverseString (end))) {  			if (product > maxPalindrome) {  				maxPalindrome = product;  			}  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var outer in nums) {  	foreach (var inner in nums) {  		product = outer * inner;  		numString = product.ToString ();  		if (numString [numString.Length - 1] == 0) {  			continue;  		}  		if (numString.Length % 2 == 0) {  			beginning = numString.Substring (0' (numString.Length) / 2);  			end = numString.Substring ((numString.Length) / 2);  		}  		else// numString.Length % 2 == 1  		 {  			beginning = numString.Substring (0' (int)(numString.Length / 2));  			end = numString.Substring ((int)numString.Length / 2 + 1);  		}  		if (beginning.Equals (reverseString (end))) {  			if (product > maxPalindrome) {  				maxPalindrome = product;  			}  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var outer in nums) {  	foreach (var inner in nums) {  		product = outer * inner;  		numString = product.ToString ();  		if (numString [numString.Length - 1] == 0) {  			continue;  		}  		if (numString.Length % 2 == 0) {  			beginning = numString.Substring (0' (numString.Length) / 2);  			end = numString.Substring ((numString.Length) / 2);  		}  		else// numString.Length % 2 == 1  		 {  			beginning = numString.Substring (0' (int)(numString.Length / 2));  			end = numString.Substring ((int)numString.Length / 2 + 1);  		}  		if (beginning.Equals (reverseString (end))) {  			if (product > maxPalindrome) {  				maxPalindrome = product;  			}  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var outer in nums) {  	foreach (var inner in nums) {  		product = outer * inner;  		numString = product.ToString ();  		if (numString [numString.Length - 1] == 0) {  			continue;  		}  		if (numString.Length % 2 == 0) {  			beginning = numString.Substring (0' (numString.Length) / 2);  			end = numString.Substring ((numString.Length) / 2);  		}  		else// numString.Length % 2 == 1  		 {  			beginning = numString.Substring (0' (int)(numString.Length / 2));  			end = numString.Substring ((int)numString.Length / 2 + 1);  		}  		if (beginning.Equals (reverseString (end))) {  			if (product > maxPalindrome) {  				maxPalindrome = product;  			}  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var outer in nums) {  	foreach (var inner in nums) {  		product = outer * inner;  		numString = product.ToString ();  		if (numString [numString.Length - 1] == 0) {  			continue;  		}  		if (numString.Length % 2 == 0) {  			beginning = numString.Substring (0' (numString.Length) / 2);  			end = numString.Substring ((numString.Length) / 2);  		}  		else// numString.Length % 2 == 1  		 {  			beginning = numString.Substring (0' (int)(numString.Length / 2));  			end = numString.Substring ((int)numString.Length / 2 + 1);  		}  		if (beginning.Equals (reverseString (end))) {  			if (product > maxPalindrome) {  				maxPalindrome = product;  			}  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var inner in nums) {  	product = outer * inner;  	numString = product.ToString ();  	if (numString [numString.Length - 1] == 0) {  		continue;  	}  	if (numString.Length % 2 == 0) {  		beginning = numString.Substring (0' (numString.Length) / 2);  		end = numString.Substring ((numString.Length) / 2);  	}  	else// numString.Length % 2 == 1  	 {  		beginning = numString.Substring (0' (int)(numString.Length / 2));  		end = numString.Substring ((int)numString.Length / 2 + 1);  	}  	if (beginning.Equals (reverseString (end))) {  		if (product > maxPalindrome) {  			maxPalindrome = product;  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var inner in nums) {  	product = outer * inner;  	numString = product.ToString ();  	if (numString [numString.Length - 1] == 0) {  		continue;  	}  	if (numString.Length % 2 == 0) {  		beginning = numString.Substring (0' (numString.Length) / 2);  		end = numString.Substring ((numString.Length) / 2);  	}  	else// numString.Length % 2 == 1  	 {  		beginning = numString.Substring (0' (int)(numString.Length / 2));  		end = numString.Substring ((int)numString.Length / 2 + 1);  	}  	if (beginning.Equals (reverseString (end))) {  		if (product > maxPalindrome) {  			maxPalindrome = product;  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var inner in nums) {  	product = outer * inner;  	numString = product.ToString ();  	if (numString [numString.Length - 1] == 0) {  		continue;  	}  	if (numString.Length % 2 == 0) {  		beginning = numString.Substring (0' (numString.Length) / 2);  		end = numString.Substring ((numString.Length) / 2);  	}  	else// numString.Length % 2 == 1  	 {  		beginning = numString.Substring (0' (int)(numString.Length / 2));  		end = numString.Substring ((int)numString.Length / 2 + 1);  	}  	if (beginning.Equals (reverseString (end))) {  		if (product > maxPalindrome) {  			maxPalindrome = product;  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var inner in nums) {  	product = outer * inner;  	numString = product.ToString ();  	if (numString [numString.Length - 1] == 0) {  		continue;  	}  	if (numString.Length % 2 == 0) {  		beginning = numString.Substring (0' (numString.Length) / 2);  		end = numString.Substring ((numString.Length) / 2);  	}  	else// numString.Length % 2 == 1  	 {  		beginning = numString.Substring (0' (int)(numString.Length / 2));  		end = numString.Substring ((int)numString.Length / 2 + 1);  	}  	if (beginning.Equals (reverseString (end))) {  		if (product > maxPalindrome) {  			maxPalindrome = product;  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: foreach (var inner in nums) {  	product = outer * inner;  	numString = product.ToString ();  	if (numString [numString.Length - 1] == 0) {  		continue;  	}  	if (numString.Length % 2 == 0) {  		beginning = numString.Substring (0' (numString.Length) / 2);  		end = numString.Substring ((numString.Length) / 2);  	}  	else// numString.Length % 2 == 1  	 {  		beginning = numString.Substring (0' (int)(numString.Length / 2));  		end = numString.Substring ((int)numString.Length / 2 + 1);  	}  	if (beginning.Equals (reverseString (end))) {  		if (product > maxPalindrome) {  			maxPalindrome = product;  		}  	}  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: if (numString.Length % 2 == 0) {  	beginning = numString.Substring (0' (numString.Length) / 2);  	end = numString.Substring ((numString.Length) / 2);  }  else// numString.Length % 2 == 1   {  	beginning = numString.Substring (0' (int)(numString.Length / 2));  	end = numString.Substring ((int)numString.Length / 2 + 1);  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: if (numString.Length % 2 == 0) {  	beginning = numString.Substring (0' (numString.Length) / 2);  	end = numString.Substring ((numString.Length) / 2);  }  else// numString.Length % 2 == 1   {  	beginning = numString.Substring (0' (int)(numString.Length / 2));  	end = numString.Substring ((int)numString.Length / 2 + 1);  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: if (numString.Length % 2 == 0) {  	beginning = numString.Substring (0' (numString.Length) / 2);  	end = numString.Substring ((numString.Length) / 2);  }  else// numString.Length % 2 == 1   {  	beginning = numString.Substring (0' (int)(numString.Length / 2));  	end = numString.Substring ((int)numString.Length / 2 + 1);  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: if (numString.Length % 2 == 0) {  	beginning = numString.Substring (0' (numString.Length) / 2);  	end = numString.Substring ((numString.Length) / 2);  }  else// numString.Length % 2 == 1   {  	beginning = numString.Substring (0' (int)(numString.Length / 2));  	end = numString.Substring ((int)numString.Length / 2 + 1);  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: if (numString.Length % 2 == 0) {  	beginning = numString.Substring (0' (numString.Length) / 2);  	end = numString.Substring ((numString.Length) / 2);  }  else// numString.Length % 2 == 1   {  	beginning = numString.Substring (0' (int)(numString.Length / 2));  	end = numString.Substring ((int)numString.Length / 2 + 1);  }  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: beginning = numString.Substring (0' (numString.Length) / 2);  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: end = numString.Substring ((numString.Length) / 2);  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: beginning = numString.Substring (0' (int)(numString.Length / 2));  
Magic Number,ProjectEuler,LargestPalindromeProduct,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\4_LargestPalindromeProduct.cs,RunSolution,The following statement contains a magic number: end = numString.Substring ((int)numString.Length / 2 + 1);  
Magic Number,ProjectEuler,SmallestMultiple,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\5_SmallestMultiple.cs,RunSolution,The following statement contains a magic number: foreach (var prime in Utils.getNextPrime (20)) {  	num *= prime;  }  
Magic Number,ProjectEuler,SmallestMultiple,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\5_SmallestMultiple.cs,RunSolution,The following statement contains a magic number: num *= 4;  
Magic Number,ProjectEuler,SmallestMultiple,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\5_SmallestMultiple.cs,RunSolution,The following statement contains a magic number: num *= 3;  
Magic Number,ProjectEuler,SmallestMultiple,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\5_SmallestMultiple.cs,RunSolution,The following statement contains a magic number: num *= 4;  
Magic Number,ProjectEuler,SumSquareDifference,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\6_SumSquareDifference.cs,RunSolution,The following statement contains a magic number: foreach (var num in Enumerable.Range (1' 100)) {  	sumOfSquares += num * num;  	sum += num;  }  
Magic Number,ProjectEuler,TenThousandFirstPrime,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\7_10001stPrime.cs,RunSolution,The following statement contains a magic number: foreach (var prime in Utils.getNextPrime ()) {  	i++;  	if (i == 10001) {  		Console.WriteLine (i + ": " + prime);  		break;  	}  }  
Magic Number,ProjectEuler,TenThousandFirstPrime,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\7_10001stPrime.cs,RunSolution,The following statement contains a magic number: if (i == 10001) {  	Console.WriteLine (i + ": " + prime);  	break;  }  
Magic Number,ProjectEuler,LargestProductInSeries,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\8_LargestProductInSeries.cs,getNumberProducts,The following statement contains a magic number: for (int i = 0; i < numberAsText.Length - 4; i++) {  	int product = 1;  	foreach (char c in numberAsText.Substring (i' 5)) {  		product *= (int)char.GetNumericValue (c);  	}  	yield return product;  }  
Magic Number,ProjectEuler,LargestProductInSeries,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\8_LargestProductInSeries.cs,getNumberProducts,The following statement contains a magic number: for (int i = 0; i < numberAsText.Length - 4; i++) {  	int product = 1;  	foreach (char c in numberAsText.Substring (i' 5)) {  		product *= (int)char.GetNumericValue (c);  	}  	yield return product;  }  
Magic Number,ProjectEuler,LargestProductInSeries,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\8_LargestProductInSeries.cs,getNumberProducts,The following statement contains a magic number: foreach (char c in numberAsText.Substring (i' 5)) {  	product *= (int)char.GetNumericValue (c);  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int n = 1; n < loopLimit; n++) {  	for (int m = 1; m < loopLimit; m++) {  		a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  		b = 2 * m * n;  		c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  		//Console.WriteLine(a);  		if (a + b + c == limit) {  			Console.WriteLine (a + " " + b + " " + c);  		}  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int n = 1; n < loopLimit; n++) {  	for (int m = 1; m < loopLimit; m++) {  		a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  		b = 2 * m * n;  		c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  		//Console.WriteLine(a);  		if (a + b + c == limit) {  			Console.WriteLine (a + " " + b + " " + c);  		}  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int n = 1; n < loopLimit; n++) {  	for (int m = 1; m < loopLimit; m++) {  		a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  		b = 2 * m * n;  		c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  		//Console.WriteLine(a);  		if (a + b + c == limit) {  			Console.WriteLine (a + " " + b + " " + c);  		}  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int n = 1; n < loopLimit; n++) {  	for (int m = 1; m < loopLimit; m++) {  		a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  		b = 2 * m * n;  		c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  		//Console.WriteLine(a);  		if (a + b + c == limit) {  			Console.WriteLine (a + " " + b + " " + c);  		}  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int n = 1; n < loopLimit; n++) {  	for (int m = 1; m < loopLimit; m++) {  		a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  		b = 2 * m * n;  		c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  		//Console.WriteLine(a);  		if (a + b + c == limit) {  			Console.WriteLine (a + " " + b + " " + c);  		}  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int m = 1; m < loopLimit; m++) {  	a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  	b = 2 * m * n;  	c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  	//Console.WriteLine(a);  	if (a + b + c == limit) {  		Console.WriteLine (a + " " + b + " " + c);  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int m = 1; m < loopLimit; m++) {  	a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  	b = 2 * m * n;  	c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  	//Console.WriteLine(a);  	if (a + b + c == limit) {  		Console.WriteLine (a + " " + b + " " + c);  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int m = 1; m < loopLimit; m++) {  	a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  	b = 2 * m * n;  	c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  	//Console.WriteLine(a);  	if (a + b + c == limit) {  		Console.WriteLine (a + " " + b + " " + c);  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int m = 1; m < loopLimit; m++) {  	a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  	b = 2 * m * n;  	c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  	//Console.WriteLine(a);  	if (a + b + c == limit) {  		Console.WriteLine (a + " " + b + " " + c);  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: for (int m = 1; m < loopLimit; m++) {  	a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  	b = 2 * m * n;  	c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  	//Console.WriteLine(a);  	if (a + b + c == limit) {  		Console.WriteLine (a + " " + b + " " + c);  	}  }  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: a = (int)(Math.Pow (m' 2) - Math.Pow (n' 2));  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: b = 2 * m * n;  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: c = (int)(Math.Pow (m' 2) + Math.Pow (n' 2));  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: Console.WriteLine ("Product: {0}"' 375 * 200 * 425);  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: Console.WriteLine ("Product: {0}"' 375 * 200 * 425);  
Magic Number,ProjectEuler,SpecialPythagoreanTriplet,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\9_SpecialPythagoreanTriplet.cs,RunSolution,The following statement contains a magic number: Console.WriteLine ("Product: {0}"' 375 * 200 * 425);  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following statement contains a magic number: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,getNextPrime,The following statement contains a magic number: yield return 2;  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,getNextPrime,The following statement contains a magic number: foreach (var num in Enumerable.Range (2' Int32.MaxValue - 1).Where (x => x % 2 != 0))  	if (limit != 0 && num >= limit)  		break;  	else if (isPrime (num))  		yield return num;  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,getNextPrime,The following statement contains a magic number: foreach (var num in Enumerable.Range (2' Int32.MaxValue - 1).Where (x => x % 2 != 0))  	if (limit != 0 && num >= limit)  		break;  	else if (isPrime (num))  		yield return num;  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,isPrime,The following statement contains a magic number: if (number < 4)  	return true;  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,isPrime,The following statement contains a magic number: if (number < 9)  	return true;  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,isPrime,The following statement contains a magic number: if (number % 3 == 0)  	return false;  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,isPrime,The following statement contains a magic number: while (f <= r) {  	if (number % f == 0)  		return false;  	if (number % (f + 2) == 0)  		return false;  	f += 6;  }  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,isPrime,The following statement contains a magic number: while (f <= r) {  	if (number % f == 0)  		return false;  	if (number % (f + 2) == 0)  		return false;  	f += 6;  }  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,isPrime,The following statement contains a magic number: if (number % (f + 2) == 0)  	return false;  
Magic Number,ProjectEuler,Utils,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Utils.cs,isPrime,The following statement contains a magic number: f += 6;  
Missing Default,ProjectEuler,Start,C:\repos\martin1_projecteuler\ProjectEuler\ProjectEuler\Start.cs,Main,The following switch statement is missing a default case: switch (solutionNumber) {  case 1:  	MultiplesOf3or5.RunSolution ();  	break;  case 2:  	EvenFibonacci.RunSolution ();  	break;  case 3:  	FactorLargePrime.RunSolution ();  	break;  case 4:  	LargestPalindromeProduct.RunSolution ();  	break;  case 5:  	SmallestMultiple.RunSolution ();  	break;  case 6:  	SumSquareDifference.RunSolution ();  	break;  case 7:  	TenThousandFirstPrime.RunSolution ();  	break;  case 8:  	LargestProductInSeries.RunSolution ();  	break;  case 9:  	SpecialPythagoreanTriplet.RunSolution ();  	break;  case 10:  	SummationOfPrimes.RunSolution ();  	break;  case 11:  	LargestProductInAGrid.RunSolution ();  	break;  case 12:  	HighlyDivisibleTriangularNumber.RunSolution ();  	break;  case 13:  	LargeSum.RunSolution ();  	break;  case 14:  	LongestCollatzSequence.RunSolution ();  	break;  case 15:  	LatticePaths.RunSolution ();  	break;  //...  case 19:  	CountingSundays.RunSolution ();  	break;  }  
