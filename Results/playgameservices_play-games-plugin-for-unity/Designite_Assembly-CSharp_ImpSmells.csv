Implementation smell,Namespace,Class,File,Method,Description
Long Method,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,Authenticate,The method has 183 lines of code.
Long Parameter List,GooglePlayGames.BasicApi,DummyClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\DummyClient.cs,LoadScores,The method has 6 parameters. Parameters: leaderboardId' start' rowCount' collection' timeSpan' callback
Long Parameter List,GooglePlayGames.BasicApi,IPlayGamesClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\IPlayGamesClient.cs,LoadScores,The method has 6 parameters. Parameters: leaderboardId' start' rowCount' collection' timeSpan' callback
Long Parameter List,GooglePlayGames.BasicApi,ScorePageToken,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\ScorePageToken.cs,ScorePageToken,The method has 5 parameters. Parameters: internalObject' id' collection' timespan' direction
Long Parameter List,GooglePlayGames.BasicApi.Multiplayer,IRealTimeMultiplayerClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Multiplayer\IRealTimeMultiplayerClient.cs,CreateQuickGame,The method has 5 parameters. Parameters: minOpponents' maxOpponents' variant' exclusiveBitMask' listener
Long Parameter List,GooglePlayGames.BasicApi.Multiplayer,IRealTimeMultiplayerClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Multiplayer\IRealTimeMultiplayerClient.cs,SendMessage,The method has 5 parameters. Parameters: reliable' participantId' data' offset' length
Long Parameter List,GooglePlayGames.BasicApi.Multiplayer,ITurnBasedMultiplayerClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Multiplayer\ITurnBasedMultiplayerClient.cs,CreateQuickMatch,The method has 5 parameters. Parameters: minOpponents' maxOpponents' variant' exclusiveBitmask' callback
Long Parameter List,GooglePlayGames.BasicApi.Multiplayer,Invitation,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Multiplayer\Invitation.cs,Invitation,The method has 5 parameters. Parameters: invType' invId' inviter' variant' creationTime
Long Parameter List,GooglePlayGames.BasicApi.Multiplayer,Participant,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Multiplayer\Participant.cs,Participant,The method has 5 parameters. Parameters: displayName' participantId' status' player' connectedToRoom
Long Parameter List,GooglePlayGames.BasicApi.Multiplayer,TurnBasedMatch,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Multiplayer\TurnBasedMatch.cs,TurnBasedMatch,The method has 13 parameters. Parameters: matchId' data' canRematch' selfParticipantId' participants' availableAutomatchSlots' pendingParticipantId' turnStatus' matchStatus' variant' version' creationTime' lastUpdateTime
Long Parameter List,GooglePlayGames.BasicApi.Nearby,DummyNearbyConnectionClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Nearby\DummyNearbyConnectionClient.cs,StartAdvertising,The method has 5 parameters. Parameters: name' appIdentifiers' advertisingDuration' resultCallback' connectionRequestCallback
Long Parameter List,GooglePlayGames.BasicApi.Nearby,DummyNearbyConnectionClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Nearby\DummyNearbyConnectionClient.cs,SendConnectionRequest,The method has 5 parameters. Parameters: name' remoteEndpointId' payload' responseCallback' listener
Long Parameter List,GooglePlayGames.BasicApi.Nearby,INearbyConnectionClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Nearby\INearbyConnectionClient.cs,StartAdvertising,The method has 5 parameters. Parameters: name' appIdentifiers' advertisingDuration' resultCallback' connectionRequestCallback
Long Parameter List,GooglePlayGames.BasicApi.Nearby,INearbyConnectionClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Nearby\INearbyConnectionClient.cs,SendConnectionRequest,The method has 5 parameters. Parameters: name' remoteEndpointId' payload' responseCallback' listener
Long Parameter List,GooglePlayGames.BasicApi.SavedGame,ISavedGameClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\SavedGame\ISavedGameClient.cs,OpenWithManualConflictResolution,The method has 5 parameters. Parameters: filename' source' prefetchDataOnConflict' conflictCallback' completedCallback
Long Parameter List,GooglePlayGames.BasicApi.SavedGame,ISavedGameClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\SavedGame\ISavedGameClient.cs,ShowSelectSavedGameUI,The method has 5 parameters. Parameters: uiTitle' maxDisplayedSavedGames' showCreateSaveUI' showDeleteSaveUI' callback
Long Parameter List,GooglePlayGames,PlayGamesPlatform,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\ISocialPlatform\PlayGamesPlatform.cs,LoadScores,The method has 6 parameters. Parameters: leaderboardId' start' rowCount' collection' timeSpan' callback
Long Parameter List,GooglePlayGames,PlayGamesScore,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\ISocialPlatform\PlayGamesScore.cs,PlayGamesScore,The method has 6 parameters. Parameters: date' leaderboardId' rank' playerId' value' metadata
Long Parameter List,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,LoadScores,The method has 6 parameters. Parameters: leaderboardId' start' rowCount' collection' timeSpan' callback
Long Parameter List,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,CreateLeaderboardScoreData,The method has 5 parameters. Parameters: leaderboardId' collection' timespan' status' leaderboardScoresJava
Long Identifier,GooglePlayGames.BasicApi.Nearby,NearbyConnectionConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Nearby\NearbyConnectionConfiguration.cs,,The length of the parameter MaxUnreliableMessagePayloadLength is 33.
Long Identifier,GooglePlayGames.BasicApi.Nearby,NearbyConnectionConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\Nearby\NearbyConnectionConfiguration.cs,,The length of the parameter MaxReliableMessagePayloadLength is 31.
Long Statement,GooglePlayGames,PlayGamesPlatform,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\ISocialPlatform\PlayGamesPlatform.cs,ReportProgress,The length of the statement  "                                    " is less than or equal to 1. You might be trying to use values in the range of [0'1]' while values are expected to be within the range [0'100]. If you are using the latter' you can safely ignore this message.");" is 212.
Empty Catch Block,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,Authenticate,The method has an empty catch block.
Empty Catch Block,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,Authenticate,The method has an empty catch block.
Empty Catch Block,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,Authenticate,The method has an empty catch block.
Magic Number,GooglePlayGames.BasicApi,DummyClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\DummyClient.cs,LeaderboardMaxResults,The following statement contains a magic number: return 25;
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + EnableSavedGames.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + IsForcingRefresh.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + IsHidingPopups.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + IsRequestingEmail.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + IsRequestingAuthCode.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Scopes.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + AccountName.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + InvitationDelegate.GetHashCode();
Magic Number,GooglePlayGames.BasicApi,PlayGamesClientConfiguration,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\BasicApi\PlayGamesClientConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + MatchDelegate.GetHashCode();
Magic Number,GooglePlayGames,PlayGamesAchievement,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\ISocialPlatform\PlayGamesAchievement.cs,PlayGamesAchievement,The following statement contains a magic number: this.mPercentComplete =                         ((double) ach.CurrentSteps / (double) ach.TotalSteps) * 100.0;
Magic Number,GooglePlayGames,PlayGamesPlatform,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\ISocialPlatform\PlayGamesPlatform.cs,ReportProgress,The following statement contains a magic number: progress < 0.000001
Magic Number,GooglePlayGames,PlayGamesPlatform,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\ISocialPlatform\PlayGamesPlatform.cs,ReportProgress,The following statement contains a magic number: mClient.LoadAchievements(ach =>             {                 for (int i = 0; i < ach.Length; i++)                 {                     if (ach[i].Id == achievementID)                     {                         if (ach[i].IsIncremental)                         {                             GooglePlayGames.OurUtils.Logger.d("Progress " + progress +                                                               " interpreted as incremental target (approximate).");                              if (progress >= 0.0 && progress <= 1.0)                             {                                 // in a previous version' incremental progress was reported by using the range [0-1]                                 GooglePlayGames.OurUtils.Logger.w(                                     "Progress " + progress +                                     " is less than or equal to 1. You might be trying to use values in the range of [0'1]' while values are expected to be within the range [0'100]. If you are using the latter' you can safely ignore this message.");                             }                              int targetSteps = (int) Math.Round((progress / 100f) * ach[i].TotalSteps);                             mClient.SetStepsAtLeast(achievementID' targetSteps' callback);                         }                         else                         {                             if (progress >= 100)                             {                                 // unlock it!                                 GooglePlayGames.OurUtils.Logger.d("Progress " + progress + " interpreted as UNLOCK.");                                 mClient.UnlockAchievement(achievementID' callback);                             }                             else                             {                                 // not enough to unlock                                 GooglePlayGames.OurUtils.Logger.d(                                     "Progress " + progress + " not enough to unlock non-incremental achievement.");                                 callback.Invoke(false);                             }                         }                          return;                     }                 }                  // Achievement not found                 GooglePlayGames.OurUtils.Logger.e("Unable to locate achievement " + achievementID);                 callback.Invoke(false);             });
Magic Number,GooglePlayGames,PlayGamesPlatform,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\ISocialPlatform\PlayGamesPlatform.cs,ReportProgress,The following statement contains a magic number: mClient.LoadAchievements(ach =>             {                 for (int i = 0; i < ach.Length; i++)                 {                     if (ach[i].Id == achievementID)                     {                         if (ach[i].IsIncremental)                         {                             GooglePlayGames.OurUtils.Logger.d("Progress " + progress +                                                               " interpreted as incremental target (approximate).");                              if (progress >= 0.0 && progress <= 1.0)                             {                                 // in a previous version' incremental progress was reported by using the range [0-1]                                 GooglePlayGames.OurUtils.Logger.w(                                     "Progress " + progress +                                     " is less than or equal to 1. You might be trying to use values in the range of [0'1]' while values are expected to be within the range [0'100]. If you are using the latter' you can safely ignore this message.");                             }                              int targetSteps = (int) Math.Round((progress / 100f) * ach[i].TotalSteps);                             mClient.SetStepsAtLeast(achievementID' targetSteps' callback);                         }                         else                         {                             if (progress >= 100)                             {                                 // unlock it!                                 GooglePlayGames.OurUtils.Logger.d("Progress " + progress + " interpreted as UNLOCK.");                                 mClient.UnlockAchievement(achievementID' callback);                             }                             else                             {                                 // not enough to unlock                                 GooglePlayGames.OurUtils.Logger.d(                                     "Progress " + progress + " not enough to unlock non-incremental achievement.");                                 callback.Invoke(false);                             }                         }                          return;                     }                 }                  // Achievement not found                 GooglePlayGames.OurUtils.Logger.e("Unable to locate achievement " + achievementID);                 callback.Invoke(false);             });
Magic Number,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,Authenticate,The following statement contains a magic number: mTokenClient.FetchTokens(silent' (int result) =>             {                 bool succeed = result == 0 /* CommonStatusCodes.SUCCEED */;                 InitializeGameServices();                 if (succeed)                 {                     using (var signInTasks = new AndroidJavaObject("java.util.ArrayList"))                     {                         if (mInvitationDelegate != null)                         {                             mInvitationCallback = new AndroidJavaObject(                                 "com.google.games.bridge.InvitationCallbackProxy"'                                 new InvitationCallbackProxy(mInvitationDelegate));                             using (var invitationsClient = getInvitationsClient())                             using (var taskRegisterCallback =                                 invitationsClient.Call<AndroidJavaObject>("registerInvitationCallback"'                                     mInvitationCallback))                             {                                 signInTasks.Call<bool>("add"' taskRegisterCallback);                             }                         }                          AndroidJavaObject taskGetPlayer =                             getPlayersClient().Call<AndroidJavaObject>("getCurrentPlayer");                         AndroidJavaObject taskGetActivationHint =                             getGamesClient().Call<AndroidJavaObject>("getActivationHint");                         AndroidJavaObject taskIsCaptureSupported =                             getVideosClient().Call<AndroidJavaObject>("isCaptureSupported");                          if (!mConfiguration.IsHidingPopups)                         {                             AndroidJavaObject taskSetViewForPopups;                             using (var popupView = AndroidHelperFragment.GetDefaultPopupView())                             {                                 taskSetViewForPopups =                                     getGamesClient().Call<AndroidJavaObject>("setViewForPopups"' popupView);                             }                              signInTasks.Call<bool>("add"' taskSetViewForPopups);                         }                          signInTasks.Call<bool>("add"' taskGetPlayer);                         signInTasks.Call<bool>("add"' taskGetActivationHint);                         signInTasks.Call<bool>("add"' taskIsCaptureSupported);                          using (var tasks = new AndroidJavaClass(TasksClassName))                         using (var allTask = tasks.CallStatic<AndroidJavaObject>("whenAll"' signInTasks))                         {                             AndroidTaskUtils.AddOnCompleteListener<AndroidJavaObject>(                                 allTask'                                 completeTask =>                                 {                                     if (completeTask.Call<bool>("isSuccessful"))                                     {                                         using (var resultObject = taskGetPlayer.Call<AndroidJavaObject>("getResult"))                                         {                                             mUser = AndroidJavaConverter.ToPlayer(resultObject);                                         }                                          var account = mTokenClient.GetAccount();                                         lock (GameServicesLock)                                         {                                             mSavedGameClient = new AndroidSavedGameClient(account);                                             mEventsClient = new AndroidEventsClient(account);                                             bool isCaptureSupported;                                             using (var resultObject =                                                 taskIsCaptureSupported.Call<AndroidJavaObject>("getResult"))                                             {                                                 isCaptureSupported = resultObject.Call<bool>("booleanValue");                                             }                                              mVideoClient = new AndroidVideoClient(isCaptureSupported' account);                                             mRealTimeClient = new AndroidRealTimeMultiplayerClient(this' account);                                             mTurnBasedClient = new AndroidTurnBasedMultiplayerClient(this' account);                                             mTurnBasedClient.RegisterMatchDelegate(mConfiguration.MatchDelegate);                                         }                                          mAuthState = AuthState.Authenticated;                                         InvokeCallbackOnGameThread(callback' true' "Authentication succeeded");                                         GooglePlayGames.OurUtils.Logger.d("Authentication succeeded");                                         try                                         {                                             using (var activationHint =                                                 taskGetActivationHint.Call<AndroidJavaObject>("getResult"))                                             {                                                 if (mInvitationDelegate != null)                                                 {                                                     try                                                     {                                                         using (var invitationObject =                                                             activationHint.Call<AndroidJavaObject>("getParcelable"'                                                                 "invitation" /* Multiplayer.EXTRA_INVITATION */))                                                         {                                                             Invitation invitation =                                                                 AndroidJavaConverter.ToInvitation(invitationObject);                                                             mInvitationDelegate(invitation' /* shouldAutoAccept= */                                                                 true);                                                         }                                                     }                                                     catch (Exception)                                                     {                                                         // handle null return                                                     }                                                 }                                                   if (mTurnBasedClient.MatchDelegate != null)                                                 {                                                     try                                                     {                                                         using (var matchObject =                                                             activationHint.Call<AndroidJavaObject>("getParcelable"'                                                                 "turn_based_match" /* Multiplayer#EXTRA_TURN_BASED_MATCH */)                                                         )                                                         {                                                             TurnBasedMatch turnBasedMatch =                                                                 AndroidJavaConverter.ToTurnBasedMatch(matchObject);                                                             mTurnBasedClient.MatchDelegate(                                                                 turnBasedMatch' /* shouldAutoLaunch= */ true);                                                         }                                                     }                                                     catch (Exception)                                                     {                                                     }                                                 }                                             }                                         }                                         catch (Exception)                                         {                                             // handle null return                                         }                                          LoadAchievements(ignore => { });                                     }                                     else                                     {                                         SignOut();                                         InvokeCallbackOnGameThread(callback' false' "Authentication failed");                                         GooglePlayGames.OurUtils.Logger.d("Authentication failed");                                     }                                 }                             );                         }                     }                 }                 else                 {                     lock (AuthStateLock)                     {                         if (result == 16 /* CommonStatusCodes.CANCELED */)                         {                             InvokeCallbackOnGameThread(callback' false' "Authentication canceled");                             GooglePlayGames.OurUtils.Logger.d("Authentication canceled");                         }                         else if (result == 8 /* CommonStatusCodes.DEVELOPER_ERROR */)                         {                             InvokeCallbackOnGameThread(callback' false' "Authentication failed - developer error");                             GooglePlayGames.OurUtils.Logger.d("Authentication failed - developer error");                         }                         else                         {                             InvokeCallbackOnGameThread(callback' false' "Authentication failed");                             GooglePlayGames.OurUtils.Logger.d("Authentication failed");                         }                     }                 }             });
Magic Number,GooglePlayGames.Android,AndroidClient,C:\research\architectureSmells\repos\playgameservices_play-games-plugin-for-unity\source\PluginDev\Assets\GooglePlayGames\Platforms\Android\AndroidClient.cs,Authenticate,The following statement contains a magic number: mTokenClient.FetchTokens(silent' (int result) =>             {                 bool succeed = result == 0 /* CommonStatusCodes.SUCCEED */;                 InitializeGameServices();                 if (succeed)                 {                     using (var signInTasks = new AndroidJavaObject("java.util.ArrayList"))                     {                         if (mInvitationDelegate != null)                         {                             mInvitationCallback = new AndroidJavaObject(                                 "com.google.games.bridge.InvitationCallbackProxy"'                                 new InvitationCallbackProxy(mInvitationDelegate));                             using (var invitationsClient = getInvitationsClient())                             using (var taskRegisterCallback =                                 invitationsClient.Call<AndroidJavaObject>("registerInvitationCallback"'                                     mInvitationCallback))                             {                                 signInTasks.Call<bool>("add"' taskRegisterCallback);                             }                         }                          AndroidJavaObject taskGetPlayer =                             getPlayersClient().Call<AndroidJavaObject>("getCurrentPlayer");                         AndroidJavaObject taskGetActivationHint =                             getGamesClient().Call<AndroidJavaObject>("getActivationHint");                         AndroidJavaObject taskIsCaptureSupported =                             getVideosClient().Call<AndroidJavaObject>("isCaptureSupported");                          if (!mConfiguration.IsHidingPopups)                         {                             AndroidJavaObject taskSetViewForPopups;                             using (var popupView = AndroidHelperFragment.GetDefaultPopupView())                             {                                 taskSetViewForPopups =                                     getGamesClient().Call<AndroidJavaObject>("setViewForPopups"' popupView);                             }                              signInTasks.Call<bool>("add"' taskSetViewForPopups);                         }                          signInTasks.Call<bool>("add"' taskGetPlayer);                         signInTasks.Call<bool>("add"' taskGetActivationHint);                         signInTasks.Call<bool>("add"' taskIsCaptureSupported);                          using (var tasks = new AndroidJavaClass(TasksClassName))                         using (var allTask = tasks.CallStatic<AndroidJavaObject>("whenAll"' signInTasks))                         {                             AndroidTaskUtils.AddOnCompleteListener<AndroidJavaObject>(                                 allTask'                                 completeTask =>                                 {                                     if (completeTask.Call<bool>("isSuccessful"))                                     {                                         using (var resultObject = taskGetPlayer.Call<AndroidJavaObject>("getResult"))                                         {                                             mUser = AndroidJavaConverter.ToPlayer(resultObject);                                         }                                          var account = mTokenClient.GetAccount();                                         lock (GameServicesLock)                                         {                                             mSavedGameClient = new AndroidSavedGameClient(account);                                             mEventsClient = new AndroidEventsClient(account);                                             bool isCaptureSupported;                                             using (var resultObject =                                                 taskIsCaptureSupported.Call<AndroidJavaObject>("getResult"))                                             {                                                 isCaptureSupported = resultObject.Call<bool>("booleanValue");                                             }                                              mVideoClient = new AndroidVideoClient(isCaptureSupported' account);                                             mRealTimeClient = new AndroidRealTimeMultiplayerClient(this' account);                                             mTurnBasedClient = new AndroidTurnBasedMultiplayerClient(this' account);                                             mTurnBasedClient.RegisterMatchDelegate(mConfiguration.MatchDelegate);                                         }                                          mAuthState = AuthState.Authenticated;                                         InvokeCallbackOnGameThread(callback' true' "Authentication succeeded");                                         GooglePlayGames.OurUtils.Logger.d("Authentication succeeded");                                         try                                         {                                             using (var activationHint =                                                 taskGetActivationHint.Call<AndroidJavaObject>("getResult"))                                             {                                                 if (mInvitationDelegate != null)                                                 {                                                     try                                                     {                                                         using (var invitationObject =                                                             activationHint.Call<AndroidJavaObject>("getParcelable"'                                                                 "invitation" /* Multiplayer.EXTRA_INVITATION */))                                                         {                                                             Invitation invitation =                                                                 AndroidJavaConverter.ToInvitation(invitationObject);                                                             mInvitationDelegate(invitation' /* shouldAutoAccept= */                                                                 true);                                                         }                                                     }                                                     catch (Exception)                                                     {                                                         // handle null return                                                     }                                                 }                                                   if (mTurnBasedClient.MatchDelegate != null)                                                 {                                                     try                                                     {                                                         using (var matchObject =                                                             activationHint.Call<AndroidJavaObject>("getParcelable"'                                                                 "turn_based_match" /* Multiplayer#EXTRA_TURN_BASED_MATCH */)                                                         )                                                         {                                                             TurnBasedMatch turnBasedMatch =                                                                 AndroidJavaConverter.ToTurnBasedMatch(matchObject);                                                             mTurnBasedClient.MatchDelegate(                                                                 turnBasedMatch' /* shouldAutoLaunch= */ true);                                                         }                                                     }                                                     catch (Exception)                                                     {                                                     }                                                 }                                             }                                         }                                         catch (Exception)                                         {                                             // handle null return                                         }                                          LoadAchievements(ignore => { });                                     }                                     else                                     {                                         SignOut();                                         InvokeCallbackOnGameThread(callback' false' "Authentication failed");                                         GooglePlayGames.OurUtils.Logger.d("Authentication failed");                                     }                                 }                             );                         }                     }                 }                 else                 {                     lock (AuthStateLock)                     {                         if (result == 16 /* CommonStatusCodes.CANCELED */)                         {                             InvokeCallbackOnGameThread(callback' false' "Authentication canceled");                             GooglePlayGames.OurUtils.Logger.d("Authentication canceled");                         }                         else if (result == 8 /* CommonStatusCodes.DEVELOPER_ERROR */)                         {                             InvokeCallbackOnGameThread(callback' false' "Authentication failed - developer error");                             GooglePlayGames.OurUtils.Logger.d("Authentication failed - developer error");                         }                         else                         {                             InvokeCallbackOnGameThread(callback' false' "Authentication failed");                             GooglePlayGames.OurUtils.Logger.d("Authentication failed");                         }                     }                 }             });
