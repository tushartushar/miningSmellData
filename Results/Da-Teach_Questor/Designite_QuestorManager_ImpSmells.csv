Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuestorManager.Actions,BuyLPI,C:\repos\Da-Teach_Questor\QuestorManager\Actions\BuyLPI.cs,ProcessState,The method has 156 lines of code.
Long Method,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The method has 337 lines of code.
Long Method,QuestorManager.Actions,Grab,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Grab.cs,ProcessState,The method has 166 lines of code.
Long Method,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The method has 178 lines of code.
Long Method,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The method has 306 lines of code.
Long Method,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The method has 1107 lines of code.
Complex Method,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,UpdateSearchResultsTick,Cyclomatic complexity of the method is 10
Complex Method,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,Required,Cyclomatic complexity of the method is 8
Complex Method,QuestorManager.Module,BookmarkDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\BookmarkDestination.cs,PerformFinalDestinationTask,Cyclomatic complexity of the method is 12
Complex Method,QuestorManager.Module,StationDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\StationDestination.cs,PerformFinalDestinationTask,Cyclomatic complexity of the method is 8
Complex Method,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,Cyclomatic complexity of the method is 9
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "            var invIgnore = XDocument.Load(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "\\InvIgnore.xml"); //items to ignore " is 152.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                    _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4)); " is 142.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                    // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want) " is 122.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                    _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price); " is 177.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                    Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00")); " is 132.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                        _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked))); " is 160.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                            Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]"); " is 233.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                    Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices); " is 156.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                    var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0; " is 138.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                        //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]"); " is 205.
Long Statement,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The length of the statement  "                        Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]"); " is 191.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The length of the statement  "                    if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping) " is 139.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The length of the statement  "                        if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId) " is 156.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The length of the statement  "                        if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id) " is 160.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The length of the statement  "                        if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id) " is 144.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,UpdateSearchResultsTick,The length of the statement  "                SearchResults.Items.AddRange(Filter(search' _bookmarks' b => b.Title' b => "Bookmark (" + ((Category) b.CategoryId ) + ")")); " is 125.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,ProcessItems,The length of the statement  "                tbTotalMedian.Text = string.Format("{0:#'##0}"' Items.Where(i => i.InvType != null).Sum(i => i.InvType.MedianBuy * i.QuantitySold)); " is 132.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,ProcessItems,The length of the statement  "                tbTotalMedian.Text = string.Format("{0:#'##0}"' Items.Where(i => i.InvType != null).Sum(i => i.InvType.MedianBuy * i.Quantity)); " is 128.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,bttnSaveTask_Click,The length of the statement  "                        strXml += "<Job typeJob='" + LstTask.Items[o].SubItems[0].Text + "' Name='" + LstTask.Items[o].SubItems[1].Text + "' Unit='" + LstTask.Items[o].SubItems[2].Text + "' Hangar='" + LstTask.Items[o].SubItems[3].Text + "' Tag='" + LstTask.Items[o].Tag + "' />"; " is 256.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,Required,The length of the statement  "            var invTypes = XDocument.Load(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "\\InvTypes.xml"); " is 132.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.LstTask.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.LblStatus.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.RefreshBookmarksButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 160.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.SearchTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 146.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.BttnAddTraveler.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 154.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.lvItems.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.label15.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.label14.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.label13.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.label12.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The length of the statement  "            this.label17.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,QuestorManager.Module,MissionBookmarkDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\MissionBookmarkDestination.cs,PerformFinalDestinationTask,The length of the statement  "            // Mission bookmarks have a 1.000.000 distance warp-to limit (changed it to 150.000.000 as there are some bugged missions around) " is 129.
Magic Number,QuestorManager.Actions,Buy,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Buy.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateBuy.Idle:                  case StateBuy.Done:                      break;                    case StateBuy.Begin:                        // Close the market window if there is one                      if (marketWindow != null)                          marketWindow.Close();                      State = StateBuy.OpenMarket;                      break;                    case StateBuy.OpenMarket:                      // Close the market window if there is one                      //if (marketWindow != null)                      //    marketWindow.Close();                         if (marketWindow == null)                       {                           DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                           break;                       }                           if (!marketWindow.IsReady)                           break;                          Logging.Log("Buy: Opening Market");                      State = StateBuy.LoadItem;                        break;                    case StateBuy.LoadItem:                        _lastAction = DateTime.Now;                        if (marketWindow.DetailTypeId != Item)                      {                          marketWindow.LoadTypeId(Item);                          State = StateBuy.BuyItem;                            break;                      }                                              break;                    case StateBuy.BuyItem:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                                                      var orders = marketWindow.SellOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId);                            var order = orders.OrderBy(o => o.Price).FirstOrDefault();                          if (order != null)                          {                              // Calculate how much kernite we still need                              if (order.VolumeEntered >= Unit)                              {                                  order.Buy(Unit' DirectOrderRange.Station);                                  State = StateBuy.WaitForItems;                              }                              else                              {                                  order.Buy(Unit' DirectOrderRange.Station);                                   Unit = Unit - order.VolumeEntered;                                   Logging.Log("Missing " + Convert.ToString(Unit) + " units");                                  ReturnBuy = true;                                  State = StateBuy.WaitForItems;                              }                            }                        break;                    case StateBuy.WaitForItems:                      // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Close the market window if there is one                      if (marketWindow != null)                          marketWindow.Close();                        if (ReturnBuy == true)                      {                          Logging.Log("Buy: Return Buy");                          ReturnBuy = false;                          State = StateBuy.OpenMarket;                          break;                      }                            Logging.Log("Buy: Done");                          State = StateBuy.Done;                            break;                }
Magic Number,QuestorManager.Actions,Buy,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Buy.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateBuy.Idle:                  case StateBuy.Done:                      break;                    case StateBuy.Begin:                        // Close the market window if there is one                      if (marketWindow != null)                          marketWindow.Close();                      State = StateBuy.OpenMarket;                      break;                    case StateBuy.OpenMarket:                      // Close the market window if there is one                      //if (marketWindow != null)                      //    marketWindow.Close();                         if (marketWindow == null)                       {                           DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                           break;                       }                           if (!marketWindow.IsReady)                           break;                          Logging.Log("Buy: Opening Market");                      State = StateBuy.LoadItem;                        break;                    case StateBuy.LoadItem:                        _lastAction = DateTime.Now;                        if (marketWindow.DetailTypeId != Item)                      {                          marketWindow.LoadTypeId(Item);                          State = StateBuy.BuyItem;                            break;                      }                                              break;                    case StateBuy.BuyItem:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                                                      var orders = marketWindow.SellOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId);                            var order = orders.OrderBy(o => o.Price).FirstOrDefault();                          if (order != null)                          {                              // Calculate how much kernite we still need                              if (order.VolumeEntered >= Unit)                              {                                  order.Buy(Unit' DirectOrderRange.Station);                                  State = StateBuy.WaitForItems;                              }                              else                              {                                  order.Buy(Unit' DirectOrderRange.Station);                                   Unit = Unit - order.VolumeEntered;                                   Logging.Log("Missing " + Convert.ToString(Unit) + " units");                                  ReturnBuy = true;                                  State = StateBuy.WaitForItems;                              }                            }                        break;                    case StateBuy.WaitForItems:                      // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Close the market window if there is one                      if (marketWindow != null)                          marketWindow.Close();                        if (ReturnBuy == true)                      {                          Logging.Log("Buy: Return Buy");                          ReturnBuy = false;                          State = StateBuy.OpenMarket;                          break;                      }                            Logging.Log("Buy: Done");                          State = StateBuy.Done;                            break;                }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: int random_number = ramdom.Next(2' 4);
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: int random_number = ramdom.Next(2' 4);
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following statement contains a magic number: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Magic Number,QuestorManager.Actions,Grab,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Grab.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateGrab.Idle:                  case StateGrab.Done:                      break;                    case StateGrab.Begin:                      State = StateGrab.OpenItemHangar;                      break;                    case StateGrab.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                                                        }                          if (!_hangar.IsReady)                              break;                        }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                                                        }                          if (!_hangar.IsReady)                              break;                      }                      else if (Hangar != null)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.OpenCorporationHangar();                                                        }                            if (!_hangar.IsReady)                              break;                      }                            Logging.Log("Grab: Opening Hangar");                            State = StateGrab.OpenCargo;                             break;                    case StateGrab.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                          Logging.Log("Grab: Opening Cargo Hold");                        freeCargoCapacity = cargo.Capacity - cargo.UsedCapacity;                        if (Item == 00)                          State = StateGrab.AllItems;                      else                          State = StateGrab.MoveItems;                                              break;                    case StateGrab.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      if (Unit == 00)                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = GrabItem.Quantity*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' GrabItem.Quantity);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving all the items");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                      else                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = Unit*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' Unit);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving item");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                                                break;                      case StateGrab.AllItems:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                           break;                         var AllItem = _hangar.Items;                       if (AllItem != null)                       {                           foreach (var item in AllItem)                           {                               double totalVolum = item.Quantity*item.Volume;                                 if (freeCargoCapacity >= totalVolum)                               {                                   cargo.Add(item);                                   freeCargoCapacity -= totalVolum;                               }                             }                           Logging.Log("Grab: Moving items");                           _lastAction = DateTime.Now;                           State = StateGrab.WaitForItems;                       }                           break;                    case StateGrab.WaitForItems:                       // Wait 5 seconds after moving                       if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                           break;                           if (DirectEve.Instance.GetLockedItems().Count == 0)                       {                             Logging.Log("Grab: Done");                           State = StateGrab.Done;                           break;                       }                           break;                }
Magic Number,QuestorManager.Actions,Grab,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Grab.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateGrab.Idle:                  case StateGrab.Done:                      break;                    case StateGrab.Begin:                      State = StateGrab.OpenItemHangar;                      break;                    case StateGrab.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                                                        }                          if (!_hangar.IsReady)                              break;                        }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                                                        }                          if (!_hangar.IsReady)                              break;                      }                      else if (Hangar != null)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.OpenCorporationHangar();                                                        }                            if (!_hangar.IsReady)                              break;                      }                            Logging.Log("Grab: Opening Hangar");                            State = StateGrab.OpenCargo;                             break;                    case StateGrab.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                          Logging.Log("Grab: Opening Cargo Hold");                        freeCargoCapacity = cargo.Capacity - cargo.UsedCapacity;                        if (Item == 00)                          State = StateGrab.AllItems;                      else                          State = StateGrab.MoveItems;                                              break;                    case StateGrab.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      if (Unit == 00)                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = GrabItem.Quantity*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' GrabItem.Quantity);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving all the items");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                      else                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = Unit*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' Unit);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving item");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                                                break;                      case StateGrab.AllItems:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                           break;                         var AllItem = _hangar.Items;                       if (AllItem != null)                       {                           foreach (var item in AllItem)                           {                               double totalVolum = item.Quantity*item.Volume;                                 if (freeCargoCapacity >= totalVolum)                               {                                   cargo.Add(item);                                   freeCargoCapacity -= totalVolum;                               }                             }                           Logging.Log("Grab: Moving items");                           _lastAction = DateTime.Now;                           State = StateGrab.WaitForItems;                       }                           break;                    case StateGrab.WaitForItems:                       // Wait 5 seconds after moving                       if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                           break;                           if (DirectEve.Instance.GetLockedItems().Count == 0)                       {                             Logging.Log("Grab: Done");                           State = StateGrab.Done;                           break;                       }                           break;                }
Magic Number,QuestorManager.Actions,Grab,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Grab.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateGrab.Idle:                  case StateGrab.Done:                      break;                    case StateGrab.Begin:                      State = StateGrab.OpenItemHangar;                      break;                    case StateGrab.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                                                        }                          if (!_hangar.IsReady)                              break;                        }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                                                        }                          if (!_hangar.IsReady)                              break;                      }                      else if (Hangar != null)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.OpenCorporationHangar();                                                        }                            if (!_hangar.IsReady)                              break;                      }                            Logging.Log("Grab: Opening Hangar");                            State = StateGrab.OpenCargo;                             break;                    case StateGrab.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                          Logging.Log("Grab: Opening Cargo Hold");                        freeCargoCapacity = cargo.Capacity - cargo.UsedCapacity;                        if (Item == 00)                          State = StateGrab.AllItems;                      else                          State = StateGrab.MoveItems;                                              break;                    case StateGrab.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      if (Unit == 00)                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = GrabItem.Quantity*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' GrabItem.Quantity);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving all the items");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                      else                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = Unit*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' Unit);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving item");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                                                break;                      case StateGrab.AllItems:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                           break;                         var AllItem = _hangar.Items;                       if (AllItem != null)                       {                           foreach (var item in AllItem)                           {                               double totalVolum = item.Quantity*item.Volume;                                 if (freeCargoCapacity >= totalVolum)                               {                                   cargo.Add(item);                                   freeCargoCapacity -= totalVolum;                               }                             }                           Logging.Log("Grab: Moving items");                           _lastAction = DateTime.Now;                           State = StateGrab.WaitForItems;                       }                           break;                    case StateGrab.WaitForItems:                       // Wait 5 seconds after moving                       if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                           break;                           if (DirectEve.Instance.GetLockedItems().Count == 0)                       {                             Logging.Log("Grab: Done");                           State = StateGrab.Done;                           break;                       }                           break;                }
Magic Number,QuestorManager.Actions,Grab,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Grab.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateGrab.Idle:                  case StateGrab.Done:                      break;                    case StateGrab.Begin:                      State = StateGrab.OpenItemHangar;                      break;                    case StateGrab.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                                                        }                          if (!_hangar.IsReady)                              break;                        }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                                                        }                          if (!_hangar.IsReady)                              break;                      }                      else if (Hangar != null)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.OpenCorporationHangar();                                                        }                            if (!_hangar.IsReady)                              break;                      }                            Logging.Log("Grab: Opening Hangar");                            State = StateGrab.OpenCargo;                             break;                    case StateGrab.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                          Logging.Log("Grab: Opening Cargo Hold");                        freeCargoCapacity = cargo.Capacity - cargo.UsedCapacity;                        if (Item == 00)                          State = StateGrab.AllItems;                      else                          State = StateGrab.MoveItems;                                              break;                    case StateGrab.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      if (Unit == 00)                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = GrabItem.Quantity*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' GrabItem.Quantity);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving all the items");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                      else                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = Unit*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' Unit);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving item");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                                                break;                      case StateGrab.AllItems:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                           break;                         var AllItem = _hangar.Items;                       if (AllItem != null)                       {                           foreach (var item in AllItem)                           {                               double totalVolum = item.Quantity*item.Volume;                                 if (freeCargoCapacity >= totalVolum)                               {                                   cargo.Add(item);                                   freeCargoCapacity -= totalVolum;                               }                             }                           Logging.Log("Grab: Moving items");                           _lastAction = DateTime.Now;                           State = StateGrab.WaitForItems;                       }                           break;                    case StateGrab.WaitForItems:                       // Wait 5 seconds after moving                       if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                           break;                           if (DirectEve.Instance.GetLockedItems().Count == 0)                       {                             Logging.Log("Grab: Done");                           State = StateGrab.Done;                           break;                       }                           break;                }
Magic Number,QuestorManager.Actions,Grab,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Grab.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateGrab.Idle:                  case StateGrab.Done:                      break;                    case StateGrab.Begin:                      State = StateGrab.OpenItemHangar;                      break;                    case StateGrab.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                                                        }                          if (!_hangar.IsReady)                              break;                        }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                                                        }                          if (!_hangar.IsReady)                              break;                      }                      else if (Hangar != null)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.OpenCorporationHangar();                                                        }                            if (!_hangar.IsReady)                              break;                      }                            Logging.Log("Grab: Opening Hangar");                            State = StateGrab.OpenCargo;                             break;                    case StateGrab.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                          Logging.Log("Grab: Opening Cargo Hold");                        freeCargoCapacity = cargo.Capacity - cargo.UsedCapacity;                        if (Item == 00)                          State = StateGrab.AllItems;                      else                          State = StateGrab.MoveItems;                                              break;                    case StateGrab.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      if (Unit == 00)                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = GrabItem.Quantity*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' GrabItem.Quantity);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving all the items");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                      else                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = Unit*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' Unit);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving item");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                                                break;                      case StateGrab.AllItems:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                           break;                         var AllItem = _hangar.Items;                       if (AllItem != null)                       {                           foreach (var item in AllItem)                           {                               double totalVolum = item.Quantity*item.Volume;                                 if (freeCargoCapacity >= totalVolum)                               {                                   cargo.Add(item);                                   freeCargoCapacity -= totalVolum;                               }                             }                           Logging.Log("Grab: Moving items");                           _lastAction = DateTime.Now;                           State = StateGrab.WaitForItems;                       }                           break;                    case StateGrab.WaitForItems:                       // Wait 5 seconds after moving                       if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                           break;                           if (DirectEve.Instance.GetLockedItems().Count == 0)                       {                             Logging.Log("Grab: Done");                           State = StateGrab.Done;                           break;                       }                           break;                }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Magic Number,QuestorManager.Actions,Sell,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Sell.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateSell.Idle:                  case StateSell.Done:                      break;                    case StateSell.Begin:                      State = StateSell.StartQuickSell;                      break;                    case StateSell.StartQuickSell:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 1)                          break;                      _lastAction = DateTime.Now;                        if (hangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                          break;                      }                        if (!hangar.IsReady)                          break;                        var directItem = hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                      if (directItem == null)                      {                          Logging.Log("Sell: Item " + Item + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      if (Unit == 00)                         Unit = directItem.Quantity;                                                                       Logging.Log("Sell: Starting QuickSell for " + Item);                      if (!directItem.QuickSell())                      {                          _lastAction = DateTime.Now.AddSeconds(-5);                            Logging.Log("Sell: QuickSell failed for " + Item + "' retrying in 5 seconds");                          break;                      }                        State = StateSell.WaitForSellWindow;                      break;                    case StateSell.WaitForSellWindow:                          //if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != Item)                      //    break;                        // Mark as new execution                      _lastAction = DateTime.Now;                        Logging.Log("Sell: Inspecting sell order for " + Item);                      State = StateSell.InspectOrder;                      break;                    case StateSell.InspectOrder:                      // Let the order window stay open for 2 seconds                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("Sell: No order available for " + Item);                            sellWindow.Cancel();                          State = StateSell.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                        Logging.Log("Sell: Selling " + Unit + " of " + Item + " [Sell price: " + (price * Unit).ToString("#'##0.00") + "]");                                           sellWindow.Accept();                          _lastAction = DateTime.Now;                      State = StateSell.WaitingToFinishQuickSell;                      break;                    case StateSell.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != Item)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = StateSell.Done;                          break;                      }                      break;                }
Magic Number,QuestorManager.Actions,Sell,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Sell.cs,ProcessState,The following statement contains a magic number: switch (State)              {                  case StateSell.Idle:                  case StateSell.Done:                      break;                    case StateSell.Begin:                      State = StateSell.StartQuickSell;                      break;                    case StateSell.StartQuickSell:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 1)                          break;                      _lastAction = DateTime.Now;                        if (hangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                          break;                      }                        if (!hangar.IsReady)                          break;                        var directItem = hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                      if (directItem == null)                      {                          Logging.Log("Sell: Item " + Item + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      if (Unit == 00)                         Unit = directItem.Quantity;                                                                       Logging.Log("Sell: Starting QuickSell for " + Item);                      if (!directItem.QuickSell())                      {                          _lastAction = DateTime.Now.AddSeconds(-5);                            Logging.Log("Sell: QuickSell failed for " + Item + "' retrying in 5 seconds");                          break;                      }                        State = StateSell.WaitForSellWindow;                      break;                    case StateSell.WaitForSellWindow:                          //if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != Item)                      //    break;                        // Mark as new execution                      _lastAction = DateTime.Now;                        Logging.Log("Sell: Inspecting sell order for " + Item);                      State = StateSell.InspectOrder;                      break;                    case StateSell.InspectOrder:                      // Let the order window stay open for 2 seconds                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("Sell: No order available for " + Item);                            sellWindow.Cancel();                          State = StateSell.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                        Logging.Log("Sell: Selling " + Unit + " of " + Item + " [Sell price: " + (price * Unit).ToString("#'##0.00") + "]");                                           sellWindow.Accept();                          _lastAction = DateTime.Now;                      State = StateSell.WaitingToFinishQuickSell;                      break;                    case StateSell.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != Item)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = StateSell.Done;                          break;                      }                      break;                }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following statement contains a magic number: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,txtSearchItems_TextChanged,The following statement contains a magic number: if (txtSearchItems.Text.Length > 4)              {                  var search = txtSearchItems.Text.Split(' ');                  foreach (var item in _list)                  {                      var name = item.name;                      if (string.IsNullOrEmpty(name))                          continue;                        var found = search.All(t => name.IndexOf(t' StringComparison.OrdinalIgnoreCase) > -1);                      if (!found)                          continue;                        var listItem1 = new ListViewItem(item.name);                      listItem1.SubItems.Add(Convert.ToString(item.Id));                      LstItems.Items.Add(listItem1);                  }              }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,lvItems_ColumnClick,The following statement contains a magic number: switch (e.Column)              {                  case 1:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Cadena;                      break;                  case 2:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 3:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 4:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 5:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 6:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,lvItems_ColumnClick,The following statement contains a magic number: switch (e.Column)              {                  case 1:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Cadena;                      break;                  case 2:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 3:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 4:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 5:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 6:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,lvItems_ColumnClick,The following statement contains a magic number: switch (e.Column)              {                  case 1:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Cadena;                      break;                  case 2:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 3:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 4:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 5:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 6:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,lvItems_ColumnClick,The following statement contains a magic number: switch (e.Column)              {                  case 1:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Cadena;                      break;                  case 2:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 3:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 4:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 5:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 6:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,lvItems_ColumnClick,The following statement contains a magic number: switch (e.Column)              {                  case 1:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Cadena;                      break;                  case 2:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 3:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 4:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 5:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 6:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,bttnSaveTask_Click,The following statement contains a magic number: for (int o = 0; o < LstTask.Items.Count; o++)                          strXml += "<Job typeJob='" + LstTask.Items[o].SubItems[0].Text + "' Name='" + LstTask.Items[o].SubItems[1].Text + "' Unit='" + LstTask.Items[o].SubItems[2].Text + "' Hangar='" + LstTask.Items[o].SubItems[3].Text + "' Tag='" + LstTask.Items[o].Tag + "' />";
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,bttnSaveTask_Click,The following statement contains a magic number: for (int o = 0; o < LstTask.Items.Count; o++)                          strXml += "<Job typeJob='" + LstTask.Items[o].SubItems[0].Text + "' Name='" + LstTask.Items[o].SubItems[1].Text + "' Unit='" + LstTask.Items[o].SubItems[2].Text + "' Hangar='" + LstTask.Items[o].SubItems[3].Text + "' Tag='" + LstTask.Items[o].Tag + "' />";
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,txtSearchLPI_KeyPress,The following statement contains a magic number: if (e.KeyChar == (char)13)              {                  lpstoreRe = true;              }
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.UpdateSearchResults.Interval = 250;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(656' 271);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(656' 271);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.TabIndex = 7;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbXML.Location = new System.Drawing.Point(385' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbXML.Location = new System.Drawing.Point(385' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbXML.Size = new System.Drawing.Size(121' 21);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbXML.Size = new System.Drawing.Size(121' 21);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbXML.TabIndex = 29;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnSaveTask.Location = new System.Drawing.Point(512' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnSaveTask.Location = new System.Drawing.Point(512' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnSaveTask.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnSaveTask.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnSaveTask.TabIndex = 28;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkPause.Location = new System.Drawing.Point(91' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkPause.Location = new System.Drawing.Point(91' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkPause.Size = new System.Drawing.Size(47' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkPause.Size = new System.Drawing.Size(47' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkPause.TabIndex = 27;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDelete.Location = new System.Drawing.Point(594' 138);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDelete.Location = new System.Drawing.Point(594' 138);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDelete.Size = new System.Drawing.Size(51' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDelete.Size = new System.Drawing.Size(51' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDelete.TabIndex = 26;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDown.Location = new System.Drawing.Point(594' 96);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDown.Location = new System.Drawing.Point(594' 96);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDown.Size = new System.Drawing.Size(48' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDown.Size = new System.Drawing.Size(48' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnDown.TabIndex = 25;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnUP.Location = new System.Drawing.Point(594' 57);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnUP.Location = new System.Drawing.Point(594' 57);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnUP.Size = new System.Drawing.Size(48' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnUP.Size = new System.Drawing.Size(48' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnUP.TabIndex = 24;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.Location = new System.Drawing.Point(10' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.Location = new System.Drawing.Point(10' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.MaximumSize = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.MaximumSize = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.MinimumSize = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.MinimumSize = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnStart.TabIndex = 23;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstTask.Location = new System.Drawing.Point(7' 25);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstTask.Location = new System.Drawing.Point(7' 25);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstTask.Size = new System.Drawing.Size(580' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstTask.Size = new System.Drawing.Size(580' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstTask.TabIndex = 22;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.DescriptionHeader1.Width = 350;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader3.Width = 100;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(7' 4);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(7' 4);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 21;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LblStatus.Location = new System.Drawing.Point(67' 4);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LblStatus.Location = new System.Drawing.Point(67' 4);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LblStatus.Size = new System.Drawing.Size(412' 19);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LblStatus.Size = new System.Drawing.Size(412' 19);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LblStatus.TabIndex = 20;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchResults.Location = new System.Drawing.Point(10' 35);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchResults.Location = new System.Drawing.Point(10' 35);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchResults.Size = new System.Drawing.Size(627' 173);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchResults.Size = new System.Drawing.Size(627' 173);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchResults.TabIndex = 17;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.NameHeader.Width = 400;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.TypeHeader.Width = 200;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchLabel.Location = new System.Drawing.Point(7' 12);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchLabel.Location = new System.Drawing.Point(7' 12);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchLabel.Size = new System.Drawing.Size(81' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchLabel.Size = new System.Drawing.Size(81' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchLabel.TabIndex = 14;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefreshBookmarksButton.Location = new System.Drawing.Point(509' 214);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefreshBookmarksButton.Location = new System.Drawing.Point(509' 214);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefreshBookmarksButton.Size = new System.Drawing.Size(128' 25);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefreshBookmarksButton.Size = new System.Drawing.Size(128' 25);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefreshBookmarksButton.TabIndex = 15;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchTextBox.Location = new System.Drawing.Point(94' 9);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchTextBox.Location = new System.Drawing.Point(94' 9);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchTextBox.Size = new System.Drawing.Size(543' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchTextBox.Size = new System.Drawing.Size(543' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.SearchTextBox.TabIndex = 16;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnAddTraveler.Location = new System.Drawing.Point(10' 213);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnAddTraveler.Location = new System.Drawing.Point(10' 213);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnAddTraveler.Size = new System.Drawing.Size(75' 26);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnAddTraveler.Size = new System.Drawing.Size(75' 26);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnAddTraveler.TabIndex = 13;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Padding = new System.Windows.Forms.Padding(3);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.TabIndex = 2;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Location = new System.Drawing.Point(3' 6);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Location = new System.Drawing.Point(3' 6);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Size = new System.Drawing.Size(457' 44);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Size = new System.Drawing.Size(457' 44);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.TabIndex = 15;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameCorp.Location = new System.Drawing.Point(332' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameCorp.Location = new System.Drawing.Point(332' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameCorp.Size = new System.Drawing.Size(102' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameCorp.Size = new System.Drawing.Size(102' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameCorp.TabIndex = 3;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnCorp.Location = new System.Drawing.Point(241' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnCorp.Location = new System.Drawing.Point(241' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnCorp.Size = new System.Drawing.Size(88' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnCorp.Size = new System.Drawing.Size(88' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnCorp.TabIndex = 2;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnShip.Location = new System.Drawing.Point(117' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnShip.Location = new System.Drawing.Point(117' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnShip.Size = new System.Drawing.Size(84' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnShip.Size = new System.Drawing.Size(84' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnLocal.Location = new System.Drawing.Point(6' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnLocal.Location = new System.Drawing.Point(6' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnLocal.Size = new System.Drawing.Size(89' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rbttnLocal.Size = new System.Drawing.Size(89' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(466' 120);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(466' 120);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(175' 119);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(175' 119);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.TabIndex = 14;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(6' 25);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(6' 25);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(59' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(59' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 13;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskMakeShip.Location = new System.Drawing.Point(6' 67);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskMakeShip.Location = new System.Drawing.Point(6' 67);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskMakeShip.Size = new System.Drawing.Size(163' 24);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskMakeShip.Size = new System.Drawing.Size(163' 24);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskMakeShip.TabIndex = 12;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameShip.Location = new System.Drawing.Point(6' 41);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameShip.Location = new System.Drawing.Point(6' 41);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameShip.Size = new System.Drawing.Size(163' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtNameShip.Size = new System.Drawing.Size(163' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(466' 6);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(466' 6);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(176' 108);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(176' 108);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 13;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskAllItems.Location = new System.Drawing.Point(9' 76);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskAllItems.Location = new System.Drawing.Point(9' 76);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskAllItems.Size = new System.Drawing.Size(160' 24);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskAllItems.Size = new System.Drawing.Size(160' 24);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskAllItems.TabIndex = 11;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbAllMode.Location = new System.Drawing.Point(9' 47);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbAllMode.Location = new System.Drawing.Point(9' 47);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbAllMode.Size = new System.Drawing.Size(160' 21);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbAllMode.Size = new System.Drawing.Size(160' 21);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbAllMode.TabIndex = 12;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(79' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(79' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 13;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(2' 56);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(2' 56);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(458' 183);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(458' 183);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 12;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnTaskForItem.Location = new System.Drawing.Point(333' 118);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnTaskForItem.Location = new System.Drawing.Point(333' 118);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnTaskForItem.Size = new System.Drawing.Size(119' 24);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.BttnTaskForItem.Size = new System.Drawing.Size(119' 24);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstItems.Location = new System.Drawing.Point(10' 43);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstItems.Location = new System.Drawing.Point(10' 43);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstItems.Size = new System.Drawing.Size(317' 132);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstItems.Size = new System.Drawing.Size(317' 132);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.LstItems.TabIndex = 6;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 250;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbMode.Location = new System.Drawing.Point(333' 43);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbMode.Location = new System.Drawing.Point(333' 43);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbMode.Size = new System.Drawing.Size(119' 21);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbMode.Size = new System.Drawing.Size(119' 21);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbMode.TabIndex = 3;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(380' 95);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(380' 95);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(70' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(70' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 11;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnit.Location = new System.Drawing.Point(333' 92);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnit.Location = new System.Drawing.Point(333' 92);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnit.Size = new System.Drawing.Size(44' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnit.Size = new System.Drawing.Size(44' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnit.TabIndex = 5;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(330' 18);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(330' 18);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(60' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(60' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 10;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchItems.Location = new System.Drawing.Point(80' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchItems.Location = new System.Drawing.Point(80' 15);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchItems.Size = new System.Drawing.Size(247' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchItems.Size = new System.Drawing.Size(247' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchItems.TabIndex = 7;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(330' 76);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(330' 76);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 9;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(10' 18);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(10' 18);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(64' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(64' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 8;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Padding = new System.Windows.Forms.Padding(3);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.TabIndex = 3;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkUpdateMineral.Location = new System.Drawing.Point(256' 33);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkUpdateMineral.Location = new System.Drawing.Point(256' 33);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkUpdateMineral.Size = new System.Drawing.Size(125' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkUpdateMineral.Size = new System.Drawing.Size(125' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkUpdateMineral.TabIndex = 26;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(470' 35);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(470' 35);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(89' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(89' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 25;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineEfficiencyInput.Location = new System.Drawing.Point(565' 31);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineEfficiencyInput.Location = new System.Drawing.Point(565' 31);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineEfficiencyInput.Size = new System.Drawing.Size(49' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineEfficiencyInput.Size = new System.Drawing.Size(49' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineEfficiencyInput.TabIndex = 24;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineEfficiencyInput.Value = new decimal(new int[] {              96'              0'              0'              0});
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineCheckBox.Location = new System.Drawing.Point(159' 34);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineCheckBox.Location = new System.Drawing.Point(159' 34);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineCheckBox.Size = new System.Drawing.Size(91' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineCheckBox.Size = new System.Drawing.Size(91' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.RefineCheckBox.TabIndex = 23;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUndersell.Location = new System.Drawing.Point(83' 34);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUndersell.Location = new System.Drawing.Point(83' 34);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUndersell.Size = new System.Drawing.Size(70' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUndersell.Size = new System.Drawing.Size(70' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUndersell.TabIndex = 21;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSell.Location = new System.Drawing.Point(7' 34);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSell.Location = new System.Drawing.Point(7' 34);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSell.Size = new System.Drawing.Size(70' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSell.Size = new System.Drawing.Size(70' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSell.TabIndex = 20;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalSold.Location = new System.Drawing.Point(502' 5);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalSold.Location = new System.Drawing.Point(502' 5);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalSold.Size = new System.Drawing.Size(112' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalSold.Size = new System.Drawing.Size(112' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalSold.TabIndex = 19;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(388' 10);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(388' 10);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(108' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(108' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 18;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalMedian.Location = new System.Drawing.Point(286' 7);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalMedian.Location = new System.Drawing.Point(286' 7);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalMedian.Size = new System.Drawing.Size(96' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalMedian.Size = new System.Drawing.Size(96' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbTotalMedian.TabIndex = 17;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(169' 10);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(169' 10);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(111' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(111' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 16;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lvItems.Location = new System.Drawing.Point(7' 57);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lvItems.Location = new System.Drawing.Point(7' 57);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lvItems.Size = new System.Drawing.Size(630' 179);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lvItems.Size = new System.Drawing.Size(630' 179);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lvItems.TabIndex = 15;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chName.Width = 138;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chQuantity.Width = 54;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chQuantitySold.Width = 108;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chMedianBuy.Width = 108;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chStationBuy.Width = 74;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskValueDump.Location = new System.Drawing.Point(7' 5);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskValueDump.Location = new System.Drawing.Point(7' 5);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskValueDump.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskValueDump.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskValueDump.TabIndex = 14;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Padding = new System.Windows.Forms.Padding(3);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.TabIndex = 4;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(472' 217);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(472' 217);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(31' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(31' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 16;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnitLPI.Location = new System.Drawing.Point(519' 214);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnitLPI.Location = new System.Drawing.Point(519' 214);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnitLPI.Size = new System.Drawing.Size(21' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnitLPI.Size = new System.Drawing.Size(21' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtUnitLPI.TabIndex = 15;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLP.Location = new System.Drawing.Point(559' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLP.Location = new System.Drawing.Point(559' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLP.Size = new System.Drawing.Size(0' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLP.TabIndex = 14;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(497' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(497' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(63' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(63' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label15.TabIndex = 13;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblitemisk.Location = new System.Drawing.Point(399' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblitemisk.Location = new System.Drawing.Point(399' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblitemisk.Size = new System.Drawing.Size(0' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblitemisk.TabIndex = 12;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(340' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(340' 185);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(61' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(61' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.TabIndex = 11;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lbliskLPI.Location = new System.Drawing.Point(399' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lbliskLPI.Location = new System.Drawing.Point(399' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lbliskLPI.Size = new System.Drawing.Size(0' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lbliskLPI.TabIndex = 10;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(351' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(351' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(50' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(50' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 9;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(492' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(492' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(64' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(64' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 8;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTotal.Location = new System.Drawing.Point(559' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTotal.Location = new System.Drawing.Point(559' 162);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTotal.Size = new System.Drawing.Size(0' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTotal.TabIndex = 7;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLPI.Location = new System.Drawing.Point(562' 213);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLPI.Location = new System.Drawing.Point(562' 213);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLPI.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLPI.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLPI.TabIndex = 6;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstItemsRequiered.Location = new System.Drawing.Point(359' 9);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstItemsRequiered.Location = new System.Drawing.Point(359' 9);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstItemsRequiered.Size = new System.Drawing.Size(278' 141);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstItemsRequiered.Size = new System.Drawing.Size(278' 141);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstItemsRequiered.TabIndex = 5;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader5.Width = 150;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader6.Width = 40;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader7.Width = 80;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnRefreshLPI.Location = new System.Drawing.Point(261' 4);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnRefreshLPI.Location = new System.Drawing.Point(261' 4);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnRefreshLPI.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnRefreshLPI.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnRefreshLPI.TabIndex = 4;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchLPI.Location = new System.Drawing.Point(75' 6);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchLPI.Location = new System.Drawing.Point(75' 6);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchLPI.Size = new System.Drawing.Size(180' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchLPI.Size = new System.Drawing.Size(180' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtSearchLPI.TabIndex = 3;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(6' 9);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(6' 9);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(63' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(63' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 2;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstbuyLPI.Location = new System.Drawing.Point(3' 29);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstbuyLPI.Location = new System.Drawing.Point(3' 29);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstbuyLPI.Size = new System.Drawing.Size(336' 207);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lstbuyLPI.Size = new System.Drawing.Size(336' 207);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader8.Width = 250;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBuyItems.Location = new System.Drawing.Point(345' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBuyItems.Location = new System.Drawing.Point(345' 216);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBuyItems.Size = new System.Drawing.Size(112' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBuyItems.Size = new System.Drawing.Size(112' 17);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Padding = new System.Windows.Forms.Padding(3);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(648' 245);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.TabIndex = 5;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLineCmd.Location = new System.Drawing.Point(492' 38);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLineCmd.Location = new System.Drawing.Point(492' 38);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLineCmd.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLineCmd.Size = new System.Drawing.Size(75' 23);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bttnTaskLineCmd.TabIndex = 2;
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(7' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(7' 22);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(158' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(158' 13);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdLine.Location = new System.Drawing.Point(7' 38);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdLine.Location = new System.Drawing.Point(7' 38);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdLine.Size = new System.Drawing.Size(468' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdLine.Size = new System.Drawing.Size(468' 20);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(654' 270);
Magic Number,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(654' 270);
Magic Number,QuestorManager.Module,BookmarkDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\BookmarkDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: return PerformFinalDestinationTask(bookmark' 150000' ref _nextAction);
Magic Number,QuestorManager.Module,BookmarkDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\BookmarkDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: if (DirectEve.Instance.Session.IsInStation)              {                  // We have arived                  if (location != null && location.ItemId == DirectEve.Instance.Session.StationId)                      return true;                    // We are apparently in a station that is incorrect                  Logging.Log("QuestorManager.BookmarkDestination: We're docked in the wrong station' undocking");                    DirectEve.Instance.ExecuteCommand(DirectCmd.CmdExitStation);                  nextAction = DateTime.Now.AddSeconds(30);                  return false;              }
Magic Number,QuestorManager.Module,BookmarkDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\BookmarkDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: if (DirectEve.Instance.Session.IsInStation)              {                  // We are in a station' but not the correct station!                  if (nextAction < DateTime.Now)                  {                      Logging.Log("QuestorManager.BookmarkDestination: We're docked but our destination is in space' undocking");                        DirectEve.Instance.ExecuteCommand(DirectCmd.CmdExitStation);                      nextAction = DateTime.Now.AddSeconds(30);                  }                    // We are not there yet                  return false;              }
Magic Number,QuestorManager.Module,BookmarkDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\BookmarkDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: nextAction = DateTime.Now.AddSeconds(30);
Magic Number,QuestorManager.Module,MissionBookmarkDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\MissionBookmarkDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: return BookmarkDestination.PerformFinalDestinationTask(GetMissionBookmark(AgentId' Title)' 150000000' ref _nextAction);
Magic Number,QuestorManager.Module,SolarSystemDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\SolarSystemDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: if (DirectEve.Instance.Session.IsInStation)              {                  if (_nextAction < DateTime.Now)                  {                      Logging.Log("QuestorManager.SolarSystemDestination: Exiting station");                        DirectEve.Instance.ExecuteCommand(DirectCmd.CmdExitStation);                      _nextAction = DateTime.Now.AddSeconds(30);                  }                    // We are not there yet                  return false;              }
Magic Number,QuestorManager.Module,StationDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\StationDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: if (DirectEve.Instance.Session.IsInStation)              {                  // We are in a station' but not the correct station!                  if (nextAction < DateTime.Now)                  {                      Logging.Log("QuestorManager.StationDestination: We're docked in the wrong station' undocking");                        DirectEve.Instance.ExecuteCommand(DirectCmd.CmdExitStation);                      nextAction = DateTime.Now.AddSeconds(30);                  }                    // We are not there yet                  return false;              }
Magic Number,QuestorManager.Module,StationDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\StationDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: if (entity.Distance < 2500)              {                  Logging.Log("QuestorManager.StationDestination: Dock at [" + entity.Name + "]");                  entity.Dock();              }              else if (entity.Distance < 150000)                  entity.Approach();              else              {                  Logging.Log("QuestorManager.StationDestination: Warp to and dock at [" + entity.Name + "]");                  entity.WarpToAndDock();              }
Magic Number,QuestorManager.Module,StationDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\StationDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: if (entity.Distance < 2500)              {                  Logging.Log("QuestorManager.StationDestination: Dock at [" + entity.Name + "]");                  entity.Dock();              }              else if (entity.Distance < 150000)                  entity.Approach();              else              {                  Logging.Log("QuestorManager.StationDestination: Warp to and dock at [" + entity.Name + "]");                  entity.WarpToAndDock();              }
Magic Number,QuestorManager.Module,StationDestination,C:\repos\Da-Teach_Questor\QuestorManager\Module\StationDestination.cs,PerformFinalDestinationTask,The following statement contains a magic number: nextAction = DateTime.Now.AddSeconds(30);
Magic Number,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,The following statement contains a magic number: if (!DirectEve.Instance.Session.IsInSpace)              {                  if (DirectEve.Instance.Session.IsInStation)                  {                      DirectEve.Instance.ExecuteCommand(DirectCmd.CmdExitStation);                      _nextAction = DateTime.Now.AddSeconds(30);                  }                    // We are not yet in space' wait for it                  return;              }
Magic Number,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,The following statement contains a magic number: if (entities.Count() == 0)              {                  // not found' that cant be true?!?!?!?!                  Logging.Log("QuestorManager: Error [Stargate (" + locationName + ")] not found' most likely lag waiting 15 seconds.");                  _nextAction = DateTime.Now.AddSeconds(15);                  return;              }
Magic Number,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,The following statement contains a magic number: if (entity.Distance < 2500)              {                  Logging.Log("QuestorManager: Jumping to [" + locationName + "]");                  entity.Jump();                    _nextAction = DateTime.Now.AddSeconds(15);              }              else if (entity.Distance < 150000)              {                  entity.Approach();                  _nextAction = DateTime.Now.AddSeconds(5);              }              else              {                  Logging.Log("QuestorManager: Warping to [Stargate (" + locationName + ")]");                  entity.WarpTo();                    _nextAction = DateTime.Now.AddSeconds(5);              }
Magic Number,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,The following statement contains a magic number: if (entity.Distance < 2500)              {                  Logging.Log("QuestorManager: Jumping to [" + locationName + "]");                  entity.Jump();                    _nextAction = DateTime.Now.AddSeconds(15);              }              else if (entity.Distance < 150000)              {                  entity.Approach();                  _nextAction = DateTime.Now.AddSeconds(5);              }              else              {                  Logging.Log("QuestorManager: Warping to [Stargate (" + locationName + ")]");                  entity.WarpTo();                    _nextAction = DateTime.Now.AddSeconds(5);              }
Magic Number,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,The following statement contains a magic number: if (entity.Distance < 2500)              {                  Logging.Log("QuestorManager: Jumping to [" + locationName + "]");                  entity.Jump();                    _nextAction = DateTime.Now.AddSeconds(15);              }              else if (entity.Distance < 150000)              {                  entity.Approach();                  _nextAction = DateTime.Now.AddSeconds(5);              }              else              {                  Logging.Log("QuestorManager: Warping to [Stargate (" + locationName + ")]");                  entity.WarpTo();                    _nextAction = DateTime.Now.AddSeconds(5);              }
Magic Number,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,The following statement contains a magic number: if (entity.Distance < 2500)              {                  Logging.Log("QuestorManager: Jumping to [" + locationName + "]");                  entity.Jump();                    _nextAction = DateTime.Now.AddSeconds(15);              }              else if (entity.Distance < 150000)              {                  entity.Approach();                  _nextAction = DateTime.Now.AddSeconds(5);              }              else              {                  Logging.Log("QuestorManager: Warping to [Stargate (" + locationName + ")]");                  entity.WarpTo();                    _nextAction = DateTime.Now.AddSeconds(5);              }
Magic Number,QuestorManager.Module,Traveler,C:\repos\Da-Teach_Questor\QuestorManager\Module\Traveler.cs,NagivateToBookmarkSystem,The following statement contains a magic number: if (entity.Distance < 2500)              {                  Logging.Log("QuestorManager: Jumping to [" + locationName + "]");                  entity.Jump();                    _nextAction = DateTime.Now.AddSeconds(15);              }              else if (entity.Distance < 150000)              {                  entity.Approach();                  _nextAction = DateTime.Now.AddSeconds(5);              }              else              {                  Logging.Log("QuestorManager: Warping to [Stargate (" + locationName + ")]");                  entity.WarpTo();                    _nextAction = DateTime.Now.AddSeconds(5);              }
Missing Default,QuestorManager.Actions,Buy,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Buy.cs,ProcessState,The following switch statement is missing a default case: switch (State)              {                  case StateBuy.Idle:                  case StateBuy.Done:                      break;                    case StateBuy.Begin:                        // Close the market window if there is one                      if (marketWindow != null)                          marketWindow.Close();                      State = StateBuy.OpenMarket;                      break;                    case StateBuy.OpenMarket:                      // Close the market window if there is one                      //if (marketWindow != null)                      //    marketWindow.Close();                         if (marketWindow == null)                       {                           DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                           break;                       }                           if (!marketWindow.IsReady)                           break;                          Logging.Log("Buy: Opening Market");                      State = StateBuy.LoadItem;                        break;                    case StateBuy.LoadItem:                        _lastAction = DateTime.Now;                        if (marketWindow.DetailTypeId != Item)                      {                          marketWindow.LoadTypeId(Item);                          State = StateBuy.BuyItem;                            break;                      }                                              break;                    case StateBuy.BuyItem:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                                                      var orders = marketWindow.SellOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId);                            var order = orders.OrderBy(o => o.Price).FirstOrDefault();                          if (order != null)                          {                              // Calculate how much kernite we still need                              if (order.VolumeEntered >= Unit)                              {                                  order.Buy(Unit' DirectOrderRange.Station);                                  State = StateBuy.WaitForItems;                              }                              else                              {                                  order.Buy(Unit' DirectOrderRange.Station);                                   Unit = Unit - order.VolumeEntered;                                   Logging.Log("Missing " + Convert.ToString(Unit) + " units");                                  ReturnBuy = true;                                  State = StateBuy.WaitForItems;                              }                            }                        break;                    case StateBuy.WaitForItems:                      // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Close the market window if there is one                      if (marketWindow != null)                          marketWindow.Close();                        if (ReturnBuy == true)                      {                          Logging.Log("Buy: Return Buy");                          ReturnBuy = false;                          State = StateBuy.OpenMarket;                          break;                      }                            Logging.Log("Buy: Done");                          State = StateBuy.Done;                            break;                }
Missing Default,QuestorManager.Actions,BuyLPI,C:\repos\Da-Teach_Questor\QuestorManager\Actions\BuyLPI.cs,ProcessState,The following switch statement is missing a default case: switch(State)              {                  case StateBuyLPI.Idle:                  case StateBuyLPI.Done:                      break;                      case StateBuyLPI.Begin:                        /*                      if(marketWindow != null)                          marketWindow.Close();                        if(lpstore != null)                          lpstore.Close();*/                        State = StateBuyLPI.OpenItemHangar;                        break;                    case StateBuyLPI.OpenItemHangar:                        if(!hangar.IsReady)                      {                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                          Logging.Log("BuyLPI: Opening item hangar");                      }                      State = StateBuyLPI.OpenLpStore;                        break;                    case StateBuyLPI.OpenLpStore:                        if(lpstore == null)                      {                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenLpstore);                          Logging.Log("BuyLPI: Opening loyalty point store");                      }                      State = StateBuyLPI.FindOffer;                        break;                    case StateBuyLPI.FindOffer:                        var offer = lpstore.Offers.FirstOrDefault(o => o.TypeId == Item);                        // Wait for the amount of LP to change                      if(_lastLoyaltyPoints == lpstore.LoyaltyPoints)                          break;                        // Do not expect it to be 0 (probably means its reloading)                      if(lpstore.LoyaltyPoints == 0)                      {                          if(_loyaltyPointTimeout < DateTime.Now)                          {                              Logging.Log("BuyLPI: It seems we have no loyalty points left");                                State = StateBuyLPI.Done;                          }                          break;                      }                        _lastLoyaltyPoints = lpstore.LoyaltyPoints;                        // Find the offer                      if(offer == null)                      {                          Logging.Log("BuyLPI: Can't find offer with type name/id: {0}!"' Item);                            State = StateBuyLPI.Done;                          break;                      }                        State = StateBuyLPI.CheckPetition;                          break;                    case StateBuyLPI.CheckPetition:                        var offer1 = lpstore.Offers.FirstOrDefault(o => o.TypeId == Item);                        // Check LP                      if(_lastLoyaltyPoints < offer1.LoyaltyPointCost)                      {                          Logging.Log("BuyLPI: Not enough loyalty points left");                            State = StateBuyLPI.Done;                          break;                      }                        // Check ISK                      if(DirectEve.Instance.Me.Wealth < offer1.IskCost)                      {                          Logging.Log("BuyLPI: Not enough ISK left");                            State = StateBuyLPI.Done;                          break;                      }                        // Check items                      foreach(var requiredItem in offer1.RequiredItems)                      {                            var ship = shiphangar.Items.FirstOrDefault(i => i.TypeId == requiredItem.TypeId);                          var item = hangar.Items.FirstOrDefault(i => i.TypeId == requiredItem.TypeId);                          if(item == null || item.Quantity < requiredItem.Quantity)                          {                              if(ship == null || ship.Quantity < requiredItem.Quantity)                              {                                  Logging.Log("BuyLPI: Missing {0}x {1}"' requiredItem.Quantity' requiredItem.TypeName);                                    if(!_form.chkBuyItems.Checked)                                  {                                      Logging.Log("BuyLPI: Done' do not buy item");                                      State = StateBuyLPI.Done;                                      break;                                  }                                    Logging.Log("BuyLPI: Are buying the item " + requiredItem.TypeName);                                  requiredUnit = Convert.ToInt32(requiredItem.Quantity);                                  requiredItemId = requiredItem.TypeId;                                  State = StateBuyLPI.OpenMarket;                                  return;                              }                          }                      }                        State = StateBuyLPI.AcceptOffer;                        break;                      case StateBuyLPI.OpenMarket:                        if(marketWindow == null)                      {                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                          break;                      }                        if(!marketWindow.IsReady)                          break;                        State = StateBuyLPI.BuyItems;                        break;                    case StateBuyLPI.BuyItems:                        Logging.Log("BuyLPI: Opening Market");                        if(marketWindow.DetailTypeId != requiredItemId)                      {                          marketWindow.LoadTypeId(requiredItemId);                          break;                      }                        var orders = marketWindow.SellOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId);                        var order = orders.OrderBy(o => o.Price).FirstOrDefault();                        if(order == null)                      {                          Logging.Log("BuyLPI: No orders");                          State = StateBuyLPI.Done;                          break;                      }                        order.Buy(requiredUnit' DirectOrderRange.Station);                        Logging.Log("BuyLPI: Buy Item");                          State = StateBuyLPI.CheckPetition;                        break;                    case StateBuyLPI.AcceptOffer:                        var offer2 = lpstore.Offers.FirstOrDefault(o => o.TypeId == Item);                        Logging.Log("BuyLPI: Accepting {0}"' offer2.TypeName);                      offer2.AcceptOffer();                      State = StateBuyLPI.Quatity;                        break;                    case StateBuyLPI.Quatity:                        _loyaltyPointTimeout = DateTime.Now.AddSeconds(1);                        Unit = Unit - 1;                      if(Unit <= 0)                      {                          Logging.Log("BuyLPI: Quantity limit reached");                            State = StateBuyLPI.Done;                          break;                      }                        State = StateBuyLPI.Begin;                        break;              }
Missing Default,QuestorManager.Actions,ValueDump,C:\repos\Da-Teach_Questor\QuestorManager\Actions\ValueDump.cs,ProcessState,The following switch statement is missing a default case: switch (State)              {                    case ValueDumpState.Idle:                  case ValueDumpState.Done:                      break;                    case ValueDumpState.Begin:                      if(_form.RefineCheckBox.Checked && _form.cbxSell.Checked)                      {                          _form.cbxSell.Checked = false;                          value_process = true;                          State = ValueDumpState.GetItems;                      }                      else if(_form.RefineCheckBox.Checked && value_process)                      {                          _form.RefineCheckBox.Checked = false;                          _form.cbxSell.Checked = true;                          value_process = false;                          State = ValueDumpState.GetItems;                      }                      else                          State = ValueDumpState.GetItems;                      break;                    case ValueDumpState.CheckMineralPrices:                      _currentMineral = _form.InvTypesById.Values.FirstOrDefault(i => i.Id != 27029 && i.GroupId == 18 && i.LastUpdate < DateTime.Now.AddHours(-4));                      if (_currentMineral == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              State = ValueDumpState.SaveMineralPrices;                              if (marketWindow != null)                                  marketWindow.Close();                          }                      }                      else                          State = ValueDumpState.GetMineralPrice;                                            break;                    case ValueDumpState.GetMineralPrice:                      if (marketWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenMarket);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (marketWindow.DetailTypeId != _currentMineral.Id)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < 5)                              return;                            Logging.Log("ValueDump: Loading orders for " + _currentMineral.Name);                            marketWindow.LoadTypeId(_currentMineral.Id);                          _lastExecute = DateTime.Now;                          return;                      }                        if (!marketWindow.BuyOrders.Any(o => o.StationId == DirectEve.Instance.Session.StationId))                      {                          _currentMineral.LastUpdate = DateTime.Now;                            Logging.Log("ValueDump: No orders found for " + _currentMineral.Name);                          State = ValueDumpState.CheckMineralPrices;                      }                        // Take top 5 orders' average the buy price and consider that median-buy (it's not really median buy but its what we want)                      _currentMineral.MedianBuy = marketWindow.BuyOrders.Where(o => o.StationId == DirectEve.Instance.Session.StationId).OrderByDescending(o => o.Price).Take(5).Average(o => o.Price);                      _currentMineral.LastUpdate = DateTime.Now;                      State = ValueDumpState.CheckMineralPrices;                        Logging.Log("ValueDump: Average price for " + _currentMineral.Name + " is " + _currentMineral.MedianBuy.Value.ToString("#'##0.00"));                      break;                    case ValueDumpState.SaveMineralPrices:                      Logging.Log("ValueDump: Saving InvItems.xml");                        var xdoc = new XDocument(new XElement("invtypes"));                      foreach (var type in _form.InvTypesById.Values.OrderBy(i => i.Id))                          xdoc.Root.Add(type.Save());                      xdoc.Save(InvTypesPath);                                  State = ValueDumpState.Idle;                      break;                    case ValueDumpState.GetItems:                      if (hangar.Window == null)                      {                          // No' command it to open                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                          {                              Logging.Log("ValueDump: Opening hangar");                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              _lastExecute = DateTime.Now;                          }                            return;                      }                        if (!hangar.IsReady)                          return;                        Logging.Log("ValueDump: Loading hangar items");                        // Clear out the old                      _form.Items.Clear();                      var hangarItems = hangar.Items;                      if (hangarItems != null)                          _form.Items.AddRange(hangarItems.Where(i => i.ItemId > 0 && i.MarketGroupId > 0 && i.Quantity > 0).Select(i => new ItemCache(i' _form.RefineCheckBox.Checked)));                        State = ValueDumpState.UpdatePrices;                      break;                    case ValueDumpState.UpdatePrices:                      foreach (var item in _form.Items)                      {                          InvType invType;                          if (!_form.InvTypesById.TryGetValue(item.TypeId' out invType))                          {                              Logging.Log("ValueDump: Unknown TypeId " + item.TypeId + " for " + item.Name);                              continue;                          }                            item.InvType = invType;                          foreach (var material in item.RefineOutput)                          {                              if (!_form.InvTypesById.TryGetValue(material.TypeId' out invType))                              {                                  Logging.Log("ValueDump: Unknown TypeId " + material.TypeId + " for " + material.Name);                                  continue;                              }                                material.InvType = invType;                          }                      }                        _form.ItemsToSell.Clear();                      _form.ItemsToRefine.Clear();                      _form.ItemsToSell_unsorted.Clear();                        if (_form.cbxSell.Checked)                      {                            if (_form.cbxUndersell.Checked)                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null));                          else                              _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MinSell.HasValue));                            _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else if (_form.RefineCheckBox.Checked)                      {                          _form.ItemsToSell_unsorted.AddRange(_form.Items.Where(i => i.InvType != null && i.InvType.MaxBuy.HasValue));                          _form.ItemsToSell = _form.ItemsToSell_unsorted.OrderBy(i => i.Name).ToList();                          State = ValueDumpState.NextItem;                      }                      else                          State = ValueDumpState.Done;                        break;                    case ValueDumpState.NextItem:                        if (_form.ItemsToSell.Count == 0)                      {                          if (_form.ItemsToRefine.Count != 0)                              State = ValueDumpState.RefineItems;                          else                              State = ValueDumpState.Done;                          break;                      }                      block = false;                      if(!_form.RefineCheckBox.Checked)                          Logging.Log("ValueDump: " + _form.ItemsToSell.Count + " items left to sell");                        _currentItem = _form.ItemsToSell[0];                      _form.ItemsToSell.RemoveAt(0);                        // Dont sell containers                      if (_currentItem.GroupId == 448 || _currentItem.GroupId == 649)                      {                          Logging.Log("ValueDump: Skipping " + _currentItem.Name);                          break;                      }                      // Dont sell items in invignore.xml                      foreach (var element in invIgnore.Root.Elements("invtype"))                      {                          if (_currentItem.TypeId == (int)element.Attribute("id"))                          {                              Logging.Log("ValueDump: Skipping (block list) " + _currentItem.Name);                              block = true;                              break;                          }                      }                      if (block)                          break;                        State = ValueDumpState.StartQuickSell;                      break;                    case ValueDumpState.StartQuickSell:                      if ((DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number) && _form.cbxSell.Checked)                          break;                      _lastExecute = DateTime.Now;                        var directItem = hangar.Items.FirstOrDefault(i => i.ItemId == _currentItem.Id);                      if (directItem == null)                      {                          Logging.Log("ValueDump: Item " + _currentItem.Name + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      _currentItem.QuantitySold = _currentItem.Quantity - directItem.Quantity;                        if (_form.cbxSell.Checked)                      {                          Logging.Log("ValueDump: Starting QuickSell for " + _currentItem.Name);                          if (!directItem.QuickSell())                          {                              _lastExecute = DateTime.Now.AddSeconds(-5);                                Logging.Log("ValueDump: QuickSell failed for " + _currentItem.Name + "' retrying in 5 seconds");                              break;                          }                            State = ValueDumpState.WaitForSellWindow;                      }                      else                      {                          State = ValueDumpState.InspectRefinery;                      }                      break;                    case ValueDumpState.WaitForSellWindow:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                          break;                        // Mark as new execution                      _lastExecute = DateTime.Now;                        Logging.Log("ValueDump: Inspecting sell order for " + _currentItem.Name);                      State = ValueDumpState.InspectOrder;                      break;                    case ValueDumpState.InspectOrder:                      // Let the order window stay open for random number                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds < random_number)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("ValueDump: No order available for " + _currentItem.Name);                            sellWindow.Cancel();                          State = ValueDumpState.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                      var quantity = (int)Math.Min(_currentItem.Quantity - _currentItem.QuantitySold' sellWindow.RemainingVolume.Value);                      var totalPrice = quantity * price;                        string otherPrices = " ";                        if (!_form.cbxUndersell.Checked)                      {                          var perc = _currentItem.InvType.MinSell.Value / price;                          var total = _currentItem.InvType.MinSell.Value * _currentItem.Quantity;                          // If percentage >= 130% and total price >= 1m isk then skip this item (we don't undersell)                          if (perc >= 1.4 && ((total-totalPrice) >= 2000000))                          {                              Logging.Log("ValueDump: Not underselling item " + _currentItem.Name + " [Min sell price: " + _currentItem.InvType.MinSell.Value.ToString("#'##0.00") + "][Sell price: " + price.ToString("#'##0.00") + "][" + perc.ToString("0%") + "]");                                sellWindow.Cancel();                              State = ValueDumpState.WaitingToFinishQuickSell;                              break;                          }                      }                        // Update quantity sold                      _currentItem.QuantitySold += quantity;                        // Update station price                      if (!_currentItem.StationBuy.HasValue)                          _currentItem.StationBuy = price;                      _currentItem.StationBuy = (_currentItem.StationBuy + price) / 2;                        Logging.Log("ValueDump: Selling " + quantity + " of " + _currentItem.Name + " [Sell price: " + (price * quantity).ToString("#'##0.00") + "]" + otherPrices);                      sellWindow.Accept();                        // Requeue to check again                      if (_currentItem.QuantitySold < _currentItem.Quantity)                          _form.ItemsToSell.Add(_currentItem);                        _lastExecute = DateTime.Now;                      State = ValueDumpState.WaitingToFinishQuickSell;                      break;                    case ValueDumpState.InspectRefinery:                        var price_r = _currentItem.InvType.MaxBuy.Value;                      var quantity_r = _currentItem.Quantity;                      var totalPrice_r = quantity_r * price_r;                      var portions = quantity_r / _currentItem.PortionSize;                      var refinePrice = _currentItem.RefineOutput.Any() ? _currentItem.RefineOutput.Sum(m => m.Quantity * m.InvType.MaxBuy ?? 0) * portions : 0;                      refinePrice *= (double)_form.RefineEfficiencyInput.Value / 100;                        if (refinePrice > totalPrice_r || totalPrice_r <= 1500000)                      {                          //Logging.Log("ValueDump: Refining gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                          // Add it to the refine list                          _form.ItemsToRefine.Add(_currentItem);                      }                      /*else                      {                          Logging.Log("Selling gives a better price for item " + _currentItem.Name + " [Refine price: " + refinePrice.ToString("#'##0.00") + "][Sell price: " + totalPrice_r.ToString("#'##0.00") + "]");                      }*/                        _lastExecute = DateTime.Now;                      State = ValueDumpState.NextItem;                        break;                    case ValueDumpState.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != _currentItem.Id)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = ValueDumpState.NextItem;                          break;                      }                      break;                    case ValueDumpState.RefineItems:                        if (reprorcessingWindow == null)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                                var refineItems = hangar.Items.Where(i => _form.ItemsToRefine.Any(r => r.Id == i.ItemId));                              DirectEve.Instance.ReprocessStationItems(refineItems);                                _lastExecute = DateTime.Now;                          }                          return;                      }                        if (reprorcessingWindow.NeedsQuote)                      {                          if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > random_number)                          {                              reprorcessingWindow.GetQuotes();                              _lastExecute = DateTime.Now;                          }                            return;                      }                        // Wait till we have a quote                      if (reprorcessingWindow.Quotes.Count == 0)                      {                          _lastExecute = DateTime.Now;                          return;                      }                        // Wait another 5 seconds to view the quote and then reprocess the stuff                      if (DateTime.Now.Subtract(_lastExecute).TotalSeconds > 5)                      {                          // TODO: We should wait for the items to appear in our hangar and then sell them...                          reprorcessingWindow.Reprocess();                          _lastExecute = DateTime.Now;                          Logging.Log("Waiting 17 second");                          State = ValueDumpState.WaitingToBack;                      }                      break;                    case ValueDumpState.WaitingToBack:                      if(DateTime.Now.Subtract(_lastExecute).TotalSeconds > 17 && value_process)                      {                          if(value_process)                              State = ValueDumpState.Begin;                          else                              State = ValueDumpState.Done;                      }                      break;              }
Missing Default,QuestorManager.Actions,Grab,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Grab.cs,ProcessState,The following switch statement is missing a default case: switch (State)              {                  case StateGrab.Idle:                  case StateGrab.Done:                      break;                    case StateGrab.Begin:                      State = StateGrab.OpenItemHangar;                      break;                    case StateGrab.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                                                        }                          if (!_hangar.IsReady)                              break;                        }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                                                        }                          if (!_hangar.IsReady)                              break;                      }                      else if (Hangar != null)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.OpenCorporationHangar();                                                        }                            if (!_hangar.IsReady)                              break;                      }                            Logging.Log("Grab: Opening Hangar");                            State = StateGrab.OpenCargo;                             break;                    case StateGrab.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                          Logging.Log("Grab: Opening Cargo Hold");                        freeCargoCapacity = cargo.Capacity - cargo.UsedCapacity;                        if (Item == 00)                          State = StateGrab.AllItems;                      else                          State = StateGrab.MoveItems;                                              break;                    case StateGrab.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      if (Unit == 00)                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = GrabItem.Quantity*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' GrabItem.Quantity);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving all the items");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                      else                      {                          var GrabItem = _hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (GrabItem != null)                          {                              double totalVolum = Unit*GrabItem.Volume;                              if (freeCargoCapacity >= totalVolum)                              {                                  cargo.Add(GrabItem' Unit);                                  freeCargoCapacity -= totalVolum;                                  Logging.Log("Grab: Moving item");                                  _lastAction = DateTime.Now;                                  State = StateGrab.WaitForItems;                              }                              else                              {                                  State = StateGrab.Done;                                  Logging.Log("Grab: No load capacity");                              }                          }                      }                                                break;                      case StateGrab.AllItems:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                           break;                         var AllItem = _hangar.Items;                       if (AllItem != null)                       {                           foreach (var item in AllItem)                           {                               double totalVolum = item.Quantity*item.Volume;                                 if (freeCargoCapacity >= totalVolum)                               {                                   cargo.Add(item);                                   freeCargoCapacity -= totalVolum;                               }                             }                           Logging.Log("Grab: Moving items");                           _lastAction = DateTime.Now;                           State = StateGrab.WaitForItems;                       }                           break;                    case StateGrab.WaitForItems:                       // Wait 5 seconds after moving                       if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                           break;                           if (DirectEve.Instance.GetLockedItems().Count == 0)                       {                             Logging.Log("Grab: Done");                           State = StateGrab.Done;                           break;                       }                           break;                }
Missing Default,QuestorManager.Actions,Drop,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Drop.cs,ProcessState,The following switch statement is missing a default case: switch (State)              {                  case StateDrop.Idle:                  case StateDrop.Done:                      break;                    case StateDrop.Begin:                      State = StateDrop.OpenItemHangar;                      break;                    case StateDrop.OpenItemHangar:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if ("Local Hangar" == Hangar)                      {                          // Is the hangar open?                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                              break;                          }                          if (!_hangar.IsReady)                              break;                                    }                      else if ("Ship Hangar" == Hangar)                      {                          if (_hangar.Window == null)                          {                              // No' command it to open                              DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                              break;                          }                          if (!_hangar.IsReady)                              break;                      }                      else                       {                          if (_hangar.Window == null)                              {                                  // No' command it to open                                  DirectEve.Instance.OpenCorporationHangar();                                  break;                              }                            if (!_hangar.IsReady)                              break;                      }                        Logging.Log("Drop: Opening Hangar");                      State = StateDrop.OpenCargo;                      break;                    case StateDrop.OpenCargo:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                      // Is cargo open?                      if (cargo.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenCargoHoldOfActiveShip);                          break;                      }                        if (!cargo.IsReady)                          break;                        Logging.Log("Drop: Opening Cargo Hold");                      if (Item == 00)                          State = StateDrop.AllItems;                      else                          State = StateDrop.MoveItems;                        break;                    case StateDrop.MoveItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (Unit == 00)                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' DropItem.Quantity);                              Logging.Log("Drop: Moving all the items");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                      else                      {                          var DropItem = cargo.Items.FirstOrDefault(i => (i.TypeId == Item));                          if (DropItem != null)                          {                              _hangar.Add(DropItem' Unit);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                      }                        break;                    case StateDrop.AllItems:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                            var AllItem = cargo.Items;                          if (AllItem != null)                          {                              _hangar.Add(AllItem);                              Logging.Log("Drop: Moving item");                              _lastAction = DateTime.Now;                              State = StateDrop.WaitForMove;                          }                          break;                    case StateDrop.WaitForMove:                      if (cargo.Items.Count != 0)                      {                          _lastAction = DateTime.Now;                          break;                      }                        // Wait 5 seconds after moving                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                                                    State = StateDrop.StackItemsHangar;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Moving items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                                                      State = StateDrop.StackItemsHangar;                          break;                      }                      break;                    case StateDrop.StackItemsHangar:                      // Dont stack until 5 seconds after the cargo has cleared                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        // Stack everything                      if (_hangar != null)                      {                          Logging.Log("Drop: Stacking items");                          _hangar.StackAll();                          _lastAction = DateTime.Now;                      }                                                State = StateDrop.WaitForStacking;                      break;                      case StateDrop.WaitForStacking:                      // Wait 5 seconds after stacking                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 5)                          break;                        if (DirectEve.Instance.GetLockedItems().Count == 0)                      {                          Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds > 120)                      {                          Logging.Log("Drop: Stacking items timed out' clearing item locks");                          DirectEve.Instance.UnlockItems();                            Logging.Log("Drop: Done");                          State = StateDrop.Done;                          break;                      }                      break;                                       }
Missing Default,QuestorManager.Actions,Sell,C:\repos\Da-Teach_Questor\QuestorManager\Actions\Sell.cs,ProcessState,The following switch statement is missing a default case: switch (State)              {                  case StateSell.Idle:                  case StateSell.Done:                      break;                    case StateSell.Begin:                      State = StateSell.StartQuickSell;                      break;                    case StateSell.StartQuickSell:                        if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 1)                          break;                      _lastAction = DateTime.Now;                        if (hangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenHangarFloor);                          break;                      }                        if (!hangar.IsReady)                          break;                        var directItem = hangar.Items.FirstOrDefault(i => (i.TypeId == Item));                      if (directItem == null)                      {                          Logging.Log("Sell: Item " + Item + " no longer exists in the hanger");                          break;                      }                        // Update Quantity                      if (Unit == 00)                         Unit = directItem.Quantity;                                                                       Logging.Log("Sell: Starting QuickSell for " + Item);                      if (!directItem.QuickSell())                      {                          _lastAction = DateTime.Now.AddSeconds(-5);                            Logging.Log("Sell: QuickSell failed for " + Item + "' retrying in 5 seconds");                          break;                      }                        State = StateSell.WaitForSellWindow;                      break;                    case StateSell.WaitForSellWindow:                          //if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != Item)                      //    break;                        // Mark as new execution                      _lastAction = DateTime.Now;                        Logging.Log("Sell: Inspecting sell order for " + Item);                      State = StateSell.InspectOrder;                      break;                    case StateSell.InspectOrder:                      // Let the order window stay open for 2 seconds                      if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 2)                          break;                        if (!sellWindow.OrderId.HasValue || !sellWindow.Price.HasValue || !sellWindow.RemainingVolume.HasValue)                      {                          Logging.Log("Sell: No order available for " + Item);                            sellWindow.Cancel();                          State = StateSell.WaitingToFinishQuickSell;                          break;                      }                        var price = sellWindow.Price.Value;                        Logging.Log("Sell: Selling " + Unit + " of " + Item + " [Sell price: " + (price * Unit).ToString("#'##0.00") + "]");                                           sellWindow.Accept();                          _lastAction = DateTime.Now;                      State = StateSell.WaitingToFinishQuickSell;                      break;                    case StateSell.WaitingToFinishQuickSell:                      if (sellWindow == null || !sellWindow.IsReady || sellWindow.Item.ItemId != Item)                      {                          var modal = DirectEve.Instance.Windows.FirstOrDefault(w => w.IsModal);                          if (modal != null)                              modal.Close();                            State = StateSell.Done;                          break;                      }                      break;                }
Missing Default,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,OnFrame,The following switch statement is missing a default case: switch (State)              {                    case State.Idle:                        if (Start)                      {                          Logging.Log("QuestorManager: Start");                          State = State.NextAction;                      }                         break;                    case State.NextAction:                         if (DateTime.Now.Subtract(_lastAction).TotalSeconds < 3)                           break;                         if (LstTask.Items.Count <= 0)                       {                          Logging.Log("QuestorManager: Finish");                           LblStatus.Text = "Finish";                           BttnStart.Text = "Start";                           State = State.Idle;                           Start = false;                           break;                       }                          if("QuestorManager" == LstTask.Items[0].Text)                       {                           _destination = LstTask.Items[0].Tag;                           State = State.Traveler;                           break;                       }                         if ("CmdLine" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.CmdLine;                           break;                       }                         if ("BuyLPI" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.BuyLPI;                           break;                       }                         if ("ValueDump" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.ValueDump;                           break;                       }                         if ("MakeShip" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.MakeShip;                           break;                       }                         if ("Drop" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Drop;                           break;                       }                         if ("Grab" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Grab;                           break;                       }                         if ("Buy" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Buy;                           break;                       }                         if ("Sell" == LstTask.Items[0].Text)                       {                           LblStatus.Text = LstTask.Items[0].Text + ":-:" + LstTask.Items[0].SubItems[1].Text;                           State = State.Sell;                           break;                       }                         break;                      case State.CmdLine:                         Logging.Log("CmdLine: " + LstTask.Items[0].SubItems[1].Text);                       LavishScript.ExecuteCommand(LstTask.Items[0].SubItems[1].Text);                       LstTask.Items.Remove(LstTask.Items[0]);                       _lastAction = DateTime.Now;                       State = State.NextAction;                                              break;                      case State.BuyLPI:                           if (_buylpi.State == StateBuyLPI.Idle)                      {                          _buylpi.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buylpi.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("BuyLPI: Begin");                          _buylpi.State = StateBuyLPI.Begin;                      }                           _buylpi.ProcessState();                           if (_buylpi.State == StateBuyLPI.Done)                      {                          Logging.Log("BuyLPI: Done");                          _buylpi.State = StateBuyLPI.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                      case State.ValueDump:                           if (chkUpdateMineral.Checked)                       {                           chkUpdateMineral.Checked = false;                           _valuedump.State = ValueDumpState.CheckMineralPrices;                       }                                                if (_valuedump.State == ValueDumpState.Idle)                      {                          Logging.Log("ValueDump: Begin");                          _valuedump.State = ValueDumpState.Begin;                      }                           _valuedump.ProcessState();                           if (_valuedump.State == ValueDumpState.Done)                      {                          Logging.Log("ValueDump: Done");                          _valuedump.State = ValueDumpState.Idle;                          ProcessItems();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.MakeShip:                        var shipHangar = DirectEve.Instance.GetShipHangar();                      if (shipHangar.Window == null)                      {                          // No' command it to open                          DirectEve.Instance.ExecuteCommand(DirectCmd.OpenShipHangar);                          break;                      }                        if (!shipHangar.IsReady)                          break;                        var ships = DirectEve.Instance.GetShipHangar().Items;                      foreach (var ship in ships.Where(ship => ship.GivenName == txtNameShip.Text))                      {                          Logging.Log("MakeShip: Making [" + ship.GivenName + "] active");                                                        ship.ActivateShip();                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                          break;                      }                           break;                      case State.Buy:                           if (_buy.State == StateBuy.Idle)                      {                          _buy.Item = Convert.ToInt32(LstTask.Items[0].Tag);                          _buy.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                          Logging.Log("Buy: Begin");                          _buy.State = StateBuy.Begin;                      }                                                _buy.ProcessState();                           if (_buy.State == StateBuy.Done)                      {                          Logging.Log("Buy: Done");                          _buy.State = StateBuy.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                          break;                    case State.Sell:                         _sell.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _sell.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                         if (_sell.State == StateSell.Idle)                      {                          Logging.Log("Sell: Begin");                          _sell.State = StateSell.Begin;                      }                         _sell.ProcessState();                           if (_sell.State == StateSell.Done)                      {                          Logging.Log("Sell: Done");                          _sell.State = StateSell.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        break;                    case State.Drop:                         _drop.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _drop.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _drop.Hangar = LstTask.Items[0].SubItems[3].Text;                         if (_drop.State == StateDrop.Idle)                      {                          Logging.Log("Drop: Begin");                          _drop.State = StateDrop.Begin;                        }                         _drop.ProcessState();                           if (_drop.State == StateDrop.Done)                      {                          Logging.Log("Drop: Done");                          _drop.State = StateDrop.Idle;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                              break;                    case State.Grab:                         _grab.Item = Convert.ToInt32(LstTask.Items[0].Tag);                       _grab.Unit = Convert.ToInt32(LstTask.Items[0].SubItems[2].Text);                       _grab.Hangar = LstTask.Items[0].SubItems[3].Text;                           if (_grab.State == StateGrab.Idle)                       {                           Logging.Log("Grab: Begin");                           _grab.State = StateGrab.Begin;                         }                         _grab.ProcessState();                           if (_grab.State == StateGrab.Done)                       {                           Logging.Log("Grab: Done");                           _grab.State = StateGrab.Idle;                           LstTask.Items.Remove(LstTask.Items[0]);                           _lastAction = DateTime.Now;                           State = State.NextAction;                       }                              break;                    case State.Traveler:                          // We are warping                      if (DirectEve.Instance.Session.IsInSpace && DirectEve.Instance.ActiveShip.Entity != null && DirectEve.Instance.ActiveShip.Entity.IsWarping)                          return;                        var travelerDestination = _traveler.Destination;                      if (_destination == null)                          travelerDestination = null;                        if (_destination is DirectBookmark)                      {                          if (!(travelerDestination is BookmarkDestination) || (travelerDestination as BookmarkDestination).BookmarkId != (_destination as DirectBookmark).BookmarkId)                              travelerDestination = new BookmarkDestination(_destination as DirectBookmark);                      }                        if (_destination is DirectSolarSystem)                      {                          if (!(travelerDestination is SolarSystemDestination) || (travelerDestination as SolarSystemDestination).SolarSystemId != (_destination as DirectSolarSystem).Id)                              travelerDestination = new SolarSystemDestination((_destination as DirectSolarSystem).Id);                      }                        if (_destination is DirectStation)                      {                          if (!(travelerDestination is StationDestination) || (travelerDestination as StationDestination).StationId != (_destination as DirectStation).Id)                              travelerDestination = new StationDestination((_destination as DirectStation).Id);                      }                        // Check to see if destination changed' since changing it will set the traveler to Idle                      if (_traveler.Destination != travelerDestination)                          _traveler.Destination = travelerDestination;                        _traveler.ProcessState();                        // Record number of jumps                      _jumps = DirectEve.Instance.Navigation.GetDestinationPath().Count;                        // Arrived at destination                      if (_destination != null && _traveler.State == TravelerState.AtDestination)                      {                          Logging.Log("Arived at destination");                            _traveler.Destination = null;                          _destination = null;                          LstTask.Items.Remove(LstTask.Items[0]);                          _lastAction = DateTime.Now;                          State = State.NextAction;                      }                        // An error occured' reset traveler                      if (_traveler.State == TravelerState.Error)                      {                          if (_traveler.Destination != null)                              Logging.Log("Stopped traveling' QuestorManager threw an error...");                            _destination = null;                          _traveler.Destination = null;                          Start = false;                          State = State.Idle;                      }                      break;                  }
Missing Default,QuestorManager,MainForm,C:\repos\Da-Teach_Questor\QuestorManager\MainForm.cs,lvItems_ColumnClick,The following switch statement is missing a default case: switch (e.Column)              {                  case 1:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Cadena;                      break;                  case 2:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 3:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 4:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 5:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                  case 6:                      oCompare.CompararPor = ListViewColumnSort.TipoCompare.Numero;                      break;                }
