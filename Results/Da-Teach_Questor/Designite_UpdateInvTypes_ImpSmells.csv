Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,tUpdate_Tick,Cyclomatic complexity of the method is 10
Long Statement,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,tUpdate_Tick,The length of the statement  "                    var needUpdating = types.Where(type => !type.LastUpdate.HasValue || DateTime.Now.Subtract(type.LastUpdate.Value).TotalDays > 4 ); " is 129.
Long Statement,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,tUpdate_Tick,The length of the statement  "                        needUpdating = types.Where(type => !type.LastUpdate.HasValue || DateTime.Now.Subtract(type.LastUpdate.Value).TotalMinutes > 2); " is 127.
Empty Catch Block,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,tUpdate_Tick,The method has an empty catch block.
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,frmMain,The following statement contains a magic number: Progress.Step = 50;
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,tUpdate_Tick,The following statement contains a magic number: try              {                  var types = _invTypes.Skip(Progress.Value).Take(Progress.Step);                  try                  {                      var needUpdating = types.Where(type => !type.LastUpdate.HasValue || DateTime.Now.Subtract(type.LastUpdate.Value).TotalDays > 4 );                      if (chkfast.Checked)                          needUpdating = types.Where(type => !type.LastUpdate.HasValue || DateTime.Now.Subtract(type.LastUpdate.Value).TotalMinutes > 2);                        if (needUpdating.Count() == 0)                          return;                        var queryString = string.Join("&"' types.Select(type => "typeid=" + type.Id).ToArray());                      queryString += "&usesystem=30000142"; //jita                        var url = "http://api.eve-central.com/api/marketstat?" + queryString;                      try                      {                          var prices = XDocument.Load(url);                            if ((string)prices.Root.Attribute("method") != "marketstat_xml")                              throw new Exception("Invalid XML method");                            foreach (var type in prices.Root.Element("marketstat").Elements("type"))                          {                              var id = (int)type.Attribute("id");                              var invType = types.Single(t => t.Id == id);                                var all = type.Element("all");                              if (all != null)                                  invType.MedianAll = (double?)all.Element("median");                                var buy = type.Element("buy");                              if (buy != null)                              {                                  invType.MedianBuy = (double?)buy.Element("median");                                  invType.MaxBuy = (double?)buy.Element("max");                              }                                var sell = type.Element("sell");                              if (sell != null)                              {                                  invType.MedianSell = (double?)sell.Element("median");                                  invType.MinSell = (double?)sell.Element("min");                              }                                invType.LastUpdate = DateTime.Now;                          }                      }                      catch (Exception ex)                      {                      }                  }                  finally                  {                      Progress.Value += types.Count();                        if (Progress.Value >= _invTypes.Count - 1)                      {                          _doUpdate = false;                            var xdoc = new XDocument(new XElement("invtypes"));                          foreach (var type in _invTypes)                              xdoc.Root.Add(type.Save());                          xdoc.Save(InvTypesPath);                            UpdateButton.Text = _doUpdate ? "Stop" : "Update";                      }                  }              }              finally              {                  _updating = false;              }
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,tUpdate_Tick,The following statement contains a magic number: try              {                  var types = _invTypes.Skip(Progress.Value).Take(Progress.Step);                  try                  {                      var needUpdating = types.Where(type => !type.LastUpdate.HasValue || DateTime.Now.Subtract(type.LastUpdate.Value).TotalDays > 4 );                      if (chkfast.Checked)                          needUpdating = types.Where(type => !type.LastUpdate.HasValue || DateTime.Now.Subtract(type.LastUpdate.Value).TotalMinutes > 2);                        if (needUpdating.Count() == 0)                          return;                        var queryString = string.Join("&"' types.Select(type => "typeid=" + type.Id).ToArray());                      queryString += "&usesystem=30000142"; //jita                        var url = "http://api.eve-central.com/api/marketstat?" + queryString;                      try                      {                          var prices = XDocument.Load(url);                            if ((string)prices.Root.Attribute("method") != "marketstat_xml")                              throw new Exception("Invalid XML method");                            foreach (var type in prices.Root.Element("marketstat").Elements("type"))                          {                              var id = (int)type.Attribute("id");                              var invType = types.Single(t => t.Id == id);                                var all = type.Element("all");                              if (all != null)                                  invType.MedianAll = (double?)all.Element("median");                                var buy = type.Element("buy");                              if (buy != null)                              {                                  invType.MedianBuy = (double?)buy.Element("median");                                  invType.MaxBuy = (double?)buy.Element("max");                              }                                var sell = type.Element("sell");                              if (sell != null)                              {                                  invType.MedianSell = (double?)sell.Element("median");                                  invType.MinSell = (double?)sell.Element("min");                              }                                invType.LastUpdate = DateTime.Now;                          }                      }                      catch (Exception ex)                      {                      }                  }                  finally                  {                      Progress.Value += types.Count();                        if (Progress.Value >= _invTypes.Count - 1)                      {                          _doUpdate = false;                            var xdoc = new XDocument(new XElement("invtypes"));                          foreach (var type in _invTypes)                              xdoc.Root.Add(type.Save());                          xdoc.Save(InvTypesPath);                            UpdateButton.Text = _doUpdate ? "Stop" : "Update";                      }                  }              }              finally              {                  _updating = false;              }
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.UpdateButton.Location = new System.Drawing.Point(12' 12);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.UpdateButton.Location = new System.Drawing.Point(12' 12);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.UpdateButton.Size = new System.Drawing.Size(260' 23);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.UpdateButton.Size = new System.Drawing.Size(260' 23);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.Progress.Location = new System.Drawing.Point(12' 41);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.Progress.Location = new System.Drawing.Point(12' 41);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.Progress.Size = new System.Drawing.Size(260' 23);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.Progress.Size = new System.Drawing.Size(260' 23);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkfast.Location = new System.Drawing.Point(23' 69);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkfast.Location = new System.Drawing.Point(23' 69);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkfast.Size = new System.Drawing.Size(97' 17);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkfast.Size = new System.Drawing.Size(97' 17);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chkfast.TabIndex = 2;
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 89);
Magic Number,UpdateInvTypes,frmMain,C:\repos\Da-Teach_Questor\UpdateInvTypes\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 89);
