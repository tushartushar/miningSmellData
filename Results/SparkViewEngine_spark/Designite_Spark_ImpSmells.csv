Implementation smell,Namespace,Class,File,Method,Description
Long Method,Spark.Compiler,BatchCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\BatchCompiler.cs,Compile,The method has 112 lines of code.
Long Method,Spark.Compiler.ChunkVisitors,AbstractChunkVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\ChunkVisitors\AbstractChunkVisitor.cs,Accept,The method has 111 lines of code.
Long Method,Spark.Compiler.VisualBasic,VisualBasicViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\VisualBasicViewCompiler.cs,GenerateSourceCode,The method has 128 lines of code.
Long Method,Spark.Compiler.CSharp,CSharpViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\CSharpViewCompiler.cs,GenerateSourceCode,The method has 115 lines of code.
Long Method,Spark.Parser.Code,CodeGrammar,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Code\CodeGrammar.cs,CodeGrammar,The method has 152 lines of code.
Long Method,Spark.Parser.Markup,MarkupGrammar,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Markup\MarkupGrammar.cs,MarkupGrammar,The method has 178 lines of code.
Long Method,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,GetBlockPattern,The method has 128 lines of code.
Complex Method,Spark,SparkViewEngine,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\SparkViewEngine.cs,ActivateViewFolder,Cyclomatic complexity of the method is 9
Complex Method,Spark.Compiler,BatchCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\BatchCompiler.cs,Compile,Cyclomatic complexity of the method is 15
Complex Method,Spark.Compiler.NodeVisitors,BindingExpansionVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\BindingExpansionVisitor.cs,BuildSnippets,Cyclomatic complexity of the method is 8
Complex Method,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitUse,Cyclomatic complexity of the method is 10
Complex Method,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitContent,Cyclomatic complexity of the method is 8
Complex Method,Spark.Compiler.NodeVisitors,IncludeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\IncludeVisitor.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,Spark.Compiler.NodeVisitors,AbstractNodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\AbstractNodeVisitor.cs,Accept,Cyclomatic complexity of the method is 16
Complex Method,Spark.Compiler.NodeVisitors,SpecialNodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\SpecialNodeVisitor.cs,Visit,Cyclomatic complexity of the method is 8
Complex Method,Spark.Compiler.ChunkVisitors,AbstractChunkVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\ChunkVisitors\AbstractChunkVisitor.cs,Accept,Cyclomatic complexity of the method is 28
Complex Method,Spark.Compiler.Javascript.ChunkVisitors,JavascriptGeneratedCodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\Javascript\ChunkVisitors\JavascriptGeneratedCodeVisitor.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,Spark.Compiler.VisualBasic.ChunkVisitors,GeneratedCodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\ChunkVisitors\GeneratedCodeVisitor.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,Spark.Compiler.VisualBasic,VisualBasicViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\VisualBasicViewCompiler.cs,GenerateSourceCode,Cyclomatic complexity of the method is 15
Complex Method,Spark.Compiler.CSharp.ChunkVisitors,GeneratedCodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\ChunkVisitors\GeneratedCodeVisitor.cs,Visit,Cyclomatic complexity of the method is 13
Complex Method,Spark.Compiler.CSharp,CSharpViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\CSharpViewCompiler.cs,GenerateSourceCode,Cyclomatic complexity of the method is 16
Complex Method,Spark.Compiler.Javascript,JavascriptViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\Javascript\JavascriptViewCompiler.cs,GenerateSourceCode,Cyclomatic complexity of the method is 8
Complex Method,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,Markdown,Cyclomatic complexity of the method is 8
Complex Method,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,Normalize,Cyclomatic complexity of the method is 12
Long Parameter List,Spark.Compiler.NodeVisitors,NameUtility,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\NameUtility.cs,IsMatch,The method has 5 parameters. Parameters: nameA' namespaceA' nameB' namespaceB' type
Long Parameter List,Spark.Parser,Position,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Position.cs,Position,The method has 6 parameters. Parameters: sourceContext' sourceContextLength' offset' line' column' paintLink
Long Statement,Spark.Compiler,BatchCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\BatchCompiler.cs,Compile,The length of the statement  "                        string.Format("When running the {0} in an AppDomain without a system.codedom config section only the csharp language is supported. This happens if you are precompiling your views."'  " is 181.
Long Statement,Spark.Compiler,BatchCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\BatchCompiler.cs,Compile,The length of the statement  "            compilerParameters.TempFiles = new TempFileCollection(basePath); //Without this' the generated code throws Access Denied exception with Impersonate mode on platforms like SharePoint " is 181.
Long Statement,Spark.Compiler,BatchCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\BatchCompiler.cs,Compile,The length of the statement  "                    sb.AppendFormat("{4}({0}'{1}): {2} {3}: "' err.Line' err.Column' err.IsWarning ? "warning" : "error"' err.ErrorNumber' err.FileName); " is 133.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,Visit,The length of the statement  "                _sendAttributeOnce = new ConditionalChunk { Type = ConditionalType.If' Condition = new Snippets("__just__once__ < 1") }; " is 120.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitIf,The length of the statement  "                var ifChunk = new ConditionalChunk { Type = ConditionalType.If' Condition = AsCode(conditionAttr)' Position = Locate(inspector.OriginalNode) }; " is 143.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitIf,The length of the statement  "                var onceChunk = new ConditionalChunk { Type = ConditionalType.Once' Condition = onceAttr.AsCodeInverted()' Position = Locate(inspector.OriginalNode) }; " is 151.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitElse,The length of the statement  "                var elseIfChunk = new ConditionalChunk { Type = ConditionalType.ElseIf' Condition = AsCode(ifAttr)' Position = Locate(inspector.OriginalNode) }; " is 144.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitElseIf,The length of the statement  "            var elseIfChunk = new ConditionalChunk { Type = ConditionalType.ElseIf' Condition = AsCode(conditionAttr)' Position = Locate(inspector.OriginalNode) }; " is 151.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitUnless,The length of the statement  "            var unlessChunk = new ConditionalChunk { Type = ConditionalType.Unless' Condition = AsCode(conditionAttr)' Position = Locate(inspector.OriginalNode) }; " is 151.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitVar,The length of the statement  "                Chunks.Add(new LocalVariableChunk { Type = type' Name = attr.Name' Value = AsTextOrientedCode(attr)' Position = Locate(attr) }); " is 128.
Long Statement,Spark.Compiler.NodeVisitors,ChunkBuilderVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ChunkBuilderVisitor.cs,VisitDefault,The length of the statement  "                Chunks.Add(new DefaultVariableChunk { Type = type' Name = attr.Name' Value = AsTextOrientedCode(attr)' Position = Locate(attr) }); " is 130.
Long Statement,Spark.Compiler.NodeVisitors,ConditionalAttributeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ConditionalAttributeVisitor.cs,CreateWrappingNode,The length of the statement  "			var fakeElement = new ElementNode(NameUtility.GetName(attr.Name)' new[] { fakeAttribute }' false) { OriginalNode = attr }; " is 122.
Long Statement,Spark.Compiler.NodeVisitors,PrefixExpandingVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\PrefixExpandingVisitor.cs,PushReconstructedNode,The length of the statement  "            var reconstructed = new ElementNode(specs.ElementName' attributes' original.IsEmptyElement) { OriginalNode = original' Namespace = Constants.Namespace }; " is 153.
Long Statement,Spark.Compiler.VisualBasic.ChunkVisitors,GeneratedCodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\ChunkVisitors\GeneratedCodeVisitor.cs,Visit,The length of the statement  "                    _source.WriteLine("Dim {0}Count As Integer = Global.Spark.Compiler.CollectionUtility.Count({1})"' variableName' collectionCode); " is 128.
Long Statement,Spark.Compiler.VisualBasic,VisualBasicViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\VisualBasicViewCompiler.cs,GenerateSourceCode,The length of the statement  "            usingGenerator.UsingAssembly("Microsoft.VisualBasic' Version=8.0.0.0' Culture=neutral' PublicKeyToken=b03f5f7f11d50a3a"); " is 121.
Long Statement,Spark.Compiler.VisualBasic,VisualBasicViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\VisualBasicViewCompiler.cs,GenerateSourceCode,The length of the statement  "            source.WriteLine(string.Format("    Private Shared ReadOnly _generatedViewId As Global.System.Guid = New Global.System.Guid(\"{0:n}\")"' GeneratedViewId)); " is 155.
Long Statement,Spark.Compiler.CSharp.ChunkVisitors,GlobalMembersVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\ChunkVisitors\GlobalMembersVisitor.cs,Visit,The length of the statement  "                    throw new CompilerException(string.Format("The global named {0} cannot be declared repeatedly with different types or values"' " is 126.
Long Statement,Spark.Compiler.CSharp,CSharpViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\CSharpViewCompiler.cs,GenerateSourceCode,The length of the statement  "                  source.WriteLine("using (OutputScope()) {{DelegateFirstRender(RenderViewLevel{0}); Content[\"view\"] = Output;}}"' invokeLevel); " is 128.
Long Statement,Spark.Compiler.Javascript,JavascriptViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\Javascript\JavascriptViewCompiler.cs,GenerateSourceCode,The length of the statement  "            source.Append("if (typeof arg == 'string') {if (!Content[arg]) Content[arg] = new StringWriter(); arg = Content[arg];}"); " is 121.
Long Statement,Spark.FileSystem,EmbeddedViewFolder,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\FileSystem\EmbeddedViewFolder.cs,LoadAllResources,The length of the statement  "            foreach(var resourceName in assembly.GetManifestResourceNames().Where(name=>name.StartsWith(path + "."' StringComparison.InvariantCultureIgnoreCase))) " is 150.
Long Statement,Spark.FileSystem,SubViewFolder,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\FileSystem\SubViewFolder.cs,Adjust,The length of the statement  "            if (!path.Replace(Path.AltDirectorySeparatorChar' Path.DirectorySeparatorChar).StartsWith(_subFolder' StringComparison.InvariantCultureIgnoreCase)) " is 147.
Long Statement,Spark.Parser.Code,CodeGrammar,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Code\CodeGrammar.cs,EmptySnip,The length of the statement  "            return position => new ParseResult<IList<Snippet>>(position' new[] { new Snippet { Value = ""' Begin = position' End = position } }); " is 133.
Long Statement,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorRefShortcutEvaluator,The length of the statement  "      string linkID = Regex.Replace(linkText.ToLowerInvariant()' @"[ ]*\n[ ]*"' " ");  // lower case and remove newlines / extra spaces " is 129.
Long Statement,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,BlockQuoteEvaluator,The length of the statement  "      bq = Regex.Replace(bq' @"(\s*<pre>.+?</pre>)"' new MatchEvaluator(BlockQuoteEvaluator2)' RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline); " is 153.
Long Statement,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,DoAutoLinks,The length of the statement  "        text = Regex.Replace(text' pattern' new MatchEvaluator(EmailEvaluator)' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 136.
Complex Conditional,Spark.Compiler.NodeVisitors,ConditionalAttributeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\ConditionalAttributeVisitor.cs,IsSpecialAttribute,The conditional expression  "eltName == "test" || eltName == "if" || eltName == "elseif" || eltName == "else""  is complex.
Complex Conditional,Spark.Compiler.NodeVisitors,OnceAttributeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\OnceAttributeVisitor.cs,IsSpecialAttribute,The conditional expression  "eltName == "test" || eltName == "if" || eltName == "elseif" || eltName == "else""  is complex.
Magic Number,Spark.Compiler,SourceWriter,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\SourceWriter.cs,AddIndent,The following statement contains a magic number: Indentation += 4;
Magic Number,Spark.Compiler,SourceWriter,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\SourceWriter.cs,RemoveIndent,The following statement contains a magic number: Indentation -= 4;
Magic Number,Spark.Compiler.NodeVisitors,BindingExpansionVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\NodeVisitors\BindingExpansionVisitor.cs,EndBinding,The following statement contains a magic number: binding.HasChildReference || binding.Phrases.Count() == 2
Magic Number,Spark.Compiler.VisualBasic,VisualBasicViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\VisualBasicViewCompiler.cs,GenerateSourceCode,The following statement contains a magic number: EditorBrowsableStateNever(source' 4);
Magic Number,Spark.Compiler.VisualBasic,VisualBasicViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\VisualBasic\VisualBasicViewCompiler.cs,GenerateSourceCode,The following statement contains a magic number: EditorBrowsableStateNever(source' 4);
Magic Number,Spark.Compiler.CSharp.ChunkVisitors,GeneratedCodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\ChunkVisitors\GeneratedCodeVisitor.cs,Visit,The following statement contains a magic number: var variableName = (inIndex < 2 ? null : terms[inIndex - 1]);
Magic Number,Spark.Compiler.CSharp,CSharpViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\CSharpViewCompiler.cs,GenerateSourceCode,The following statement contains a magic number: EditorBrowsableStateNever(source' 4);
Magic Number,Spark.Compiler.CSharp,CSharpViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\CSharpViewCompiler.cs,GenerateSourceCode,The following statement contains a magic number: EditorBrowsableStateNever(source' 4);
Magic Number,Spark.Compiler.CSharp,CSharpViewCompiler,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\CSharp\CSharpViewCompiler.cs,GenerateSourceCode,The following statement contains a magic number: EditorBrowsableStateNever(source' 4);
Magic Number,Spark.Parser,Position,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Position.cs,Advance,The following statement contains a magic number: switch (content[offset + specialIndex])                  {                      case '\r':                          remaining -= specialIndex + 1;                          offset += specialIndex + 1;                          column += specialIndex;                          break;                      case '\n':                          remaining -= specialIndex + 1;                          offset += specialIndex + 1;                          column = 1;                          line += 1;                          break;                      case '\t':                          remaining -= specialIndex + 1;                          offset += specialIndex + 1;                            // add any chars leading up to the tab                          column += specialIndex;                            // now add the tab effect                          column += 4 - ((column - 1) % 4);                          break;                      default:                          throw new Exception(                              string.Format("Unexpected character {0}"' (int)content[offset + specialIndex]));                  }
Magic Number,Spark.Parser,Position,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Position.cs,Advance,The following statement contains a magic number: switch (content[offset + specialIndex])                  {                      case '\r':                          remaining -= specialIndex + 1;                          offset += specialIndex + 1;                          column += specialIndex;                          break;                      case '\n':                          remaining -= specialIndex + 1;                          offset += specialIndex + 1;                          column = 1;                          line += 1;                          break;                      case '\t':                          remaining -= specialIndex + 1;                          offset += specialIndex + 1;                            // add any chars leading up to the tab                          column += specialIndex;                            // now add the tab effect                          column += 4 - ((column - 1) % 4);                          break;                      default:                          throw new Exception(                              string.Format("Unexpected character {0}"' (int)content[offset + specialIndex]));                  }
Magic Number,Spark.Parser.Syntax,AbstractSyntaxProvider,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Syntax\AbstractSyntaxProvider.cs,ThrowParseException,The following statement contains a magic number: int beforeLength = Math.Min(30' rest.Offset);
Magic Number,Spark.Parser.Syntax,AbstractSyntaxProvider,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Syntax\AbstractSyntaxProvider.cs,ThrowParseException,The following statement contains a magic number: int afterLength = Math.Min(30' rest.PotentialLength());
Magic Number,Spark.Parser.Syntax,DefaultSyntaxProvider,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Syntax\DefaultSyntaxProvider.cs,IncludeFile,The following statement contains a magic number: relativePath = relativePath.Substring(3);
Magic Number,Spark.Spool,SpoolPage,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Spool\SpoolPage.cs,Release,The following statement contains a magic number: scan != null && _allocator._cache.Count < 200
Magic Number,Spark.Utilities,CacheUtilities,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\CacheUtilities.cs,ToIdentifier,The following statement contains a magic number: var parts = new object[key.Length * 2];
Magic Number,Spark.Utilities,CacheUtilities,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\CacheUtilities.cs,ToIdentifier,The following statement contains a magic number: parts[index * 2] = unitSeperator;
Magic Number,Spark.Utilities,CacheUtilities,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\CacheUtilities.cs,ToIdentifier,The following statement contains a magic number: parts[index * 2 + 1] = key[index];
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,LinkEvaluator,The following statement contains a magic number: _urls[linkID] = EncodeAmpsAndAngles(match.Groups[2].Value);
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,LinkEvaluator,The following statement contains a magic number: _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,LinkEvaluator,The following statement contains a magic number: match.Groups[3] != null && match.Groups[3].Length > 0
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,LinkEvaluator,The following statement contains a magic number: match.Groups[3] != null && match.Groups[3].Length > 0
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkText = match.Groups[2].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorRefShortcutEvaluator,The following statement contains a magic number: string linkText = match.Groups[2].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: string linkText = match.Groups[2].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: url = url.Substring(1' url.Length - 2);
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ImageReferenceEvaluator,The following statement contains a magic number: string altText = match.Groups[2].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ImageReferenceEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: string alt = match.Groups[2].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: url = url.Substring(1' url.Length - 2);
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,AtxHeaderEvaluator,The following statement contains a magic number: string header = match.Groups[2].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ListEvaluator,The following statement contains a magic number: string listType = Regex.IsMatch(match.Groups[3].Value' _markerUL) ? "ul" : "ol";
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,ListItemEvaluator,The following statement contains a magic number: string item = match.Groups[4].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,CodeSpanEvaluator,The following statement contains a magic number: string span = match.Groups[2].Value;
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: var sb = new StringBuilder(addr.Length * 5);
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: r = rand.Next(1' 100);
Magic Number,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: (r > 90 || c == ':') && c != '@'
Missing Default,Spark.Compiler.Javascript.ChunkVisitors,JavascriptGeneratedCodeVisitor,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Compiler\Javascript\ChunkVisitors\JavascriptGeneratedCodeVisitor.cs,Visit,The following switch statement is missing a default case: switch (chunk.Type)              {                  case ConditionalType.If:                      {                          _source.Append("if (").Append(chunk.Condition).AppendLine(") {");                          Accept(chunk.Body);                          _source.AppendLine("}");                      }                      break;                  case ConditionalType.ElseIf:                      {                          _source.Append("else if (").Append(chunk.Condition).AppendLine(") {");                          Accept(chunk.Body);                          _source.AppendLine("}");                      }                      break;                  case ConditionalType.Else:                      {                          _source.AppendLine("else {");                          Accept(chunk.Body);                          _source.AppendLine("}");                      }                      break;                  case ConditionalType.Unless:                      {                          _source.Append("if (!(").Append(chunk.Condition).AppendLine(")) {");                          Accept(chunk.Body);                          _source.AppendLine("}");                      }                      break;              }
Missing Default,Spark.Parser.Syntax,DefaultSyntaxProvider,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Parser\Syntax\DefaultSyntaxProvider.cs,IncludeFile,The following switch statement is missing a default case: switch (parse)              {                  case "text":                      var encoded = sourceContext.Content                          .Replace("&"' "&amp;")                          .Replace("<"' "&lt;")                          .Replace(">"' "&gt;");                      return new[] {new TextNode(encoded)};                  case "html":                      return new[] {new TextNode(sourceContext.Content)};              }
Missing Default,Spark.Utilities,Markdown,D:\research\architectureSmells\repos1\SparkViewEngine_spark\src\Spark\Utilities\Markdown.cs,Markdown,The following switch statement is missing a default case: switch (key)          {            case "Markdown.AutoHyperlink":              _autoHyperlink = Convert.ToBoolean(settings[key]);              break;            case "Markdown.AutoNewlines":              _autoNewlines = Convert.ToBoolean(settings[key]);              break;            case "Markdown.EmptyElementSuffix":              _emptyElementSuffix = settings[key];              break;            case "Markdown.EncodeProblemUrlCharacters":              _encodeProblemUrlCharacters = Convert.ToBoolean(settings[key]);              break;            case "Markdown.LinkEmails":              _linkEmails = Convert.ToBoolean(settings[key]);              break;            case "Markdown.StrictBoldItalic":              _strictBoldItalic = Convert.ToBoolean(settings[key]);              break;          }
