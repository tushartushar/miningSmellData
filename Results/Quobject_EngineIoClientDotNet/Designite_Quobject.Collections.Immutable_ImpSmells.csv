Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,Cyclomatic complexity of the method is 8
Long Parameter List,Quobject.Collections.Immutable,ImmutableDictionary,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\ImmutableDictionary.cs,ToImmutableDictionary,The method has 5 parameters. Parameters: source' keySelector' elementSelector' keyComparer' valueComparer
Long Statement,Quobject.Collections.Immutable,ImmutableDictionary<TKey;TValue>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\ImmutableDictionary.cs,Remove,The length of the statement  "            return new ImmutableDictionary<TKey' TValue>(root.RemoveFromNew(pair' CompareKV' out found)' keyComparer' valueComparer); " is 121.
Long Statement,Quobject.Collections.Immutable,ImmutableDictionary,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\ImmutableDictionary.cs,ToImmutableDictionary,The length of the statement  "            return Create<TKey' TValue>(keyComparer' valueComparer).AddRange(source.Select(x => new KeyValuePair<TKey' TValue>(keySelector(x)' elementSelector(x)))); " is 153.
Magic Number,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,The following statement contains a magic number: if (Math.Abs(bal) < 2)                  return this;
Magic Number,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,The following statement contains a magic number: if (bal == 2)              {                  if (left.Balance == 1 || left.Balance == 0)                  {                      //Easy case:                      return this.RotateToGT();                  }                  if (left.Balance == -1)                  {                      //Rotate LTDict:                      var newlt = ToMutableIfNecessary(left).RotateToLT();                      var newroot = NewOrMutate(Value' newlt' right);                      return newroot.RotateToGT();                  }                  throw new Exception(String.Format("LTDict too unbalanced: {0}"' left.Balance));              }
Magic Number,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,The following statement contains a magic number: if (bal == -2)              {                  if (right.Balance == -1 || right.Balance == 0)                  {                      //Easy case:                      return this.RotateToLT();                  }                  if (right.Balance == 1)                  {                      //Rotate GTDict:                      var newgt = ToMutableIfNecessary(right).RotateToGT();                      var newroot = NewOrMutate(Value' left' newgt);                      return newroot.RotateToLT();                  }                  throw new Exception(String.Format("LTDict too unbalanced: {0}"' left.Balance));              }
