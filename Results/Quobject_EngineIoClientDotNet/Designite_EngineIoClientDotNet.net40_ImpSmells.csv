Implementation smell,Namespace,Class,File,Method,Description
Long Method,Quobject.EngineIoClientDotNet.Client.Transports,XHRRequest,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\PollingXHR_net40.cs,Create,The method has 111 lines of code.
Complex Method,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,Cyclomatic complexity of the method is 10
Complex Method,Quobject.EngineIoClientDotNet.Parser,Packet,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,DecodePayload,Cyclomatic complexity of the method is 9
Complex Method,Quobject.EngineIoClientDotNet.Parser,Packet,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,DecodePayload,Cyclomatic complexity of the method is 10
Long Identifier,Quobject.EngineIoClientDotNet.Client,Options,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,,The length of the parameter IgnoreServerCertificateValidation is 33.
Long Statement,Quobject.EngineIoClientDotNet.Client,Socket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,Flush,The length of the statement  "            log.Info(string.Format("ReadyState={0} Transport.Writeable={1} Upgrading={2} WriteBuffer.Count={3}"'ReadyState'Transport.Writable'Upgrading' WriteBuffer.Count));" is 161.
Long Statement,Quobject.EngineIoClientDotNet.Client,Socket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,Flush,The length of the statement  "            if (ReadyState != ReadyStateEnum.CLOSED && this.Transport != null && this.Transport.Writable && !Upgrading && WriteBuffer.Count != 0)" is 133.
Long Statement,Quobject.EngineIoClientDotNet.Modules,LogManager,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\LogManager.cs,Info,The length of the statement  "            //Trace.WriteLine(string.Format("{0} [{3}] {1} - {2}"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff")' MyType' msg' System.Threading.Thread.CurrentThread.ManagedThreadId));" is 174.
Long Statement,Quobject.EngineIoClientDotNet.Modules,LogManager,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\LogManager.cs,Error,The length of the statement  "                this.Info($"ERROR exception.InnerException {p} {exception.InnerException.Message} {exception.InnerException.StackTrace}");" is 122.
Complex Conditional,Quobject.EngineIoClientDotNet.Client,Socket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,Flush,The conditional expression  "ReadyState != ReadyStateEnum.CLOSED && this.Transport != null && this.Transport.Writable && !Upgrading && WriteBuffer.Count != 0"  is complex.
Complex Conditional,Quobject.EngineIoClientDotNet.Client.Transports,Polling,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\Polling_net35.cs,Uri,The conditional expression  "this.Port > 0 && (("https" == schema && this.Port != 443)                     || ("http" == schema && this.Port != 80))"  is complex.
Complex Conditional,Quobject.EngineIoClientDotNet.Client.Transports,WebSocket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\WebSocket_net35.cs,Uri,The conditional expression  "this.Port > 0 && (("wss" == schema && this.Port != 443)                     || ("ws" == schema && this.Port != 80))"  is complex.
Empty Catch Block,Quobject.EngineIoClientDotNet.Client,Socket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,OnDrain,The method has an empty catch block.
Empty Catch Block,Quobject.EngineIoClientDotNet.Client,Socket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,OnDrain,The method has an empty catch block.
Empty Catch Block,Quobject.EngineIoClientDotNet.Client,Socket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,OnDrain,The method has an empty catch block.
Magic Number,Quobject.EngineIoClientDotNet.Client,Socket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket_net35.cs,Socket,The following statement contains a magic number: PolicyPort = options.PolicyPort != 0 ? options.PolicyPort : 843;
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,XHRRequest,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\PollingXHR_net40.cs,Create,The following statement contains a magic number: EasyTimer.TaskRun(() =>                     {                         var log2 = LogManager.GetLogger(Global.CallerName());                         log2.Info("Task.Run Create start");                         using (var res = Xhr.GetResponse())                         {                             log.Info("Xhr.GetResponse ");                              var responseHeaders = new Dictionary<string' string>();                             for (int i = 0; i < res.Headers.Count; i++)                             {                                 responseHeaders.Add(res.Headers.Keys[i]' res.Headers[i]);                             }                             OnResponseHeaders(responseHeaders);                              var contentType = res.Headers["Content-Type"];                                using (var resStream = res.GetResponseStream())                             {                                 Debug.Assert(resStream != null' "resStream != null");                                 if (contentType.Equals("application/octet-stream"'                                     StringComparison.OrdinalIgnoreCase))                                 {                                     var buffer = new byte[16*1024];                                     using (var ms = new MemoryStream())                                     {                                         int read;                                         while ((read = resStream.Read(buffer' 0' buffer.Length)) > 0)                                         {                                             ms.Write(buffer' 0' read);                                         }                                         var a = ms.ToArray();                                         OnData(a);                                     }                                 }                                 else                                 {                                     using (var sr = new StreamReader(resStream))                                     {                                         OnData(sr.ReadToEnd());                                     }                                 }                             }                         }                         log2.Info("Task.Run Create finish");                      });
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,XHRRequest,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\PollingXHR_net40.cs,Create,The following statement contains a magic number: EasyTimer.TaskRun(() =>                     {                         var log2 = LogManager.GetLogger(Global.CallerName());                         log2.Info("Task.Run Create start");                         using (var res = Xhr.GetResponse())                         {                             log.Info("Xhr.GetResponse ");                              var responseHeaders = new Dictionary<string' string>();                             for (int i = 0; i < res.Headers.Count; i++)                             {                                 responseHeaders.Add(res.Headers.Keys[i]' res.Headers[i]);                             }                             OnResponseHeaders(responseHeaders);                              var contentType = res.Headers["Content-Type"];                                using (var resStream = res.GetResponseStream())                             {                                 Debug.Assert(resStream != null' "resStream != null");                                 if (contentType.Equals("application/octet-stream"'                                     StringComparison.OrdinalIgnoreCase))                                 {                                     var buffer = new byte[16*1024];                                     using (var ms = new MemoryStream())                                     {                                         int read;                                         while ((read = resStream.Read(buffer' 0' buffer.Length)) > 0)                                         {                                             ms.Write(buffer' 0' read);                                         }                                         var a = ms.ToArray();                                         OnData(a);                                     }                                 }                                 else                                 {                                     using (var sr = new StreamReader(resStream))                                     {                                         OnData(sr.ReadToEnd());                                     }                                 }                             }                         }                         log2.Info("Task.Run Create finish");                      });
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,Polling,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\Polling_net35.cs,Uri,The following statement contains a magic number: this.Port > 0 && (("https" == schema && this.Port != 443)                     || ("http" == schema && this.Port != 80))
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,Polling,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\Polling_net35.cs,Uri,The following statement contains a magic number: this.Port > 0 && (("https" == schema && this.Port != 443)                     || ("http" == schema && this.Port != 80))
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,WebSocket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\WebSocket_net35.cs,Uri,The following statement contains a magic number: this.Port > 0 && (("wss" == schema && this.Port != 443)                     || ("ws" == schema && this.Port != 80))
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,WebSocket,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\WebSocket_net35.cs,Uri,The following statement contains a magic number: this.Port > 0 && (("wss" == schema && this.Port != 443)                     || ("ws" == schema && this.Port != 80))
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,The following statement contains a magic number: codePoint = ((byte1 & 0x1F) << 6) | byte2;
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,The following statement contains a magic number: codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,The following statement contains a magic number: codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,EncodeCodePoint,The following statement contains a magic number: sb.Append((char) (((codePoint >> 6) & 0x1F) | 0xC0));
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,Ucs2Decode,The following statement contains a magic number: output.Add(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,Ucs2Encode,The following statement contains a magic number: sb.Append((char)(((int)((uint)value >> 10)) & 0x3FF | 0xD800));
Magic Number,Quobject.EngineIoClientDotNet.Parser,Packet,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,DecodePayload,The following statement contains a magic number: b == 255
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: var sizeBuffer = new byte[encodingLength.Length + 2];
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: sizeBuffer[sizeBuffer.Length - 1] = (byte) 255;
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: var sizeBuffer1 = new byte[encodingLength1.Length + 2];
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\research\architectureSmells\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: sizeBuffer1[sizeBuffer1.Length - 1] = (byte)255;
