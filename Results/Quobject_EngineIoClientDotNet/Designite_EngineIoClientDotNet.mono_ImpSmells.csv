Implementation smell,Namespace,Class,File,Method,Description
Long Method,Quobject.EngineIoClientDotNet.Client.Transports,XHRRequest,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\PollingXHR.cs,Create,The method has 101 lines of code.
Complex Method,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,Cyclomatic complexity of the method is 8
Complex Method,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,Cyclomatic complexity of the method is 10
Complex Method,Quobject.EngineIoClientDotNet.Parser,Packet,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,DecodePayload,Cyclomatic complexity of the method is 9
Long Parameter List,Quobject.Collections.Immutable,ImmutableDictionary,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\ImmutableDictionary.cs,ToImmutableDictionary,The method has 5 parameters. Parameters: source' keySelector' elementSelector' keyComparer' valueComparer
Long Identifier,Quobject.EngineIoClientDotNet.Client,Options,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket.cs,,The length of the parameter IgnoreServerCertificateValidation is 33.
Long Statement,Quobject.Collections.Immutable,ImmutableDictionary<TKey;TValue>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\ImmutableDictionary.cs,Remove,The length of the statement  "            return new ImmutableDictionary<TKey' TValue>(root.RemoveFromNew(pair' CompareKV' out found)' keyComparer' valueComparer); " is 121.
Long Statement,Quobject.Collections.Immutable,ImmutableDictionary,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\ImmutableDictionary.cs,ToImmutableDictionary,The length of the statement  "            return Create<TKey' TValue>(keyComparer' valueComparer).AddRange(source.Select(x => new KeyValuePair<TKey' TValue>(keySelector(x)' elementSelector(x)))); " is 153.
Long Statement,Quobject.EngineIoClientDotNet.Client,Socket,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket.cs,Flush,The length of the statement  "            log.Info(string.Format("ReadyState={0} Transport.Writeable={1} Upgrading={2} WriteBuffer.Count={3}"'ReadyState'Transport.Writable'Upgrading' WriteBuffer.Count)); " is 161.
Long Statement,Quobject.EngineIoClientDotNet.Modules,LogManager,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\LogManager.cs,Info,The length of the statement  "            //Trace.WriteLine(string.Format("{0} [{3}] {1} - {2}"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff")' MyType' msg' System.Threading.Thread.CurrentThread.ManagedThreadId)); " is 174.
Long Statement,Quobject.EngineIoClientDotNet.Modules,LogManager,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\LogManager.cs,Error,The length of the statement  "                this.Info($"ERROR exception.InnerException {p} {exception.InnerException.Message} {exception.InnerException.StackTrace}"); " is 122.
Complex Conditional,Quobject.EngineIoClientDotNet.Client,Socket,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket.cs,Flush,The conditional expression  "ReadyState != ReadyStateEnum.CLOSED && this.Transport.Writable && !Upgrading && WriteBuffer.Count != 0"  is complex.
Complex Conditional,Quobject.EngineIoClientDotNet.Client.Transports,Polling,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\Polling.cs,Uri,The conditional expression  "this.Port > 0 && (("https" == schema && this.Port != 443)                      || ("http" == schema && this.Port != 80))"  is complex.
Complex Conditional,Quobject.EngineIoClientDotNet.Client.Transports,WebSocket,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\WebSocket.cs,Uri,The conditional expression  "this.Port > 0 && (("wss" == schema && this.Port != 443)                      || ("ws" == schema && this.Port != 80))"  is complex.
Magic Number,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,The following statement contains a magic number: if (Math.Abs(bal) < 2)                  return this;
Magic Number,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,The following statement contains a magic number: if (bal == 2)              {                  if (left.Balance == 1 || left.Balance == 0)                  {                      //Easy case:                      return this.RotateToGT();                  }                  if (left.Balance == -1)                  {                      //Rotate LTDict:                      var newlt = ToMutableIfNecessary(left).RotateToLT();                      var newroot = NewOrMutate(Value' newlt' right);                      return newroot.RotateToGT();                  }                  throw new Exception(String.Format("LTDict too unbalanced: {0}"' left.Balance));              }
Magic Number,Quobject.Collections.Immutable,AvlNode<T>,C:\repos\Quobject_EngineIoClientDotNet\Src\Quobject.Collections.Immutable\AvlNode.cs,FixRootBalance,The following statement contains a magic number: if (bal == -2)              {                  if (right.Balance == -1 || right.Balance == 0)                  {                      //Easy case:                      return this.RotateToLT();                  }                  if (right.Balance == 1)                  {                      //Rotate GTDict:                      var newgt = ToMutableIfNecessary(right).RotateToGT();                      var newroot = NewOrMutate(Value' left' newgt);                      return newroot.RotateToLT();                  }                  throw new Exception(String.Format("LTDict too unbalanced: {0}"' left.Balance));              }
Magic Number,Quobject.EngineIoClientDotNet.Client,Socket,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket.cs,Socket,The following statement contains a magic number: PolicyPort = options.PolicyPort != 0 ? options.PolicyPort : 843;
Magic Number,Quobject.EngineIoClientDotNet.Client,Socket,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Socket.cs,WaitForUpgrade,The following statement contains a magic number: const int TIMEOUT = 1000;
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,Polling,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\Polling.cs,Uri,The following statement contains a magic number: if (this.Port > 0 && (("https" == schema && this.Port != 443)                      || ("http" == schema && this.Port != 80)))              {                  portString = ":" + this.Port;              }
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,Polling,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\Polling.cs,Uri,The following statement contains a magic number: if (this.Port > 0 && (("https" == schema && this.Port != 443)                      || ("http" == schema && this.Port != 80)))              {                  portString = ":" + this.Port;              }
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,XHRRequest,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\PollingXHR.cs,Create,The following statement contains a magic number: try                  {                      if (Data != null)                      {                          Xhr.ContentLength = Data.Length;                            using (var requestStream = Xhr.GetRequestStream())                          {                              requestStream.WriteAsync(Data' 0' Data.Length).Wait();                          }                      }                        Task.Run(() =>                      {                          var log2 = LogManager.GetLogger(Global.CallerName());                          log2.Info("Task.Run Create start");                          using (var res = Xhr.GetResponse())                          {                              log.Info("Xhr.GetResponse ");                                var responseHeaders = new Dictionary<string' string>();                              for (int i = 0; i < res.Headers.Count; i++)                              {                                  responseHeaders.Add(res.Headers.Keys[i]' res.Headers[i]);                              }                              OnResponseHeaders(responseHeaders);                                var contentType = res.Headers["Content-Type"];                                    using (var resStream = res.GetResponseStream())                              {                                  Debug.Assert(resStream != null' "resStream != null");                                  if (contentType.Equals("application/octet-stream"'                                      StringComparison.OrdinalIgnoreCase))                                  {                                      var buffer = new byte[16 * 1024];                                      using (var ms = new MemoryStream())                                      {                                          int read;                                          while ((read = resStream.Read(buffer' 0' buffer.Length)) > 0)                                          {                                              ms.Write(buffer' 0' read);                                          }                                          var a = ms.ToArray();                                          OnData(a);                                      }                                  }                                  else                                  {                                      using (var sr = new StreamReader(resStream))                                      {                                          OnData(sr.ReadToEnd());                                      }                                  }                              }                          }                          log2.Info("Task.Run Create finish");                        }).Wait();                    }                  catch (System.IO.IOException e)                  {                      log.Error("Create call failed"' e);                      OnError(e);                  }                  catch (System.Net.WebException e)                  {                      log.Error("Create call failed"' e);                      OnError(e);                  }                  catch (Exception e)                  {                      log.Error("Create call failed"' e);                      OnError(e);                  }
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,XHRRequest,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\PollingXHR.cs,Create,The following statement contains a magic number: try                  {                      if (Data != null)                      {                          Xhr.ContentLength = Data.Length;                            using (var requestStream = Xhr.GetRequestStream())                          {                              requestStream.WriteAsync(Data' 0' Data.Length).Wait();                          }                      }                        Task.Run(() =>                      {                          var log2 = LogManager.GetLogger(Global.CallerName());                          log2.Info("Task.Run Create start");                          using (var res = Xhr.GetResponse())                          {                              log.Info("Xhr.GetResponse ");                                var responseHeaders = new Dictionary<string' string>();                              for (int i = 0; i < res.Headers.Count; i++)                              {                                  responseHeaders.Add(res.Headers.Keys[i]' res.Headers[i]);                              }                              OnResponseHeaders(responseHeaders);                                var contentType = res.Headers["Content-Type"];                                    using (var resStream = res.GetResponseStream())                              {                                  Debug.Assert(resStream != null' "resStream != null");                                  if (contentType.Equals("application/octet-stream"'                                      StringComparison.OrdinalIgnoreCase))                                  {                                      var buffer = new byte[16 * 1024];                                      using (var ms = new MemoryStream())                                      {                                          int read;                                          while ((read = resStream.Read(buffer' 0' buffer.Length)) > 0)                                          {                                              ms.Write(buffer' 0' read);                                          }                                          var a = ms.ToArray();                                          OnData(a);                                      }                                  }                                  else                                  {                                      using (var sr = new StreamReader(resStream))                                      {                                          OnData(sr.ReadToEnd());                                      }                                  }                              }                          }                          log2.Info("Task.Run Create finish");                        }).Wait();                    }                  catch (System.IO.IOException e)                  {                      log.Error("Create call failed"' e);                      OnError(e);                  }                  catch (System.Net.WebException e)                  {                      log.Error("Create call failed"' e);                      OnError(e);                  }                  catch (Exception e)                  {                      log.Error("Create call failed"' e);                      OnError(e);                  }
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,WebSocket,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\WebSocket.cs,Uri,The following statement contains a magic number: if (this.Port > 0 && (("wss" == schema && this.Port != 443)                      || ("ws" == schema && this.Port != 80)))              {                  portString = ":" + this.Port;              }
Magic Number,Quobject.EngineIoClientDotNet.Client.Transports,WebSocket,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Client\Transports\WebSocket.cs,Uri,The following statement contains a magic number: if (this.Port > 0 && (("wss" == schema && this.Port != 443)                      || ("ws" == schema && this.Port != 80)))              {                  portString = ":" + this.Port;              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,The following statement contains a magic number: if ((byte1 & 0xE0) == 0xC0)              {                  byte2 = ReadContinuationByte();                  codePoint = ((byte1 & 0x1F) << 6) | byte2;                  if (codePoint >= 0x80)                  {                      return codePoint;                  }                  else                  {                      throw new UTF8Exception("Invalid continuation byte");                  }              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,The following statement contains a magic number: if ((byte1 & 0xF0) == 0xE0)              {                  byte2 = ReadContinuationByte();                  byte3 = ReadContinuationByte();                  codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                  if (codePoint >= 0x0800)                  {                      return codePoint;                  }                  else                  {                      throw new UTF8Exception("Invalid continuation byte");                  }              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,DecodeSymbol,The following statement contains a magic number: if ((byte1 & 0xF0) == 0xE0)              {                  byte2 = ReadContinuationByte();                  byte3 = ReadContinuationByte();                  codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                  if (codePoint >= 0x0800)                  {                      return codePoint;                  }                  else                  {                      throw new UTF8Exception("Invalid continuation byte");                  }              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,EncodeCodePoint,The following statement contains a magic number: if ((codePoint & 0xFFFFF800) == 0)              {                  // 2-byte sequence                  sb.Append((char) (((codePoint >> 6) & 0x1F) | 0xC0));              }              else if ((codePoint & 0xFFFF0000) == 0)              {                  // 3-byte sequence                  sb.Append((char) (((codePoint >> 12) & 0x0F) | 0xE0));                  sb.Append( CreateByte(codePoint' 6));              }              else if ((codePoint & 0xFFE00000) == 0)              {                  // 4-byte sequence                  sb.Append((char) (((codePoint >> 18) & 0x07) | 0xF0));                  sb.Append( CreateByte(codePoint' 12));                  sb.Append( CreateByte(codePoint' 6));              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,EncodeCodePoint,The following statement contains a magic number: if ((codePoint & 0xFFFFF800) == 0)              {                  // 2-byte sequence                  sb.Append((char) (((codePoint >> 6) & 0x1F) | 0xC0));              }              else if ((codePoint & 0xFFFF0000) == 0)              {                  // 3-byte sequence                  sb.Append((char) (((codePoint >> 12) & 0x0F) | 0xE0));                  sb.Append( CreateByte(codePoint' 6));              }              else if ((codePoint & 0xFFE00000) == 0)              {                  // 4-byte sequence                  sb.Append((char) (((codePoint >> 18) & 0x07) | 0xF0));                  sb.Append( CreateByte(codePoint' 12));                  sb.Append( CreateByte(codePoint' 6));              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,EncodeCodePoint,The following statement contains a magic number: if ((codePoint & 0xFFFFF800) == 0)              {                  // 2-byte sequence                  sb.Append((char) (((codePoint >> 6) & 0x1F) | 0xC0));              }              else if ((codePoint & 0xFFFF0000) == 0)              {                  // 3-byte sequence                  sb.Append((char) (((codePoint >> 12) & 0x0F) | 0xE0));                  sb.Append( CreateByte(codePoint' 6));              }              else if ((codePoint & 0xFFE00000) == 0)              {                  // 4-byte sequence                  sb.Append((char) (((codePoint >> 18) & 0x07) | 0xF0));                  sb.Append( CreateByte(codePoint' 12));                  sb.Append( CreateByte(codePoint' 6));              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,EncodeCodePoint,The following statement contains a magic number: if ((codePoint & 0xFFFFF800) == 0)              {                  // 2-byte sequence                  sb.Append((char) (((codePoint >> 6) & 0x1F) | 0xC0));              }              else if ((codePoint & 0xFFFF0000) == 0)              {                  // 3-byte sequence                  sb.Append((char) (((codePoint >> 12) & 0x0F) | 0xE0));                  sb.Append( CreateByte(codePoint' 6));              }              else if ((codePoint & 0xFFE00000) == 0)              {                  // 4-byte sequence                  sb.Append((char) (((codePoint >> 18) & 0x07) | 0xF0));                  sb.Append( CreateByte(codePoint' 12));                  sb.Append( CreateByte(codePoint' 6));              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,EncodeCodePoint,The following statement contains a magic number: if ((codePoint & 0xFFFFF800) == 0)              {                  // 2-byte sequence                  sb.Append((char) (((codePoint >> 6) & 0x1F) | 0xC0));              }              else if ((codePoint & 0xFFFF0000) == 0)              {                  // 3-byte sequence                  sb.Append((char) (((codePoint >> 12) & 0x0F) | 0xE0));                  sb.Append( CreateByte(codePoint' 6));              }              else if ((codePoint & 0xFFE00000) == 0)              {                  // 4-byte sequence                  sb.Append((char) (((codePoint >> 18) & 0x07) | 0xF0));                  sb.Append( CreateByte(codePoint' 12));                  sb.Append( CreateByte(codePoint' 6));              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,EncodeCodePoint,The following statement contains a magic number: if ((codePoint & 0xFFFFF800) == 0)              {                  // 2-byte sequence                  sb.Append((char) (((codePoint >> 6) & 0x1F) | 0xC0));              }              else if ((codePoint & 0xFFFF0000) == 0)              {                  // 3-byte sequence                  sb.Append((char) (((codePoint >> 12) & 0x0F) | 0xE0));                  sb.Append( CreateByte(codePoint' 6));              }              else if ((codePoint & 0xFFE00000) == 0)              {                  // 4-byte sequence                  sb.Append((char) (((codePoint >> 18) & 0x07) | 0xF0));                  sb.Append( CreateByte(codePoint' 12));                  sb.Append( CreateByte(codePoint' 6));              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,Ucs2Decode,The following statement contains a magic number: while (counter < length)              {                  var value = (int)str[counter++];                    if (value >= 0xD800 && value <= 0xDBFF && counter < length)                  {                      // high surrogate' and there is a next character                      var extra = (int)str[counter++];                      if ((extra & 0xFC00) == 0xDC00)                      {                          // low surrogate                          output.Add(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                      }                      else                      {                          // unmatched surrogate; only append this code unit' in case the next                          // code unit is the high surrogate of a surrogate pair                          output.Add(value);                          counter--;                      }                  }                  else                  {                      output.Add(value);                  }              }
Magic Number,Quobject.EngineIoClientDotNet.Modules,UTF8,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Modules\UTF8.cs,Ucs2Encode,The following statement contains a magic number: while (++index < array.Count)              {                  var value = array[index];                  if (value > 0xFFFF)                  {                      value -= 0x10000;                      sb.Append((char)(((int)((uint)value >> 10)) & 0x3FF | 0xD800));                      value = 0xDC00 | value & 0x3FF;                  }                  sb.Append((char)value);              }
Magic Number,Quobject.EngineIoClientDotNet.Parser,Packet,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,DecodePayload,The following statement contains a magic number: while (bufferTail.Capacity - bufferTail_offset > 0)              {                  var strLen = new StringBuilder();                  var isString = (bufferTail.Get(0 + bufferTail_offset) & 0xFF) == 0;                  var numberTooLong = false;                  for (int i = 1;; i++)                  {                      int b = bufferTail.Get(i + bufferTail_offset) & 0xFF;                      if (b == 255)                      {                          break;                      }                      // support only integer                      if (strLen.Length > MAX_INT_CHAR_LENGTH)                      {                          numberTooLong = true;                          break;                      }                      strLen.Append(b);                  }                  if (numberTooLong)                  {                      callback.Call(_err' 0' 1);                      return;                  }                  bufferTail_offset += strLen.Length + 1;                    int msgLength = int.Parse(strLen.ToString());                    bufferTail.Position(1 + bufferTail_offset);                  bufferTail.Limit(msgLength + 1 + bufferTail_offset);                  var msg = new byte[bufferTail.Remaining()];                  bufferTail.Get(msg' 0' msg.Length);                                    if (isString)                  {                      buffers.Add(ByteArrayToString(msg));                  }                  else                  {                      buffers.Add(msg);                  }                  bufferTail.Clear();                  bufferTail.Position(msgLength + 1 + bufferTail_offset);                  bufferTail_offset += msgLength + 1;              }
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: if (data is string)                  {                      var packet = (string) data;                      var encodingLength = packet.Length.ToString();                      var sizeBuffer = new byte[encodingLength.Length + 2];                      sizeBuffer[0] = (byte) 0; // is a string                      for (var i = 0; i < encodingLength.Length; i++)                      {                          sizeBuffer[i + 1] = byte.Parse(encodingLength.Substring(i'1));                      }                      sizeBuffer[sizeBuffer.Length - 1] = (byte) 255;                      _results.Add(Buffer.Concat(new byte[][] { sizeBuffer' StringToByteArray(packet) }));                      return;                  }
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: if (data is string)                  {                      var packet = (string) data;                      var encodingLength = packet.Length.ToString();                      var sizeBuffer = new byte[encodingLength.Length + 2];                      sizeBuffer[0] = (byte) 0; // is a string                      for (var i = 0; i < encodingLength.Length; i++)                      {                          sizeBuffer[i + 1] = byte.Parse(encodingLength.Substring(i'1));                      }                      sizeBuffer[sizeBuffer.Length - 1] = (byte) 255;                      _results.Add(Buffer.Concat(new byte[][] { sizeBuffer' StringToByteArray(packet) }));                      return;                  }
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: var sizeBuffer1 = new byte[encodingLength1.Length + 2];
Magic Number,Quobject.EngineIoClientDotNet.Parser,EncodePayloadCallback,C:\repos\Quobject_EngineIoClientDotNet\Src\EngineIoClientDotNet.mono\Parser\Packet.cs,Call,The following statement contains a magic number: sizeBuffer1[sizeBuffer1.Length - 1] = (byte)255;
