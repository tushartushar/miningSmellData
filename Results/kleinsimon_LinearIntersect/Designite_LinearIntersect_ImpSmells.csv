Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,parseCalibMicron,Cyclomatic complexity of the method is 16
Complex Method,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,Cyclomatic complexity of the method is 14
Long Statement,LinearIntersect,CalibrationConfig,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\CalibrationConfig.cs,button2_Click,The length of the statement  "		dGVCalib.Rows [dGVCalib.SelectedCells [0].RowIndex].Cells [1].Value = (tmp / (float)KalibTool.Length) * MainForm.activeImage.CurOverlay.zoom; " is 141.
Long Statement,LinearIntersect,CalibrationConfig,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\CalibrationConfig.cs,textBoxSoll_KeyPress,The length of the statement  "	if (char.IsLetter (e.KeyChar) || char.IsSymbol (e.KeyChar) || char.IsWhiteSpace (e.KeyChar) || char.IsPunctuation (e.KeyChar)) " is 126.
Long Statement,LinearIntersect,mainForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\mainForm.cs,button1_Click,The length of the statement  "		DR = MessageBox.Show ("Kein Kalibrationsfaktor eingestellt. Fortfahren?"' "Ohne Kalibrierung exportieren?"' MessageBoxButtons.YesNoCancel); " is 139.
Long Statement,LinearIntersect,mainForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\mainForm.cs,button3_Click,The length of the statement  "	if (MessageBox.Show ("Punkte löschen?"' "Leeren..."' MessageBoxButtons.YesNoCancel) == System.Windows.Forms.DialogResult.Yes) { " is 127.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,setContrast,The length of the statement  "	g.DrawImage (BaseImage' new Rectangle (0' 0' tmpImage.Width' tmpImage.Height)' 0' 0' BaseImage.Width' BaseImage.Height' GraphicsUnit.Pixel' iA); " is 144.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,The length of the statement  "			go.DrawLine (new Pen (prnt.Data.GridColor' lineSize)' 0' (int)((float)g * _zoom)' tmpImage.Width' (int)((float)g * _zoom)); " is 123.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,The length of the statement  "		go.DrawLine (new Pen (prnt.Data.CursorColor' lineSize)' (int)((float)pp.X * _zoom)' (int)((float)pp.Y * _zoom) - crossSize' (int)((float)pp.X * _zoom)' (int)((float)pp.Y * _zoom) + crossSize); " is 192.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,The length of the statement  "			go.DrawLine (new Pen (prnt.Data.PointColor' lineSize)' (int)((float)p.X * _zoom)' (int)((float)p.Y * _zoom) - crossSize' (int)((float)p.X * _zoom)' (int)((float)p.Y * _zoom) + crossSize); " is 187.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,The length of the statement  "			go.DrawLine (new Pen (prnt.Data.GridColor' lineSize)' (int)((float)g * _zoom)' 0' (int)((float)g * _zoom)' tmpImage.Height); " is 124.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,The length of the statement  "		go.DrawLine (new Pen (prnt.Data.CursorColor' lineSize)' (int)((float)pp.X * _zoom) - crossSize' (int)((float)pp.Y * _zoom)' (int)((float)pp.X * _zoom) + crossSize' (int)((float)pp.Y * _zoom)); " is 192.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,The length of the statement  "			go.DrawLine (new Pen (prnt.Data.PointColor' lineSize)' (int)((float)p.X * _zoom) - crossSize' (int)((float)p.Y * _zoom)' (int)((float)p.X * _zoom) + crossSize' (int)((float)p.Y * _zoom)); " is 187.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,addPoint,The length of the statement  "		CurOverlay.AddPoint (new Point ((int)((float)(e.X - this.ClientRectangle.X) / _zoom)' (int)((float)(e.Y - this.ClientRectangle.Y) / _zoom))); " is 141.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,addPoint,The length of the statement  "		CurOverlay.removePointAt (new Point ((int)((float)(e.X - this.ClientRectangle.X) / _zoom)' (int)((float)(e.Y - this.ClientRectangle.Y) / _zoom))); " is 146.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,ImageForm_MouseMove,The length of the statement  "	CurOverlay.PreviewPoint (new Point ((int)((float)(e.X - this.ClientRectangle.X) / _zoom)' (int)((float)(e.Y - this.ClientRectangle.Y) / _zoom))); " is 145.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,CalcContrastColor,The length of the statement  "	if (Math.Abs (((crBg) & 0xFF) - 0x80) <= 0x40 && Math.Abs (((crBg >> 8) & 0xFF) - 0x80) <= 0x40 && Math.Abs (((crBg >> 16) & 0xFF) - 0x80) <= 0x40) " is 147.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,exportData,The length of the statement  "	File.WriteAllLines (Path.GetDirectoryName (imgPath) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension (imgPath) + ((CurOverlay.Orientation == GridOrientation.Horizontal) ? "_h" : "_v") + ".txt"' output); " is 218.
Long Statement,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,ImageForm_FormClosing,The length of the statement  "		if (MessageBox.Show ("Daten nicht exportiert' wirklich schließen?"' "Schließen..."' MessageBoxButtons.YesNoCancel) != System.Windows.Forms.DialogResult.Yes) { " is 158.
Long Statement,LinearIntersect,Settings,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\Settings.cs,setData,The length of the statement  "	colorButtonCursor.DataBindings.Add ("CurrentColor"' Data' "CursorColor"' false' DataSourceUpdateMode.OnPropertyChanged); " is 120.
Complex Conditional,LinearIntersect,CalibrationConfig,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\CalibrationConfig.cs,textBoxSoll_KeyPress,The conditional expression  "char.IsLetter (e.KeyChar) || char.IsSymbol (e.KeyChar) || char.IsWhiteSpace (e.KeyChar) || char.IsPunctuation (e.KeyChar)"  is complex.
Empty Catch Block,LinearIntersect,mainForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\mainForm.cs,comboBoxCalib_SelectedIndexChanged,The method has an empty catch block.
Magic Number,LinearIntersect,CalibrationConfig,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\CalibrationConfig.cs,dGVCalib_DefaultValuesNeeded,The following statement contains a magic number: e.Row.Cells [2].Value = Units.µm;  
Magic Number,LinearIntersect,CalibrationConfig,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\CalibrationConfig.cs,CreateCalibBar,The following statement contains a magic number: pos.X += 100;  
Magic Number,LinearIntersect,CalibrationConfig,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\CalibrationConfig.cs,CreateCalibBar,The following statement contains a magic number: pos.Y += 100;  
Magic Number,LinearIntersect,Overlay,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\Klassen.cs,removePointAt,The following statement contains a magic number: if (getPointAt (newPoint' out oldPoint' clickOffset * 2)) {  	Points.Remove (oldPoint);  	return;  }  
Magic Number,LinearIntersect,mainForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\mainForm.cs,onActiveImageChanged,The following statement contains a magic number: trackBar1.Maximum = 700;  
Magic Number,LinearIntersect,mainForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\mainForm.cs,getSupportedCodecs,The following statement contains a magic number: foreach (var c in codecs) {  	string codecName = c.CodecName.Substring (8).Replace ("Codec"' "Files").Trim ();  	tmp = String.Format ("{0}{1}{2} ({3})|{3}"' tmp' "|"' codecName' c.FilenameExtension);  	allext += c.FilenameExtension + ";";  }  
Magic Number,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,CalcContrastColor,The following statement contains a magic number: if (Math.Abs (((crBg) & 0xFF) - 0x80) <= 0x40 && Math.Abs (((crBg >> 8) & 0xFF) - 0x80) <= 0x40 && Math.Abs (((crBg >> 16) & 0xFF) - 0x80) <= 0x40)  	return (0x7F7F7F + crBg) & 0xFFFFFF;  else  	return crBg ^ 0xFFFFFF;  
Magic Number,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,CalcContrastColor,The following statement contains a magic number: if (Math.Abs (((crBg) & 0xFF) - 0x80) <= 0x40 && Math.Abs (((crBg >> 8) & 0xFF) - 0x80) <= 0x40 && Math.Abs (((crBg >> 16) & 0xFF) - 0x80) <= 0x40)  	return (0x7F7F7F + crBg) & 0xFFFFFF;  else  	return crBg ^ 0xFFFFFF;  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: if (Direction == Orientation.Horizontal) {  	g.FillRectangle (Brushes.White' 0' 0' this.Width' this.Height / 4);  	g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  }  else {  	g.FillRectangle (Brushes.White' 0' 0' this.Width / 4' this.Height);  	g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  }  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: if (Direction == Orientation.Horizontal) {  	g.FillRectangle (Brushes.White' 0' 0' this.Width' this.Height / 4);  	g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  }  else {  	g.FillRectangle (Brushes.White' 0' 0' this.Width / 4' this.Height);  	g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  }  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: if (Direction == Orientation.Horizontal) {  	g.FillRectangle (Brushes.White' 0' 0' this.Width' this.Height / 4);  	g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  }  else {  	g.FillRectangle (Brushes.White' 0' 0' this.Width / 4' this.Height);  	g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  }  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: if (Direction == Orientation.Horizontal) {  	g.FillRectangle (Brushes.White' 0' 0' this.Width' this.Height / 4);  	g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  }  else {  	g.FillRectangle (Brushes.White' 0' 0' this.Width / 4' this.Height);  	g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  }  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: if (Direction == Orientation.Horizontal) {  	g.FillRectangle (Brushes.White' 0' 0' this.Width' this.Height / 4);  	g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  }  else {  	g.FillRectangle (Brushes.White' 0' 0' this.Width / 4' this.Height);  	g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  }  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: if (Direction == Orientation.Horizontal) {  	g.FillRectangle (Brushes.White' 0' 0' this.Width' this.Height / 4);  	g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  }  else {  	g.FillRectangle (Brushes.White' 0' 0' this.Width / 4' this.Height);  	g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  }  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (Brushes.White' 0' 0' this.Width' this.Height / 4);  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (Brushes.White' 0' this.Height / 2' this.Width' this.Height / 4);  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (Brushes.White' 0' 0' this.Width / 4' this.Height);  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  
Magic Number,LinearIntersect,ResizableControl,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ResizeableControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (Brushes.White' this.Width / 2' 0' this.Width / 4' this.Height);  
Missing Default,LinearIntersect,ImageForm,C:\repos\kleinsimon_LinearIntersect\LinearIntersect\ImageForm.cs,redraw,The following switch statement is missing a default case: switch (CurOverlay.Orientation) {  case GridOrientation.Horizontal:  	foreach (int g in CurOverlay.GridPosition) {  		go.DrawLine (new Pen (prnt.Data.GridColor' lineSize)' 0' (int)((float)g * _zoom)' tmpImage.Width' (int)((float)g * _zoom));  	}  	go.DrawLine (new Pen (prnt.Data.CursorColor' lineSize)' (int)((float)pp.X * _zoom)' (int)((float)pp.Y * _zoom) - crossSize' (int)((float)pp.X * _zoom)' (int)((float)pp.Y * _zoom) + crossSize);  	foreach (Point p in CurOverlay.Points) {  		go.DrawLine (new Pen (prnt.Data.PointColor' lineSize)' (int)((float)p.X * _zoom)' (int)((float)p.Y * _zoom) - crossSize' (int)((float)p.X * _zoom)' (int)((float)p.Y * _zoom) + crossSize);  	}  	break;  case GridOrientation.Vertical:  	foreach (int g in CurOverlay.GridPosition) {  		go.DrawLine (new Pen (prnt.Data.GridColor' lineSize)' (int)((float)g * _zoom)' 0' (int)((float)g * _zoom)' tmpImage.Height);  	}  	go.DrawLine (new Pen (prnt.Data.CursorColor' lineSize)' (int)((float)pp.X * _zoom) - crossSize' (int)((float)pp.Y * _zoom)' (int)((float)pp.X * _zoom) + crossSize' (int)((float)pp.Y * _zoom));  	foreach (Point p in CurOverlay.Points) {  		go.DrawLine (new Pen (prnt.Data.PointColor' lineSize)' (int)((float)p.X * _zoom) - crossSize' (int)((float)p.Y * _zoom)' (int)((float)p.X * _zoom) + crossSize' (int)((float)p.Y * _zoom));  	}  	break;  }  
