Implementation smell,Namespace,Class,File,Method,Description
Long Method,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The method has 140 lines of code.
Complex Method,AS.IBAN.DAL.DE,XmlDataServiceDE,C:\repos\aventum-solutions_iban-api-net\DAL\DE\XmlDataServiceDE.cs,GetRuleElementType,Cyclomatic complexity of the method is 10
Complex Method,AS.IBAN.Helper,IbanException,C:\repos\aventum-solutions_iban-api-net\Helper\IbanException.cs,ExceptionTypeToMessage,Cyclomatic complexity of the method is 12
Complex Method,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,Cyclomatic complexity of the method is 17
Long Parameter List,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The method has 48 parameters.
Long Statement,AS.IBAN.DAL,XmlData,C:\repos\aventum-solutions_iban-api-net\DAL\XmlData.cs,LoadCountry,The length of the statement  "	IEnumerable<XElement> format = LoadData (_fileNameIbanFormat' "country"' new KeyValuePair<string' string> ("countryCode"' country_code.ToString ())); " is 149.
Long Statement,AS.IBAN.Helper,ContainerBootstrapper,C:\repos\aventum-solutions_iban-api-net\Helper\ContainerBootstrapper.cs,Initialize,The length of the statement  "	container.RegisterType<IIbanManager' Manager.Default.ManagerDefault> (new InjectionConstructor (container.Resolve<IDataService> ())); " is 133.
Long Statement,AS.IBAN.Helper,ContainerBootstrapper,C:\repos\aventum-solutions_iban-api-net\Helper\ContainerBootstrapper.cs,Initialize,The length of the statement  "	container.RegisterType<IDataService' DAL.DE.XmlDataServiceDE> (ECountry.DE.ToString ()' new InjectionConstructor ("banks_german.xml"' "iban_format.xml"' "iban_rules_german.xml")); " is 179.
Long Statement,AS.IBAN.Helper,ContainerBootstrapper,C:\repos\aventum-solutions_iban-api-net\Helper\ContainerBootstrapper.cs,Initialize,The length of the statement  "	container.RegisterType<IIbanManager' Manager.DE.ManagerDE> (ECountry.DE.ToString ()' new InjectionConstructor (container.Resolve<IDataService> (ECountry.DE.ToString ()))); " is 171.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where bi.RuleType == RuleType.Kto_Number_Range && _regexpHelper.RegexpMatch (bi.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && _regexpHelper.RegexpMatch (bi.Data' temp_account_number) " is 233.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where count.RuleType == RuleType.Mappings_Kto && _regexpHelper.RegexpMatch (count.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && (from mapp in count.Childs " is 205.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ()' temp_account_number) " is 173.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where kto.RuleType == RuleType.Mappings_Kto && _regexpHelper.RegexpMatch (kto.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && (from mapp in kto.Childs " is 199.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ()' temp_account_number) " is 173.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ()' temp_account_number) " is 173.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where count.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (count.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in count.Childs " is 211.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3)) " is 170.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where ktokr.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (ktokr.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in ktokr.Childs " is 211.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3)) " is 170.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3)) " is 170.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ()' temp_bank_ident) " is 169.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ()' temp_bank_ident) " is 169.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ()' temp_bank_ident) " is 169.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where mapp.RuleType == RuleType.Modification && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && _regexpHelper.RegexpMatch (mapp.Data' temp_account_number) " is 235.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Modification && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && _regexpHelper.RegexpMatch (mapp.Data' temp_account_number) " is 235.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Modification && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && _regexpHelper.RegexpMatch (mapp.Data' temp_account_number) " is 235.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "	where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' bank.BankIdentification) " is 176.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' bank.BankIdentification) " is 176.
Long Statement,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The length of the statement  "		where bic.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (bic.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' bank.BankIdentification) " is 174.
Long Statement,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,GetIban,The length of the statement  "	if (string.IsNullOrWhiteSpace (iban.AccountNumber) || string.IsNullOrWhiteSpace (iban.Bank.BankIdentification) || string.IsNullOrWhiteSpace (iban.BBAN) || string.IsNullOrWhiteSpace (iban.CheckDigit) || iban.Country == null || string.IsNullOrWhiteSpace (iban.Country.CountryCode)) { " is 281.
Long Statement,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The length of the statement  "		converted.AccountNumber = iban.Substring (4 + Int32.Parse (converted.Country.BankIdentLength)' Int32.Parse (converted.Country.AccountNumberLength)); " is 148.
Long Statement,AS.IBAN.Model,Country,C:\repos\aventum-solutions_iban-api-net\Model\Country.cs,Equals,The length of the statement  "	if (this.AccountNumberLength.Equals (country.AccountNumberLength) && this.BankIdentLength.Equals (country.BankIdentLength) && this.CountryCode.Equals (country.CountryCode) && this.CountryType.Equals (country.CountryType) && this.Name.Equals (country.Name) && this.RegExp.Equals (country.RegExp)) " is 295.
Long Statement,AS.IBAN.Model,Iban,C:\repos\aventum-solutions_iban-api-net\Model\Iban.cs,Equals,The length of the statement  "	if (this.IBAN.Equals (iban.IBAN) && this.BBAN.Equals (iban.BBAN) && this.Country.Equals (iban.Country) && this.CheckDigit.Equals (iban.CheckDigit) && this.Bank.BankIdentification.Equals (iban.Bank.BankIdentification) && this.AccountNumber.Equals (iban.AccountNumber)) " is 267.
Complex Conditional,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The conditional expression  "(from count in rule.RuleElements  where count.RuleType == RuleType.No_Calculation && (from bi in count.Childs  where bi.RuleType == RuleType.Kto_Number_Range && _regexpHelper.RegexpMatch (bi.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && _regexpHelper.RegexpMatch (bi.Data' temp_account_number)  select bi).Count () == 1  select count).Count () > 0"  is complex.
Complex Conditional,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The conditional expression  "(from count in rule.RuleElements  where count.RuleType == RuleType.Mappings_Kto && _regexpHelper.RegexpMatch (count.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && (from mapp in count.Childs  where mapp.RuleType == RuleType.Mapping && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ()' temp_account_number)  select mapp).Count () == 1  select count).Count () == 1"  is complex.
Complex Conditional,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The conditional expression  "(from count in rule.RuleElements  where count.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (count.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in count.Childs  where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  select mapp).Count () == 1  select count).Count () == 1"  is complex.
Complex Conditional,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The conditional expression  "(from count in rule.RuleElements  where count.RuleType == RuleType.Modification_Kto && (from mapp in count.Childs  where mapp.RuleType == RuleType.Modification && _regexpHelper.RegexpMatch (mapp.Attributes.Where (t => t.Key.Equals ("blz")).Select (t => t.Value).First ()' temp_bank_ident) && _regexpHelper.RegexpMatch (mapp.Data' temp_account_number)  select mapp).Count () == 1  select count).Count () == 1"  is complex.
Complex Conditional,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,GetIban,The conditional expression  "string.IsNullOrWhiteSpace (iban.AccountNumber) || string.IsNullOrWhiteSpace (iban.Bank.BankIdentification) || string.IsNullOrWhiteSpace (iban.BBAN) || string.IsNullOrWhiteSpace (iban.CheckDigit) || iban.Country == null || string.IsNullOrWhiteSpace (iban.Country.CountryCode)"  is complex.
Complex Conditional,AS.IBAN.Model,Country,C:\repos\aventum-solutions_iban-api-net\Model\Country.cs,Equals,The conditional expression  "this.AccountNumberLength.Equals (country.AccountNumberLength) && this.BankIdentLength.Equals (country.BankIdentLength) && this.CountryCode.Equals (country.CountryCode) && this.CountryType.Equals (country.CountryType) && this.Name.Equals (country.Name) && this.RegExp.Equals (country.RegExp)"  is complex.
Complex Conditional,AS.IBAN.Model,Iban,C:\repos\aventum-solutions_iban-api-net\Model\Iban.cs,Equals,The conditional expression  "this.IBAN.Equals (iban.IBAN) && this.BBAN.Equals (iban.BBAN) && this.Country.Equals (iban.Country) && this.CheckDigit.Equals (iban.CheckDigit) && this.Bank.BankIdentification.Equals (iban.Bank.BankIdentification) && this.AccountNumber.Equals (iban.AccountNumber)"  is complex.
Magic Number,AS.IBAN,IbanGetBic,C:\repos\aventum-solutions_iban-api-net\IbanGetBic.cs,GetBic,The following statement contains a magic number: _manager = ContainerBootstrapper.Resolve<IIbanManager> (iban.Substring (0' 2));  
Magic Number,AS.IBAN,IbanGetBic,C:\repos\aventum-solutions_iban-api-net\IbanGetBic.cs,GetBicAsync,The following statement contains a magic number: _manager = ContainerBootstrapper.Resolve<IIbanManager> (iban.Substring (0' 2));  
Magic Number,AS.IBAN,IbanValidator,C:\repos\aventum-solutions_iban-api-net\IbanValidator.cs,ValidateIban,The following statement contains a magic number: _manager = ContainerBootstrapper.Resolve<IIbanManager> (iban.Substring (0' 2));  
Magic Number,AS.IBAN,IbanValidator,C:\repos\aventum-solutions_iban-api-net\IbanValidator.cs,ValidateIbanAsync,The following statement contains a magic number: _manager = ContainerBootstrapper.Resolve<IIbanManager> (iban.Substring (0' 2));  
Magic Number,AS.IBAN.Manager.Default,ManagerDefault,C:\repos\aventum-solutions_iban-api-net\Manager\Default\ManagerDefault.cs,GenerateIban,The following statement contains a magic number: result.IBAN.CheckDigit = (98 - this.Modulo97 (result.IBAN)).ToString ("00");  
Magic Number,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,GenerateIban,The following statement contains a magic number: result.IBAN.CheckDigit = (98 - this.Modulo97 (result.IBAN)).ToString ("00");  
Magic Number,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The following statement contains a magic number: if ((from count in rule.RuleElements  where count.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (count.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in count.Childs  where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  select mapp).Count () == 1  select count).Count () == 1) {  	var ktokr_mapping = (from ktokr in rule.RuleElements  	where ktokr.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (ktokr.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in ktokr.Childs  	where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  	select mapp).Count () == 1  	select ktokr).First ();  	temp_bank_ident = (from mapp in ktokr_mapping.Childs  	where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  	select mapp.Data).First ();  	//  if bank ident has changed' get new BIC  	using (Bank bank_temp = _dataService.LoadBank (temp_bank_ident)) {  		temp_bic = bank_temp.BIC.Bic;  	}  }  
Magic Number,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The following statement contains a magic number: if ((from count in rule.RuleElements  where count.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (count.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in count.Childs  where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  select mapp).Count () == 1  select count).Count () == 1) {  	var ktokr_mapping = (from ktokr in rule.RuleElements  	where ktokr.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (ktokr.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in ktokr.Childs  	where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  	select mapp).Count () == 1  	select ktokr).First ();  	temp_bank_ident = (from mapp in ktokr_mapping.Childs  	where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  	select mapp.Data).First ();  	//  if bank ident has changed' get new BIC  	using (Bank bank_temp = _dataService.LoadBank (temp_bank_ident)) {  		temp_bic = bank_temp.BIC.Bic;  	}  }  
Magic Number,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The following statement contains a magic number: if ((from count in rule.RuleElements  where count.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (count.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in count.Childs  where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  select mapp).Count () == 1  select count).Count () == 1) {  	var ktokr_mapping = (from ktokr in rule.RuleElements  	where ktokr.RuleType == RuleType.Mappings_KtoKr && _regexpHelper.RegexpMatch (ktokr.Attributes.Where (t => t.Key.Equals ("kto")).Select (t => t.Value).First ()' temp_account_number) && (from mapp in ktokr.Childs  	where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  	select mapp).Count () == 1  	select ktokr).First ();  	temp_bank_ident = (from mapp in ktokr_mapping.Childs  	where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  	select mapp.Data).First ();  	//  if bank ident has changed' get new BIC  	using (Bank bank_temp = _dataService.LoadBank (temp_bank_ident)) {  		temp_bic = bank_temp.BIC.Bic;  	}  }  
Magic Number,AS.IBAN.Manager.DE,ManagerDE,C:\repos\aventum-solutions_iban-api-net\Manager\DE\ManagerDE.cs,ConsiderRule,The following statement contains a magic number: temp_bank_ident = (from mapp in ktokr_mapping.Childs  where mapp.RuleType == RuleType.Mapping && mapp.Attributes.Where (t => t.Key.Equals ("from")).Select (t => t.Value).First ().Equals (temp_account_number.Substring (0' 3))  select mapp.Data).First ();  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: try {  	if (string.IsNullOrWhiteSpace (iban.CheckDigit))  		iban.CheckDigit = "00";  	string input = this.BbanToNumber (iban.BBAN) + CountryCodeToNumber (iban.Country.CountryCode) + iban.CheckDigit;  	string output = string.Empty;  	for (int i = 0; i < input.Length; i++) {  		if (output.Length < 9)  			output += input [i];  		else {  			output = (Int32.Parse (output) % 97).ToString () + input [i];  		}  	}  	return Int32.Parse (output) % 97;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanGeneratingCheckDigit);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: try {  	if (string.IsNullOrWhiteSpace (iban.CheckDigit))  		iban.CheckDigit = "00";  	string input = this.BbanToNumber (iban.BBAN) + CountryCodeToNumber (iban.Country.CountryCode) + iban.CheckDigit;  	string output = string.Empty;  	for (int i = 0; i < input.Length; i++) {  		if (output.Length < 9)  			output += input [i];  		else {  			output = (Int32.Parse (output) % 97).ToString () + input [i];  		}  	}  	return Int32.Parse (output) % 97;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanGeneratingCheckDigit);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: try {  	if (string.IsNullOrWhiteSpace (iban.CheckDigit))  		iban.CheckDigit = "00";  	string input = this.BbanToNumber (iban.BBAN) + CountryCodeToNumber (iban.Country.CountryCode) + iban.CheckDigit;  	string output = string.Empty;  	for (int i = 0; i < input.Length; i++) {  		if (output.Length < 9)  			output += input [i];  		else {  			output = (Int32.Parse (output) % 97).ToString () + input [i];  		}  	}  	return Int32.Parse (output) % 97;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanGeneratingCheckDigit);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	if (output.Length < 9)  		output += input [i];  	else {  		output = (Int32.Parse (output) % 97).ToString () + input [i];  	}  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	if (output.Length < 9)  		output += input [i];  	else {  		output = (Int32.Parse (output) % 97).ToString () + input [i];  	}  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: if (output.Length < 9)  	output += input [i];  else {  	output = (Int32.Parse (output) % 97).ToString () + input [i];  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: if (output.Length < 9)  	output += input [i];  else {  	output = (Int32.Parse (output) % 97).ToString () + input [i];  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: output = (Int32.Parse (output) % 97).ToString () + input [i];  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,Modulo97,The following statement contains a magic number: return Int32.Parse (output) % 97;  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,BbanToNumber,The following statement contains a magic number: for (int i = 0; i < bban.Length; i++) {  	if (Int64.TryParse (bban [i].ToString ()' out lbban))  		result += bban [i];  	else  		result += (int)bban [i] - 55;  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,BbanToNumber,The following statement contains a magic number: if (Int64.TryParse (bban [i].ToString ()' out lbban))  	result += bban [i];  else  	result += (int)bban [i] - 55;  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,BbanToNumber,The following statement contains a magic number: result += (int)bban [i] - 55;  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,CountryCodeToNumber,The following statement contains a magic number: for (int i = 0; i < country_code.Length; i++) {  	result += (int)country_code [i] - 55;  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,CountryCodeToNumber,The following statement contains a magic number: result += (int)country_code [i] - 55;  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The following statement contains a magic number: try {  	Iban converted = new Iban {  		Country = _dataService.LoadCountry ((ECountry)Enum.Parse (typeof(ECountry)' iban.Substring (0' 2)' true))'  		CheckDigit = iban.Substring (2' 2)'  		IBAN = iban  	};  	converted.Bank = new Bank ();  	// get bank ident  	converted.Bank.BankIdentification = iban.Substring (4' Int32.Parse (converted.Country.BankIdentLength));  	//  get account number  	converted.AccountNumber = iban.Substring (4 + Int32.Parse (converted.Country.BankIdentLength)' Int32.Parse (converted.Country.AccountNumberLength));  	//  check' if iban is well formatted  	if (!this.CheckIbanFormatting (converted))  		throw new IbanException (IbanExceptionType.IbanValidatingFormatting);  	converted.BBAN = this.GetBBAN (converted);  	return converted;  }  catch (IbanException ex) {  	throw ex;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanValidatingFormatting);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The following statement contains a magic number: try {  	Iban converted = new Iban {  		Country = _dataService.LoadCountry ((ECountry)Enum.Parse (typeof(ECountry)' iban.Substring (0' 2)' true))'  		CheckDigit = iban.Substring (2' 2)'  		IBAN = iban  	};  	converted.Bank = new Bank ();  	// get bank ident  	converted.Bank.BankIdentification = iban.Substring (4' Int32.Parse (converted.Country.BankIdentLength));  	//  get account number  	converted.AccountNumber = iban.Substring (4 + Int32.Parse (converted.Country.BankIdentLength)' Int32.Parse (converted.Country.AccountNumberLength));  	//  check' if iban is well formatted  	if (!this.CheckIbanFormatting (converted))  		throw new IbanException (IbanExceptionType.IbanValidatingFormatting);  	converted.BBAN = this.GetBBAN (converted);  	return converted;  }  catch (IbanException ex) {  	throw ex;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanValidatingFormatting);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The following statement contains a magic number: try {  	Iban converted = new Iban {  		Country = _dataService.LoadCountry ((ECountry)Enum.Parse (typeof(ECountry)' iban.Substring (0' 2)' true))'  		CheckDigit = iban.Substring (2' 2)'  		IBAN = iban  	};  	converted.Bank = new Bank ();  	// get bank ident  	converted.Bank.BankIdentification = iban.Substring (4' Int32.Parse (converted.Country.BankIdentLength));  	//  get account number  	converted.AccountNumber = iban.Substring (4 + Int32.Parse (converted.Country.BankIdentLength)' Int32.Parse (converted.Country.AccountNumberLength));  	//  check' if iban is well formatted  	if (!this.CheckIbanFormatting (converted))  		throw new IbanException (IbanExceptionType.IbanValidatingFormatting);  	converted.BBAN = this.GetBBAN (converted);  	return converted;  }  catch (IbanException ex) {  	throw ex;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanValidatingFormatting);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The following statement contains a magic number: try {  	Iban converted = new Iban {  		Country = _dataService.LoadCountry ((ECountry)Enum.Parse (typeof(ECountry)' iban.Substring (0' 2)' true))'  		CheckDigit = iban.Substring (2' 2)'  		IBAN = iban  	};  	converted.Bank = new Bank ();  	// get bank ident  	converted.Bank.BankIdentification = iban.Substring (4' Int32.Parse (converted.Country.BankIdentLength));  	//  get account number  	converted.AccountNumber = iban.Substring (4 + Int32.Parse (converted.Country.BankIdentLength)' Int32.Parse (converted.Country.AccountNumberLength));  	//  check' if iban is well formatted  	if (!this.CheckIbanFormatting (converted))  		throw new IbanException (IbanExceptionType.IbanValidatingFormatting);  	converted.BBAN = this.GetBBAN (converted);  	return converted;  }  catch (IbanException ex) {  	throw ex;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanValidatingFormatting);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The following statement contains a magic number: try {  	Iban converted = new Iban {  		Country = _dataService.LoadCountry ((ECountry)Enum.Parse (typeof(ECountry)' iban.Substring (0' 2)' true))'  		CheckDigit = iban.Substring (2' 2)'  		IBAN = iban  	};  	converted.Bank = new Bank ();  	// get bank ident  	converted.Bank.BankIdentification = iban.Substring (4' Int32.Parse (converted.Country.BankIdentLength));  	//  get account number  	converted.AccountNumber = iban.Substring (4 + Int32.Parse (converted.Country.BankIdentLength)' Int32.Parse (converted.Country.AccountNumberLength));  	//  check' if iban is well formatted  	if (!this.CheckIbanFormatting (converted))  		throw new IbanException (IbanExceptionType.IbanValidatingFormatting);  	converted.BBAN = this.GetBBAN (converted);  	return converted;  }  catch (IbanException ex) {  	throw ex;  }  catch (Exception ex) {  	throw new IbanException (ex' IbanExceptionType.IbanValidatingFormatting);  }  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The following statement contains a magic number: converted.Bank.BankIdentification = iban.Substring (4' Int32.Parse (converted.Country.BankIdentLength));  
Magic Number,AS.IBAN.Manager,IbanManager,C:\repos\aventum-solutions_iban-api-net\Manager\IbanManager.cs,ConvertStringToIban,The following statement contains a magic number: converted.AccountNumber = iban.Substring (4 + Int32.Parse (converted.Country.BankIdentLength)' Int32.Parse (converted.Country.AccountNumberLength));  
