Implementation smell,Namespace,Class,File,Method,Description
Long Method,Zetetic.Ldap,LdifReader,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifReader.cs,Read,The method has 118 lines of code.
Long Method,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The method has 105 lines of code.
Complex Method,Zetetic.Ldap,LdifReader,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifReader.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Zetetic.Ldap,PagingHelper,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\PagingHelper.cs,GetResults,Cyclomatic complexity of the method is 12
Complex Method,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,Cyclomatic complexity of the method is 10
Long Parameter List,Zetetic.Ldap,RangeHelper,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\RangeHelper.cs,StringValues,The method has 6 parameters. Parameters: conn' entryDn' attrName' start' end' extendedDns
Long Parameter List,Zetetic.Ldap,RangeHelper,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\RangeHelper.cs,GetRangeBlock,The method has 6 parameters. Parameters: conn' entryDn' attrName' start' end' extendedDns
Long Parameter List,Zetetic.Ldap.Vlv,VlvManager,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Vlv\VlvManager.cs,GetData,The method has 8 parameters. Parameters: conn' distinguishedName' filter' sortBy' scope' skip' take' attrs
Complex Conditional,Zetetic.Ldap,PagingHelper,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\PagingHelper.cs,GetResults,The conditional expression  "!_abort && prc != null && (currentPage++ < this.MaxPages || this.MaxPages < 1)"  is complex.
Complex Conditional,Zetetic.Ldap,LdifWriter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifWriter.cs,IsSafeInitChar,The conditional expression  "c == '\0' || c == '\n' || c == '\r' || c == ' ' || c == ':' || c == '<'"  is complex.
Magic Number,Zetetic.Ldap,LdifReader,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifReader.cs,Read,The following statement contains a magic number: if (line.StartsWith("dn:"' StringComparison.InvariantCultureIgnoreCase))              {                  _openEntry = true;                    string dn;                    if (line.TrimEnd(' ').ToLowerInvariant() == "dn:")                  {                      dn = null;                  }                  else                  {                      bool b64 = (line[3] == ':');                      dn = line.Substring(b64 ? 4 : 3).TrimStart();                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              dn += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              dn += _source.ReadLine().Substring(1);                      }                        if (b64) dn = Encoding.UTF8.GetString(Convert.FromBase64String(dn));                  }                    this.LastDn = dn;                    if (OnBeginEntry != null)                      OnBeginEntry(this' new DnEventArgs(dn));                }              else              {                  int fc = line.IndexOf(':');                    // Note that the parser will currently NOT read changetype-oriented                  // LDIF ('-' on a line by itself between attr instructions).                  if (fc == -1)                      throw new ApplicationException("Malformed LDIF on line " + _lineNum);                    string attrName = line.Substring(0' fc);                    string attrVal;                  bool b64 = false' url = false;                    if (fc + 1 == line.Length)                  {                      attrVal = null;                  }                  else                  {                      b64 = (line[fc + 1] == ':');                      url = (line[fc + (b64 ? 2 : 1)] == '<');                        attrVal = line.Substring(b64 ? fc + 2 : fc + 1).TrimStart();                        if (url)                          attrVal = attrVal.Substring(1);                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              attrVal += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              attrVal += _source.ReadLine().Substring(1);                      }                  }                    if (OnAttributeValue != null)                  {                      if (attrVal == null)                      {                          OnAttributeValue(this' new AttributeEventArgs(attrName' null));                      }                      else if (b64)                      {                          byte[] bytes = Convert.FromBase64String(attrVal);                          if (url)                          {                              System.Uri uri = new Uri(System.Text.Encoding.UTF8.GetString(bytes));                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' bytes));                          }                      }                      else                      {                          if (url)                          {                              System.Uri uri = new Uri(attrVal);                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' attrVal));                          }                      }                  }              }
Magic Number,Zetetic.Ldap,LdifReader,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifReader.cs,Read,The following statement contains a magic number: if (line.StartsWith("dn:"' StringComparison.InvariantCultureIgnoreCase))              {                  _openEntry = true;                    string dn;                    if (line.TrimEnd(' ').ToLowerInvariant() == "dn:")                  {                      dn = null;                  }                  else                  {                      bool b64 = (line[3] == ':');                      dn = line.Substring(b64 ? 4 : 3).TrimStart();                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              dn += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              dn += _source.ReadLine().Substring(1);                      }                        if (b64) dn = Encoding.UTF8.GetString(Convert.FromBase64String(dn));                  }                    this.LastDn = dn;                    if (OnBeginEntry != null)                      OnBeginEntry(this' new DnEventArgs(dn));                }              else              {                  int fc = line.IndexOf(':');                    // Note that the parser will currently NOT read changetype-oriented                  // LDIF ('-' on a line by itself between attr instructions).                  if (fc == -1)                      throw new ApplicationException("Malformed LDIF on line " + _lineNum);                    string attrName = line.Substring(0' fc);                    string attrVal;                  bool b64 = false' url = false;                    if (fc + 1 == line.Length)                  {                      attrVal = null;                  }                  else                  {                      b64 = (line[fc + 1] == ':');                      url = (line[fc + (b64 ? 2 : 1)] == '<');                        attrVal = line.Substring(b64 ? fc + 2 : fc + 1).TrimStart();                        if (url)                          attrVal = attrVal.Substring(1);                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              attrVal += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              attrVal += _source.ReadLine().Substring(1);                      }                  }                    if (OnAttributeValue != null)                  {                      if (attrVal == null)                      {                          OnAttributeValue(this' new AttributeEventArgs(attrName' null));                      }                      else if (b64)                      {                          byte[] bytes = Convert.FromBase64String(attrVal);                          if (url)                          {                              System.Uri uri = new Uri(System.Text.Encoding.UTF8.GetString(bytes));                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' bytes));                          }                      }                      else                      {                          if (url)                          {                              System.Uri uri = new Uri(attrVal);                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' attrVal));                          }                      }                  }              }
Magic Number,Zetetic.Ldap,LdifReader,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifReader.cs,Read,The following statement contains a magic number: if (line.StartsWith("dn:"' StringComparison.InvariantCultureIgnoreCase))              {                  _openEntry = true;                    string dn;                    if (line.TrimEnd(' ').ToLowerInvariant() == "dn:")                  {                      dn = null;                  }                  else                  {                      bool b64 = (line[3] == ':');                      dn = line.Substring(b64 ? 4 : 3).TrimStart();                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              dn += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              dn += _source.ReadLine().Substring(1);                      }                        if (b64) dn = Encoding.UTF8.GetString(Convert.FromBase64String(dn));                  }                    this.LastDn = dn;                    if (OnBeginEntry != null)                      OnBeginEntry(this' new DnEventArgs(dn));                }              else              {                  int fc = line.IndexOf(':');                    // Note that the parser will currently NOT read changetype-oriented                  // LDIF ('-' on a line by itself between attr instructions).                  if (fc == -1)                      throw new ApplicationException("Malformed LDIF on line " + _lineNum);                    string attrName = line.Substring(0' fc);                    string attrVal;                  bool b64 = false' url = false;                    if (fc + 1 == line.Length)                  {                      attrVal = null;                  }                  else                  {                      b64 = (line[fc + 1] == ':');                      url = (line[fc + (b64 ? 2 : 1)] == '<');                        attrVal = line.Substring(b64 ? fc + 2 : fc + 1).TrimStart();                        if (url)                          attrVal = attrVal.Substring(1);                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              attrVal += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              attrVal += _source.ReadLine().Substring(1);                      }                  }                    if (OnAttributeValue != null)                  {                      if (attrVal == null)                      {                          OnAttributeValue(this' new AttributeEventArgs(attrName' null));                      }                      else if (b64)                      {                          byte[] bytes = Convert.FromBase64String(attrVal);                          if (url)                          {                              System.Uri uri = new Uri(System.Text.Encoding.UTF8.GetString(bytes));                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' bytes));                          }                      }                      else                      {                          if (url)                          {                              System.Uri uri = new Uri(attrVal);                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' attrVal));                          }                      }                  }              }
Magic Number,Zetetic.Ldap,LdifReader,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifReader.cs,Read,The following statement contains a magic number: if (line.StartsWith("dn:"' StringComparison.InvariantCultureIgnoreCase))              {                  _openEntry = true;                    string dn;                    if (line.TrimEnd(' ').ToLowerInvariant() == "dn:")                  {                      dn = null;                  }                  else                  {                      bool b64 = (line[3] == ':');                      dn = line.Substring(b64 ? 4 : 3).TrimStart();                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              dn += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              dn += _source.ReadLine().Substring(1);                      }                        if (b64) dn = Encoding.UTF8.GetString(Convert.FromBase64String(dn));                  }                    this.LastDn = dn;                    if (OnBeginEntry != null)                      OnBeginEntry(this' new DnEventArgs(dn));                }              else              {                  int fc = line.IndexOf(':');                    // Note that the parser will currently NOT read changetype-oriented                  // LDIF ('-' on a line by itself between attr instructions).                  if (fc == -1)                      throw new ApplicationException("Malformed LDIF on line " + _lineNum);                    string attrName = line.Substring(0' fc);                    string attrVal;                  bool b64 = false' url = false;                    if (fc + 1 == line.Length)                  {                      attrVal = null;                  }                  else                  {                      b64 = (line[fc + 1] == ':');                      url = (line[fc + (b64 ? 2 : 1)] == '<');                        attrVal = line.Substring(b64 ? fc + 2 : fc + 1).TrimStart();                        if (url)                          attrVal = attrVal.Substring(1);                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              attrVal += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              attrVal += _source.ReadLine().Substring(1);                      }                  }                    if (OnAttributeValue != null)                  {                      if (attrVal == null)                      {                          OnAttributeValue(this' new AttributeEventArgs(attrName' null));                      }                      else if (b64)                      {                          byte[] bytes = Convert.FromBase64String(attrVal);                          if (url)                          {                              System.Uri uri = new Uri(System.Text.Encoding.UTF8.GetString(bytes));                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' bytes));                          }                      }                      else                      {                          if (url)                          {                              System.Uri uri = new Uri(attrVal);                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' attrVal));                          }                      }                  }              }
Magic Number,Zetetic.Ldap,LdifReader,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifReader.cs,Read,The following statement contains a magic number: if (line.StartsWith("dn:"' StringComparison.InvariantCultureIgnoreCase))              {                  _openEntry = true;                    string dn;                    if (line.TrimEnd(' ').ToLowerInvariant() == "dn:")                  {                      dn = null;                  }                  else                  {                      bool b64 = (line[3] == ':');                      dn = line.Substring(b64 ? 4 : 3).TrimStart();                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              dn += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              dn += _source.ReadLine().Substring(1);                      }                        if (b64) dn = Encoding.UTF8.GetString(Convert.FromBase64String(dn));                  }                    this.LastDn = dn;                    if (OnBeginEntry != null)                      OnBeginEntry(this' new DnEventArgs(dn));                }              else              {                  int fc = line.IndexOf(':');                    // Note that the parser will currently NOT read changetype-oriented                  // LDIF ('-' on a line by itself between attr instructions).                  if (fc == -1)                      throw new ApplicationException("Malformed LDIF on line " + _lineNum);                    string attrName = line.Substring(0' fc);                    string attrVal;                  bool b64 = false' url = false;                    if (fc + 1 == line.Length)                  {                      attrVal = null;                  }                  else                  {                      b64 = (line[fc + 1] == ':');                      url = (line[fc + (b64 ? 2 : 1)] == '<');                        attrVal = line.Substring(b64 ? fc + 2 : fc + 1).TrimStart();                        if (url)                          attrVal = attrVal.Substring(1);                        while (_source.Peek() == (int)' ')                      {                          _lineNum++;                            if (this.TrimFoldedLines)                              attrVal += _source.ReadLine().Substring(1).TrimStart(' ');                          else                              attrVal += _source.ReadLine().Substring(1);                      }                  }                    if (OnAttributeValue != null)                  {                      if (attrVal == null)                      {                          OnAttributeValue(this' new AttributeEventArgs(attrName' null));                      }                      else if (b64)                      {                          byte[] bytes = Convert.FromBase64String(attrVal);                          if (url)                          {                              System.Uri uri = new Uri(System.Text.Encoding.UTF8.GetString(bytes));                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' bytes));                          }                      }                      else                      {                          if (url)                          {                              System.Uri uri = new Uri(attrVal);                              OnAttributeValue(this' new AttributeEventArgs(attrName' uri));                          }                          else                          {                              OnAttributeValue(this' new AttributeEventArgs(attrName' attrVal));                          }                      }                  }              }
Magic Number,Zetetic.Ldap,PagingHelper,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\PagingHelper.cs,PagingHelper,The following statement contains a magic number: this.PageSize = 1000;
Magic Number,Zetetic.Ldap,PagingHelper,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\PagingHelper.cs,PagingHelper,The following statement contains a magic number: this.MaxSearchTimePerPage = TimeSpan.FromSeconds(12);
Magic Number,Zetetic.Ldap,PagingHelper,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\PagingHelper.cs,GetResults,The following statement contains a magic number: while (!_abort && prc != null && (currentPage++ < this.MaxPages || this.MaxPages < 1))              {                  if (this.PageSize > 0 && (this.PageSize < this.SizeLimit || this.SizeLimit == 0))                  {                      if (currentPage > 1)                          req.Controls.Clear();                        req.Controls.Add(prc);                  }                  else                  {                      logger.Trace("Unpaged search (pgsz {0}' sizelimit {1})"' this.PageSize' this.SizeLimit);                  }                    foreach (var dc in this.UserControls)                      req.Controls.Add(dc);                    string key = this.DistinguishedName + ";" + this.SearchScope.ToString()                      + ";f=" + this.Filter + ";cp=" + currentPage + ";psz=" + this.PageSize                      + ";szl=" + this.SizeLimit + ";att" + alist;                    SearchResponse resp;                    try                  {                      resp = this.GetSearchResponse(key' req);                        if (resp != null)                          logger.Debug("{0} total results"' resp.Entries.Count);                  }                  catch (LdapException lde)                  {                      if (_abort && lde.ErrorCode == 88)                      {                          logger.Info("Canceled by user");                          yield break;                      }                      else                      {                          logger.Error("Ldap server msg {0}' code {1}' ex msg {2}"'                              lde.ServerErrorMessage' lde.ErrorCode' lde.Message);                          throw;                      }                  }                  // Note that Directory(Operation)Exception is NOT a subclass of LdapException                  // nor vice versa... verified                    if (_abort || resp == null)                      yield break;                    foreach (SearchResultEntry se in resp.Entries)                  {                      if (_abort)                      {                          logger.Info("Request aborted in enum");                          yield break;                      }                        yield return se;                  }                    prc = UpdatePrc(resp);              }
Magic Number,Zetetic.Ldap,LdifWriter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifWriter.cs,WriteFolded,The following statement contains a magic number: if (value.Length > 76)              {                  int lineNum = 1;                  while (value.Length > 0)                  {                      if (lineNum++ > 1) _sw.Write(" ");                        if (value.Length > 76)                      {                          _sw.WriteLine(value.Substring(0' 76));                          value = value.Substring(76);                      }                      else                      {                          _sw.WriteLine(value);                          value = "";                      }                  }              }              else              {                  _sw.WriteLine(value);              }
Magic Number,Zetetic.Ldap,LdifWriter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifWriter.cs,WriteFolded,The following statement contains a magic number: if (value.Length > 76)              {                  int lineNum = 1;                  while (value.Length > 0)                  {                      if (lineNum++ > 1) _sw.Write(" ");                        if (value.Length > 76)                      {                          _sw.WriteLine(value.Substring(0' 76));                          value = value.Substring(76);                      }                      else                      {                          _sw.WriteLine(value);                          value = "";                      }                  }              }              else              {                  _sw.WriteLine(value);              }
Magic Number,Zetetic.Ldap,LdifWriter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifWriter.cs,WriteFolded,The following statement contains a magic number: if (value.Length > 76)              {                  int lineNum = 1;                  while (value.Length > 0)                  {                      if (lineNum++ > 1) _sw.Write(" ");                        if (value.Length > 76)                      {                          _sw.WriteLine(value.Substring(0' 76));                          value = value.Substring(76);                      }                      else                      {                          _sw.WriteLine(value);                          value = "";                      }                  }              }              else              {                  _sw.WriteLine(value);              }
Magic Number,Zetetic.Ldap,LdifWriter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifWriter.cs,WriteFolded,The following statement contains a magic number: if (value.Length > 76)              {                  int lineNum = 1;                  while (value.Length > 0)                  {                      if (lineNum++ > 1) _sw.Write(" ");                        if (value.Length > 76)                      {                          _sw.WriteLine(value.Substring(0' 76));                          value = value.Substring(76);                      }                      else                      {                          _sw.WriteLine(value);                          value = "";                      }                  }              }              else              {                  _sw.WriteLine(value);              }
Magic Number,Zetetic.Ldap,LdifWriter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifWriter.cs,IsSafeInitChar,The following statement contains a magic number: if ((int)c > 127)                  return false;
Magic Number,Zetetic.Ldap,LdifWriter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\LdifWriter.cs,IsSafeString,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if ((int)value[i] > 127)                      return false;              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  string attrName = StringOrNull(se' wantedAttrs[0]);                    try                  {                      _attrs.Add(attrName.ToLower()' new AttributeSchema()                      {                          DisplayName = attrName'                          IsMultiValued = !"TRUE".Equals(StringOrNull(se' wantedAttrs[1]))'                          LangType = this.InferType(StringOrNull(se' wantedAttrs[2]))'                          OID = StringOrNull(se' wantedAttrs[3])'                          SearchFlags = Convert.ToInt32(StringOrNull(se' wantedAttrs[4]) ?? "0")                      });                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add attr '" + attrName                          + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  string attrName = StringOrNull(se' wantedAttrs[0]);                    try                  {                      _attrs.Add(attrName.ToLower()' new AttributeSchema()                      {                          DisplayName = attrName'                          IsMultiValued = !"TRUE".Equals(StringOrNull(se' wantedAttrs[1]))'                          LangType = this.InferType(StringOrNull(se' wantedAttrs[2]))'                          OID = StringOrNull(se' wantedAttrs[3])'                          SearchFlags = Convert.ToInt32(StringOrNull(se' wantedAttrs[4]) ?? "0")                      });                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add attr '" + attrName                          + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  string attrName = StringOrNull(se' wantedAttrs[0]);                    try                  {                      _attrs.Add(attrName.ToLower()' new AttributeSchema()                      {                          DisplayName = attrName'                          IsMultiValued = !"TRUE".Equals(StringOrNull(se' wantedAttrs[1]))'                          LangType = this.InferType(StringOrNull(se' wantedAttrs[2]))'                          OID = StringOrNull(se' wantedAttrs[3])'                          SearchFlags = Convert.ToInt32(StringOrNull(se' wantedAttrs[4]) ?? "0")                      });                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add attr '" + attrName                          + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  ObjectClassSchema oc = new ObjectClassSchema();                  oc.DisplayName = StringOrNull(se' wantedAttrs[0]);                  oc.SuperiorClassName = StringOrNull(se' wantedAttrs[6]);                  oc.OID = StringOrNull(se' wantedAttrs[7]);                    foreach (string src in new string[] { wantedAttrs[1]' wantedAttrs[2] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddMandatory(_attrs[s.ToLower()]);                          }                  }                    foreach (string src in new string[] { wantedAttrs[3]' wantedAttrs[4] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddOptional(_attrs[s.ToLower()]);                          }                  }                    switch (StringOrNull(se' wantedAttrs[5]))                  {                      case "1":                          oc.ClassType = ObjectClassType.Structural;                          break;                        case "2":                          oc.ClassType = ObjectClassType.Abstract;                          break;                        case "3":                          oc.ClassType = ObjectClassType.Auxiliary;                          break;                        default:                          oc.ClassType = ObjectClassType.Unknown;                          break;                  }                    try                  {                      this._ocs.Add(oc.DisplayName.ToLower()' oc);                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add OC '" + oc.DisplayName                           + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  ObjectClassSchema oc = new ObjectClassSchema();                  oc.DisplayName = StringOrNull(se' wantedAttrs[0]);                  oc.SuperiorClassName = StringOrNull(se' wantedAttrs[6]);                  oc.OID = StringOrNull(se' wantedAttrs[7]);                    foreach (string src in new string[] { wantedAttrs[1]' wantedAttrs[2] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddMandatory(_attrs[s.ToLower()]);                          }                  }                    foreach (string src in new string[] { wantedAttrs[3]' wantedAttrs[4] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddOptional(_attrs[s.ToLower()]);                          }                  }                    switch (StringOrNull(se' wantedAttrs[5]))                  {                      case "1":                          oc.ClassType = ObjectClassType.Structural;                          break;                        case "2":                          oc.ClassType = ObjectClassType.Abstract;                          break;                        case "3":                          oc.ClassType = ObjectClassType.Auxiliary;                          break;                        default:                          oc.ClassType = ObjectClassType.Unknown;                          break;                  }                    try                  {                      this._ocs.Add(oc.DisplayName.ToLower()' oc);                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add OC '" + oc.DisplayName                           + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  ObjectClassSchema oc = new ObjectClassSchema();                  oc.DisplayName = StringOrNull(se' wantedAttrs[0]);                  oc.SuperiorClassName = StringOrNull(se' wantedAttrs[6]);                  oc.OID = StringOrNull(se' wantedAttrs[7]);                    foreach (string src in new string[] { wantedAttrs[1]' wantedAttrs[2] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddMandatory(_attrs[s.ToLower()]);                          }                  }                    foreach (string src in new string[] { wantedAttrs[3]' wantedAttrs[4] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddOptional(_attrs[s.ToLower()]);                          }                  }                    switch (StringOrNull(se' wantedAttrs[5]))                  {                      case "1":                          oc.ClassType = ObjectClassType.Structural;                          break;                        case "2":                          oc.ClassType = ObjectClassType.Abstract;                          break;                        case "3":                          oc.ClassType = ObjectClassType.Auxiliary;                          break;                        default:                          oc.ClassType = ObjectClassType.Unknown;                          break;                  }                    try                  {                      this._ocs.Add(oc.DisplayName.ToLower()' oc);                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add OC '" + oc.DisplayName                           + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  ObjectClassSchema oc = new ObjectClassSchema();                  oc.DisplayName = StringOrNull(se' wantedAttrs[0]);                  oc.SuperiorClassName = StringOrNull(se' wantedAttrs[6]);                  oc.OID = StringOrNull(se' wantedAttrs[7]);                    foreach (string src in new string[] { wantedAttrs[1]' wantedAttrs[2] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddMandatory(_attrs[s.ToLower()]);                          }                  }                    foreach (string src in new string[] { wantedAttrs[3]' wantedAttrs[4] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddOptional(_attrs[s.ToLower()]);                          }                  }                    switch (StringOrNull(se' wantedAttrs[5]))                  {                      case "1":                          oc.ClassType = ObjectClassType.Structural;                          break;                        case "2":                          oc.ClassType = ObjectClassType.Abstract;                          break;                        case "3":                          oc.ClassType = ObjectClassType.Auxiliary;                          break;                        default:                          oc.ClassType = ObjectClassType.Unknown;                          break;                  }                    try                  {                      this._ocs.Add(oc.DisplayName.ToLower()' oc);                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add OC '" + oc.DisplayName                           + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  ObjectClassSchema oc = new ObjectClassSchema();                  oc.DisplayName = StringOrNull(se' wantedAttrs[0]);                  oc.SuperiorClassName = StringOrNull(se' wantedAttrs[6]);                  oc.OID = StringOrNull(se' wantedAttrs[7]);                    foreach (string src in new string[] { wantedAttrs[1]' wantedAttrs[2] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddMandatory(_attrs[s.ToLower()]);                          }                  }                    foreach (string src in new string[] { wantedAttrs[3]' wantedAttrs[4] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddOptional(_attrs[s.ToLower()]);                          }                  }                    switch (StringOrNull(se' wantedAttrs[5]))                  {                      case "1":                          oc.ClassType = ObjectClassType.Structural;                          break;                        case "2":                          oc.ClassType = ObjectClassType.Abstract;                          break;                        case "3":                          oc.ClassType = ObjectClassType.Auxiliary;                          break;                        default:                          oc.ClassType = ObjectClassType.Unknown;                          break;                  }                    try                  {                      this._ocs.Add(oc.DisplayName.ToLower()' oc);                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add OC '" + oc.DisplayName                           + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
Magic Number,Zetetic.Ldap.Schema,AdsSchemaInfo,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap\Schema\AdsSchemaInfo.cs,Initialize,The following statement contains a magic number: foreach (SearchResultEntry se in helper.GetResults())              {                  ObjectClassSchema oc = new ObjectClassSchema();                  oc.DisplayName = StringOrNull(se' wantedAttrs[0]);                  oc.SuperiorClassName = StringOrNull(se' wantedAttrs[6]);                  oc.OID = StringOrNull(se' wantedAttrs[7]);                    foreach (string src in new string[] { wantedAttrs[1]' wantedAttrs[2] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddMandatory(_attrs[s.ToLower()]);                          }                  }                    foreach (string src in new string[] { wantedAttrs[3]' wantedAttrs[4] })                  {                      if (se.Attributes.Contains(src))                          foreach (string s in se.Attributes[src].GetValues(typeof(string)))                          {                              oc.AddOptional(_attrs[s.ToLower()]);                          }                  }                    switch (StringOrNull(se' wantedAttrs[5]))                  {                      case "1":                          oc.ClassType = ObjectClassType.Structural;                          break;                        case "2":                          oc.ClassType = ObjectClassType.Abstract;                          break;                        case "3":                          oc.ClassType = ObjectClassType.Auxiliary;                          break;                        default:                          oc.ClassType = ObjectClassType.Unknown;                          break;                  }                    try                  {                      this._ocs.Add(oc.DisplayName.ToLower()' oc);                  }                  catch (Exception ex)                  {                      logger.ErrorException("Couldn't add OC '" + oc.DisplayName                           + "' from " + se.DistinguishedName + " to collection: " + ex.Message' ex);                  }              }
