Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Delete,The method has 5 parameters. Parameters: server' searchBase' filter' connCount' nc
Long Statement,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Main,The length of the statement  "                    Console.Error.WriteLine("Zetetic.Ldap.MassDeleter {0}"' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version); " is 125.
Long Statement,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Main,The length of the statement  "                    Console.Error.WriteLine("Usage: -s <server> -b <searchBase>  -f <filter> [-c connectionCount] [-u <user> -p <pass> [[-d domain]]"); " is 131.
Magic Number,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Main,The following statement contains a magic number: int connCount = 5;
Magic Number,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Delete,The following statement contains a magic number: using (LdapConnection conn = new LdapConnection(server))              {                  conn.SessionOptions.ProtocolVersion = 3;                  conn.Credential = nc ?? System.Net.CredentialCache.DefaultNetworkCredentials;                  conn.AutoBind = false;                  conn.Bind();                    IList<LdapConnection> conns = new List<LdapConnection>();                  for (int i = 0; i < connCount; i++)                  {                      var c = new LdapConnection(server);                        c.SessionOptions.ProtocolVersion = 3;                      c.Credential = nc;                      c.AutoBind = false;                      c.Bind();                        conns.Add(c);                  }                    Console.WriteLine("Created {0} connections"' conns.Count);                    var req = new SearchRequest                  {                      DistinguishedName = searchBase'                      Filter = filter ?? "(&(objectClass=person)(cn=*CNF:*))"                  };                    req.Attributes.Add("1.1");                    req.Controls.Add(new PageResultRequestControl(1000)                  {                      IsCritical = false                  });                    while (true)                  {                      var resp = (SearchResponse)conn.SendRequest(req);                      var lazy = new LazyCommitControl() { IsCritical = false };                        Parallel.ForEach(ISE(resp.Entries)' entry =>                      {                          try                          {                              var delreq = new DeleteRequest(entry.DistinguishedName);                              delreq.Controls.Add(lazy);                                conns[Thread.CurrentThread.ManagedThreadId % connCount].SendRequest(delreq);                                Console.Error.WriteLine("Deleted {0}"' entry.DistinguishedName);                          }                          catch (Exception ex)                          {                              Console.Error.WriteLine("Failed to delete {0}: {1}"' entry.DistinguishedName' ex.Message);                              throw;                          }                      }                      );                        if (resp.Controls.Length == 0)                          break;                        var prc = (PageResultResponseControl)resp.Controls[0];                      if (prc.Cookie.Length == 0)                          break;                        Console.WriteLine("On to the next page!");                        req.Controls.Clear();                      req.Controls.Add(new PageResultRequestControl(prc.Cookie));                  }                    Console.WriteLine("Complete");              }
Magic Number,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Delete,The following statement contains a magic number: using (LdapConnection conn = new LdapConnection(server))              {                  conn.SessionOptions.ProtocolVersion = 3;                  conn.Credential = nc ?? System.Net.CredentialCache.DefaultNetworkCredentials;                  conn.AutoBind = false;                  conn.Bind();                    IList<LdapConnection> conns = new List<LdapConnection>();                  for (int i = 0; i < connCount; i++)                  {                      var c = new LdapConnection(server);                        c.SessionOptions.ProtocolVersion = 3;                      c.Credential = nc;                      c.AutoBind = false;                      c.Bind();                        conns.Add(c);                  }                    Console.WriteLine("Created {0} connections"' conns.Count);                    var req = new SearchRequest                  {                      DistinguishedName = searchBase'                      Filter = filter ?? "(&(objectClass=person)(cn=*CNF:*))"                  };                    req.Attributes.Add("1.1");                    req.Controls.Add(new PageResultRequestControl(1000)                  {                      IsCritical = false                  });                    while (true)                  {                      var resp = (SearchResponse)conn.SendRequest(req);                      var lazy = new LazyCommitControl() { IsCritical = false };                        Parallel.ForEach(ISE(resp.Entries)' entry =>                      {                          try                          {                              var delreq = new DeleteRequest(entry.DistinguishedName);                              delreq.Controls.Add(lazy);                                conns[Thread.CurrentThread.ManagedThreadId % connCount].SendRequest(delreq);                                Console.Error.WriteLine("Deleted {0}"' entry.DistinguishedName);                          }                          catch (Exception ex)                          {                              Console.Error.WriteLine("Failed to delete {0}: {1}"' entry.DistinguishedName' ex.Message);                              throw;                          }                      }                      );                        if (resp.Controls.Length == 0)                          break;                        var prc = (PageResultResponseControl)resp.Controls[0];                      if (prc.Cookie.Length == 0)                          break;                        Console.WriteLine("On to the next page!");                        req.Controls.Clear();                      req.Controls.Add(new PageResultRequestControl(prc.Cookie));                  }                    Console.WriteLine("Complete");              }
Magic Number,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Delete,The following statement contains a magic number: using (LdapConnection conn = new LdapConnection(server))              {                  conn.SessionOptions.ProtocolVersion = 3;                  conn.Credential = nc ?? System.Net.CredentialCache.DefaultNetworkCredentials;                  conn.AutoBind = false;                  conn.Bind();                    IList<LdapConnection> conns = new List<LdapConnection>();                  for (int i = 0; i < connCount; i++)                  {                      var c = new LdapConnection(server);                        c.SessionOptions.ProtocolVersion = 3;                      c.Credential = nc;                      c.AutoBind = false;                      c.Bind();                        conns.Add(c);                  }                    Console.WriteLine("Created {0} connections"' conns.Count);                    var req = new SearchRequest                  {                      DistinguishedName = searchBase'                      Filter = filter ?? "(&(objectClass=person)(cn=*CNF:*))"                  };                    req.Attributes.Add("1.1");                    req.Controls.Add(new PageResultRequestControl(1000)                  {                      IsCritical = false                  });                    while (true)                  {                      var resp = (SearchResponse)conn.SendRequest(req);                      var lazy = new LazyCommitControl() { IsCritical = false };                        Parallel.ForEach(ISE(resp.Entries)' entry =>                      {                          try                          {                              var delreq = new DeleteRequest(entry.DistinguishedName);                              delreq.Controls.Add(lazy);                                conns[Thread.CurrentThread.ManagedThreadId % connCount].SendRequest(delreq);                                Console.Error.WriteLine("Deleted {0}"' entry.DistinguishedName);                          }                          catch (Exception ex)                          {                              Console.Error.WriteLine("Failed to delete {0}: {1}"' entry.DistinguishedName' ex.Message);                              throw;                          }                      }                      );                        if (resp.Controls.Length == 0)                          break;                        var prc = (PageResultResponseControl)resp.Controls[0];                      if (prc.Cookie.Length == 0)                          break;                        Console.WriteLine("On to the next page!");                        req.Controls.Clear();                      req.Controls.Add(new PageResultRequestControl(prc.Cookie));                  }                    Console.WriteLine("Complete");              }
Missing Default,Zetetic.Ldap,MassDeleter,C:\repos\skradel_Zetetic.Ldap\Zetetic.Ldap.MassDeleter\MassDeleter.cs,Main,The following switch statement is missing a default case: switch (args[i])                      {                          case "-?":                          case "/?":                              showUsage = true;                              break;                            case "-server":                          case "-s":                              server = args[++i];                              break;                            case "-filter":                          case "-f":                          case "-r":                              filter = args[++i];                              break;                            case "-count":                          case "-c":                              connCount = int.Parse(args[++i]);                              break;                            case "-b":                              searchBase = args[++i];                              break;                            case "-user":                          case "-u":                              user = args[++i];                              break;                            case "-domain":                          case "-d":                              domain = args[++i];                              break;                            case "-password":                          case "-p":                          case "-w":                              password = args[++i];                              break;                      }
