Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cruncher,CssCruncher,C:\repos\JimBobSquarePants_Cruncher\Cruncher\CssCruncher.cs,ParseImports,Cyclomatic complexity of the method is 8
Long Identifier,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,CreateResourcePhysicalFileAsync,The length of the parameter CheckCreationDateFrequencyHours is 31.
Long Identifier,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The length of the parameter CacheIdTrimPhysicalFilesFolder is 30.
Long Identifier,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The length of the parameter CacheIdTrimPhysicalFilesFolderAppPoolRecycled is 45.
Long Identifier,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The length of the parameter TrimPhysicalFilesFolderDelayedExecutionMin is 42.
Long Identifier,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The length of the parameter TrimPhysicalFilesFolderFrequencyHours is 37.
Long Identifier,Cruncher,CruncherBundler,C:\repos\JimBobSquarePants_Cruncher\Cruncher\CruncherBundler.cs,,The length of the parameter JavaScriptPhysicalFileTemplate is 30.
Long Identifier,Cruncher.Postprocessors.AutoPrefixer,AutoPrefixerProcessor,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Postprocessors\AutoPrefixer\AutoPrefixerProcessor.cs,,The length of the parameter CompilationFunctionCallTemplate is 31.
Long Identifier,Cruncher.Preprocessors.Coffee,CoffeeScriptCompiler,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Preprocessors\Coffee\CoffeeScriptCompiler.cs,,The length of the parameter CompilationFunctionCallTemplate is 31.
Long Identifier,Cruncher.Configuration,CruncherProcessingSection,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Configuration\CruncherProcessingSection.cs,GetConfiguration,The length of the parameter clientResourcesProcessingSection is 32.
Long Statement,Cruncher.Caching,CacheManager,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Caching\CacheManager.cs,Clear,The length of the statement  "                    if ((cacheItem.Value == null) || (cacheItem.Value != null && cacheItem.Value.Equals(regionName' StringComparison.OrdinalIgnoreCase))) " is 133.
Long Statement,Cruncher.Extensions,DirectoryInfoExtensions,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Extensions\DirectoryInfoExtensions.cs,SafeEnumerateDirectoriesAsync,The length of the statement  "            return await Task.Run(() => SafeEnumerateDirectories(directoryInfo' searchPattern' searchOption)).ConfigureAwait(false); " is 120.
Long Statement,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,GetFilePath,The length of the statement  "                // If there is an error then the method returns the original resource path since the method doesn't know how to process it " is 122.
Long Statement,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,CreateResourcePhysicalFileAsync,The length of the statement  "            string fileVirtualPath = VirtualPathUtility.AppendTrailingSlash(CruncherConfiguration.Instance.PhysicalFilesPath) + fileName; " is 125.
Long Statement,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,CreateResourcePhysicalFileAsync,The length of the statement  "                // In order to avoid checking whether the file exists for every request (for a very busy site could be be thousands of requests per minute) " is 139.
Long Statement,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,CreateResourcePhysicalFileAsync,The length of the statement  "                // a new cache item is added that will expire in a minute is created. That means that if the file is deleted (what should never happen) then it will be recreated after one minute. " is 179.
Long Statement,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The length of the statement  "            // To know whether the trim process has already been performed (in order to avoid executing this process everytime) creates  " is 123.
Long Statement,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The length of the statement  "            // To avoid that the cleanup process is run just after an App_Pool Recycle (or cache recycle) it uses another cache item that will never expire " is 143.
Long Statement,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The length of the statement  "            // The main reason is because after an AppPool reset there are a lot of things going on and it is not the optimal moment to perform many I/O ops " is 144.
Long Statement,Cruncher,CruncherBundler,C:\repos\JimBobSquarePants_Cruncher\Cruncher\CruncherBundler.cs,RenderJavaScript,The length of the statement  "                string fileContent = AsyncHelper.RunSync(() => JavaScriptHandler.ProcessJavascriptCrunchAsync(context' true' fileNames)); " is 121.
Long Statement,Cruncher,CruncherBundler,C:\repos\JimBobSquarePants_Cruncher\Cruncher\CruncherBundler.cs,RenderJavaScript,The length of the statement  "                string fileContent = AsyncHelper.RunSync(() => JavaScriptHandler.ProcessJavascriptCrunchAsync(context' false' currentName)); " is 124.
Long Statement,Cruncher,ProcessorBase,C:\repos\JimBobSquarePants_Cruncher\Cruncher\ProcessorBase.cs,GetUrlFromToken,The length of the statement  "            CruncherSecuritySection.WhiteListElementCollection remoteFileWhiteList = CruncherConfiguration.Instance.RemoteFileWhiteList; " is 124.
Long Statement,Cruncher,RemoteFile,C:\repos\JimBobSquarePants_Cruncher\Cruncher\RemoteFile.cs,GetWebResponseAsync,The length of the statement  "                    throw new SecurityException("An attempt to download a remote file has been halted because the file is larger than allowed."); " is 125.
Long Statement,Cruncher.Postprocessors.AutoPrefixer,AutoPrefixerProcessor,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Postprocessors\AutoPrefixer\AutoPrefixerProcessor.cs,Process,The length of the statement  "                    string result = this.javascriptEngine.Evaluate<string>(string.Format(CompilationFunctionCallTemplate' JsonConvert.SerializeObject(input)' ConvertAutoPrefixerOptionsToJson(options))); " is 182.
Long Statement,Cruncher.Preprocessors.Coffee,CoffeeScriptCompiler,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Preprocessors\Coffee\CoffeeScriptCompiler.cs,Compile,The length of the statement  "                    string result = this.javascriptEngine.Evaluate<string>(string.Format(CompilationFunctionCallTemplate' JsonConvert.SerializeObject(input)' "{bare: false}")); " is 156.
Long Statement,Cruncher.Preprocessors.Coffee,CoffeeScriptPreprocessor,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Preprocessors\Coffee\CoffeeScriptPreprocessor.cs,Transform,The length of the statement  "            using (CoffeeScriptCompiler coffeeScriptCompiler = new CoffeeScriptCompiler(CruncherConfiguration.Instance.JsEngineFunc)) " is 121.
Long Statement,Cruncher.Preprocessors,PreprocessorManager,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Preprocessors\PreprocessorManager.cs,CreateAllowedExtensionRegex,The length of the statement  "            this.AllowedExtensionsRegex = new Regex(string.Format("({0})$"' stringBuilder.ToString().TrimEnd('|'))' RegexOptions.IgnoreCase); " is 129.
Long Statement,Cruncher.Preprocessors,ResourcePreprocessor,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Preprocessors\ResourcePreprocessor.cs,RewritePaths,The length of the statement  "                        input = ReplaceRelativePathsIn(input' relativePath' string.Format(CultureInfo.InvariantCulture' "{0}{1}"' sourceDirectory' relativePath)); " is 138.
Long Statement,Cruncher.Preprocessors,ResourcePreprocessor,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Preprocessors\ResourcePreprocessor.cs,GetAbsolutePathFromRelative,The length of the statement  "            // Reached this point it is necessary to tterate through source directory's sub-directories looking for the relavite path " is 121.
Long Statement,Cruncher.Configuration,CruncherConfiguration,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Configuration\CruncherConfiguration.cs,GetAutoPrefixerOptions,The length of the statement  "                Browsers = this.GetCruncherProcessingSection().AutoPrefixer.Browsers.Split(''').Select(p => HttpUtility.HtmlDecode(p.Trim())).ToList()' " is 135.
Long Statement,Cruncher.Configuration,CruncherProcessingSection,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Configuration\CruncherProcessingSection.cs,GetConfiguration,The length of the statement  "            CruncherProcessingSection clientResourcesProcessingSection = ConfigurationManager.GetSection("cruncher/processing") as CruncherProcessingSection; " is 145.
Long Statement,Cruncher.Configuration,CruncherSecuritySection,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Configuration\CruncherSecuritySection.cs,GetConfiguration,The length of the statement  "            CruncherSecuritySection cruncherProcessingSection = ConfigurationManager.GetSection("cruncher/security") as CruncherSecuritySection; " is 132.
Empty Catch Block,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The method has an empty catch block.
Magic Number,Cruncher.Extensions,StringExtensions,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Extensions\StringExtensions.cs,ToMd5Fingerprint,The following statement contains a magic number: using (MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())              {                  byte[] hash = md5.ComputeHash(bytes);                    // Concatenate the hash bytes into one long String.                  return hash.Aggregate(                      new StringBuilder(32)'                      (sb' b) => sb.Append(b.ToString("X2"' CultureInfo.InvariantCulture)))                      .ToString().ToLowerInvariant();              }
Magic Number,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,CreateResourcePhysicalFileAsync,The following statement contains a magic number: const int CheckCreationDateFrequencyHours = 6;
Magic Number,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,CreateResourcePhysicalFileAsync,The following statement contains a magic number: if (filePath != null)              {                  // In order to avoid checking whether the file exists for every request (for a very busy site could be be thousands of requests per minute)                  // a new cache item is added that will expire in a minute is created. That means that if the file is deleted (what should never happen) then it will be recreated after one minute.                  // With this improvement IO operations are reduced to one per minute for already existing files                  if (CacheManager.GetItem(cacheIdCheckFileExists) == null)                  {                      CacheItemPolicy policycacheIdCheckFileExists = new CacheItemPolicy                      {                          SlidingExpiration = TimeSpan.FromMinutes(1)'                          Priority = CacheItemPriority.NotRemovable                      };                      CacheManager.AddItem(cacheIdCheckFileExists' "1"' policycacheIdCheckFileExists);                        FileInfo fileInfo = new FileInfo(filePath);                      if (fileInfo.Exists)                      {                          // The resource file exists but it is necessary from time to time to update the file creation date                           // in order to avoid the file to be deleted by the clean up process.                          // To know whether the check has been performed (in order to avoid executing this check everytime) creates                           // a cache item that will expire in 12 hours.                          if (CacheManager.GetItem(cacheIdCheckCreationDate) == null)                          {                              File.SetLastWriteTimeUtc(filePath' DateTime.UtcNow);                                CacheItemPolicy policyCheckCreationDate = new CacheItemPolicy                              {                                  SlidingExpiration = TimeSpan.FromHours(CheckCreationDateFrequencyHours)'                                  Priority = CacheItemPriority.NotRemovable                              };                                CacheManager.AddItem(cacheIdCheckCreationDate' "1"' policyCheckCreationDate);                          }                      }                      else                      {                          // The resource file doesn't exist                           // Make sure that the directory exists                          string directoryPath = HostingEnvironment.MapPath(CruncherConfiguration.Instance.PhysicalFilesPath);                          if (directoryPath != null)                          {                              DirectoryInfo directoryInfo = new DirectoryInfo(directoryPath);                              if (!directoryInfo.Exists)                              {                                  // Don't swallow any errors. We want to know if this doesn't work.                                  directoryInfo.Create();                              }                          }                            // Write the file asynchronously.                          byte[] encodedText = Encoding.UTF8.GetBytes(fileContent);                            using (                              FileStream sourceStream = new FileStream(                                  filePath'                                  FileMode.Create'                                  FileAccess.Write'                                  FileShare.None'                                  4096'                                  true))                          {                              await sourceStream.WriteAsync(encodedText' 0' encodedText.Length);                          }                      }                  }              }
Magic Number,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The following statement contains a magic number: const int TrimPhysicalFilesFolderDelayedExecutionMin = 5;
Magic Number,Cruncher.Helpers,ResourceHelper,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Helpers\ResourceHelper.cs,TrimPhysicalFilesFolderAsync,The following statement contains a magic number: const int TrimPhysicalFilesFolderFrequencyHours = 7;
Magic Number,Cruncher,RemoteFile,C:\repos\JimBobSquarePants_Cruncher\Cruncher\RemoteFile.cs,GetWebResponseAsync,The following statement contains a magic number: try              {                  response = await this.GetWebRequest().GetResponseAsync();              }              catch (WebException ex)              {                  if (response != null)                  {                      HttpWebResponse errorResponse = (HttpWebResponse)ex.Response;                      if (errorResponse.StatusCode == HttpStatusCode.NotFound)                      {                          throw new HttpException(404' "No file exists at " + this.Uri);                      }                  }                    throw;              }
Magic Number,Cruncher.Preprocessors.Sass,SassCompiler,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Preprocessors\Sass\SassCompiler.cs,CompileSass,The following statement contains a magic number: try              {                  CompilerMode mode = CompilerMode.Scss;                    if (Regex.IsMatch(fileName' @"\.sass$"))                  {                      mode = CompilerMode.Sass;                  }                    string processedInput = mode == CompilerMode.Scss ? input : this.ConvertToScss(input);                  return this.compiler.Compile(processedInput' OutputStyle.Nested' false' 5' new[] { Path.GetDirectoryName(fileName) });              }              catch (Exception ex)              {                  throw new SassAndScssCompilingException(ex.Message' ex.InnerException);              }
Missing Default,Cruncher.Compression,CssMinifier,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Compression\CssMinifier.cs,CreateCssSettings,The following switch statement is missing a default case: switch (this.ColorNamesRange)                  {                      case ColorNamesRange.W3CStrict:                          cssSettings.ColorNames = CssColor.Strict;                          break;                      case ColorNamesRange.HexadecimalOnly:                          cssSettings.ColorNames = CssColor.Hex;                          break;                      case ColorNamesRange.AllMajorColors:                          cssSettings.ColorNames = CssColor.Major;                          break;                  }
Missing Default,Cruncher.Compression,JavaScriptMinifier,C:\repos\JimBobSquarePants_Cruncher\Cruncher\Compression\JavascriptMinifier.cs,CreateCodeSettings,The following switch statement is missing a default case: switch (this.VariableMinification)                  {                      case VariableMinification.None:                          codeSettings.LocalRenaming = LocalRenaming.KeepAll;                          break;                        case VariableMinification.LocalVariablesOnly:                          codeSettings.LocalRenaming = LocalRenaming.KeepLocalizationVars;                          break;                        case VariableMinification.LocalVariablesAndFunctionArguments:                          codeSettings.LocalRenaming = LocalRenaming.CrunchAll;                          break;                  }
