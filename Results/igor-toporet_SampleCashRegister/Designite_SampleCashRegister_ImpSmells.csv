Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SampleCashRegister.Discounts,Bundle,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\Bundle.cs,GetShortBundleDescr,The method has 6 parameters.
Long Statement,SampleCashRegister,Order,C:\repos\igor-toporet_SampleCashRegister\Source\Order.cs,ApplyCoupon,The length of the statement  "	string adjustmentItem = string.Format ("Coupon ${0} off when the bill total (${1}) exceeds ${2}"' applicableCoupon.AmountOff' total' applicableCoupon.Threshold); " is 161.
Long Statement,SampleCashRegister.Discounts,BulkDiscount,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\BulkDiscount.cs,Apply,The length of the statement  "	string item = string.Format ("Bulk discount on '{0}' groups of {1} ({2} whole groups)"' Product' NumberInGroup' wholeGroupsCount); " is 130.
Long Statement,SampleCashRegister.Discounts,BulkDiscount,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\BulkDiscount.cs,Apply,The length of the statement  "	order.AddItem (item).Quantity (wholeGroupsCount).PricePerUnit ((SpecialPrice - regularPrice) * wholeGroupsCount * NumberInGroup); " is 129.
Long Statement,SampleCashRegister.Discounts,Bundle,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\Bundle.cs,Apply,The length of the statement  "	var numberOfApplicableBundles = BaseProducts.Select (b => Convert.ToInt32 (order.ProductQuantity (b.Product) / b.Quantity)).Min (); " is 131.
Long Statement,SampleCashRegister.Discounts,Bundle,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\Bundle.cs,Apply,The length of the statement  "		string item = string.Format ("{0}% off on '{1}' (bundle {2})"' addition.PercentOff' addition.Product' GetShortBundleDescr ()); " is 126.
Long Statement,SampleCashRegister.Discounts,Bundle,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\Bundle.cs,GetShortBundleDescr,The length of the statement  "	string bundleAddition = AdditionProducts.Select (a => a.PercentOff + "% off on " + a.Quantity + " " + a.Product).Aggregate ((x' y) => x + "' " + y); " is 148.
Magic Number,SampleCashRegister.Discounts,Bundle,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\Bundle.cs,Apply,The following statement contains a magic number: foreach (var addition in AdditionProducts) {  	var actualQuantity = order.ProductQuantity (addition.Product);  	if (actualQuantity == 0)  		continue;  	var applicableQuantity = numberOfApplicableBundles * addition.Quantity;  	//  	// number of addition products in order can be bigger or lesser  	// than according to number of applicable items  	//  	var adjustmentQuantity = Math.Min (actualQuantity' applicableQuantity);  	string item = string.Format ("{0}% off on '{1}' (bundle {2})"' addition.PercentOff' addition.Product' GetShortBundleDescr ());  	decimal price = order.ItemsWithProduct (addition.Product).First ().PricePerUnit;  	order.AddItem (item).Quantity (adjustmentQuantity).PricePerUnit (-price * addition.PercentOff / 100);  }  
Magic Number,SampleCashRegister.Discounts,Bundle,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\Bundle.cs,Apply,The following statement contains a magic number: order.AddItem (item).Quantity (adjustmentQuantity).PricePerUnit (-price * addition.PercentOff / 100);  
Magic Number,SampleCashRegister.Discounts,PercentDiscount,C:\repos\igor-toporet_SampleCashRegister\Source\Discounts\PercentDiscount.cs,CreateAdjustmentItem,The following statement contains a magic number: return new OrderItem {  	Product = item.Product + " " + PercentOff + "% off"'  	PricePerUnit = -item.PricePerUnit * PercentOff / 100'  	Quantity = item.Quantity'  };  
