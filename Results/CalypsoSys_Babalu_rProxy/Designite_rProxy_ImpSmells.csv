Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Babalu.rProxy,CompressedStream,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Common\CompressedStream.cs,DeCompressContent,Cyclomatic complexity of the method is 9
Complex Method,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogWriter,Cyclomatic complexity of the method is 9
Complex Method,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogRequest,Cyclomatic complexity of the method is 55
Complex Method,Babalu.rProxy,ProxyListener,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyListener.cs,HandleAsyncConnection,Cyclomatic complexity of the method is 22
Complex Method,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,Cyclomatic complexity of the method is 17
Complex Method,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,LogHeaderContent,Cyclomatic complexity of the method is 8
Complex Method,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,Tranform,Cyclomatic complexity of the method is 8
Complex Method,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,Replace,Cyclomatic complexity of the method is 13
Complex Method,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ParseHeader,Cyclomatic complexity of the method is 14
Complex Method,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,Cyclomatic complexity of the method is 8
Complex Method,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetPerfmonStats,Cyclomatic complexity of the method is 16
Long Parameter List,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The method has 5 parameters.
Long Statement,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadLogsLocation,The length of the statement  "			logsLocation = Path.Combine (Path.Combine (System.Environment.GetFolderPath (System.Environment.SpecialFolder.CommonApplicationData)' _babaluFolderName)' "Logs"); " is 162.
Long Statement,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The length of the statement  "			if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) { " is 129.
Long Statement,Babalu.rProxy,CompressedStream,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Common\CompressedStream.cs,IsCompressed,The length of the statement  "	return (contentEncoding != null && (contentEncoding.IndexOf (_contentIsGZipToken' StringComparison.InvariantCultureIgnoreCase) != -1 || contentEncoding.IndexOf (_contentIsDeflateToken' StringComparison.InvariantCultureIgnoreCase) != -1)); " is 238.
Long Statement,Babalu.rProxy,CompressedStream,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Common\CompressedStream.cs,DeCompressContent,The length of the statement  "		using (CompressedStream deCompressStream = new CompressedStream (contentEncoding' inputStream' CompressionMode.Decompress)) { " is 125.
Long Statement,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogStream,The length of the statement  "	requestStream = LogStream (requestStream' string.Format ("{0}_{1}.log"' fileName' lastDate.ToString ("yyyyMMdd"))' ref create); " is 127.
Long Statement,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogStream,The length of the statement  "			requestStream = new StreamWriter (new FileStream (Path.Combine (_lastLogDirectory' fileName)' FileMode.OpenOrCreate | FileMode.Append' FileAccess.Write' FileShare.Read)); " is 170.
Long Statement,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogException,The length of the statement  "				output.AppendFormat ("{0}Stack Trace: {1}\r\n"' indent' excp.StackTrace.Replace ("\r\n"' string.Format ("\r\n{0}"' indent))); " is 125.
Long Statement,Babalu.rProxy,LogRequest,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\LogRequest.cs,ToString,The length of the statement  "	return string.Format ("CsMethod={0}' CsUriStem={1}' CsUriQuery={2}' ServerPort={3}' CsUsername={4}' ClientIp={5}' CsVersion={6}' CsUserAgent={7}' ScStatus={8}' ScSubstatus={9}' ExtnernalInfo={10}' BabaluStatus={11}"' CsMethod' CsUriStem' CsUriQuery' ServerPort' CsUsername' ClientIp' CsVersion' CsUserAgent' ScStatus' ScSubstatus' ExternalInfo' BabaluStatus); " is 359.
Long Statement,Babalu.rProxy,ProxyListener,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyListener.cs,StartListner,The length of the statement  "		LogFactory.LogInformation ("Maximum worker threads=[{0}] Maximum completion port threads=[{1}]"' workerThreads' portThreads); " is 125.
Long Statement,Babalu.rProxy,ProxyListener,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyListener.cs,StartListner,The length of the statement  "		LogFactory.LogInformation ("Available worker threads=[{0}] Available completion port threads=[{1}]"' workerThreads' portThreads); " is 129.
Long Statement,Babalu.rProxy,ProxyListener,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyListener.cs,StartWork,The length of the statement  "				LogFactory.LogException (socExcp' "Unexpected Babalu Proxy Listener Socket close ({0} {1})"' socExcp.ErrorCode' socExcp.Message); " is 129.
Long Statement,Babalu.rProxy,ProxyListener,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyListener.cs,HandleAsyncConnection,The length of the statement  "					ProxyRequestMessage request = new ProxyRequestMessage (messageHandler' _proxiedServer.SupportGZip' realClientStreamImpl' log); " is 126.
Long Statement,Babalu.rProxy,ProxyListener,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyListener.cs,HandleAsyncConnection,The length of the statement  "										ProxyResponseMessage response = new ProxyResponseMessage (messageHandler' _proxiedServer.SupportGZip' proxyClientImpl' log); " is 124.
Long Statement,Babalu.rProxy,ProxyListener,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyListener.cs,HandleAsyncConnection,The length of the statement  "												// change all ip/dns information from proxied server to proxy server - if provisional and it is a sync command special tranform processing " is 138.
Long Statement,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProcessChunkedContent,The length of the statement  "			if (int.TryParse (len.ToString ()' System.Globalization.NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out length)) { " is 132.
Long Statement,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProcessCompressedContent,The length of the statement  "			using (CompressedStream compressStream = new CompressedStream (_contentEncoding' rewriteStream' CompressionMode.Compress)) { " is 124.
Long Statement,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,Replace,The length of the statement  "		else if (_newContentLength != -1 && input [i] == _contentLengthToken [0] && Utility.Match (input' i' _contentLengthToken)) { " is 124.
Long Statement,Babalu.rProxy,BabaluCounterDescriptions,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounterDescriptions.cs,InstallCounters,The length of the statement  "		PerformanceCounterCategory.Create (BabaluCounterDescriptions.CounterCategory' BabaluCounterDescriptions.CategoryDescription' PerformanceCounterCategoryType.SingleInstance' counterData); " is 185.
Long Statement,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,SetCounters,The length of the statement  "	_pendingThreadsCounter = new PerformanceCounter (BabaluCounterDescriptions.CounterCategory' BabaluCounterDescriptions.PendingThreadRequest' false); " is 147.
Long Statement,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,SetCounters,The length of the statement  "	_currentAllRequestsCounter = new PerformanceCounter (BabaluCounterDescriptions.CounterCategory' BabaluCounterDescriptions.CurrentRequests' false); " is 146.
Long Statement,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,SetCounters,The length of the statement  "	_totalCallTimeCounter = new PerformanceCounter (BabaluCounterDescriptions.CounterCategory' BabaluCounterDescriptions.TotalCallTime' false); " is 139.
Long Statement,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,SetCounters,The length of the statement  "	_exceptionsPerMinuteCounter = new PerformanceCounter (BabaluCounterDescriptions.CounterCategory' BabaluCounterDescriptions.ExceptionsPerMinute' false); " is 151.
Long Statement,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,SetCounters,The length of the statement  "	_requestsPerSecondCounter = new PerformanceCounter (BabaluCounterDescriptions.CounterCategory' BabaluCounterDescriptions.RequestsPerSecond' false); " is 147.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogWriter,The method has an empty catch block.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogWriter,The method has an empty catch block.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,WriteEvents,The method has an empty catch block.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,WriteLog,The method has an empty catch block.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogRequestStream,The method has an empty catch block.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogStream,The method has an empty catch block.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogException,The method has an empty catch block.
Empty Catch Block,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogGenetic,The method has an empty catch block.
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxyPorts,The following statement contains a magic number: if (portCerts.Count == 0)  	portCerts.Add (80' null);  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxyPorts,The following statement contains a magic number: portCerts.Add (80' null);  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (proxiedServersPorts) == false) {  	string[] serverPortMaps = proxiedServersPorts.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (string serverPortMap in serverPortMaps) {  		string[] tokens = serverPortMap.Split (new char[] {  			'|'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  			int port;  			if (int.TryParse (tokens [2]' out port) == false)  				port = 80;  			bool ssl;  			if (bool.TryParse (tokens [3]' out ssl) == false)  				ssl = false;  			servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  		}  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (proxiedServersPorts) == false) {  	string[] serverPortMaps = proxiedServersPorts.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (string serverPortMap in serverPortMaps) {  		string[] tokens = serverPortMap.Split (new char[] {  			'|'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  			int port;  			if (int.TryParse (tokens [2]' out port) == false)  				port = 80;  			bool ssl;  			if (bool.TryParse (tokens [3]' out ssl) == false)  				ssl = false;  			servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  		}  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (proxiedServersPorts) == false) {  	string[] serverPortMaps = proxiedServersPorts.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (string serverPortMap in serverPortMaps) {  		string[] tokens = serverPortMap.Split (new char[] {  			'|'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  			int port;  			if (int.TryParse (tokens [2]' out port) == false)  				port = 80;  			bool ssl;  			if (bool.TryParse (tokens [3]' out ssl) == false)  				ssl = false;  			servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  		}  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (proxiedServersPorts) == false) {  	string[] serverPortMaps = proxiedServersPorts.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (string serverPortMap in serverPortMaps) {  		string[] tokens = serverPortMap.Split (new char[] {  			'|'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  			int port;  			if (int.TryParse (tokens [2]' out port) == false)  				port = 80;  			bool ssl;  			if (bool.TryParse (tokens [3]' out ssl) == false)  				ssl = false;  			servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  		}  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: foreach (string serverPortMap in serverPortMaps) {  	string[] tokens = serverPortMap.Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  		int port;  		if (int.TryParse (tokens [2]' out port) == false)  			port = 80;  		bool ssl;  		if (bool.TryParse (tokens [3]' out ssl) == false)  			ssl = false;  		servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: foreach (string serverPortMap in serverPortMaps) {  	string[] tokens = serverPortMap.Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  		int port;  		if (int.TryParse (tokens [2]' out port) == false)  			port = 80;  		bool ssl;  		if (bool.TryParse (tokens [3]' out ssl) == false)  			ssl = false;  		servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: foreach (string serverPortMap in serverPortMaps) {  	string[] tokens = serverPortMap.Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  		int port;  		if (int.TryParse (tokens [2]' out port) == false)  			port = 80;  		bool ssl;  		if (bool.TryParse (tokens [3]' out ssl) == false)  			ssl = false;  		servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: foreach (string serverPortMap in serverPortMaps) {  	string[] tokens = serverPortMap.Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  		int port;  		if (int.TryParse (tokens [2]' out port) == false)  			port = 80;  		bool ssl;  		if (bool.TryParse (tokens [3]' out ssl) == false)  			ssl = false;  		servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  	}  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  	int port;  	if (int.TryParse (tokens [2]' out port) == false)  		port = 80;  	bool ssl;  	if (bool.TryParse (tokens [3]' out ssl) == false)  		ssl = false;  	servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  	int port;  	if (int.TryParse (tokens [2]' out port) == false)  		port = 80;  	bool ssl;  	if (bool.TryParse (tokens [3]' out ssl) == false)  		ssl = false;  	servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  	int port;  	if (int.TryParse (tokens [2]' out port) == false)  		port = 80;  	bool ssl;  	if (bool.TryParse (tokens [3]' out ssl) == false)  		ssl = false;  	servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (tokens.Count () == 4 && string.IsNullOrWhiteSpace (tokens [0]) == false && string.IsNullOrWhiteSpace (tokens [1]) == false) {  	int port;  	if (int.TryParse (tokens [2]' out port) == false)  		port = 80;  	bool ssl;  	if (bool.TryParse (tokens [3]' out ssl) == false)  		ssl = false;  	servers.Add (tokens [0].ToLower ()' Tuple.Create<string' int' bool> (tokens [1]' port' ssl));  }  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (int.TryParse (tokens [2]' out port) == false)  	port = 80;  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (int.TryParse (tokens [2]' out port) == false)  	port = 80;  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: port = 80;  
Magic Number,Babalu.rProxy,BabaluConfigurationFactory,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\BabaluConfigurationFactory.cs,LoadProxiedServers,The following statement contains a magic number: if (bool.TryParse (tokens [3]' out ssl) == false)  	ssl = false;  
Magic Number,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogRequest,The following statement contains a magic number: if (BabaluConfigurationFactory.Instance.LogRequests) {  	try {  		StringBuilder output = new StringBuilder (256);  		foreach (string field in _fields) {  			string value = null;  			switch (field) {  			case _fieldDate:  				value = DateTime.Now.ToString ("yyyy-MM-dd");  				break;  			case _fieldTime:  				value = DateTime.Now.ToString ("HH:mm:ss");  				break;  			case _fieldServerSitename:  				value = _siteName;  				break;  			case _fieldServerComputername:  				value = _computerName;  				break;  			case _fieldServerIp:  				value = proxyIP;  				break;  			case _fieldCsMethod:  				value = request.CsMethod;  				break;  			case _fieldCsUriStem:  				value = request.CsUriStem;  				break;  			case _fieldCsUriQuery:  				value = request.CsUriQuery;  				break;  			case _fieldServerPort:  				value = request.ServerPort;  				break;  			case _fieldCsUsername:  				value = request.CsUsername;  				break;  			case _fieldClientIp:  				value = request.ClientIp;  				break;  			case _fieldCsVersion:  				value = request.CsVersion;  				break;  			case _fieldCsUserAgent:  				value = request.CsUserAgent;  				break;  			case _fieldScStatus:  				value = request.ScStatus;  				break;  			case _fieldScSubstatus:  				value = request.ScSubstatus;  				break;  			case _fieldDeviceType:  				value = request.ExternalInfo;  				break;  			case _fieldBabaluStatus:  				value = request.BabaluStatus;  				break;  			}  			if (string.IsNullOrEmpty (value))  				value = "-";  			output.AppendFormat ("{0} "' value.Replace (" "' ""));  		}  		_resultsLogQueue.Enqueue (output.ToString ());  	}  	catch (Exception excp) {  		// eat any exception as we do not want to do any harm when logging  		_me.LogException (excp' "Writting to Request log");  	}  }  
Magic Number,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogRequest,The following statement contains a magic number: try {  	StringBuilder output = new StringBuilder (256);  	foreach (string field in _fields) {  		string value = null;  		switch (field) {  		case _fieldDate:  			value = DateTime.Now.ToString ("yyyy-MM-dd");  			break;  		case _fieldTime:  			value = DateTime.Now.ToString ("HH:mm:ss");  			break;  		case _fieldServerSitename:  			value = _siteName;  			break;  		case _fieldServerComputername:  			value = _computerName;  			break;  		case _fieldServerIp:  			value = proxyIP;  			break;  		case _fieldCsMethod:  			value = request.CsMethod;  			break;  		case _fieldCsUriStem:  			value = request.CsUriStem;  			break;  		case _fieldCsUriQuery:  			value = request.CsUriQuery;  			break;  		case _fieldServerPort:  			value = request.ServerPort;  			break;  		case _fieldCsUsername:  			value = request.CsUsername;  			break;  		case _fieldClientIp:  			value = request.ClientIp;  			break;  		case _fieldCsVersion:  			value = request.CsVersion;  			break;  		case _fieldCsUserAgent:  			value = request.CsUserAgent;  			break;  		case _fieldScStatus:  			value = request.ScStatus;  			break;  		case _fieldScSubstatus:  			value = request.ScSubstatus;  			break;  		case _fieldDeviceType:  			value = request.ExternalInfo;  			break;  		case _fieldBabaluStatus:  			value = request.BabaluStatus;  			break;  		}  		if (string.IsNullOrEmpty (value))  			value = "-";  		output.AppendFormat ("{0} "' value.Replace (" "' ""));  	}  	_resultsLogQueue.Enqueue (output.ToString ());  }  catch (Exception excp) {  	// eat any exception as we do not want to do any harm when logging  	_me.LogException (excp' "Writting to Request log");  }  
Magic Number,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogException,The following statement contains a magic number: if (BabaluConfigurationFactory.Instance.LogErrors) {  	try {  		StringBuilder output = new StringBuilder ();  		output.AppendFormat ("{0}\t{1}\r\n"' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Format (message' args));  		// start at 2' since we want to start at the 3rd position  		for (int i = 2; excp != null; i++) {  			string indent = string.Empty.PadLeft (i' '\t');  			output.AppendFormat ("{0}Exception: {1}\r\n"' indent' excp.Message);  			output.AppendFormat ("{0}Stack Trace: {1}\r\n"' indent' excp.StackTrace.Replace ("\r\n"' string.Format ("\r\n{0}"' indent)));  			excp = excp.InnerException;  		}  		output.AppendLine ();  		_exceptionLogQueue.Enqueue (output.ToString ());  	}  	catch {  		// do no harm in logging  	}  }  
Magic Number,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogException,The following statement contains a magic number: try {  	StringBuilder output = new StringBuilder ();  	output.AppendFormat ("{0}\t{1}\r\n"' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Format (message' args));  	// start at 2' since we want to start at the 3rd position  	for (int i = 2; excp != null; i++) {  		string indent = string.Empty.PadLeft (i' '\t');  		output.AppendFormat ("{0}Exception: {1}\r\n"' indent' excp.Message);  		output.AppendFormat ("{0}Stack Trace: {1}\r\n"' indent' excp.StackTrace.Replace ("\r\n"' string.Format ("\r\n{0}"' indent)));  		excp = excp.InnerException;  	}  	output.AppendLine ();  	_exceptionLogQueue.Enqueue (output.ToString ());  }  catch {  	// do no harm in logging  }  
Magic Number,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogException,The following statement contains a magic number: for (int i = 2; excp != null; i++) {  	string indent = string.Empty.PadLeft (i' '\t');  	output.AppendFormat ("{0}Exception: {1}\r\n"' indent' excp.Message);  	output.AppendFormat ("{0}Stack Trace: {1}\r\n"' indent' excp.StackTrace.Replace ("\r\n"' string.Format ("\r\n{0}"' indent)));  	excp = excp.InnerException;  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: do {  	bytes = input.Read (_rawRead' 0' BufferSize);  	if (bytes != 0) {  		if (headerDone == false) {  			// add all bytes read to the header  			_header.AddRange (_rawRead.Take (bytes));  			// parse the header information  			HeaderPositions match = ParseHeader ();  			// if we read the entire HTTP header process it  			if (match.HeaderEnd != -1) {  				// find the end of the list line  				_firstHeaderLineEnd = match.FirstLineEnd;  				// add any content we may have read into the content buffer based on the header end characters  				_content.AddRange (_header.Skip (match.HeaderEnd));  				// trim the header of any content information  				_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  				headerDone = true;  				// if the header did not contain a content length tag' content is done  				if (match.ContentLength == -1)  					contentDone = true;  				else {  					// get the "real" content length from the header  					int pos = match.ContentLength;  					while (_header [pos] != '\r') {  						char c = (char)_header [pos];  						if (char.IsNumber (c))  							contentLength = ((contentLength * 10) + (c - '0'));  						++pos;  					}  					// see if we have alread read in all the content  					if (contentLength == 0 || _content.Count == contentLength)  						contentDone = true;  				}  				// get misc. header values  				_contentType = ParseHeaderValue (match.ContentType);  				_contentEncoding = ParseHeaderValue (match.ContentEncoding);  				_cacheControl = ParseHeaderValue (match.CacheControl);  				string transferEncoding = ParseHeaderValue (match.TransferEncoding);  				if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  					_transferEncodingChunked = true;  					contentDone = ReadChunkedContent ();  				}  				if (match.Host != -1)  					Host = ParseHeaderValue (match.Host' ':');  				// have logging values  				if (match.UserAgent != -1)  					UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  				if (match.Authorization != -1)  					Authorization = ParseHeaderValue (match.Authorization);  			}  			else if (match.FirstLineEnd != -1 && checkPreHttp) {  				// check pre http 1.1 headers  				string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  					' ''  					'\r''  					'\n'  				}' StringSplitOptions.RemoveEmptyEntries);  				if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  					headerDone = true;  					contentDone = true;  				}  			}  		}  		else {  			// if the header is complete' read the content (if specified in Content-Length)  			_content.AddRange (_rawRead.Take (bytes));  			if (_transferEncodingChunked)  				contentDone = ReadChunkedContent ();  			else  				contentDone = (_content.Count == contentLength);  		}  	}  }  while (bytes != 0 && (headerDone == false || contentDone == false));  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: do {  	bytes = input.Read (_rawRead' 0' BufferSize);  	if (bytes != 0) {  		if (headerDone == false) {  			// add all bytes read to the header  			_header.AddRange (_rawRead.Take (bytes));  			// parse the header information  			HeaderPositions match = ParseHeader ();  			// if we read the entire HTTP header process it  			if (match.HeaderEnd != -1) {  				// find the end of the list line  				_firstHeaderLineEnd = match.FirstLineEnd;  				// add any content we may have read into the content buffer based on the header end characters  				_content.AddRange (_header.Skip (match.HeaderEnd));  				// trim the header of any content information  				_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  				headerDone = true;  				// if the header did not contain a content length tag' content is done  				if (match.ContentLength == -1)  					contentDone = true;  				else {  					// get the "real" content length from the header  					int pos = match.ContentLength;  					while (_header [pos] != '\r') {  						char c = (char)_header [pos];  						if (char.IsNumber (c))  							contentLength = ((contentLength * 10) + (c - '0'));  						++pos;  					}  					// see if we have alread read in all the content  					if (contentLength == 0 || _content.Count == contentLength)  						contentDone = true;  				}  				// get misc. header values  				_contentType = ParseHeaderValue (match.ContentType);  				_contentEncoding = ParseHeaderValue (match.ContentEncoding);  				_cacheControl = ParseHeaderValue (match.CacheControl);  				string transferEncoding = ParseHeaderValue (match.TransferEncoding);  				if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  					_transferEncodingChunked = true;  					contentDone = ReadChunkedContent ();  				}  				if (match.Host != -1)  					Host = ParseHeaderValue (match.Host' ':');  				// have logging values  				if (match.UserAgent != -1)  					UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  				if (match.Authorization != -1)  					Authorization = ParseHeaderValue (match.Authorization);  			}  			else if (match.FirstLineEnd != -1 && checkPreHttp) {  				// check pre http 1.1 headers  				string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  					' ''  					'\r''  					'\n'  				}' StringSplitOptions.RemoveEmptyEntries);  				if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  					headerDone = true;  					contentDone = true;  				}  			}  		}  		else {  			// if the header is complete' read the content (if specified in Content-Length)  			_content.AddRange (_rawRead.Take (bytes));  			if (_transferEncodingChunked)  				contentDone = ReadChunkedContent ();  			else  				contentDone = (_content.Count == contentLength);  		}  	}  }  while (bytes != 0 && (headerDone == false || contentDone == false));  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (bytes != 0) {  	if (headerDone == false) {  		// add all bytes read to the header  		_header.AddRange (_rawRead.Take (bytes));  		// parse the header information  		HeaderPositions match = ParseHeader ();  		// if we read the entire HTTP header process it  		if (match.HeaderEnd != -1) {  			// find the end of the list line  			_firstHeaderLineEnd = match.FirstLineEnd;  			// add any content we may have read into the content buffer based on the header end characters  			_content.AddRange (_header.Skip (match.HeaderEnd));  			// trim the header of any content information  			_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  			headerDone = true;  			// if the header did not contain a content length tag' content is done  			if (match.ContentLength == -1)  				contentDone = true;  			else {  				// get the "real" content length from the header  				int pos = match.ContentLength;  				while (_header [pos] != '\r') {  					char c = (char)_header [pos];  					if (char.IsNumber (c))  						contentLength = ((contentLength * 10) + (c - '0'));  					++pos;  				}  				// see if we have alread read in all the content  				if (contentLength == 0 || _content.Count == contentLength)  					contentDone = true;  			}  			// get misc. header values  			_contentType = ParseHeaderValue (match.ContentType);  			_contentEncoding = ParseHeaderValue (match.ContentEncoding);  			_cacheControl = ParseHeaderValue (match.CacheControl);  			string transferEncoding = ParseHeaderValue (match.TransferEncoding);  			if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  				_transferEncodingChunked = true;  				contentDone = ReadChunkedContent ();  			}  			if (match.Host != -1)  				Host = ParseHeaderValue (match.Host' ':');  			// have logging values  			if (match.UserAgent != -1)  				UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  			if (match.Authorization != -1)  				Authorization = ParseHeaderValue (match.Authorization);  		}  		else if (match.FirstLineEnd != -1 && checkPreHttp) {  			// check pre http 1.1 headers  			string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  				' ''  				'\r''  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  				headerDone = true;  				contentDone = true;  			}  		}  	}  	else {  		// if the header is complete' read the content (if specified in Content-Length)  		_content.AddRange (_rawRead.Take (bytes));  		if (_transferEncodingChunked)  			contentDone = ReadChunkedContent ();  		else  			contentDone = (_content.Count == contentLength);  	}  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (bytes != 0) {  	if (headerDone == false) {  		// add all bytes read to the header  		_header.AddRange (_rawRead.Take (bytes));  		// parse the header information  		HeaderPositions match = ParseHeader ();  		// if we read the entire HTTP header process it  		if (match.HeaderEnd != -1) {  			// find the end of the list line  			_firstHeaderLineEnd = match.FirstLineEnd;  			// add any content we may have read into the content buffer based on the header end characters  			_content.AddRange (_header.Skip (match.HeaderEnd));  			// trim the header of any content information  			_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  			headerDone = true;  			// if the header did not contain a content length tag' content is done  			if (match.ContentLength == -1)  				contentDone = true;  			else {  				// get the "real" content length from the header  				int pos = match.ContentLength;  				while (_header [pos] != '\r') {  					char c = (char)_header [pos];  					if (char.IsNumber (c))  						contentLength = ((contentLength * 10) + (c - '0'));  					++pos;  				}  				// see if we have alread read in all the content  				if (contentLength == 0 || _content.Count == contentLength)  					contentDone = true;  			}  			// get misc. header values  			_contentType = ParseHeaderValue (match.ContentType);  			_contentEncoding = ParseHeaderValue (match.ContentEncoding);  			_cacheControl = ParseHeaderValue (match.CacheControl);  			string transferEncoding = ParseHeaderValue (match.TransferEncoding);  			if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  				_transferEncodingChunked = true;  				contentDone = ReadChunkedContent ();  			}  			if (match.Host != -1)  				Host = ParseHeaderValue (match.Host' ':');  			// have logging values  			if (match.UserAgent != -1)  				UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  			if (match.Authorization != -1)  				Authorization = ParseHeaderValue (match.Authorization);  		}  		else if (match.FirstLineEnd != -1 && checkPreHttp) {  			// check pre http 1.1 headers  			string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  				' ''  				'\r''  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  				headerDone = true;  				contentDone = true;  			}  		}  	}  	else {  		// if the header is complete' read the content (if specified in Content-Length)  		_content.AddRange (_rawRead.Take (bytes));  		if (_transferEncodingChunked)  			contentDone = ReadChunkedContent ();  		else  			contentDone = (_content.Count == contentLength);  	}  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (headerDone == false) {  	// add all bytes read to the header  	_header.AddRange (_rawRead.Take (bytes));  	// parse the header information  	HeaderPositions match = ParseHeader ();  	// if we read the entire HTTP header process it  	if (match.HeaderEnd != -1) {  		// find the end of the list line  		_firstHeaderLineEnd = match.FirstLineEnd;  		// add any content we may have read into the content buffer based on the header end characters  		_content.AddRange (_header.Skip (match.HeaderEnd));  		// trim the header of any content information  		_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  		headerDone = true;  		// if the header did not contain a content length tag' content is done  		if (match.ContentLength == -1)  			contentDone = true;  		else {  			// get the "real" content length from the header  			int pos = match.ContentLength;  			while (_header [pos] != '\r') {  				char c = (char)_header [pos];  				if (char.IsNumber (c))  					contentLength = ((contentLength * 10) + (c - '0'));  				++pos;  			}  			// see if we have alread read in all the content  			if (contentLength == 0 || _content.Count == contentLength)  				contentDone = true;  		}  		// get misc. header values  		_contentType = ParseHeaderValue (match.ContentType);  		_contentEncoding = ParseHeaderValue (match.ContentEncoding);  		_cacheControl = ParseHeaderValue (match.CacheControl);  		string transferEncoding = ParseHeaderValue (match.TransferEncoding);  		if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  			_transferEncodingChunked = true;  			contentDone = ReadChunkedContent ();  		}  		if (match.Host != -1)  			Host = ParseHeaderValue (match.Host' ':');  		// have logging values  		if (match.UserAgent != -1)  			UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  		if (match.Authorization != -1)  			Authorization = ParseHeaderValue (match.Authorization);  	}  	else if (match.FirstLineEnd != -1 && checkPreHttp) {  		// check pre http 1.1 headers  		string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  			' ''  			'\r''  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  			headerDone = true;  			contentDone = true;  		}  	}  }  else {  	// if the header is complete' read the content (if specified in Content-Length)  	_content.AddRange (_rawRead.Take (bytes));  	if (_transferEncodingChunked)  		contentDone = ReadChunkedContent ();  	else  		contentDone = (_content.Count == contentLength);  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (headerDone == false) {  	// add all bytes read to the header  	_header.AddRange (_rawRead.Take (bytes));  	// parse the header information  	HeaderPositions match = ParseHeader ();  	// if we read the entire HTTP header process it  	if (match.HeaderEnd != -1) {  		// find the end of the list line  		_firstHeaderLineEnd = match.FirstLineEnd;  		// add any content we may have read into the content buffer based on the header end characters  		_content.AddRange (_header.Skip (match.HeaderEnd));  		// trim the header of any content information  		_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  		headerDone = true;  		// if the header did not contain a content length tag' content is done  		if (match.ContentLength == -1)  			contentDone = true;  		else {  			// get the "real" content length from the header  			int pos = match.ContentLength;  			while (_header [pos] != '\r') {  				char c = (char)_header [pos];  				if (char.IsNumber (c))  					contentLength = ((contentLength * 10) + (c - '0'));  				++pos;  			}  			// see if we have alread read in all the content  			if (contentLength == 0 || _content.Count == contentLength)  				contentDone = true;  		}  		// get misc. header values  		_contentType = ParseHeaderValue (match.ContentType);  		_contentEncoding = ParseHeaderValue (match.ContentEncoding);  		_cacheControl = ParseHeaderValue (match.CacheControl);  		string transferEncoding = ParseHeaderValue (match.TransferEncoding);  		if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  			_transferEncodingChunked = true;  			contentDone = ReadChunkedContent ();  		}  		if (match.Host != -1)  			Host = ParseHeaderValue (match.Host' ':');  		// have logging values  		if (match.UserAgent != -1)  			UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  		if (match.Authorization != -1)  			Authorization = ParseHeaderValue (match.Authorization);  	}  	else if (match.FirstLineEnd != -1 && checkPreHttp) {  		// check pre http 1.1 headers  		string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  			' ''  			'\r''  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  			headerDone = true;  			contentDone = true;  		}  	}  }  else {  	// if the header is complete' read the content (if specified in Content-Length)  	_content.AddRange (_rawRead.Take (bytes));  	if (_transferEncodingChunked)  		contentDone = ReadChunkedContent ();  	else  		contentDone = (_content.Count == contentLength);  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (match.HeaderEnd != -1) {  	// find the end of the list line  	_firstHeaderLineEnd = match.FirstLineEnd;  	// add any content we may have read into the content buffer based on the header end characters  	_content.AddRange (_header.Skip (match.HeaderEnd));  	// trim the header of any content information  	_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  	headerDone = true;  	// if the header did not contain a content length tag' content is done  	if (match.ContentLength == -1)  		contentDone = true;  	else {  		// get the "real" content length from the header  		int pos = match.ContentLength;  		while (_header [pos] != '\r') {  			char c = (char)_header [pos];  			if (char.IsNumber (c))  				contentLength = ((contentLength * 10) + (c - '0'));  			++pos;  		}  		// see if we have alread read in all the content  		if (contentLength == 0 || _content.Count == contentLength)  			contentDone = true;  	}  	// get misc. header values  	_contentType = ParseHeaderValue (match.ContentType);  	_contentEncoding = ParseHeaderValue (match.ContentEncoding);  	_cacheControl = ParseHeaderValue (match.CacheControl);  	string transferEncoding = ParseHeaderValue (match.TransferEncoding);  	if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  		_transferEncodingChunked = true;  		contentDone = ReadChunkedContent ();  	}  	if (match.Host != -1)  		Host = ParseHeaderValue (match.Host' ':');  	// have logging values  	if (match.UserAgent != -1)  		UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  	if (match.Authorization != -1)  		Authorization = ParseHeaderValue (match.Authorization);  }  else if (match.FirstLineEnd != -1 && checkPreHttp) {  	// check pre http 1.1 headers  	string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  		' ''  		'\r''  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  		headerDone = true;  		contentDone = true;  	}  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (match.HeaderEnd != -1) {  	// find the end of the list line  	_firstHeaderLineEnd = match.FirstLineEnd;  	// add any content we may have read into the content buffer based on the header end characters  	_content.AddRange (_header.Skip (match.HeaderEnd));  	// trim the header of any content information  	_header.RemoveRange (match.HeaderEnd' _header.Count - match.HeaderEnd);  	headerDone = true;  	// if the header did not contain a content length tag' content is done  	if (match.ContentLength == -1)  		contentDone = true;  	else {  		// get the "real" content length from the header  		int pos = match.ContentLength;  		while (_header [pos] != '\r') {  			char c = (char)_header [pos];  			if (char.IsNumber (c))  				contentLength = ((contentLength * 10) + (c - '0'));  			++pos;  		}  		// see if we have alread read in all the content  		if (contentLength == 0 || _content.Count == contentLength)  			contentDone = true;  	}  	// get misc. header values  	_contentType = ParseHeaderValue (match.ContentType);  	_contentEncoding = ParseHeaderValue (match.ContentEncoding);  	_cacheControl = ParseHeaderValue (match.CacheControl);  	string transferEncoding = ParseHeaderValue (match.TransferEncoding);  	if (transferEncoding != null && transferEncoding.IndexOf (_transferEncodingChunkedToken' StringComparison.InvariantCultureIgnoreCase) != -1) {  		_transferEncodingChunked = true;  		contentDone = ReadChunkedContent ();  	}  	if (match.Host != -1)  		Host = ParseHeaderValue (match.Host' ':');  	// have logging values  	if (match.UserAgent != -1)  		UserAgent = log.CsUserAgent = ParseHeaderValue (match.UserAgent);  	if (match.Authorization != -1)  		Authorization = ParseHeaderValue (match.Authorization);  }  else if (match.FirstLineEnd != -1 && checkPreHttp) {  	// check pre http 1.1 headers  	string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  		' ''  		'\r''  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  		headerDone = true;  		contentDone = true;  	}  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (match.ContentLength == -1)  	contentDone = true;  else {  	// get the "real" content length from the header  	int pos = match.ContentLength;  	while (_header [pos] != '\r') {  		char c = (char)_header [pos];  		if (char.IsNumber (c))  			contentLength = ((contentLength * 10) + (c - '0'));  		++pos;  	}  	// see if we have alread read in all the content  	if (contentLength == 0 || _content.Count == contentLength)  		contentDone = true;  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: while (_header [pos] != '\r') {  	char c = (char)_header [pos];  	if (char.IsNumber (c))  		contentLength = ((contentLength * 10) + (c - '0'));  	++pos;  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (char.IsNumber (c))  	contentLength = ((contentLength * 10) + (c - '0'));  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: contentLength = ((contentLength * 10) + (c - '0'));  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (match.FirstLineEnd != -1 && checkPreHttp) {  	// check pre http 1.1 headers  	string[] parts = Encoding.UTF8.GetString (_header.ToArray ()).Split (new char[] {  		' ''  		'\r''  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  		headerDone = true;  		contentDone = true;  	}  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProxyMessage,The following statement contains a magic number: if (parts.Length == 2 && string.Compare (parts [0]' "GET"' true) == 0) {  	headerDone = true;  	contentDone = true;  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProcessChunkedContent,The following statement contains a magic number: for (int i = 0; i < _content.Count; i++) {  	if (_content [i] == _transferEncdingBreakToken [0] && Utility.Match (_content' i' _transferEncdingBreakToken)) {  		int length;  		if (int.TryParse (len.ToString ()' System.Globalization.NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out length)) {  			if (length == 0)  				return true;  			else {  				// 2 because we are on \r\n are on each side and the loop above will also add 1 so minus 1  				int pos = i + length + (_transferEncdingBreakToken.Length * 2) - 1;  				if (content != null)  					content.AddRange (_content.Skip (i + _transferEncdingBreakToken.Length).Take (length));  				if (pos >= _content.Count)  					return false;  				else  					i = pos;  			}  		}  		len.Length = 0;  	}  	else  		len.Append ((char)_content [i]);  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProcessChunkedContent,The following statement contains a magic number: if (_content [i] == _transferEncdingBreakToken [0] && Utility.Match (_content' i' _transferEncdingBreakToken)) {  	int length;  	if (int.TryParse (len.ToString ()' System.Globalization.NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out length)) {  		if (length == 0)  			return true;  		else {  			// 2 because we are on \r\n are on each side and the loop above will also add 1 so minus 1  			int pos = i + length + (_transferEncdingBreakToken.Length * 2) - 1;  			if (content != null)  				content.AddRange (_content.Skip (i + _transferEncdingBreakToken.Length).Take (length));  			if (pos >= _content.Count)  				return false;  			else  				i = pos;  		}  	}  	len.Length = 0;  }  else  	len.Append ((char)_content [i]);  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProcessChunkedContent,The following statement contains a magic number: if (int.TryParse (len.ToString ()' System.Globalization.NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out length)) {  	if (length == 0)  		return true;  	else {  		// 2 because we are on \r\n are on each side and the loop above will also add 1 so minus 1  		int pos = i + length + (_transferEncdingBreakToken.Length * 2) - 1;  		if (content != null)  			content.AddRange (_content.Skip (i + _transferEncdingBreakToken.Length).Take (length));  		if (pos >= _content.Count)  			return false;  		else  			i = pos;  	}  }  
Magic Number,Babalu.rProxy,ProxyMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyMessage.cs,ProcessChunkedContent,The following statement contains a magic number: if (length == 0)  	return true;  else {  	// 2 because we are on \r\n are on each side and the loop above will also add 1 so minus 1  	int pos = i + length + (_transferEncdingBreakToken.Length * 2) - 1;  	if (content != null)  		content.AddRange (_content.Skip (i + _transferEncdingBreakToken.Length).Take (length));  	if (pos >= _content.Count)  		return false;  	else  		i = pos;  }  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (FirstHeaderLine != null) {  	// parse the first line to get header information  	string[] parts = FirstHeaderLine.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length > 0) {  		// method is the first token  		log.CsMethod = parts [0];  		if (parts.Length > 1) {  			// parse the query string  			int index = parts [1].IndexOf ('?');  			if (index == -1)  				log.CsUriStem = parts [1];  			else {  				log.CsUriStem = parts [1].Substring (0' index);  				log.CsUriQuery = parts [1].Substring (index + 1);  			}  			messageHandler.ProcessHeaderLineRequest (log);  			// get the HTTP version if available  			if (parts.Length > 2)  				log.CsVersion = parts [2];  		}  	}  	if (Authorization != null) {  		// get header authorization infromation  		int index = Authorization.IndexOf (_basicAuthorization);  		if (index == 0) {  			// if basic authentication' get un/domain  			log.CsUsername = ProcessUserNameAndPassword (Authorization.Substring (index + _basicAuthorization.Length)' true' log.CsUsername);  		}  	}  }  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (FirstHeaderLine != null) {  	// parse the first line to get header information  	string[] parts = FirstHeaderLine.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length > 0) {  		// method is the first token  		log.CsMethod = parts [0];  		if (parts.Length > 1) {  			// parse the query string  			int index = parts [1].IndexOf ('?');  			if (index == -1)  				log.CsUriStem = parts [1];  			else {  				log.CsUriStem = parts [1].Substring (0' index);  				log.CsUriQuery = parts [1].Substring (index + 1);  			}  			messageHandler.ProcessHeaderLineRequest (log);  			// get the HTTP version if available  			if (parts.Length > 2)  				log.CsVersion = parts [2];  		}  	}  	if (Authorization != null) {  		// get header authorization infromation  		int index = Authorization.IndexOf (_basicAuthorization);  		if (index == 0) {  			// if basic authentication' get un/domain  			log.CsUsername = ProcessUserNameAndPassword (Authorization.Substring (index + _basicAuthorization.Length)' true' log.CsUsername);  		}  	}  }  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (parts.Length > 0) {  	// method is the first token  	log.CsMethod = parts [0];  	if (parts.Length > 1) {  		// parse the query string  		int index = parts [1].IndexOf ('?');  		if (index == -1)  			log.CsUriStem = parts [1];  		else {  			log.CsUriStem = parts [1].Substring (0' index);  			log.CsUriQuery = parts [1].Substring (index + 1);  		}  		messageHandler.ProcessHeaderLineRequest (log);  		// get the HTTP version if available  		if (parts.Length > 2)  			log.CsVersion = parts [2];  	}  }  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (parts.Length > 0) {  	// method is the first token  	log.CsMethod = parts [0];  	if (parts.Length > 1) {  		// parse the query string  		int index = parts [1].IndexOf ('?');  		if (index == -1)  			log.CsUriStem = parts [1];  		else {  			log.CsUriStem = parts [1].Substring (0' index);  			log.CsUriQuery = parts [1].Substring (index + 1);  		}  		messageHandler.ProcessHeaderLineRequest (log);  		// get the HTTP version if available  		if (parts.Length > 2)  			log.CsVersion = parts [2];  	}  }  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (parts.Length > 1) {  	// parse the query string  	int index = parts [1].IndexOf ('?');  	if (index == -1)  		log.CsUriStem = parts [1];  	else {  		log.CsUriStem = parts [1].Substring (0' index);  		log.CsUriQuery = parts [1].Substring (index + 1);  	}  	messageHandler.ProcessHeaderLineRequest (log);  	// get the HTTP version if available  	if (parts.Length > 2)  		log.CsVersion = parts [2];  }  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (parts.Length > 1) {  	// parse the query string  	int index = parts [1].IndexOf ('?');  	if (index == -1)  		log.CsUriStem = parts [1];  	else {  		log.CsUriStem = parts [1].Substring (0' index);  		log.CsUriQuery = parts [1].Substring (index + 1);  	}  	messageHandler.ProcessHeaderLineRequest (log);  	// get the HTTP version if available  	if (parts.Length > 2)  		log.CsVersion = parts [2];  }  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (parts.Length > 2)  	log.CsVersion = parts [2];  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: if (parts.Length > 2)  	log.CsVersion = parts [2];  
Magic Number,Babalu.rProxy,ProxyRequestMessage,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Net\ProxyRequestMessage.cs,ProxyRequestMessage,The following statement contains a magic number: log.CsVersion = parts [2];  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,DoWork,The following statement contains a magic number: if (BabaluConfigurationFactory.Instance.EnablePerfmon) {  	_totalCallTimeCounter.RawValue = GetTotalCallTime (_callTimes);  	if (_lastExceptionsPerMinute >= 60) {  		_exceptionsPerMinuteCounter.RawValue = Interlocked.Exchange (ref _countExceptionsPerMinute' 0);  		_lastExceptionsPerMinute = 0;  	}  	else {  		_exceptionsPerMinuteCounter.RawValue = Interlocked.Read (ref _countExceptionsPerMinute);  		_lastExceptionsPerMinute += _populateInterval;  	}  	_requestsPerSecondCounter.RawValue = Interlocked.Exchange (ref _countRequestPerMinute' 0) / _populateInterval;  }  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,DoWork,The following statement contains a magic number: if (_lastExceptionsPerMinute >= 60) {  	_exceptionsPerMinuteCounter.RawValue = Interlocked.Exchange (ref _countExceptionsPerMinute' 0);  	_lastExceptionsPerMinute = 0;  }  else {  	_exceptionsPerMinuteCounter.RawValue = Interlocked.Read (ref _countExceptionsPerMinute);  	_lastExceptionsPerMinute += _populateInterval;  }  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetTotalCallTime,The following statement contains a magic number: lock (ticks) {  	long total = 0;  	foreach (Guid guid in ticks.Keys) {  		long start = ticks [guid];  		double seconds = TimeSpan.FromTicks (now - start).TotalSeconds;  		if (seconds > (3 * 60))  			longRunningEntries.AppendLine (guid.ToString ());  		total += Convert.ToInt64 (seconds);  	}  	// perhaps log log running processes  	//if (longRunningEntries.Length > 0)  	//    ;  	return total;  }  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetTotalCallTime,The following statement contains a magic number: lock (ticks) {  	long total = 0;  	foreach (Guid guid in ticks.Keys) {  		long start = ticks [guid];  		double seconds = TimeSpan.FromTicks (now - start).TotalSeconds;  		if (seconds > (3 * 60))  			longRunningEntries.AppendLine (guid.ToString ());  		total += Convert.ToInt64 (seconds);  	}  	// perhaps log log running processes  	//if (longRunningEntries.Length > 0)  	//    ;  	return total;  }  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetTotalCallTime,The following statement contains a magic number: foreach (Guid guid in ticks.Keys) {  	long start = ticks [guid];  	double seconds = TimeSpan.FromTicks (now - start).TotalSeconds;  	if (seconds > (3 * 60))  		longRunningEntries.AppendLine (guid.ToString ());  	total += Convert.ToInt64 (seconds);  }  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetTotalCallTime,The following statement contains a magic number: foreach (Guid guid in ticks.Keys) {  	long start = ticks [guid];  	double seconds = TimeSpan.FromTicks (now - start).TotalSeconds;  	if (seconds > (3 * 60))  		longRunningEntries.AppendLine (guid.ToString ());  	total += Convert.ToInt64 (seconds);  }  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetTotalCallTime,The following statement contains a magic number: if (seconds > (3 * 60))  	longRunningEntries.AppendLine (guid.ToString ());  
Magic Number,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetTotalCallTime,The following statement contains a magic number: if (seconds > (3 * 60))  	longRunningEntries.AppendLine (guid.ToString ());  
Missing Default,Babalu.rProxy,Logger,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\Logging\Logger.cs,LogRequest,The following switch statement is missing a default case: switch (field) {  case _fieldDate:  	value = DateTime.Now.ToString ("yyyy-MM-dd");  	break;  case _fieldTime:  	value = DateTime.Now.ToString ("HH:mm:ss");  	break;  case _fieldServerSitename:  	value = _siteName;  	break;  case _fieldServerComputername:  	value = _computerName;  	break;  case _fieldServerIp:  	value = proxyIP;  	break;  case _fieldCsMethod:  	value = request.CsMethod;  	break;  case _fieldCsUriStem:  	value = request.CsUriStem;  	break;  case _fieldCsUriQuery:  	value = request.CsUriQuery;  	break;  case _fieldServerPort:  	value = request.ServerPort;  	break;  case _fieldCsUsername:  	value = request.CsUsername;  	break;  case _fieldClientIp:  	value = request.ClientIp;  	break;  case _fieldCsVersion:  	value = request.CsVersion;  	break;  case _fieldCsUserAgent:  	value = request.CsUserAgent;  	break;  case _fieldScStatus:  	value = request.ScStatus;  	break;  case _fieldScSubstatus:  	value = request.ScSubstatus;  	break;  case _fieldDeviceType:  	value = request.ExternalInfo;  	break;  case _fieldBabaluStatus:  	value = request.BabaluStatus;  	break;  }  
Missing Default,Babalu.rProxy,BabaluCounters,C:\repos\CalypsoSys_Babalu_rProxy\rProxy\PerfMon\BabaluCounters.cs,GetPerfmonStats,The following switch statement is missing a default case: switch (stats [i]) {  case BabaluCounterDescriptions.CurrentRequests:  	value = _currentAllRequestsCounter.RawValue;  	break;  case BabaluCounterDescriptions.TotalCallTime:  	value = _totalCallTimeCounter.RawValue;  	break;  case BabaluCounterDescriptions.ExceptionsPerMinute:  	value = _exceptionsPerMinuteCounter.RawValue;  	break;  case BabaluCounterDescriptions.PendingThreadRequest:  	value = _pendingThreadsCounter.RawValue;  	break;  case BabaluCounterDescriptions.RequestsPerSecond:  	value = _requestsPerSecondCounter.RawValue;  	break;  }  
