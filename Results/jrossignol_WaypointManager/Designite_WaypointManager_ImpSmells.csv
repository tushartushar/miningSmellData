Implementation smell,Namespace,Class,File,Method,Description
Long Method,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The method has 145 lines of code.
Long Method,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The method has 126 lines of code.
Long Method,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The method has 105 lines of code.
Long Method,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The method has 156 lines of code.
Complex Method,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,Cyclomatic complexity of the method is 23
Complex Method,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,Cyclomatic complexity of the method is 16
Complex Method,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,Cyclomatic complexity of the method is 17
Complex Method,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,Cyclomatic complexity of the method is 15
Complex Method,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,Cyclomatic complexity of the method is 8
Complex Method,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,Cyclomatic complexity of the method is 9
Complex Method,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WindowGUI,Cyclomatic complexity of the method is 12
Complex Method,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,Cyclomatic complexity of the method is 9
Complex Method,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,SettingsGUI,Cyclomatic complexity of the method is 18
Long Parameter List,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,DrawWaypoint,The method has 7 parameters. Parameters: targetBody' latitude' longitude' altitude' id' seed' alpha
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,AddWaypoint,The length of the statement  "                wpWindowPos = new Rect((Screen.width - wpWindowPos.width) / 2.0f' (Screen.height - wpWindowPos.height) / 2.0f - 100f' wpWindowPos.width' wpWindowPos.height); " is 157.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,EditWaypoint,The length of the statement  "                wpWindowPos = new Rect((Screen.width - wpWindowPos.width) / 2.0f' (Screen.height - wpWindowPos.height) / 2.0f - 100f' wpWindowPos.width' wpWindowPos.height); " is 157.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,DeleteWaypoint,The length of the statement  "            rmWindowPos = new Rect((Screen.width - rmWindowPos.width) / 2.0f' (Screen.height - rmWindowPos.height) / 2.0f' rmWindowPos.width' rmWindowPos.height); " is 150.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,ShowExportDialog,The length of the statement  "            expWindowPos = new Rect((Screen.width - expWindowPos.width) / 2.0f' (Screen.height - expWindowPos.height) / 2.0f' expWindowPos.width' expWindowPos.height); " is 155.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The length of the statement  "                foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture.Where(t => t.name.StartsWith("Squad/Contracts/Icons/"))) " is 139.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The length of the statement  "                        if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label)) " is 126.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The length of the statement  "            if (GUILayout.Toggle(useTerrainHeight' new GUIContent("Use terrain height for altitude"' "Automatically set the altitude to ground level.")) != useTerrainHeight) " is 161.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The length of the statement  "                if (GUILayout.Button(new GUIContent("Use Active Vessel Location"' "Set the location parameters to that of the currently active vessel."))) " is 138.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The length of the statement  "            if (HighLogic.LoadedScene == GameScenes.FLIGHT && MapView.MapIsEnabled || HighLogic.LoadedScene == GameScenes.TRACKSTATION) " is 123.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,DrawMarker,The length of the statement  "                Util.DrawWaypoint(targetBody' double.Parse(latitude)' double.Parse(longitude)' double.Parse(altitude)' template.id' template.seed); " is 131.
Long Statement,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,PlaceWaypointAtCursor,The length of the statement  "                        QuaternionD.AngleAxis(targetBody.GetLongitude(surfacePoint)' Vector3d.down) * QuaternionD.AngleAxis(targetBody.GetLatitude(surfacePoint)' Vector3d.forward) * Vector3d.right); " is 174.
Long Statement,WaypointManager,CustomWaypoints,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypoints.cs,Import,The length of the statement  "            ScreenMessages.PostScreenMessage("Imported " + count + " waypoint" + (count != 1 ? "s" : "") + " from " + CustomWaypointsFileName' " is 130.
Long Statement,WaypointManager,CustomWaypoints,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypoints.cs,DoExport,The length of the statement  "            ScreenMessages.PostScreenMessage("Exported " + count + " waypoint" + (count != 1 ? "s" : "") + " to " + CustomWaypointsFileName' " is 128.
Long Statement,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetStraightDistance,The length of the statement  "            Vector3 wpPosition = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude); " is 155.
Long Statement,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,TerrainHeight,The length of the statement  "            Vector3d radialVector = new Vector3d(Math.Cos(latRads) * Math.Cos(lonRads)' Math.Sin(latRads)' Math.Cos(latRads) * Math.Sin(lonRads)); " is 134.
Long Statement,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,DrawWaypoint,The length of the statement  "            Vector3 screenPos = camera.WorldToScreenPoint(new Vector3((float)scaledSpacePoint.x' (float)scaledSpacePoint.y' (float)scaledSpacePoint.z)); " is 140.
Long Statement,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,DrawWaypoint,The length of the statement  "            Graphics.DrawTexture(markerRect' GameDatabase.Instance.GetTexture("Squad/Contracts/Icons/marker"' false)' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' new Color(0.5f' 0.5f' 0.5f' 0.5f * (alpha - 0.3f) / 0.7f)); " is 207.
Long Statement,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,DrawWaypoint,The length of the statement  "            Graphics.DrawTexture(iconRect' ContractDefs.sprites[id].texture' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' SystemUtilities.RandomColor(seed' alpha)); " is 149.
Long Statement,WaypointManager,Config,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Config.cs,Load,The length of the statement  "            displayDecimal = configNode.HasValue("displayDecimal") ? Convert.ToBoolean(configNode.GetValue("displayDecimal")) : false; " is 122.
Long Statement,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The length of the statement  "                        Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude); " is 148.
Long Statement,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The length of the statement  "                        wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude); " is 136.
Long Statement,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The length of the statement  "                        double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon)); " is 123.
Long Statement,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The length of the statement  "            foreach (KeyValuePair<Waypoint' WaypointData> p in waypointData.Where(p => p.Value.lastChecked != UnityEngine.Time.fixedTime).ToArray()) " is 136.
Long Statement,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,IsOccluded,The length of the statement  "            // Really quick and dirty calculation for occlusion - use the cosine law to get the angle formed by BPC (body-point-camera). " is 124.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "            string label = wpd.waypoint.name + (wpd.waypoint.isClustered ? (" " + StringUtilities.IntegerToGreek(wpd.waypoint.index)) : ""); " is 128.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "                        float ybase = (Screen.height / 2.0f) - asbRectTransform.position.y + asbRectTransform.sizeDelta.y * GameSettings.UI_SCALE * 0.5f + 4; " is 133.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "            Vector3d localSpacePoint = celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude); " is 157.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "            Vector3 screenPos = PlanetariumCamera.Camera.WorldToScreenPoint(new Vector3((float)scaledSpacePoint.x' (float)scaledSpacePoint.y' (float)scaledSpacePoint.z)); " is 158.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "                Graphics.DrawTexture(markerRect' GameDatabase.Instance.GetTexture("Squad/Contracts/Icons/marker"' false)' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' new Color(0.5f' 0.5f' 0.5f' 0.5f * (wpd.currentAlpha - 0.3f) / 0.7f)); " is 218.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "                if (!Util.IsNavPoint(wpd.waypoint) || !NavWaypoint.fetch.IsBlinking || (int)((Time.fixedTime - (int)Time.fixedTime) * 4) % 2 == 0) " is 130.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "                    Graphics.DrawTexture(iconRect' ContractDefs.sprites[wpd.waypoint.id].texture' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' SystemUtilities.RandomColor(wpd.waypoint.seed' wpd.currentAlpha)); " is 186.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The length of the statement  "                    GUI.Box(new Rect(screenPos.x - width/2.0f' (float)Screen.height - screenPos.y - yoffset' width' height)' label' hintTextStyle); " is 127.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HandleClick,The length of the statement  "            Vector3d localSpacePoint = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.altitude); " is 139.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HandleClick,The length of the statement  "            Vector3 screenPos = PlanetariumCamera.Camera.WorldToScreenPoint(new Vector3((float)scaledSpacePoint.x' (float)scaledSpacePoint.y' (float)scaledSpacePoint.z)); " is 158.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HandleClick,The length of the statement  "                waypointName = wpd.waypoint.name + (wpd.waypoint.isClustered ? (" " + StringUtilities.IntegerToGreek(wpd.waypoint.index)) : ""); " is 128.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HintText,The length of the statement  "            Vector3d localSpacePoint = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.altitude); " is 139.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HintText,The length of the statement  "            Vector3 screenPos = PlanetariumCamera.Camera.WorldToScreenPoint(new Vector3((float)scaledSpacePoint.x' (float)scaledSpacePoint.y' (float)scaledSpacePoint.z)); " is 158.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HintText,The length of the statement  "                string label = wpd.waypoint.name + (wpd.waypoint.isClustered ? (" " + StringUtilities.IntegerToGreek(wpd.waypoint.index)) : ""); " is 128.
Long Statement,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HintText,The length of the statement  "                GUI.Box(new Rect(screenPos.x - width / 2.0f' (float)Screen.height - screenPos.y - yoffset' width' height)' label' hintTextStyle); " is 129.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,Start,The length of the statement  "                var ainfoV = Attribute.GetCustomAttribute(typeof(WaypointManager).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 164.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,LoadConfiguration,The length of the statement  "            GameDatabase.TextureInfo nyan = GameDatabase.Instance.databaseTexture.Where(t => t.name.Contains("WaypointManager/icons/Special/nyan")).FirstOrDefault(); " is 153.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,LoadConfiguration,The length of the statement  "                foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture.Where(t => t.name.StartsWith("Squad/Contracts/Icons/"))) " is 139.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The length of the statement  "                var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 150.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The length of the statement  "                if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label)) " is 130.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The length of the statement  "                            Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1); " is 125.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The length of the statement  "                    if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label)) " is 122.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The length of the statement  "            GUILayout.Label(name' labelStyle' GUILayout.Height(16)' GUILayout.Width(GUI_WIDTH - 240)' GUILayout.ExpandWidth(false)); " is 120.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The length of the statement  "            GUILayout.Label("Lat: " + Util.FormatCoordinate(wpd.waypoint.latitude' true)' labelStyle' GUILayout.Height(16)' GUILayout.Width(GUI_WIDTH / 2.0f - 72.0f)' GUILayout.ExpandWidth(false)); " is 185.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The length of the statement  "            GUILayout.Label("Lon: " + Util.FormatCoordinate(wpd.waypoint.longitude' false)' labelStyle' GUILayout.Height(16)' GUILayout.ExpandWidth(false)); " is 144.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,ContractIcon,The length of the statement  "            return new GUIContent(texture' wpd.waypoint.contractReference != null ? wpd.waypoint.contractReference.Title : "No contract"); " is 126.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,SettingsGUI,The length of the statement  "            GUIContent guiContent = new GUIContent("Lateral"' "Calculates distance as the horizontal distance only.  Useful if you're looking to hit a landing spot exactly."); " is 163.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,SettingsGUI,The length of the statement  "            guiContent = new GUIContent("Compromise"' "Uses lateral distance if the vessel and waypoint altitude are relatively close' otherwise uses straight line distance."); " is 164.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,SettingsGUI,The length of the statement  "            if (GUILayout.Button(new GUIContent("Export Custom Waypoints"' "Exports the custom waypoints to GameData/WaypointManager/CustomWaypoints.cfg"))) " is 144.
Long Statement,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,SettingsGUI,The length of the statement  "            if (GUILayout.Button(new GUIContent("Import Custom Waypoints"' "Imports the custom waypoints from GameData/WaypointManager/CustomWaypoints.cfg"))) " is 146.
Complex Conditional,WaypointManager,CustomWaypoints,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypoints.cs,Import,The conditional expression  "wp.celestialName == celestialName &&                          Math.Abs(wp.latitude - latitude) < 0.00001 &&                          Math.Abs(wp.longitude - longitude) < 0.00001 &&                          Math.Abs(wp.altitude - altitude) < 0.1"  is complex.
Complex Conditional,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The conditional expression  "hours != 0 || minutes != 0 || seconds != 0 || output.Length == 0"  is complex.
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (colors == null)              {                  List<GUIContent> content = new List<GUIContent>();                    foreach (int seed in seeds)                  {                      Color color = SystemUtilities.RandomColor(seed' 1.0f' 1.0f' 1.0f);                      Texture2D texture = new Texture2D(6' 12' TextureFormat.RGBA32' false);                        Color[] pixels = new Color[6 * 16];                      for (int i = 0; i < pixels.Length; i++)                      {                          pixels[i] = color;                      }                      texture.SetPixels(pixels);                      texture.Compress(true);                        content.Add(new GUIContent(texture));                  }                    colors = content.ToArray();                    // Set the styles used                  colorWheelStyle = new GUIStyle(GUI.skin.label);                  colorWheelStyle.padding = new RectOffset(0' 0' 2' 2);                  colorWheelStyle.margin = new RectOffset(0' -1' 0' 0);                    colorLabelStyle = new GUIStyle(GUI.skin.label);                  colorLabelStyle.padding = new RectOffset(0' 0' 0' 0);                  colorLabelStyle.margin = new RectOffset(4' 4' 6' 6);                  colorLabelStyle.stretchWidth = true;                  colorLabelStyle.fixedHeight = 12;                    disabledText = new GUIStyle(GUI.skin.textField);                  disabledText.normal.textColor = Color.gray;              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,OnGUI,The following statement contains a magic number: if (WaypointManager.Instance != null && WaypointManager.Instance.visible)              {                  if (windowMode != WindowMode.None && windowMode != WindowMode.Delete)                  {                      wpWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          wpWindowPos'                          WindowGUI'                          windowMode.ToString() + " Waypoint"'                          GUILayout.Height(1)' GUILayout.ExpandHeight(true));                        // Add the close icon                      if (GUI.Button(new Rect(wpWindowPos.xMax - 18' wpWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                        if (showIconPicker)                      {                          // Default iconPicker position                          if (iconPickerPosition.xMin == iconPickerPosition.xMax)                          {                              iconPickerPosition = new Rect((Screen.width - ICON_PICKER_WIDTH) / 2.0f' wpWindowPos.yMax' ICON_PICKER_WIDTH' 1);                          }                            iconPickerPosition = GUILayout.Window(                              typeof(WaypointManager).FullName.GetHashCode() + 3'                              iconPickerPosition'                              IconPickerGUI'                              "Icon Selector");                            // Add the close icon                          if (GUI.Button(new Rect(iconPickerPosition.xMax - 18' iconPickerPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                          {                              showIconPicker = false;                          }                      }                        // Reset the position of the iconPicker window                      if (!showIconPicker)                      {                          iconPickerPosition.xMax = iconPickerPosition.xMin;                      }                  }                  else if (windowMode == WindowMode.Delete)                  {                      rmWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 2'                          rmWindowPos'                          DeleteGUI'                          windowMode.ToString() + " Waypoint");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          windowMode = WindowMode.None;                      }                  }                    if (showExportDialog)                  {                      expWindowPos = GUILayout.Window(                          typeof(WaypointManager).FullName.GetHashCode() + 3'                          expWindowPos'                          ExportGUI'                          "Overwrite export file?");                        // Add the close icon                      if (GUI.Button(new Rect(expWindowPos.xMax - 18' expWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          showExportDialog = false;                      }                  }                    if (mapLocationMode)                  {                      PlaceWaypointAtCursor();                        // Lock the waypoint if the user clicks                      if (Event.current.type == EventType.MouseUp && Event.current.button == 0)                      {                          mapLocationMode = false;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: GUILayout.Label("Latitude"' GUILayout.Width(68));
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: GUILayout.Label("Longitude"' GUILayout.Width(68));
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: val = GUILayout.TextField(latitude' GUILayout.Width(140));
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: val = GUILayout.TextField(longitude' GUILayout.Width(140));
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: GUILayout.Space(80);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: GUILayout.Label("Altitude"' GUILayout.Width(72));
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,WindowGUI,The following statement contains a magic number: val = GUILayout.TextField(altitude' useTerrainHeight ? disabledText : GUI.skin.textField' GUILayout.Width(140));
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,IconPickerGUI,The following statement contains a magic number: selectedIcon = GUILayout.SelectionGrid(selectedIcon' icons' 4);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,IconPickerGUI,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,IconPickerGUI,The following statement contains a magic number: GUILayout.Label(colors[selectedColor]' colorLabelStyle' GUILayout.Width(288));
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,IconPickerGUI,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,IconPickerGUI,The following statement contains a magic number: foreach (GUIContent color in colors)              {                  GUILayout.Label(color' colorWheelStyle' GUILayout.Width(6));              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,IconPickerGUI,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,IconPickerGUI,The following statement contains a magic number: selectedColor = (int)GUILayout.HorizontalSlider((int)selectedColor' 0' 47);
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,PlaceWaypointAtCursor,The following statement contains a magic number: while (loops < 50)              {                  Vector3d relSurfacePosition;                  if (PQS.LineSphereIntersection(bodyToOrigin' mouseRay.direction' curRadius' out relSurfacePosition))                  {                      var surfacePoint = targetBody.position + relSurfacePosition;                      double alt = targetBody.pqsController.GetSurfaceHeight(                          QuaternionD.AngleAxis(targetBody.GetLongitude(surfacePoint)' Vector3d.down) * QuaternionD.AngleAxis(targetBody.GetLatitude(surfacePoint)' Vector3d.forward) * Vector3d.right);                      double error = Math.Abs(curRadius - alt);                      if (error < (targetBody.pqsController.radiusMax - targetBody.pqsController.radiusMin) / 100)                      {                          latitude = targetBody.GetLatitude(surfacePoint).ToString();                          longitude = targetBody.GetLongitude(surfacePoint).ToString();                          return;                      }                      else                      {                          lastRadius = curRadius;                          curRadius = alt;                          loops++;                      }                  }                  else                  {                      if (loops == 0)                      {                          break;                      }                      // Went too low' needs to try higher                      else                      {                          curRadius = (lastRadius * 9 + curRadius) / 10;                          loops++;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,PlaceWaypointAtCursor,The following statement contains a magic number: while (loops < 50)              {                  Vector3d relSurfacePosition;                  if (PQS.LineSphereIntersection(bodyToOrigin' mouseRay.direction' curRadius' out relSurfacePosition))                  {                      var surfacePoint = targetBody.position + relSurfacePosition;                      double alt = targetBody.pqsController.GetSurfaceHeight(                          QuaternionD.AngleAxis(targetBody.GetLongitude(surfacePoint)' Vector3d.down) * QuaternionD.AngleAxis(targetBody.GetLatitude(surfacePoint)' Vector3d.forward) * Vector3d.right);                      double error = Math.Abs(curRadius - alt);                      if (error < (targetBody.pqsController.radiusMax - targetBody.pqsController.radiusMin) / 100)                      {                          latitude = targetBody.GetLatitude(surfacePoint).ToString();                          longitude = targetBody.GetLongitude(surfacePoint).ToString();                          return;                      }                      else                      {                          lastRadius = curRadius;                          curRadius = alt;                          loops++;                      }                  }                  else                  {                      if (loops == 0)                      {                          break;                      }                      // Went too low' needs to try higher                      else                      {                          curRadius = (lastRadius * 9 + curRadius) / 10;                          loops++;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,PlaceWaypointAtCursor,The following statement contains a magic number: while (loops < 50)              {                  Vector3d relSurfacePosition;                  if (PQS.LineSphereIntersection(bodyToOrigin' mouseRay.direction' curRadius' out relSurfacePosition))                  {                      var surfacePoint = targetBody.position + relSurfacePosition;                      double alt = targetBody.pqsController.GetSurfaceHeight(                          QuaternionD.AngleAxis(targetBody.GetLongitude(surfacePoint)' Vector3d.down) * QuaternionD.AngleAxis(targetBody.GetLatitude(surfacePoint)' Vector3d.forward) * Vector3d.right);                      double error = Math.Abs(curRadius - alt);                      if (error < (targetBody.pqsController.radiusMax - targetBody.pqsController.radiusMin) / 100)                      {                          latitude = targetBody.GetLatitude(surfacePoint).ToString();                          longitude = targetBody.GetLongitude(surfacePoint).ToString();                          return;                      }                      else                      {                          lastRadius = curRadius;                          curRadius = alt;                          loops++;                      }                  }                  else                  {                      if (loops == 0)                      {                          break;                      }                      // Went too low' needs to try higher                      else                      {                          curRadius = (lastRadius * 9 + curRadius) / 10;                          loops++;                      }                  }              }
Magic Number,WaypointManager,CustomWaypointGUI,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypointGUI.cs,PlaceWaypointAtCursor,The following statement contains a magic number: while (loops < 50)              {                  Vector3d relSurfacePosition;                  if (PQS.LineSphereIntersection(bodyToOrigin' mouseRay.direction' curRadius' out relSurfacePosition))                  {                      var surfacePoint = targetBody.position + relSurfacePosition;                      double alt = targetBody.pqsController.GetSurfaceHeight(                          QuaternionD.AngleAxis(targetBody.GetLongitude(surfacePoint)' Vector3d.down) * QuaternionD.AngleAxis(targetBody.GetLatitude(surfacePoint)' Vector3d.forward) * Vector3d.right);                      double error = Math.Abs(curRadius - alt);                      if (error < (targetBody.pqsController.radiusMax - targetBody.pqsController.radiusMin) / 100)                      {                          latitude = targetBody.GetLatitude(surfacePoint).ToString();                          longitude = targetBody.GetLongitude(surfacePoint).ToString();                          return;                      }                      else                      {                          lastRadius = curRadius;                          curRadius = alt;                          loops++;                      }                  }                  else                  {                      if (loops == 0)                      {                          break;                      }                      // Went too low' needs to try higher                      else                      {                          curRadius = (lastRadius * 9 + curRadius) / 10;                          loops++;                      }                  }              }
Magic Number,WaypointManager,CustomWaypoints,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypoints.cs,Import,The following statement contains a magic number: foreach (ConfigNode child in configNode.GetNodes("WAYPOINT"))              {                  bool isDuplicate = false;                  string celestialName = child.GetValue("celestialName");                  double latitude = double.Parse(child.GetValue("latitude"));                  double longitude = double.Parse(child.GetValue("longitude"));                  double altitude = double.Parse(child.GetValue("altitude"));                    foreach (Waypoint wp in FinePrint.WaypointManager.Instance().Waypoints)                  {                      if (wp.celestialName == celestialName &&                          Math.Abs(wp.latitude - latitude) < 0.00001 &&                          Math.Abs(wp.longitude - longitude) < 0.00001 &&                          Math.Abs(wp.altitude - altitude) < 0.1)                      {                          isDuplicate = true;                          break;                      }                  }                    if (!isDuplicate)                  {                      master.AddNode(child);                  }              }
Magic Number,WaypointManager,CustomWaypoints,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypoints.cs,Import,The following statement contains a magic number: foreach (ConfigNode child in configNode.GetNodes("WAYPOINT"))              {                  bool isDuplicate = false;                  string celestialName = child.GetValue("celestialName");                  double latitude = double.Parse(child.GetValue("latitude"));                  double longitude = double.Parse(child.GetValue("longitude"));                  double altitude = double.Parse(child.GetValue("altitude"));                    foreach (Waypoint wp in FinePrint.WaypointManager.Instance().Waypoints)                  {                      if (wp.celestialName == celestialName &&                          Math.Abs(wp.latitude - latitude) < 0.00001 &&                          Math.Abs(wp.longitude - longitude) < 0.00001 &&                          Math.Abs(wp.altitude - altitude) < 0.1)                      {                          isDuplicate = true;                          break;                      }                  }                    if (!isDuplicate)                  {                      master.AddNode(child);                  }              }
Magic Number,WaypointManager,CustomWaypoints,C:\repos\jrossignol_WaypointManager\source\WaypointManager\CustomWaypoints.cs,Import,The following statement contains a magic number: foreach (ConfigNode child in configNode.GetNodes("WAYPOINT"))              {                  bool isDuplicate = false;                  string celestialName = child.GetValue("celestialName");                  double latitude = double.Parse(child.GetValue("latitude"));                  double longitude = double.Parse(child.GetValue("longitude"));                  double altitude = double.Parse(child.GetValue("altitude"));                    foreach (Waypoint wp in FinePrint.WaypointManager.Instance().Waypoints)                  {                      if (wp.celestialName == celestialName &&                          Math.Abs(wp.latitude - latitude) < 0.00001 &&                          Math.Abs(wp.longitude - longitude) < 0.00001 &&                          Math.Abs(wp.altitude - altitude) < 0.1)                      {                          isDuplicate = true;                          break;                      }                  }                    if (!isDuplicate)                  {                      master.AddNode(child);                  }              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetLateralDistance,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (v.latitude - wpd.waypoint.latitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetLateralDistance,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (v.latitude - wpd.waypoint.latitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetLateralDistance,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (v.longitude - wpd.waypoint.longitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetLateralDistance,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (v.longitude - wpd.waypoint.longitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetLateralDistance,The following statement contains a magic number: double cos1 = Math.Cos(Math.PI / 180.0 * wpd.waypoint.latitude);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetLateralDistance,The following statement contains a magic number: double cos2 = Math.Cos(Math.PI / 180.0 * v.latitude);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetLateralDistance,The following statement contains a magic number: return 2 * (celestialBody.Radius + wpd.waypoint.height + wpd.waypoint.altitude) *                  Math.Asin(Math.Sqrt(sin1 * sin1 + cos1 * cos2 * sin2 * sin2));
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (v.latitude - wpd.waypoint.latitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (v.latitude - wpd.waypoint.latitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (v.longitude - wpd.waypoint.longitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (v.longitude - wpd.waypoint.longitude) / 2);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: double cos1 = Math.Cos(Math.PI / 180.0 * wpd.waypoint.latitude);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: double cos2 = Math.Cos(Math.PI / 180.0 * v.latitude);
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: double lateralDist = 2 * (celestialBody.Radius + wpd.waypoint.height + wpd.waypoint.altitude) *                  Math.Asin(Math.Sqrt(sin1 * sin1 + cos1 * cos2 * sin2 * sin2));
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: if (Config.distanceCalcMethod == Config.DistanceCalcMethod.LATERAL || heightDist <= lateralDist / 2.0)              {                  return lateralDist;              }              else              {                  // Get the ratio to use in our formula                  double x = (heightDist - lateralDist / 2.0) / lateralDist;                    // x / (x + 1) starts at 0 when x = 0' and increases to 1                  return (x / (x + 1)) * heightDist + lateralDist;              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,GetDistanceToWaypoint,The following statement contains a magic number: if (Config.distanceCalcMethod == Config.DistanceCalcMethod.LATERAL || heightDist <= lateralDist / 2.0)              {                  return lateralDist;              }              else              {                  // Get the ratio to use in our formula                  double x = (heightDist - lateralDist / 2.0) / lateralDist;                    // x / (x + 1) starts at 0 when x = 0' and increases to 1                  return (x / (x + 1)) * heightDist + lateralDist;              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,PrintDistance,The following statement contains a magic number: while (unit < 4 && distance >= 10000.0)              {                  distance /= 1000.0;                  unit++;              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,PrintDistance,The following statement contains a magic number: while (unit < 4 && distance >= 10000.0)              {                  distance /= 1000.0;                  unit++;              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,PrintDistance,The following statement contains a magic number: while (unit < 4 && distance >= 10000.0)              {                  distance /= 1000.0;                  unit++;              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,FormatCoordinate,The following statement contains a magic number: if (Config.displayDecimal)              {                  return coord.ToString("F3") + " °";              }              else              {                  double acoord = Math.Abs(coord);                  int d = (int)acoord;                  int m = (int)Math.Abs((acoord - d) * 60.0);                  int s = (int)Math.Abs(((acoord - d) * 60.0 - m) * 60.0);                    string direction = coord > 0.0 ? (islatitude ? "N" : "E") : (islatitude ? "S" : "W");                    return string.Format("{0}° {1}' {2}\" {3}"' d' m' s' direction);              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,FormatCoordinate,The following statement contains a magic number: if (Config.displayDecimal)              {                  return coord.ToString("F3") + " °";              }              else              {                  double acoord = Math.Abs(coord);                  int d = (int)acoord;                  int m = (int)Math.Abs((acoord - d) * 60.0);                  int s = (int)Math.Abs(((acoord - d) * 60.0 - m) * 60.0);                    string direction = coord > 0.0 ? (islatitude ? "N" : "E") : (islatitude ? "S" : "W");                    return string.Format("{0}° {1}' {2}\" {3}"' d' m' s' direction);              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,FormatCoordinate,The following statement contains a magic number: if (Config.displayDecimal)              {                  return coord.ToString("F3") + " °";              }              else              {                  double acoord = Math.Abs(coord);                  int d = (int)acoord;                  int m = (int)Math.Abs((acoord - d) * 60.0);                  int s = (int)Math.Abs(((acoord - d) * 60.0 - m) * 60.0);                    string direction = coord > 0.0 ? (islatitude ? "N" : "E") : (islatitude ? "S" : "W");                    return string.Format("{0}° {1}' {2}\" {3}"' d' m' s' direction);              }
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,TerrainHeight,The following statement contains a magic number: double latRads = Math.PI / 180.0 * latitude;
Magic Number,WaypointManager,Util,C:\repos\jrossignol_WaypointManager\source\WaypointManager\Util.cs,TerrainHeight,The following statement contains a magic number: double lonRads = Math.PI / 180.0 * longitude;
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The following statement contains a magic number: foreach (Waypoint w in FinePrint.WaypointManager.Instance().Waypoints)              {                  if (w != null && w.isNavigatable)                  {                      WaypointData wpd;                        // Update values that are only cached once                      if (!waypointData.ContainsKey(w))                      {                          wpd = new WaypointData();                          wpd.waypoint = w;                          wpd.celestialBody = Util.GetBody(w.celestialName);                            // Shouldn't normally happens' but who knows (Util.GetBody will throw a warning)                          if (wpd.celestialBody == null)                          {                              continue;                          }                            // Figure out the terrain height                          wpd.waypoint.height = Util.WaypointHeight(w' wpd.celestialBody);                            // Add to waypoint data                          waypointData[w] = wpd;                          changed = true;                      }                      else                      {                          wpd = waypointData[w];                      }                        // Update values that change every frame                      wpd.lastChecked = UnityEngine.Time.fixedTime;                      if (FlightGlobals.ActiveVessel != null && wpd.celestialBody == FlightGlobals.ActiveVessel.mainBody)                      {                          wpd.distanceToActive = Util.GetDistanceToWaypoint(wpd);                            // Get information about whether the waypoint is occluded                          Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude);                          wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude);                            Vector3 vHeading = FlightGlobals.ActiveVessel.transform.up;                            double vesselLat = FlightGlobals.ActiveVessel.latitude / 180.0 * Math.PI;                          double vesselLon = FlightGlobals.ActiveVessel.longitude / 180.0 * Math.PI;                          double wpLat = wpd.waypoint.latitude / 180.0 * Math.PI;                          double wpLon = wpd.waypoint.longitude / 180.0 * Math.PI;                            double y = Math.Sin(wpLon - vesselLon) * Math.Cos(wpLat);                          double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon));                          double requiredHeading = Math.Atan2(y' x) * 180.0 / Math.PI;                          wpd.heading = (requiredHeading + 360.0) % 360.0;                      }                  }              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The following statement contains a magic number: foreach (Waypoint w in FinePrint.WaypointManager.Instance().Waypoints)              {                  if (w != null && w.isNavigatable)                  {                      WaypointData wpd;                        // Update values that are only cached once                      if (!waypointData.ContainsKey(w))                      {                          wpd = new WaypointData();                          wpd.waypoint = w;                          wpd.celestialBody = Util.GetBody(w.celestialName);                            // Shouldn't normally happens' but who knows (Util.GetBody will throw a warning)                          if (wpd.celestialBody == null)                          {                              continue;                          }                            // Figure out the terrain height                          wpd.waypoint.height = Util.WaypointHeight(w' wpd.celestialBody);                            // Add to waypoint data                          waypointData[w] = wpd;                          changed = true;                      }                      else                      {                          wpd = waypointData[w];                      }                        // Update values that change every frame                      wpd.lastChecked = UnityEngine.Time.fixedTime;                      if (FlightGlobals.ActiveVessel != null && wpd.celestialBody == FlightGlobals.ActiveVessel.mainBody)                      {                          wpd.distanceToActive = Util.GetDistanceToWaypoint(wpd);                            // Get information about whether the waypoint is occluded                          Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude);                          wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude);                            Vector3 vHeading = FlightGlobals.ActiveVessel.transform.up;                            double vesselLat = FlightGlobals.ActiveVessel.latitude / 180.0 * Math.PI;                          double vesselLon = FlightGlobals.ActiveVessel.longitude / 180.0 * Math.PI;                          double wpLat = wpd.waypoint.latitude / 180.0 * Math.PI;                          double wpLon = wpd.waypoint.longitude / 180.0 * Math.PI;                            double y = Math.Sin(wpLon - vesselLon) * Math.Cos(wpLat);                          double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon));                          double requiredHeading = Math.Atan2(y' x) * 180.0 / Math.PI;                          wpd.heading = (requiredHeading + 360.0) % 360.0;                      }                  }              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The following statement contains a magic number: foreach (Waypoint w in FinePrint.WaypointManager.Instance().Waypoints)              {                  if (w != null && w.isNavigatable)                  {                      WaypointData wpd;                        // Update values that are only cached once                      if (!waypointData.ContainsKey(w))                      {                          wpd = new WaypointData();                          wpd.waypoint = w;                          wpd.celestialBody = Util.GetBody(w.celestialName);                            // Shouldn't normally happens' but who knows (Util.GetBody will throw a warning)                          if (wpd.celestialBody == null)                          {                              continue;                          }                            // Figure out the terrain height                          wpd.waypoint.height = Util.WaypointHeight(w' wpd.celestialBody);                            // Add to waypoint data                          waypointData[w] = wpd;                          changed = true;                      }                      else                      {                          wpd = waypointData[w];                      }                        // Update values that change every frame                      wpd.lastChecked = UnityEngine.Time.fixedTime;                      if (FlightGlobals.ActiveVessel != null && wpd.celestialBody == FlightGlobals.ActiveVessel.mainBody)                      {                          wpd.distanceToActive = Util.GetDistanceToWaypoint(wpd);                            // Get information about whether the waypoint is occluded                          Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude);                          wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude);                            Vector3 vHeading = FlightGlobals.ActiveVessel.transform.up;                            double vesselLat = FlightGlobals.ActiveVessel.latitude / 180.0 * Math.PI;                          double vesselLon = FlightGlobals.ActiveVessel.longitude / 180.0 * Math.PI;                          double wpLat = wpd.waypoint.latitude / 180.0 * Math.PI;                          double wpLon = wpd.waypoint.longitude / 180.0 * Math.PI;                            double y = Math.Sin(wpLon - vesselLon) * Math.Cos(wpLat);                          double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon));                          double requiredHeading = Math.Atan2(y' x) * 180.0 / Math.PI;                          wpd.heading = (requiredHeading + 360.0) % 360.0;                      }                  }              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The following statement contains a magic number: foreach (Waypoint w in FinePrint.WaypointManager.Instance().Waypoints)              {                  if (w != null && w.isNavigatable)                  {                      WaypointData wpd;                        // Update values that are only cached once                      if (!waypointData.ContainsKey(w))                      {                          wpd = new WaypointData();                          wpd.waypoint = w;                          wpd.celestialBody = Util.GetBody(w.celestialName);                            // Shouldn't normally happens' but who knows (Util.GetBody will throw a warning)                          if (wpd.celestialBody == null)                          {                              continue;                          }                            // Figure out the terrain height                          wpd.waypoint.height = Util.WaypointHeight(w' wpd.celestialBody);                            // Add to waypoint data                          waypointData[w] = wpd;                          changed = true;                      }                      else                      {                          wpd = waypointData[w];                      }                        // Update values that change every frame                      wpd.lastChecked = UnityEngine.Time.fixedTime;                      if (FlightGlobals.ActiveVessel != null && wpd.celestialBody == FlightGlobals.ActiveVessel.mainBody)                      {                          wpd.distanceToActive = Util.GetDistanceToWaypoint(wpd);                            // Get information about whether the waypoint is occluded                          Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude);                          wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude);                            Vector3 vHeading = FlightGlobals.ActiveVessel.transform.up;                            double vesselLat = FlightGlobals.ActiveVessel.latitude / 180.0 * Math.PI;                          double vesselLon = FlightGlobals.ActiveVessel.longitude / 180.0 * Math.PI;                          double wpLat = wpd.waypoint.latitude / 180.0 * Math.PI;                          double wpLon = wpd.waypoint.longitude / 180.0 * Math.PI;                            double y = Math.Sin(wpLon - vesselLon) * Math.Cos(wpLat);                          double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon));                          double requiredHeading = Math.Atan2(y' x) * 180.0 / Math.PI;                          wpd.heading = (requiredHeading + 360.0) % 360.0;                      }                  }              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The following statement contains a magic number: foreach (Waypoint w in FinePrint.WaypointManager.Instance().Waypoints)              {                  if (w != null && w.isNavigatable)                  {                      WaypointData wpd;                        // Update values that are only cached once                      if (!waypointData.ContainsKey(w))                      {                          wpd = new WaypointData();                          wpd.waypoint = w;                          wpd.celestialBody = Util.GetBody(w.celestialName);                            // Shouldn't normally happens' but who knows (Util.GetBody will throw a warning)                          if (wpd.celestialBody == null)                          {                              continue;                          }                            // Figure out the terrain height                          wpd.waypoint.height = Util.WaypointHeight(w' wpd.celestialBody);                            // Add to waypoint data                          waypointData[w] = wpd;                          changed = true;                      }                      else                      {                          wpd = waypointData[w];                      }                        // Update values that change every frame                      wpd.lastChecked = UnityEngine.Time.fixedTime;                      if (FlightGlobals.ActiveVessel != null && wpd.celestialBody == FlightGlobals.ActiveVessel.mainBody)                      {                          wpd.distanceToActive = Util.GetDistanceToWaypoint(wpd);                            // Get information about whether the waypoint is occluded                          Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude);                          wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude);                            Vector3 vHeading = FlightGlobals.ActiveVessel.transform.up;                            double vesselLat = FlightGlobals.ActiveVessel.latitude / 180.0 * Math.PI;                          double vesselLon = FlightGlobals.ActiveVessel.longitude / 180.0 * Math.PI;                          double wpLat = wpd.waypoint.latitude / 180.0 * Math.PI;                          double wpLon = wpd.waypoint.longitude / 180.0 * Math.PI;                            double y = Math.Sin(wpLon - vesselLon) * Math.Cos(wpLat);                          double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon));                          double requiredHeading = Math.Atan2(y' x) * 180.0 / Math.PI;                          wpd.heading = (requiredHeading + 360.0) % 360.0;                      }                  }              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The following statement contains a magic number: foreach (Waypoint w in FinePrint.WaypointManager.Instance().Waypoints)              {                  if (w != null && w.isNavigatable)                  {                      WaypointData wpd;                        // Update values that are only cached once                      if (!waypointData.ContainsKey(w))                      {                          wpd = new WaypointData();                          wpd.waypoint = w;                          wpd.celestialBody = Util.GetBody(w.celestialName);                            // Shouldn't normally happens' but who knows (Util.GetBody will throw a warning)                          if (wpd.celestialBody == null)                          {                              continue;                          }                            // Figure out the terrain height                          wpd.waypoint.height = Util.WaypointHeight(w' wpd.celestialBody);                            // Add to waypoint data                          waypointData[w] = wpd;                          changed = true;                      }                      else                      {                          wpd = waypointData[w];                      }                        // Update values that change every frame                      wpd.lastChecked = UnityEngine.Time.fixedTime;                      if (FlightGlobals.ActiveVessel != null && wpd.celestialBody == FlightGlobals.ActiveVessel.mainBody)                      {                          wpd.distanceToActive = Util.GetDistanceToWaypoint(wpd);                            // Get information about whether the waypoint is occluded                          Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude);                          wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude);                            Vector3 vHeading = FlightGlobals.ActiveVessel.transform.up;                            double vesselLat = FlightGlobals.ActiveVessel.latitude / 180.0 * Math.PI;                          double vesselLon = FlightGlobals.ActiveVessel.longitude / 180.0 * Math.PI;                          double wpLat = wpd.waypoint.latitude / 180.0 * Math.PI;                          double wpLon = wpd.waypoint.longitude / 180.0 * Math.PI;                            double y = Math.Sin(wpLon - vesselLon) * Math.Cos(wpLat);                          double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon));                          double requiredHeading = Math.Atan2(y' x) * 180.0 / Math.PI;                          wpd.heading = (requiredHeading + 360.0) % 360.0;                      }                  }              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,CacheWaypointData,The following statement contains a magic number: foreach (Waypoint w in FinePrint.WaypointManager.Instance().Waypoints)              {                  if (w != null && w.isNavigatable)                  {                      WaypointData wpd;                        // Update values that are only cached once                      if (!waypointData.ContainsKey(w))                      {                          wpd = new WaypointData();                          wpd.waypoint = w;                          wpd.celestialBody = Util.GetBody(w.celestialName);                            // Shouldn't normally happens' but who knows (Util.GetBody will throw a warning)                          if (wpd.celestialBody == null)                          {                              continue;                          }                            // Figure out the terrain height                          wpd.waypoint.height = Util.WaypointHeight(w' wpd.celestialBody);                            // Add to waypoint data                          waypointData[w] = wpd;                          changed = true;                      }                      else                      {                          wpd = waypointData[w];                      }                        // Update values that change every frame                      wpd.lastChecked = UnityEngine.Time.fixedTime;                      if (FlightGlobals.ActiveVessel != null && wpd.celestialBody == FlightGlobals.ActiveVessel.mainBody)                      {                          wpd.distanceToActive = Util.GetDistanceToWaypoint(wpd);                            // Get information about whether the waypoint is occluded                          Vector3 pos = wpd.celestialBody.GetWorldSurfacePosition(wpd.waypoint.latitude' wpd.waypoint.longitude' wpd.waypoint.height + wpd.waypoint.altitude);                          wpd.isOccluded = IsOccluded(wpd.celestialBody' FlightCamera.fetch.transform.position' pos' wpd.waypoint.height + wpd.waypoint.altitude);                            Vector3 vHeading = FlightGlobals.ActiveVessel.transform.up;                            double vesselLat = FlightGlobals.ActiveVessel.latitude / 180.0 * Math.PI;                          double vesselLon = FlightGlobals.ActiveVessel.longitude / 180.0 * Math.PI;                          double wpLat = wpd.waypoint.latitude / 180.0 * Math.PI;                          double wpLon = wpd.waypoint.longitude / 180.0 * Math.PI;                            double y = Math.Sin(wpLon - vesselLon) * Math.Cos(wpLat);                          double x = (Math.Cos(vesselLat) * Math.Sin(wpLat)) - (Math.Sin(vesselLat) * Math.Cos(wpLat) * Math.Cos(wpLon - vesselLon));                          double requiredHeading = Math.Atan2(y' x) * 180.0 / Math.PI;                          wpd.heading = (requiredHeading + 360.0) % 360.0;                      }                  }              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,IsOccluded,The following statement contains a magic number: if (PC.magnitude < 5000)              {                  return false;              }
Magic Number,WaypointManager,WaypointData,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointData.cs,IsOccluded,The following statement contains a magic number: return Vector3.Dot(PC' PB) > Math.Sqrt(1 - sinRefAngle * sinRefAngle) + 0.05;
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: nameStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(5' 0' 0' 0)'                  alignment = TextAnchor.MiddleRight'                  fontSize = 11'                  fontStyle = FontStyle.Bold'                  fixedHeight = 20.0f              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: nameStyle = new GUIStyle(HighLogic.Skin.label)              {                  normal =                  {                      textColor = Color.white                  }'                  margin = new RectOffset()'                  padding = new RectOffset(5' 0' 0' 0)'                  alignment = TextAnchor.MiddleRight'                  fontSize = 11'                  fontStyle = FontStyle.Bold'                  fixedHeight = 20.0f              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: valueStyle = new GUIStyle(HighLogic.Skin.label)              {                  margin = new RectOffset()'                  padding = new RectOffset(0' 5' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = 11'                  fontStyle = FontStyle.Normal'                  fixedHeight = 20.0f              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: valueStyle = new GUIStyle(HighLogic.Skin.label)              {                  margin = new RectOffset()'                  padding = new RectOffset(0' 5' 0' 0)'                  alignment = TextAnchor.MiddleLeft'                  fontSize = 11'                  fontStyle = FontStyle.Normal'                  fixedHeight = 20.0f              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: hintTextStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(4' 4' 7' 4)'                  font = HighLogic.Skin.box.font'                  fontSize = 13'                  fontStyle = FontStyle.Normal'                  fixedWidth = 0'                  fixedHeight = 0'                  stretchHeight = true'                  stretchWidth = true              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: hintTextStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(4' 4' 7' 4)'                  font = HighLogic.Skin.box.font'                  fontSize = 13'                  fontStyle = FontStyle.Normal'                  fixedWidth = 0'                  fixedHeight = 0'                  stretchHeight = true'                  stretchWidth = true              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: hintTextStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(4' 4' 7' 4)'                  font = HighLogic.Skin.box.font'                  fontSize = 13'                  fontStyle = FontStyle.Normal'                  fixedWidth = 0'                  fixedHeight = 0'                  stretchHeight = true'                  stretchWidth = true              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: hintTextStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(4' 4' 7' 4)'                  font = HighLogic.Skin.box.font'                  fontSize = 13'                  fontStyle = FontStyle.Normal'                  fixedWidth = 0'                  fixedHeight = 0'                  stretchHeight = true'                  stretchWidth = true              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,SetupStyles,The following statement contains a magic number: hintTextStyle = new GUIStyle(HighLogic.Skin.box)              {                  padding = new RectOffset(4' 4' 7' 4)'                  font = HighLogic.Skin.box.font'                  fontSize = 13'                  fontStyle = FontStyle.Normal'                  fixedWidth = 0'                  fixedHeight = 0'                  stretchHeight = true'                  stretchWidth = true              };
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null)              {                  // Figure out the distance to the waypoint                  Vessel v = FlightGlobals.ActiveVessel;                    // Only change alpha if the waypoint isn't the nav point                  if (!Util.IsNavPoint(wpd.waypoint))                  {                      // Get the distance to the waypoint at the current speed                      double speed = v.srfSpeed < MIN_SPEED ? MIN_SPEED : v.srfSpeed;                      double directTime = Util.GetStraightDistance(wpd) / speed;                        // More than two minutes away                      if (directTime > MIN_TIME || Config.waypointDisplay != Config.WaypointDisplay.ALL)                      {                          return;                      }                      else if (directTime >= MIN_TIME - FADE_TIME)                      {                          wpd.currentAlpha = (float)((MIN_TIME - directTime) / FADE_TIME) * Config.opacity;                      }                  }                  // Draw the distance information to the nav point                  else                  {                      // Draw the distance to waypoint text                      if (Event.current.type == EventType.Repaint)                      {                          if (asb == null)                          {                              asb = UnityEngine.Object.FindObjectOfType<AltimeterSliderButtons>();                              asbRectTransform = asb.GetComponent<RectTransform>();                          }                            float ybase = (Screen.height / 2.0f) - asbRectTransform.position.y + asbRectTransform.sizeDelta.y * GameSettings.UI_SCALE * 0.5f + 4;                            string timeToWP = GetTimeToWaypoint(wpd);                          if (Config.hudDistance)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Distance to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? Util.PrintDistance(wpd) : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (timeToWP != null && Config.hudTime)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "ETA to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? timeToWP : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudHeading)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Heading to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? wpd.heading.ToString("N1") : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudAngle && v.mainBody == wpd.celestialBody)                          {                              double distance = Util.GetLateralDistance(wpd);                              double heightDist = wpd.waypoint.altitude + wpd.waypoint.height - v.altitude;                              double angle = Math.Atan2(heightDist' distance) * 180.0 / Math.PI;                                GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Angle to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? angle.ToString("N2") : "N/A"' valueStyle);                              ybase += 18f;                                if (v.srfSpeed >= 0.1)                              {                                  double velAngle = 90 - Math.Acos(Vector3d.Dot(v.srf_velocity.normalized' v.upAxis)) * 180.0 / Math.PI;                                    GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Velocity pitch angle:"' nameStyle);                                  GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                      v.state != Vessel.State.DEAD ? velAngle.ToString("N2") : "N/A"' valueStyle);                                  ybase += 18f;                              }                          }                      }                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null)              {                  // Figure out the distance to the waypoint                  Vessel v = FlightGlobals.ActiveVessel;                    // Only change alpha if the waypoint isn't the nav point                  if (!Util.IsNavPoint(wpd.waypoint))                  {                      // Get the distance to the waypoint at the current speed                      double speed = v.srfSpeed < MIN_SPEED ? MIN_SPEED : v.srfSpeed;                      double directTime = Util.GetStraightDistance(wpd) / speed;                        // More than two minutes away                      if (directTime > MIN_TIME || Config.waypointDisplay != Config.WaypointDisplay.ALL)                      {                          return;                      }                      else if (directTime >= MIN_TIME - FADE_TIME)                      {                          wpd.currentAlpha = (float)((MIN_TIME - directTime) / FADE_TIME) * Config.opacity;                      }                  }                  // Draw the distance information to the nav point                  else                  {                      // Draw the distance to waypoint text                      if (Event.current.type == EventType.Repaint)                      {                          if (asb == null)                          {                              asb = UnityEngine.Object.FindObjectOfType<AltimeterSliderButtons>();                              asbRectTransform = asb.GetComponent<RectTransform>();                          }                            float ybase = (Screen.height / 2.0f) - asbRectTransform.position.y + asbRectTransform.sizeDelta.y * GameSettings.UI_SCALE * 0.5f + 4;                            string timeToWP = GetTimeToWaypoint(wpd);                          if (Config.hudDistance)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Distance to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? Util.PrintDistance(wpd) : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (timeToWP != null && Config.hudTime)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "ETA to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? timeToWP : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudHeading)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Heading to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? wpd.heading.ToString("N1") : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudAngle && v.mainBody == wpd.celestialBody)                          {                              double distance = Util.GetLateralDistance(wpd);                              double heightDist = wpd.waypoint.altitude + wpd.waypoint.height - v.altitude;                              double angle = Math.Atan2(heightDist' distance) * 180.0 / Math.PI;                                GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Angle to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? angle.ToString("N2") : "N/A"' valueStyle);                              ybase += 18f;                                if (v.srfSpeed >= 0.1)                              {                                  double velAngle = 90 - Math.Acos(Vector3d.Dot(v.srf_velocity.normalized' v.upAxis)) * 180.0 / Math.PI;                                    GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Velocity pitch angle:"' nameStyle);                                  GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                      v.state != Vessel.State.DEAD ? velAngle.ToString("N2") : "N/A"' valueStyle);                                  ybase += 18f;                              }                          }                      }                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null)              {                  // Figure out the distance to the waypoint                  Vessel v = FlightGlobals.ActiveVessel;                    // Only change alpha if the waypoint isn't the nav point                  if (!Util.IsNavPoint(wpd.waypoint))                  {                      // Get the distance to the waypoint at the current speed                      double speed = v.srfSpeed < MIN_SPEED ? MIN_SPEED : v.srfSpeed;                      double directTime = Util.GetStraightDistance(wpd) / speed;                        // More than two minutes away                      if (directTime > MIN_TIME || Config.waypointDisplay != Config.WaypointDisplay.ALL)                      {                          return;                      }                      else if (directTime >= MIN_TIME - FADE_TIME)                      {                          wpd.currentAlpha = (float)((MIN_TIME - directTime) / FADE_TIME) * Config.opacity;                      }                  }                  // Draw the distance information to the nav point                  else                  {                      // Draw the distance to waypoint text                      if (Event.current.type == EventType.Repaint)                      {                          if (asb == null)                          {                              asb = UnityEngine.Object.FindObjectOfType<AltimeterSliderButtons>();                              asbRectTransform = asb.GetComponent<RectTransform>();                          }                            float ybase = (Screen.height / 2.0f) - asbRectTransform.position.y + asbRectTransform.sizeDelta.y * GameSettings.UI_SCALE * 0.5f + 4;                            string timeToWP = GetTimeToWaypoint(wpd);                          if (Config.hudDistance)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Distance to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? Util.PrintDistance(wpd) : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (timeToWP != null && Config.hudTime)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "ETA to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? timeToWP : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudHeading)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Heading to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? wpd.heading.ToString("N1") : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudAngle && v.mainBody == wpd.celestialBody)                          {                              double distance = Util.GetLateralDistance(wpd);                              double heightDist = wpd.waypoint.altitude + wpd.waypoint.height - v.altitude;                              double angle = Math.Atan2(heightDist' distance) * 180.0 / Math.PI;                                GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Angle to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? angle.ToString("N2") : "N/A"' valueStyle);                              ybase += 18f;                                if (v.srfSpeed >= 0.1)                              {                                  double velAngle = 90 - Math.Acos(Vector3d.Dot(v.srf_velocity.normalized' v.upAxis)) * 180.0 / Math.PI;                                    GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Velocity pitch angle:"' nameStyle);                                  GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                      v.state != Vessel.State.DEAD ? velAngle.ToString("N2") : "N/A"' valueStyle);                                  ybase += 18f;                              }                          }                      }                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null)              {                  // Figure out the distance to the waypoint                  Vessel v = FlightGlobals.ActiveVessel;                    // Only change alpha if the waypoint isn't the nav point                  if (!Util.IsNavPoint(wpd.waypoint))                  {                      // Get the distance to the waypoint at the current speed                      double speed = v.srfSpeed < MIN_SPEED ? MIN_SPEED : v.srfSpeed;                      double directTime = Util.GetStraightDistance(wpd) / speed;                        // More than two minutes away                      if (directTime > MIN_TIME || Config.waypointDisplay != Config.WaypointDisplay.ALL)                      {                          return;                      }                      else if (directTime >= MIN_TIME - FADE_TIME)                      {                          wpd.currentAlpha = (float)((MIN_TIME - directTime) / FADE_TIME) * Config.opacity;                      }                  }                  // Draw the distance information to the nav point                  else                  {                      // Draw the distance to waypoint text                      if (Event.current.type == EventType.Repaint)                      {                          if (asb == null)                          {                              asb = UnityEngine.Object.FindObjectOfType<AltimeterSliderButtons>();                              asbRectTransform = asb.GetComponent<RectTransform>();                          }                            float ybase = (Screen.height / 2.0f) - asbRectTransform.position.y + asbRectTransform.sizeDelta.y * GameSettings.UI_SCALE * 0.5f + 4;                            string timeToWP = GetTimeToWaypoint(wpd);                          if (Config.hudDistance)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Distance to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? Util.PrintDistance(wpd) : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (timeToWP != null && Config.hudTime)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "ETA to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? timeToWP : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudHeading)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Heading to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? wpd.heading.ToString("N1") : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudAngle && v.mainBody == wpd.celestialBody)                          {                              double distance = Util.GetLateralDistance(wpd);                              double heightDist = wpd.waypoint.altitude + wpd.waypoint.height - v.altitude;                              double angle = Math.Atan2(heightDist' distance) * 180.0 / Math.PI;                                GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Angle to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? angle.ToString("N2") : "N/A"' valueStyle);                              ybase += 18f;                                if (v.srfSpeed >= 0.1)                              {                                  double velAngle = 90 - Math.Acos(Vector3d.Dot(v.srf_velocity.normalized' v.upAxis)) * 180.0 / Math.PI;                                    GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Velocity pitch angle:"' nameStyle);                                  GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                      v.state != Vessel.State.DEAD ? velAngle.ToString("N2") : "N/A"' valueStyle);                                  ybase += 18f;                              }                          }                      }                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (FlightGlobals.ActiveVessel != null)              {                  // Figure out the distance to the waypoint                  Vessel v = FlightGlobals.ActiveVessel;                    // Only change alpha if the waypoint isn't the nav point                  if (!Util.IsNavPoint(wpd.waypoint))                  {                      // Get the distance to the waypoint at the current speed                      double speed = v.srfSpeed < MIN_SPEED ? MIN_SPEED : v.srfSpeed;                      double directTime = Util.GetStraightDistance(wpd) / speed;                        // More than two minutes away                      if (directTime > MIN_TIME || Config.waypointDisplay != Config.WaypointDisplay.ALL)                      {                          return;                      }                      else if (directTime >= MIN_TIME - FADE_TIME)                      {                          wpd.currentAlpha = (float)((MIN_TIME - directTime) / FADE_TIME) * Config.opacity;                      }                  }                  // Draw the distance information to the nav point                  else                  {                      // Draw the distance to waypoint text                      if (Event.current.type == EventType.Repaint)                      {                          if (asb == null)                          {                              asb = UnityEngine.Object.FindObjectOfType<AltimeterSliderButtons>();                              asbRectTransform = asb.GetComponent<RectTransform>();                          }                            float ybase = (Screen.height / 2.0f) - asbRectTransform.position.y + asbRectTransform.sizeDelta.y * GameSettings.UI_SCALE * 0.5f + 4;                            string timeToWP = GetTimeToWaypoint(wpd);                          if (Config.hudDistance)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Distance to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? Util.PrintDistance(wpd) : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (timeToWP != null && Config.hudTime)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "ETA to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? timeToWP : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudHeading)                          {                              GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Heading to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? wpd.heading.ToString("N1") : "N/A"' valueStyle);                              ybase += 18f;                          }                            if (Config.hudAngle && v.mainBody == wpd.celestialBody)                          {                              double distance = Util.GetLateralDistance(wpd);                              double heightDist = wpd.waypoint.altitude + wpd.waypoint.height - v.altitude;                              double angle = Math.Atan2(heightDist' distance) * 180.0 / Math.PI;                                GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Angle to " + label + ":"' nameStyle);                              GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                  v.state != Vessel.State.DEAD ? angle.ToString("N2") : "N/A"' valueStyle);                              ybase += 18f;                                if (v.srfSpeed >= 0.1)                              {                                  double velAngle = 90 - Math.Acos(Vector3d.Dot(v.srf_velocity.normalized' v.upAxis)) * 180.0 / Math.PI;                                    GUI.Label(new Rect((float)Screen.width / 2.0f - 188f' ybase' 240f' 20f)' "Velocity pitch angle:"' nameStyle);                                  GUI.Label(new Rect((float)Screen.width / 2.0f + 60f' ybase' 120f' 20f)'                                      v.state != Vessel.State.DEAD ? velAngle.ToString("N2") : "N/A"' valueStyle);                                  ybase += 18f;                              }                          }                      }                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (selectedWaypoint == wpd.waypoint)              {                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (selectedWaypoint == wpd.waypoint)              {                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (selectedWaypoint == wpd.waypoint)              {                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (selectedWaypoint == wpd.waypoint)              {                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (Event.current.type == EventType.MouseUp && Event.current.button == 0)              {                  if (markerRect.Contains(Event.current.mousePosition))                  {                      selectedWaypoint = wpd.waypoint;                      windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                      waypointName = label;                      newClick = false;                  }                  else if (newClick)                  {                      selectedWaypoint = null;                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (Event.current.type == EventType.MouseUp && Event.current.button == 0)              {                  if (markerRect.Contains(Event.current.mousePosition))                  {                      selectedWaypoint = wpd.waypoint;                      windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                      waypointName = label;                      newClick = false;                  }                  else if (newClick)                  {                      selectedWaypoint = null;                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (Event.current.type == EventType.MouseUp && Event.current.button == 0)              {                  if (markerRect.Contains(Event.current.mousePosition))                  {                      selectedWaypoint = wpd.waypoint;                      windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                      waypointName = label;                      newClick = false;                  }                  else if (newClick)                  {                      selectedWaypoint = null;                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (Event.current.type == EventType.MouseUp && Event.current.button == 0)              {                  if (markerRect.Contains(Event.current.mousePosition))                  {                      selectedWaypoint = wpd.waypoint;                      windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                      waypointName = label;                      newClick = false;                  }                  else if (newClick)                  {                      selectedWaypoint = null;                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (Event.current.type == EventType.Repaint)              {                  // Half-res for the icon too (16 x 16)                  Rect iconRect = new Rect(screenPos.x - 8f' (float)Screen.height - screenPos.y - 39.0f' 16f' 16f);                    // Draw the marker                  Graphics.DrawTexture(markerRect' GameDatabase.Instance.GetTexture("Squad/Contracts/Icons/marker"' false)' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' new Color(0.5f' 0.5f' 0.5f' 0.5f * (wpd.currentAlpha - 0.3f) / 0.7f));                    // Draw the icon' but support blinking                  if (!Util.IsNavPoint(wpd.waypoint) || !NavWaypoint.fetch.IsBlinking || (int)((Time.fixedTime - (int)Time.fixedTime) * 4) % 2 == 0)                  {                      Graphics.DrawTexture(iconRect' ContractDefs.sprites[wpd.waypoint.id].texture' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' SystemUtilities.RandomColor(wpd.waypoint.seed' wpd.currentAlpha));                  }                    // Hint text!                  if (iconRect.Contains(Event.current.mousePosition))                  {                      // Add agency to label                      if (wpd.waypoint.contractReference != null)                      {                          label += "\n" + wpd.waypoint.contractReference.Agent.Name;                      }                      float width = 240f;                      float height = hintTextStyle.CalcHeight(new GUIContent(label)' width);                      float yoffset = height + 48.0f;                      GUI.Box(new Rect(screenPos.x - width/2.0f' (float)Screen.height - screenPos.y - yoffset' width' height)' label' hintTextStyle);                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,DrawWaypoint,The following statement contains a magic number: if (Event.current.type == EventType.Repaint)              {                  // Half-res for the icon too (16 x 16)                  Rect iconRect = new Rect(screenPos.x - 8f' (float)Screen.height - screenPos.y - 39.0f' 16f' 16f);                    // Draw the marker                  Graphics.DrawTexture(markerRect' GameDatabase.Instance.GetTexture("Squad/Contracts/Icons/marker"' false)' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' new Color(0.5f' 0.5f' 0.5f' 0.5f * (wpd.currentAlpha - 0.3f) / 0.7f));                    // Draw the icon' but support blinking                  if (!Util.IsNavPoint(wpd.waypoint) || !NavWaypoint.fetch.IsBlinking || (int)((Time.fixedTime - (int)Time.fixedTime) * 4) % 2 == 0)                  {                      Graphics.DrawTexture(iconRect' ContractDefs.sprites[wpd.waypoint.id].texture' new Rect(0.0f' 0.0f' 1f' 1f)' 0' 0' 0' 0' SystemUtilities.RandomColor(wpd.waypoint.seed' wpd.currentAlpha));                  }                    // Hint text!                  if (iconRect.Contains(Event.current.mousePosition))                  {                      // Add agency to label                      if (wpd.waypoint.contractReference != null)                      {                          label += "\n" + wpd.waypoint.contractReference.Agent.Name;                      }                      float width = 240f;                      float height = hintTextStyle.CalcHeight(new GUIContent(label)' width);                      float yoffset = height + 48.0f;                      GUI.Box(new Rect(screenPos.x - width/2.0f' (float)Screen.height - screenPos.y - yoffset' width' height)' label' hintTextStyle);                  }              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,ShowNavigationWindow,The following statement contains a magic number: if (selectedWaypoint != null)              {                  GUI.skin = HighLogic.Skin;                  windowPos = GUILayout.Window(10' windowPos' NavigationWindow' waypointName' GUILayout.MinWidth(224));              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,ShowNavigationWindow,The following statement contains a magic number: if (selectedWaypoint != null)              {                  GUI.skin = HighLogic.Skin;                  windowPos = GUILayout.Window(10' windowPos' NavigationWindow' waypointName' GUILayout.MinWidth(224));              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: if (v.srfSpeed < 0.1)              {                  return null;              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: uint SecondsPerYear = 31536000;
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: uint SecondsPerDay = 86400;
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: uint SecondsPerHour = 3600;
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: uint SecondsPerMinute = 60;
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: if (GameSettings.KERBIN_TIME == true)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: if (GameSettings.KERBIN_TIME == true)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: if (GameSettings.KERBIN_TIME == true)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,GetTimeToWaypoint,The following statement contains a magic number: if (GameSettings.KERBIN_TIME == true)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HandleClick,The following statement contains a magic number: if (markerRect.Contains(Event.current.mousePosition))              {                  selectedWaypoint = wpd.waypoint;                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                  waypointName = wpd.waypoint.name + (wpd.waypoint.isClustered ? (" " + StringUtilities.IntegerToGreek(wpd.waypoint.index)) : "");                  newClick = false;              }              else if (newClick)              {                  selectedWaypoint = null;              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HandleClick,The following statement contains a magic number: if (markerRect.Contains(Event.current.mousePosition))              {                  selectedWaypoint = wpd.waypoint;                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                  waypointName = wpd.waypoint.name + (wpd.waypoint.isClustered ? (" " + StringUtilities.IntegerToGreek(wpd.waypoint.index)) : "");                  newClick = false;              }              else if (newClick)              {                  selectedWaypoint = null;              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HandleClick,The following statement contains a magic number: if (markerRect.Contains(Event.current.mousePosition))              {                  selectedWaypoint = wpd.waypoint;                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                  waypointName = wpd.waypoint.name + (wpd.waypoint.isClustered ? (" " + StringUtilities.IntegerToGreek(wpd.waypoint.index)) : "");                  newClick = false;              }              else if (newClick)              {                  selectedWaypoint = null;              }
Magic Number,WaypointManager,WaypointFlightRenderer,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointFlightRenderer.cs,HandleClick,The following statement contains a magic number: if (markerRect.Contains(Event.current.mousePosition))              {                  selectedWaypoint = wpd.waypoint;                  windowPos = new Rect(markerRect.xMin - 97' markerRect.yMax + 12' 224' 60);                  waypointName = wpd.waypoint.name + (wpd.waypoint.isClustered ? (" " + StringUtilities.IntegerToGreek(wpd.waypoint.index)) : "");                  newClick = false;              }              else if (newClick)              {                  selectedWaypoint = null;              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,LoadConfiguration,The following statement contains a magic number: if (nyan != null && DateTime.Now.Month == 4 && DateTime.Now.Day == 1)              {                  foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture.Where(t => t.name.StartsWith("Squad/Contracts/Icons/")))                  {                      string name = texInfo.name.Replace("Squad/Contracts/Icons/"' "");                      if (!CustomWaypointGUI.forbiddenIcons.Contains(name))                      {                          texInfo.texture = nyan.texture;                      }                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,OnGUI,The following statement contains a magic number: if (showGUI && visible)              {                  var ainfoV = Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  Config.mainWindowPos = GUILayout.Window(                      GetType().FullName.GetHashCode()'                      Config.mainWindowPos'                      WindowGUI'                      "Waypoint Manager " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(Config.mainWindowPos.xMax - 18' Config.mainWindowPos.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                  {                      showGUI = false;                      HideSettings();                  }                    if (showSettings)                  {                      // Default settings position                      if (settingsPosition.xMin == settingsPosition.xMax)                      {                          settingsPosition = new Rect(Config.mainWindowPos.xMax + SETTINGS_WIDTH + 4 > Screen.width ?                              Config.mainWindowPos.xMin - SETTINGS_WIDTH - 4: Config.mainWindowPos.xMax' Config.mainWindowPos.yMin' SETTINGS_WIDTH + 4' 1);                      }                        settingsPosition = GUILayout.Window(                          GetType().FullName.GetHashCode() + 1'                          settingsPosition'                          SettingsGUI'                          "Waypoint Manager Settings");                        // Add the close icon                      if (GUI.Button(new Rect(settingsPosition.xMax - 18' settingsPosition.yMin + 2' 16' 16)' Config.closeIcon' GUI.skin.label))                      {                          HideSettings();                      }                  }                    // Reset the position of the settings window                  if (!showSettings)                  {                      settingsPosition.xMax = settingsPosition.xMin;                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WindowGUI,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WindowGUI,The following statement contains a magic number: scrollPosition = GUILayout.BeginScrollView(scrollPosition' GUILayout.ExpandWidth(true)' GUILayout.Height(520));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.BeginHorizontal(GUILayout.Height(32));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Label(ContractIcon(wpd)' GUILayout.ExpandWidth(false)' GUILayout.Height(38)' GUILayout.Width(38));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Label(ContractIcon(wpd)' GUILayout.ExpandWidth(false)' GUILayout.Height(38)' GUILayout.Width(38));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Space(2);
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Space(2);
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Label(name' labelStyle' GUILayout.Height(16)' GUILayout.Width(GUI_WIDTH - 240)' GUILayout.ExpandWidth(false));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Label(name' labelStyle' GUILayout.Height(16)' GUILayout.Width(GUI_WIDTH - 240)' GUILayout.ExpandWidth(false));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: if (FlightGlobals.currentMainBody == wpd.celestialBody)              {                  GUILayout.Label("Dist: " + Util.PrintDistance(wpd)' labelStyle' GUILayout.Height(16)' GUILayout.ExpandWidth(false));              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Label("Lat: " + Util.FormatCoordinate(wpd.waypoint.latitude' true)' labelStyle' GUILayout.Height(16)' GUILayout.Width(GUI_WIDTH / 2.0f - 72.0f)' GUILayout.ExpandWidth(false));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Label("Lon: " + Util.FormatCoordinate(wpd.waypoint.longitude' false)' labelStyle' GUILayout.Height(16)' GUILayout.ExpandWidth(false));
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: if (CustomWaypoints.Instance.IsCustom(wpd.waypoint))              {                  GUILayout.BeginVertical();                  GUILayout.Space(8);                  GUILayout.BeginHorizontal();                    if (GUILayout.Button(new GUIContent(Config.editWaypointIcon' "Edit Waypoint")' GUI.skin.label))                  {                      CustomWaypointGUI.EditWaypoint(wpd.waypoint);                  }                  if (GUILayout.Button(new GUIContent(Config.deleteWaypointIcon' "Delete Waypoint")' GUI.skin.label))                  {                      CustomWaypointGUI.DeleteWaypoint(wpd.waypoint);                  }                    GUILayout.EndHorizontal();                  GUILayout.EndVertical();              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Space(8);
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,WaypointLineGUI,The following statement contains a magic number: GUILayout.Space(6);
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,DrawToolTip,The following statement contains a magic number: for (int i = 0; i < toolTipTime.Count; i++)              {                  if (!string.IsNullOrEmpty(toolTip[i]))                  {                      if (Time.fixedTime > toolTipTime[i] + 0.5)                      {                          GUIContent tip = new GUIContent(toolTip[i]);                            Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                          if (textDimensions.x > 240)                          {                              textDimensions.x = 240;                              textDimensions.y = tipStyle.CalcHeight(tip' 240);                          }                          tooltipPosition.width = textDimensions.x;                          tooltipPosition.height = textDimensions.y;                          tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                              Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                          tooltipPosition.y = Event.current.mousePosition.y + 20;                            GUI.Label(tooltipPosition' tip' tipStyle);                      }                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,DrawToolTip,The following statement contains a magic number: for (int i = 0; i < toolTipTime.Count; i++)              {                  if (!string.IsNullOrEmpty(toolTip[i]))                  {                      if (Time.fixedTime > toolTipTime[i] + 0.5)                      {                          GUIContent tip = new GUIContent(toolTip[i]);                            Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                          if (textDimensions.x > 240)                          {                              textDimensions.x = 240;                              textDimensions.y = tipStyle.CalcHeight(tip' 240);                          }                          tooltipPosition.width = textDimensions.x;                          tooltipPosition.height = textDimensions.y;                          tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                              Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                          tooltipPosition.y = Event.current.mousePosition.y + 20;                            GUI.Label(tooltipPosition' tip' tipStyle);                      }                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,DrawToolTip,The following statement contains a magic number: for (int i = 0; i < toolTipTime.Count; i++)              {                  if (!string.IsNullOrEmpty(toolTip[i]))                  {                      if (Time.fixedTime > toolTipTime[i] + 0.5)                      {                          GUIContent tip = new GUIContent(toolTip[i]);                            Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                          if (textDimensions.x > 240)                          {                              textDimensions.x = 240;                              textDimensions.y = tipStyle.CalcHeight(tip' 240);                          }                          tooltipPosition.width = textDimensions.x;                          tooltipPosition.height = textDimensions.y;                          tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                              Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                          tooltipPosition.y = Event.current.mousePosition.y + 20;                            GUI.Label(tooltipPosition' tip' tipStyle);                      }                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,DrawToolTip,The following statement contains a magic number: for (int i = 0; i < toolTipTime.Count; i++)              {                  if (!string.IsNullOrEmpty(toolTip[i]))                  {                      if (Time.fixedTime > toolTipTime[i] + 0.5)                      {                          GUIContent tip = new GUIContent(toolTip[i]);                            Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                          if (textDimensions.x > 240)                          {                              textDimensions.x = 240;                              textDimensions.y = tipStyle.CalcHeight(tip' 240);                          }                          tooltipPosition.width = textDimensions.x;                          tooltipPosition.height = textDimensions.y;                          tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                              Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                          tooltipPosition.y = Event.current.mousePosition.y + 20;                            GUI.Label(tooltipPosition' tip' tipStyle);                      }                  }              }
Magic Number,WaypointManager,WaypointManager,C:\repos\jrossignol_WaypointManager\source\WaypointManager\WaypointManager.cs,DrawToolTip,The following statement contains a magic number: for (int i = 0; i < toolTipTime.Count; i++)              {                  if (!string.IsNullOrEmpty(toolTip[i]))                  {                      if (Time.fixedTime > toolTipTime[i] + 0.5)                      {                          GUIContent tip = new GUIContent(toolTip[i]);                            Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                          if (textDimensions.x > 240)                          {                              textDimensions.x = 240;                              textDimensions.y = tipStyle.CalcHeight(tip' 240);                          }                          tooltipPosition.width = textDimensions.x;                          tooltipPosition.height = textDimensions.y;                          tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                              Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                          tooltipPosition.y = Event.current.mousePosition.y + 20;                            GUI.Label(tooltipPosition' tip' tipStyle);                      }                  }              }
