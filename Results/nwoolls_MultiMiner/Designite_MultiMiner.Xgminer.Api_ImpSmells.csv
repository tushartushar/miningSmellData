Implementation smell,Namespace,Class,File,Method,Description
Long Method,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The method has 81 lines of code.
Complex Method,MultiMiner.Xgminer.Api.Parsers,MinerStatisticsParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\MinerStatisticsParser.cs,ParseTextForMinerStatistics,Cyclomatic complexity of the method is 10
Complex Method,MultiMiner.Xgminer.Api.Parsers,DeviceDetailsParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceDetailsParser.cs,ParseTextForDeviceDetails,Cyclomatic complexity of the method is 7
Complex Method,MultiMiner.Xgminer.Api.Parsers,PoolInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\PoolInformationParser.cs,ParseTextForDeviceDetails,Cyclomatic complexity of the method is 11
Complex Method,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,Cyclomatic complexity of the method is 17
Long Parameter List,MultiMiner.Xgminer.Api.Extensions,TcpClientExtensions,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Extensions\TcpClientExtensions.cs,Connect,The method has 4 parameters.
Long Statement,MultiMiner.Xgminer.Api.Parsers,ResponseTextParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\ResponseTextParser.cs,GetDictionaryFromTextChunk,The length of the statement  "	Dictionary<string' string> keyValuePairs = deviceAttributes.Where (value => value.Contains ('=')).Select (value => value.Split ('=')).ToDictionary (pair => pair [0]' pair => pair [1]); " is 184.
Long Statement,MultiMiner.Xgminer.Api.Parsers,ResponseTextParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\ResponseTextParser.cs,ParseResponsePart,The length of the statement  "	Dictionary<string' string> keyValuePairs = partAttributes.Where (value => value.Contains ('=')).Select (value => value.Split ('=')).ToDictionary (pair => pair [0]' pair => pair [1]); " is 182.
Long Statement,MultiMiner.Xgminer.Api.Parsers,VersionInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\VersionInformationParser.cs,ParseTextForVersionInformation,The length of the statement  "			// Response:"STATUS=S'When=1415068731'Code=22'Msg=SGMiner versions'Description=sgminer 4.1.0|VERSION'SGMiner=4.1.0'API=3.1|\u0000" " is 130.
Magic Number,MultiMiner.Xgminer.Api,ApiContext,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\ApiContext.cs,GetResponse,The following statement contains a magic number: tcpStream.ReadTimeout = 5000;  
Magic Number,MultiMiner.Xgminer.Api.Extensions,IntegerExtensions,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Extensions\IntegerExtensions.cs,UnixTimeToDateTime,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddSeconds (seconds).ToLocalTime ();  
Magic Number,MultiMiner.Xgminer.Api.Parsers,MinerStatisticsParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\MinerStatisticsParser.cs,ParseTextForMinerStatistics,The following statement contains a magic number: foreach (string responsePart in responseParts) {  	Dictionary<string' string> keyValuePairs = ParseResponsePart (responsePart);  	//check for key-value pairs' seen Count == 0 with user API logs  	if (keyValuePairs.Count <= 0)  		continue;  	//ignore response parts without a STATS key  	//allows for custom responses (e.g. newer S3 firmware)  	if (!keyValuePairs.ContainsKey ("STATS"))  		continue;  	string id = String.Empty;  	//user bug reports indicate this key may not exist  	if (keyValuePairs.ContainsKey ("ID"))  		id = keyValuePairs ["ID"];  	if (id.StartsWith ("pool"' StringComparison.OrdinalIgnoreCase))  		//not concerned with pool information (for now)  		continue;  	MinerStatistics newStatistics = new MinerStatistics ();  	newStatistics.ID = id;  	string key = String.Empty;  	const int MaxChainCount = 16;  	for (int i = 1; i < MaxChainCount; i++) {  		key = "chain_acs" + i;  		if (keyValuePairs.ContainsKey (key))  			newStatistics.ChainStatus [i - 1] = keyValuePairs [key];  	}  	key = "frequency";  	if (keyValuePairs.ContainsKey (key))  		newStatistics.Frequency = TryToParseDouble (keyValuePairs' key' 0.0);  	key = "Elapsed";  	if (keyValuePairs.ContainsKey (key))  		newStatistics.Elapsed = TryToParseInt (keyValuePairs' key' 0);  	minerStatistics.Add (newStatistics);  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: foreach (string responsePart in responseParts) {  	Dictionary<string' string> keyValuePairs = ParseResponsePart (responsePart);  	//check for key-value pairs' seen Count == 0 with user API logs  	if (keyValuePairs.Count > 0) {  		DeviceInformation newDevice = new DeviceInformation ();  		newDevice.Kind = keyValuePairs.ElementAt (0).Key;  		newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  		if (newDevice.Index == -1)  			continue;  		if (keyValuePairs.ContainsKey ("Enabled"))  			//seen this needed with a user  			newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  		if (keyValuePairs.ContainsKey ("Status"))  			//check required for bfgminer  			newDevice.Status = keyValuePairs ["Status"];  		if (keyValuePairs.ContainsKey ("Name"))  			newDevice.Name = keyValuePairs ["Name"];  		else  			//default to Kind for older RPC API versions  			newDevice.Name = newDevice.Kind;  		//default to Index for older RPC API versions  		newDevice.ID = newDevice.Index;  		if (keyValuePairs.ContainsKey ("ID"))  			newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  		//parse regardless of device type = ASICs may have Temp  		newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  		newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  		newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  		newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  		newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  		newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  		newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  		newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  		if (keyValuePairs.ContainsKey ("Intensity"))  			//check required for bfgminer 3.3.0  			newDevice.Intensity = keyValuePairs ["Intensity"];  		newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  		newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  		//try for a 5m reading first  		//some Network Devices (Spondoolies) have wildly innacurate 5s entries  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= (5 * 60)))  			//check for 5m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= 60))  			//check for 1m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 20s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 5s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 1s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  		newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  		newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  		newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  		newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  		newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  		newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  		newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  		newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  		newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  		newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  		if (newDevice.WorkUtility == 0.0) {  			if (newDevice.DeviceElapsed > 0)  				newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  			else if (newDevice.LastShareDifficulty > 0)  				newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  		}  		deviceInformation.Add (newDevice);  	}  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: foreach (string responsePart in responseParts) {  	Dictionary<string' string> keyValuePairs = ParseResponsePart (responsePart);  	//check for key-value pairs' seen Count == 0 with user API logs  	if (keyValuePairs.Count > 0) {  		DeviceInformation newDevice = new DeviceInformation ();  		newDevice.Kind = keyValuePairs.ElementAt (0).Key;  		newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  		if (newDevice.Index == -1)  			continue;  		if (keyValuePairs.ContainsKey ("Enabled"))  			//seen this needed with a user  			newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  		if (keyValuePairs.ContainsKey ("Status"))  			//check required for bfgminer  			newDevice.Status = keyValuePairs ["Status"];  		if (keyValuePairs.ContainsKey ("Name"))  			newDevice.Name = keyValuePairs ["Name"];  		else  			//default to Kind for older RPC API versions  			newDevice.Name = newDevice.Kind;  		//default to Index for older RPC API versions  		newDevice.ID = newDevice.Index;  		if (keyValuePairs.ContainsKey ("ID"))  			newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  		//parse regardless of device type = ASICs may have Temp  		newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  		newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  		newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  		newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  		newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  		newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  		newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  		newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  		if (keyValuePairs.ContainsKey ("Intensity"))  			//check required for bfgminer 3.3.0  			newDevice.Intensity = keyValuePairs ["Intensity"];  		newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  		newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  		//try for a 5m reading first  		//some Network Devices (Spondoolies) have wildly innacurate 5s entries  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= (5 * 60)))  			//check for 5m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= 60))  			//check for 1m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 20s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 5s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 1s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  		newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  		newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  		newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  		newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  		newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  		newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  		newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  		newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  		newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  		newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  		if (newDevice.WorkUtility == 0.0) {  			if (newDevice.DeviceElapsed > 0)  				newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  			else if (newDevice.LastShareDifficulty > 0)  				newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  		}  		deviceInformation.Add (newDevice);  	}  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: foreach (string responsePart in responseParts) {  	Dictionary<string' string> keyValuePairs = ParseResponsePart (responsePart);  	//check for key-value pairs' seen Count == 0 with user API logs  	if (keyValuePairs.Count > 0) {  		DeviceInformation newDevice = new DeviceInformation ();  		newDevice.Kind = keyValuePairs.ElementAt (0).Key;  		newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  		if (newDevice.Index == -1)  			continue;  		if (keyValuePairs.ContainsKey ("Enabled"))  			//seen this needed with a user  			newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  		if (keyValuePairs.ContainsKey ("Status"))  			//check required for bfgminer  			newDevice.Status = keyValuePairs ["Status"];  		if (keyValuePairs.ContainsKey ("Name"))  			newDevice.Name = keyValuePairs ["Name"];  		else  			//default to Kind for older RPC API versions  			newDevice.Name = newDevice.Kind;  		//default to Index for older RPC API versions  		newDevice.ID = newDevice.Index;  		if (keyValuePairs.ContainsKey ("ID"))  			newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  		//parse regardless of device type = ASICs may have Temp  		newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  		newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  		newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  		newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  		newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  		newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  		newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  		newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  		if (keyValuePairs.ContainsKey ("Intensity"))  			//check required for bfgminer 3.3.0  			newDevice.Intensity = keyValuePairs ["Intensity"];  		newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  		newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  		//try for a 5m reading first  		//some Network Devices (Spondoolies) have wildly innacurate 5s entries  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= (5 * 60)))  			//check for 5m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= 60))  			//check for 1m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 20s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 5s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 1s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  		newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  		newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  		newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  		newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  		newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  		newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  		newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  		newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  		newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  		newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  		if (newDevice.WorkUtility == 0.0) {  			if (newDevice.DeviceElapsed > 0)  				newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  			else if (newDevice.LastShareDifficulty > 0)  				newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  		}  		deviceInformation.Add (newDevice);  	}  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: foreach (string responsePart in responseParts) {  	Dictionary<string' string> keyValuePairs = ParseResponsePart (responsePart);  	//check for key-value pairs' seen Count == 0 with user API logs  	if (keyValuePairs.Count > 0) {  		DeviceInformation newDevice = new DeviceInformation ();  		newDevice.Kind = keyValuePairs.ElementAt (0).Key;  		newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  		if (newDevice.Index == -1)  			continue;  		if (keyValuePairs.ContainsKey ("Enabled"))  			//seen this needed with a user  			newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  		if (keyValuePairs.ContainsKey ("Status"))  			//check required for bfgminer  			newDevice.Status = keyValuePairs ["Status"];  		if (keyValuePairs.ContainsKey ("Name"))  			newDevice.Name = keyValuePairs ["Name"];  		else  			//default to Kind for older RPC API versions  			newDevice.Name = newDevice.Kind;  		//default to Index for older RPC API versions  		newDevice.ID = newDevice.Index;  		if (keyValuePairs.ContainsKey ("ID"))  			newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  		//parse regardless of device type = ASICs may have Temp  		newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  		newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  		newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  		newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  		newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  		newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  		newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  		newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  		if (keyValuePairs.ContainsKey ("Intensity"))  			//check required for bfgminer 3.3.0  			newDevice.Intensity = keyValuePairs ["Intensity"];  		newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  		newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  		//try for a 5m reading first  		//some Network Devices (Spondoolies) have wildly innacurate 5s entries  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= (5 * 60)))  			//check for 5m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= 60))  			//check for 1m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 20s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 5s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 1s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  		newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  		newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  		newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  		newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  		newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  		newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  		newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  		newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  		newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  		newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  		if (newDevice.WorkUtility == 0.0) {  			if (newDevice.DeviceElapsed > 0)  				newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  			else if (newDevice.LastShareDifficulty > 0)  				newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  		}  		deviceInformation.Add (newDevice);  	}  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: foreach (string responsePart in responseParts) {  	Dictionary<string' string> keyValuePairs = ParseResponsePart (responsePart);  	//check for key-value pairs' seen Count == 0 with user API logs  	if (keyValuePairs.Count > 0) {  		DeviceInformation newDevice = new DeviceInformation ();  		newDevice.Kind = keyValuePairs.ElementAt (0).Key;  		newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  		if (newDevice.Index == -1)  			continue;  		if (keyValuePairs.ContainsKey ("Enabled"))  			//seen this needed with a user  			newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  		if (keyValuePairs.ContainsKey ("Status"))  			//check required for bfgminer  			newDevice.Status = keyValuePairs ["Status"];  		if (keyValuePairs.ContainsKey ("Name"))  			newDevice.Name = keyValuePairs ["Name"];  		else  			//default to Kind for older RPC API versions  			newDevice.Name = newDevice.Kind;  		//default to Index for older RPC API versions  		newDevice.ID = newDevice.Index;  		if (keyValuePairs.ContainsKey ("ID"))  			newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  		//parse regardless of device type = ASICs may have Temp  		newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  		newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  		newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  		newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  		newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  		newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  		newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  		newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  		if (keyValuePairs.ContainsKey ("Intensity"))  			//check required for bfgminer 3.3.0  			newDevice.Intensity = keyValuePairs ["Intensity"];  		newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  		newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  		//try for a 5m reading first  		//some Network Devices (Spondoolies) have wildly innacurate 5s entries  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= (5 * 60)))  			//check for 5m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  		if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  		&& (newDevice.DeviceElapsed >= 60))  			//check for 1m  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 20s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 5s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  		if (newDevice.CurrentHashrate == 0.0)  			//check for 1s  			newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  		newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  		newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  		newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  		newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  		newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  		newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  		newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  		newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  		newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  		newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  		if (newDevice.WorkUtility == 0.0) {  			if (newDevice.DeviceElapsed > 0)  				newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  			else if (newDevice.LastShareDifficulty > 0)  				newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  		}  		deviceInformation.Add (newDevice);  	}  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if (keyValuePairs.Count > 0) {  	DeviceInformation newDevice = new DeviceInformation ();  	newDevice.Kind = keyValuePairs.ElementAt (0).Key;  	newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  	if (newDevice.Index == -1)  		continue;  	if (keyValuePairs.ContainsKey ("Enabled"))  		//seen this needed with a user  		newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  	if (keyValuePairs.ContainsKey ("Status"))  		//check required for bfgminer  		newDevice.Status = keyValuePairs ["Status"];  	if (keyValuePairs.ContainsKey ("Name"))  		newDevice.Name = keyValuePairs ["Name"];  	else  		//default to Kind for older RPC API versions  		newDevice.Name = newDevice.Kind;  	//default to Index for older RPC API versions  	newDevice.ID = newDevice.Index;  	if (keyValuePairs.ContainsKey ("ID"))  		newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  	//parse regardless of device type = ASICs may have Temp  	newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  	newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  	newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  	newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  	newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  	newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  	newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  	newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  	if (keyValuePairs.ContainsKey ("Intensity"))  		//check required for bfgminer 3.3.0  		newDevice.Intensity = keyValuePairs ["Intensity"];  	newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  	newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  	//try for a 5m reading first  	//some Network Devices (Spondoolies) have wildly innacurate 5s entries  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= (5 * 60)))  		//check for 5m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= 60))  		//check for 1m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 20s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 5s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 1s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  	newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  	newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  	newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  	newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  	newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  	newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  	newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  	newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  	newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  	newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  	if (newDevice.WorkUtility == 0.0) {  		if (newDevice.DeviceElapsed > 0)  			newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  		else if (newDevice.LastShareDifficulty > 0)  			newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  	}  	deviceInformation.Add (newDevice);  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if (keyValuePairs.Count > 0) {  	DeviceInformation newDevice = new DeviceInformation ();  	newDevice.Kind = keyValuePairs.ElementAt (0).Key;  	newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  	if (newDevice.Index == -1)  		continue;  	if (keyValuePairs.ContainsKey ("Enabled"))  		//seen this needed with a user  		newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  	if (keyValuePairs.ContainsKey ("Status"))  		//check required for bfgminer  		newDevice.Status = keyValuePairs ["Status"];  	if (keyValuePairs.ContainsKey ("Name"))  		newDevice.Name = keyValuePairs ["Name"];  	else  		//default to Kind for older RPC API versions  		newDevice.Name = newDevice.Kind;  	//default to Index for older RPC API versions  	newDevice.ID = newDevice.Index;  	if (keyValuePairs.ContainsKey ("ID"))  		newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  	//parse regardless of device type = ASICs may have Temp  	newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  	newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  	newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  	newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  	newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  	newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  	newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  	newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  	if (keyValuePairs.ContainsKey ("Intensity"))  		//check required for bfgminer 3.3.0  		newDevice.Intensity = keyValuePairs ["Intensity"];  	newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  	newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  	//try for a 5m reading first  	//some Network Devices (Spondoolies) have wildly innacurate 5s entries  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= (5 * 60)))  		//check for 5m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= 60))  		//check for 1m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 20s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 5s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 1s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  	newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  	newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  	newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  	newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  	newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  	newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  	newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  	newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  	newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  	newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  	if (newDevice.WorkUtility == 0.0) {  		if (newDevice.DeviceElapsed > 0)  			newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  		else if (newDevice.LastShareDifficulty > 0)  			newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  	}  	deviceInformation.Add (newDevice);  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if (keyValuePairs.Count > 0) {  	DeviceInformation newDevice = new DeviceInformation ();  	newDevice.Kind = keyValuePairs.ElementAt (0).Key;  	newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  	if (newDevice.Index == -1)  		continue;  	if (keyValuePairs.ContainsKey ("Enabled"))  		//seen this needed with a user  		newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  	if (keyValuePairs.ContainsKey ("Status"))  		//check required for bfgminer  		newDevice.Status = keyValuePairs ["Status"];  	if (keyValuePairs.ContainsKey ("Name"))  		newDevice.Name = keyValuePairs ["Name"];  	else  		//default to Kind for older RPC API versions  		newDevice.Name = newDevice.Kind;  	//default to Index for older RPC API versions  	newDevice.ID = newDevice.Index;  	if (keyValuePairs.ContainsKey ("ID"))  		newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  	//parse regardless of device type = ASICs may have Temp  	newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  	newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  	newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  	newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  	newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  	newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  	newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  	newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  	if (keyValuePairs.ContainsKey ("Intensity"))  		//check required for bfgminer 3.3.0  		newDevice.Intensity = keyValuePairs ["Intensity"];  	newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  	newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  	//try for a 5m reading first  	//some Network Devices (Spondoolies) have wildly innacurate 5s entries  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= (5 * 60)))  		//check for 5m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= 60))  		//check for 1m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 20s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 5s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 1s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  	newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  	newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  	newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  	newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  	newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  	newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  	newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  	newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  	newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  	newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  	if (newDevice.WorkUtility == 0.0) {  		if (newDevice.DeviceElapsed > 0)  			newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  		else if (newDevice.LastShareDifficulty > 0)  			newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  	}  	deviceInformation.Add (newDevice);  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if (keyValuePairs.Count > 0) {  	DeviceInformation newDevice = new DeviceInformation ();  	newDevice.Kind = keyValuePairs.ElementAt (0).Key;  	newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  	if (newDevice.Index == -1)  		continue;  	if (keyValuePairs.ContainsKey ("Enabled"))  		//seen this needed with a user  		newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  	if (keyValuePairs.ContainsKey ("Status"))  		//check required for bfgminer  		newDevice.Status = keyValuePairs ["Status"];  	if (keyValuePairs.ContainsKey ("Name"))  		newDevice.Name = keyValuePairs ["Name"];  	else  		//default to Kind for older RPC API versions  		newDevice.Name = newDevice.Kind;  	//default to Index for older RPC API versions  	newDevice.ID = newDevice.Index;  	if (keyValuePairs.ContainsKey ("ID"))  		newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  	//parse regardless of device type = ASICs may have Temp  	newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  	newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  	newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  	newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  	newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  	newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  	newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  	newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  	if (keyValuePairs.ContainsKey ("Intensity"))  		//check required for bfgminer 3.3.0  		newDevice.Intensity = keyValuePairs ["Intensity"];  	newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  	newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  	//try for a 5m reading first  	//some Network Devices (Spondoolies) have wildly innacurate 5s entries  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= (5 * 60)))  		//check for 5m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= 60))  		//check for 1m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 20s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 5s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 1s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  	newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  	newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  	newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  	newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  	newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  	newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  	newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  	newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  	newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  	newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  	if (newDevice.WorkUtility == 0.0) {  		if (newDevice.DeviceElapsed > 0)  			newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  		else if (newDevice.LastShareDifficulty > 0)  			newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  	}  	deviceInformation.Add (newDevice);  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if (keyValuePairs.Count > 0) {  	DeviceInformation newDevice = new DeviceInformation ();  	newDevice.Kind = keyValuePairs.ElementAt (0).Key;  	newDevice.Index = TryToParseInt (keyValuePairs' newDevice.Kind' -1);  	if (newDevice.Index == -1)  		continue;  	if (keyValuePairs.ContainsKey ("Enabled"))  		//seen this needed with a user  		newDevice.Enabled = keyValuePairs ["Enabled"].Equals ("Y");  	if (keyValuePairs.ContainsKey ("Status"))  		//check required for bfgminer  		newDevice.Status = keyValuePairs ["Status"];  	if (keyValuePairs.ContainsKey ("Name"))  		newDevice.Name = keyValuePairs ["Name"];  	else  		//default to Kind for older RPC API versions  		newDevice.Name = newDevice.Kind;  	//default to Index for older RPC API versions  	newDevice.ID = newDevice.Index;  	if (keyValuePairs.ContainsKey ("ID"))  		newDevice.ID = TryToParseInt (keyValuePairs' "ID"' newDevice.Index);  	//parse regardless of device type = ASICs may have Temp  	newDevice.Temperature = TryToParseDouble (keyValuePairs' "Temperature"' 0.00);  	newDevice.FanSpeed = TryToParseInt (keyValuePairs' "Fan Speed"' 0);  	newDevice.FanPercent = TryToParseInt (keyValuePairs' "Fan Percent"' 0);  	newDevice.GpuClock = TryToParseInt (keyValuePairs' "GPU Clock"' 0);  	newDevice.MemoryClock = TryToParseInt (keyValuePairs' "Memory Clock"' 0);  	newDevice.GpuVoltage = TryToParseDouble (keyValuePairs' "GPU Voltage"' 0.00);  	newDevice.GpuActivity = TryToParseInt (keyValuePairs' "GPU Activity"' 0);  	newDevice.PowerTune = TryToParseInt (keyValuePairs' "Powertune"' 0);  	if (keyValuePairs.ContainsKey ("Intensity"))  		//check required for bfgminer 3.3.0  		newDevice.Intensity = keyValuePairs ["Intensity"];  	newDevice.DeviceElapsed = TryToParseInt (keyValuePairs' "Device Elapsed"' 0);  	newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  	//try for a 5m reading first  	//some Network Devices (Spondoolies) have wildly innacurate 5s entries  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= (5 * 60)))  		//check for 5m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  	if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  	&& (newDevice.DeviceElapsed >= 60))  		//check for 1m  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 20s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "20s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 5s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5s");  	if (newDevice.CurrentHashrate == 0.0)  		//check for 1s  		newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1s");  	newDevice.AcceptedShares = TryToParseInt (keyValuePairs' "Accepted"' 0);  	newDevice.RejectedShares = TryToParseInt (keyValuePairs' "Rejected"' 0);  	newDevice.HardwareErrors = TryToParseInt (keyValuePairs' "Hardware Errors"' 0);  	newDevice.Utility = TryToParseDouble (keyValuePairs' "Utility"' 0.00);  	newDevice.WorkUtility = TryToParseDouble (keyValuePairs' "Work Utility"' 0.00);  	newDevice.PoolIndex = TryToParseInt (keyValuePairs' "Last Share Pool"' -1);  	newDevice.HardwareErrorsPercent = TryToParseDouble (keyValuePairs' "Device Hardware%"' 0.00);  	newDevice.RejectedSharesPercent = TryToParseDouble (keyValuePairs' "Device Rejected%"' 0.00);  	newDevice.LastShareDifficulty = TryToParseDouble (keyValuePairs' "Last Share Difficulty"' 0.00);  	newDevice.DifficultyAccepted = TryToParseDouble (keyValuePairs' "Difficulty Accepted"' 0.00);  	if (newDevice.WorkUtility == 0.0) {  		if (newDevice.DeviceElapsed > 0)  			newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  		else if (newDevice.LastShareDifficulty > 0)  			newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  	}  	deviceInformation.Add (newDevice);  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: newDevice.AverageHashrate = TryToParseDouble (keyValuePairs' "MHS av"' 0.00) * 1000;  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  && (newDevice.DeviceElapsed >= (5 * 60)))  	//check for 5m  	newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  && (newDevice.DeviceElapsed >= (5 * 60)))  	//check for 5m  	newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "5m");  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if ((newDevice.CurrentHashrate == 0.0) //consider DeviceElapsed for accurate R3-Box stats  && (newDevice.DeviceElapsed >= 60))  	//check for 1m  	newDevice.CurrentHashrate = GetCurrentHashrate (keyValuePairs' "1m");  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if (newDevice.WorkUtility == 0.0) {  	if (newDevice.DeviceElapsed > 0)  		newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  	else if (newDevice.LastShareDifficulty > 0)  		newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  }  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: if (newDevice.DeviceElapsed > 0)  	newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  else if (newDevice.LastShareDifficulty > 0)  	newDevice.WorkUtility = newDevice.Utility / newDevice.LastShareDifficulty;  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,ParseTextForDeviceInformation,The following statement contains a magic number: newDevice.WorkUtility = newDevice.DifficultyAccepted / newDevice.DeviceElapsed * 60;  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,GetCurrentHashrate,The following statement contains a magic number: if (keyValuePairs.ContainsKey (currentRateKey))  	return TryToParseDouble (keyValuePairs' currentRateKey' 0.00) * 1000;  
Magic Number,MultiMiner.Xgminer.Api.Parsers,DeviceInformationParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Xgminer.Api\Parsers\DeviceInformationParser.cs,GetCurrentHashrate,The following statement contains a magic number: return TryToParseDouble (keyValuePairs' currentRateKey' 0.00) * 1000;  
