Implementation smell,Namespace,Class,File,Method,Description
Long Method,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,RegisterCommands,The method has 163 lines of code.
Complex Method,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputAboutInfo,Cyclomatic complexity of the method is 9
Complex Method,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,Cyclomatic complexity of the method is 8
Complex Method,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,Cyclomatic complexity of the method is 9
Complex Method,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputReplBuffer,Cyclomatic complexity of the method is 8
Complex Method,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,Cyclomatic complexity of the method is 13
Long Statement,MultiMiner.TUI.Commands,NetworkCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NetworkCommand.cs,HandleCommand,The length of the statement  "                var networkDevice = app.LocalViewModel.Devices.SingleOrDefault((d) => d.Visible && d.Path.Equals(path' StringComparison.OrdinalIgnoreCase)); " is 140.
Long Statement,MultiMiner.TUI.Commands,StrategiesCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\StrategiesCommand.cs,HandleCommand,The length of the statement  "                        app.EngineConfiguration.StrategyConfiguration.MiningBasis = Engine.Data.Configuration.Strategy.CoinMiningBasis.Profitability; " is 125.
Long Statement,MultiMiner.TUI.Commands,StrategiesCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\StrategiesCommand.cs,HandleCommand,The length of the statement  "                        app.EngineConfiguration.StrategyConfiguration.MiningBasis = Engine.Data.Configuration.Strategy.CoinMiningBasis.Difficulty; " is 122.
Long Statement,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolRemoveCommand,The length of the statement  "                        notificationHandler(String.Format("Pool {0}:{1} removed"' fullPoolList[index].Pool.Host' fullPoolList[index].Pool.Port)); " is 121.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,SetupApplication,The length of the statement  "                    currentProgress = string.Format("Mining will start automatically in {0} seconds..."' app.StartupMiningCountdownSeconds); " is 120.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,LoadSettings,The length of the statement  "            app.EngineConfiguration.LoadStrategyConfiguration(app.PathConfiguration.SharedConfigPath); //needed before refreshing coins " is 123.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,LoadSettings,The length of the statement  "            app.EngineConfiguration.LoadCoinConfigurations(app.PathConfiguration.SharedConfigPath); //needed before refreshing coins " is 120.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputStatus,The length of the statement  "            var hashrateStatus = app.GetHashRateStatusText().Replace("   "' " ").FitLeft(Console.WindowWidth - deviceStatus.Length); " is 120.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputCurrentProgress,The length of the statement  "                WriteText(output' ConsoleColor.White' String.IsNullOrEmpty(currentProgress) ? ConsoleColor.Black : ConsoleColor.DarkBlue); " is 122.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The length of the statement  "                var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty; " is 125.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The length of the statement  "                var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty; " is 146.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The length of the statement  "                    WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray); " is 185.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The length of the statement  "                    WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray); " is 120.
Long Statement,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The length of the statement  "                    WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray); " is 135.
Complex Conditional,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,SetCursorPosition,The conditional expression  "(left < 0) || (left >= Console.WindowWidth) || (top < 0) || (top >= Console.WindowHeight)"  is complex.
Magic Number,MultiMiner.TUI.Commands,DeviceCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\DeviceCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var deviceId = input[2];                    var device = app.GetDeviceById(deviceId);                    if (device != null)                  {                      if ((verb.Equals(CommandArguments.Enable' StringComparison.OrdinalIgnoreCase) ||  						//allow "device disable" even though not in help - POLA  						verb.Equals(CommandArguments.Disable' StringComparison.OrdinalIgnoreCase))                          //can't enable/disable Network Devices                          && (device.Kind != DeviceKind.NET))                      {                          bool enabled = !device.Enabled;                          app.ToggleDevices(new List<DeviceDescriptor> { device }' enabled);                          app.SaveChanges();  						//don't identify by device.Path (for output) - blank for GPUs  						notificationHandler(String.Format("{0} is now {1}"' device.EasyName' enabled ? "enabled" : "disabled"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase)                              //can't enable/disable Network Devices                              && (device.Kind != DeviceKind.NET))                          {                              var symbol = input[3];                                var configs = app.EngineConfiguration.CoinConfigurations                                  .Where(c => String.IsNullOrEmpty(symbol)                                      || (c.PoolGroup.Id.Equals(symbol' StringComparison.OrdinalIgnoreCase)                                      || (c.PoolGroup.Id.ShortCoinSymbol().Equals(symbol' StringComparison.OrdinalIgnoreCase))))                                  .ToList();                                if (configs.Count > 0)                              {                                  var coinName = configs.First().PoolGroup.Name;                                  app.SetDevicesToCoin(new List<DeviceDescriptor> { device }' coinName);                                  app.SaveChanges();                                  notificationHandler(String.Format("{0} set to {1}: type restart to apply"' device.EasyName' coinName));                                  return true; //early exit - success                              }                          }                          else                          {                              var lastWords = String.Join(" "' input.Skip(3).ToArray());                                if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                              {  								var oldName = device.EasyName;                                  app.RenameDevice(device' lastWords);                                  notificationHandler(String.Format("{0} renamed to {1}"' oldName' lastWords));                                  return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,DeviceCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\DeviceCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var deviceId = input[2];                    var device = app.GetDeviceById(deviceId);                    if (device != null)                  {                      if ((verb.Equals(CommandArguments.Enable' StringComparison.OrdinalIgnoreCase) ||  						//allow "device disable" even though not in help - POLA  						verb.Equals(CommandArguments.Disable' StringComparison.OrdinalIgnoreCase))                          //can't enable/disable Network Devices                          && (device.Kind != DeviceKind.NET))                      {                          bool enabled = !device.Enabled;                          app.ToggleDevices(new List<DeviceDescriptor> { device }' enabled);                          app.SaveChanges();  						//don't identify by device.Path (for output) - blank for GPUs  						notificationHandler(String.Format("{0} is now {1}"' device.EasyName' enabled ? "enabled" : "disabled"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase)                              //can't enable/disable Network Devices                              && (device.Kind != DeviceKind.NET))                          {                              var symbol = input[3];                                var configs = app.EngineConfiguration.CoinConfigurations                                  .Where(c => String.IsNullOrEmpty(symbol)                                      || (c.PoolGroup.Id.Equals(symbol' StringComparison.OrdinalIgnoreCase)                                      || (c.PoolGroup.Id.ShortCoinSymbol().Equals(symbol' StringComparison.OrdinalIgnoreCase))))                                  .ToList();                                if (configs.Count > 0)                              {                                  var coinName = configs.First().PoolGroup.Name;                                  app.SetDevicesToCoin(new List<DeviceDescriptor> { device }' coinName);                                  app.SaveChanges();                                  notificationHandler(String.Format("{0} set to {1}: type restart to apply"' device.EasyName' coinName));                                  return true; //early exit - success                              }                          }                          else                          {                              var lastWords = String.Join(" "' input.Skip(3).ToArray());                                if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                              {  								var oldName = device.EasyName;                                  app.RenameDevice(device' lastWords);                                  notificationHandler(String.Format("{0} renamed to {1}"' oldName' lastWords));                                  return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,DeviceCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\DeviceCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var deviceId = input[2];                    var device = app.GetDeviceById(deviceId);                    if (device != null)                  {                      if ((verb.Equals(CommandArguments.Enable' StringComparison.OrdinalIgnoreCase) ||  						//allow "device disable" even though not in help - POLA  						verb.Equals(CommandArguments.Disable' StringComparison.OrdinalIgnoreCase))                          //can't enable/disable Network Devices                          && (device.Kind != DeviceKind.NET))                      {                          bool enabled = !device.Enabled;                          app.ToggleDevices(new List<DeviceDescriptor> { device }' enabled);                          app.SaveChanges();  						//don't identify by device.Path (for output) - blank for GPUs  						notificationHandler(String.Format("{0} is now {1}"' device.EasyName' enabled ? "enabled" : "disabled"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase)                              //can't enable/disable Network Devices                              && (device.Kind != DeviceKind.NET))                          {                              var symbol = input[3];                                var configs = app.EngineConfiguration.CoinConfigurations                                  .Where(c => String.IsNullOrEmpty(symbol)                                      || (c.PoolGroup.Id.Equals(symbol' StringComparison.OrdinalIgnoreCase)                                      || (c.PoolGroup.Id.ShortCoinSymbol().Equals(symbol' StringComparison.OrdinalIgnoreCase))))                                  .ToList();                                if (configs.Count > 0)                              {                                  var coinName = configs.First().PoolGroup.Name;                                  app.SetDevicesToCoin(new List<DeviceDescriptor> { device }' coinName);                                  app.SaveChanges();                                  notificationHandler(String.Format("{0} set to {1}: type restart to apply"' device.EasyName' coinName));                                  return true; //early exit - success                              }                          }                          else                          {                              var lastWords = String.Join(" "' input.Skip(3).ToArray());                                if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                              {  								var oldName = device.EasyName;                                  app.RenameDevice(device' lastWords);                                  notificationHandler(String.Format("{0} renamed to {1}"' oldName' lastWords));                                  return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,DeviceCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\DeviceCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var deviceId = input[2];                    var device = app.GetDeviceById(deviceId);                    if (device != null)                  {                      if ((verb.Equals(CommandArguments.Enable' StringComparison.OrdinalIgnoreCase) ||  						//allow "device disable" even though not in help - POLA  						verb.Equals(CommandArguments.Disable' StringComparison.OrdinalIgnoreCase))                          //can't enable/disable Network Devices                          && (device.Kind != DeviceKind.NET))                      {                          bool enabled = !device.Enabled;                          app.ToggleDevices(new List<DeviceDescriptor> { device }' enabled);                          app.SaveChanges();  						//don't identify by device.Path (for output) - blank for GPUs  						notificationHandler(String.Format("{0} is now {1}"' device.EasyName' enabled ? "enabled" : "disabled"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase)                              //can't enable/disable Network Devices                              && (device.Kind != DeviceKind.NET))                          {                              var symbol = input[3];                                var configs = app.EngineConfiguration.CoinConfigurations                                  .Where(c => String.IsNullOrEmpty(symbol)                                      || (c.PoolGroup.Id.Equals(symbol' StringComparison.OrdinalIgnoreCase)                                      || (c.PoolGroup.Id.ShortCoinSymbol().Equals(symbol' StringComparison.OrdinalIgnoreCase))))                                  .ToList();                                if (configs.Count > 0)                              {                                  var coinName = configs.First().PoolGroup.Name;                                  app.SetDevicesToCoin(new List<DeviceDescriptor> { device }' coinName);                                  app.SaveChanges();                                  notificationHandler(String.Format("{0} set to {1}: type restart to apply"' device.EasyName' coinName));                                  return true; //early exit - success                              }                          }                          else                          {                              var lastWords = String.Join(" "' input.Skip(3).ToArray());                                if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                              {  								var oldName = device.EasyName;                                  app.RenameDevice(device' lastWords);                                  notificationHandler(String.Format("{0} renamed to {1}"' oldName' lastWords));                                  return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,DeviceCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\DeviceCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var deviceId = input[2];                    var device = app.GetDeviceById(deviceId);                    if (device != null)                  {                      if ((verb.Equals(CommandArguments.Enable' StringComparison.OrdinalIgnoreCase) ||  						//allow "device disable" even though not in help - POLA  						verb.Equals(CommandArguments.Disable' StringComparison.OrdinalIgnoreCase))                          //can't enable/disable Network Devices                          && (device.Kind != DeviceKind.NET))                      {                          bool enabled = !device.Enabled;                          app.ToggleDevices(new List<DeviceDescriptor> { device }' enabled);                          app.SaveChanges();  						//don't identify by device.Path (for output) - blank for GPUs  						notificationHandler(String.Format("{0} is now {1}"' device.EasyName' enabled ? "enabled" : "disabled"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase)                              //can't enable/disable Network Devices                              && (device.Kind != DeviceKind.NET))                          {                              var symbol = input[3];                                var configs = app.EngineConfiguration.CoinConfigurations                                  .Where(c => String.IsNullOrEmpty(symbol)                                      || (c.PoolGroup.Id.Equals(symbol' StringComparison.OrdinalIgnoreCase)                                      || (c.PoolGroup.Id.ShortCoinSymbol().Equals(symbol' StringComparison.OrdinalIgnoreCase))))                                  .ToList();                                if (configs.Count > 0)                              {                                  var coinName = configs.First().PoolGroup.Name;                                  app.SetDevicesToCoin(new List<DeviceDescriptor> { device }' coinName);                                  app.SaveChanges();                                  notificationHandler(String.Format("{0} set to {1}: type restart to apply"' device.EasyName' coinName));                                  return true; //early exit - success                              }                          }                          else                          {                              var lastWords = String.Join(" "' input.Skip(3).ToArray());                                if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                              {  								var oldName = device.EasyName;                                  app.RenameDevice(device' lastWords);                                  notificationHandler(String.Format("{0} renamed to {1}"' oldName' lastWords));                                  return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,NetworkCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NetworkCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var path = input[2];                  if (!path.Contains(':')) path = path + ":4028";                    var networkDevice = app.LocalViewModel.Devices.SingleOrDefault((d) => d.Visible && d.Path.Equals(path' StringComparison.OrdinalIgnoreCase));                  if (networkDevice == null)                  {                      networkDevice = app.GetDeviceById(input[2]);                      if (networkDevice.Kind != DeviceKind.NET) networkDevice = null;                  }                    if (networkDevice != null)                  {                      if (verb.Equals(CommandArguments.Restart' StringComparison.OrdinalIgnoreCase))                      {                          app.RestartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Restarting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Start' StringComparison.OrdinalIgnoreCase))                      {                          app.StartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Starting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Stop' StringComparison.OrdinalIgnoreCase))                      {                          app.StopNetworkDevice(networkDevice);                          notificationHandler(String.Format("Stopping {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Reboot' StringComparison.OrdinalIgnoreCase))                      {                          if (app.RebootNetworkDevice(networkDevice))                              notificationHandler(String.Format("Rebooting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Pin' StringComparison.OrdinalIgnoreCase))                      {                          bool sticky;                          app.ToggleNetworkDeviceSticky(networkDevice' out sticky);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' sticky ? "pinned" : "unpinned"));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Hide' StringComparison.OrdinalIgnoreCase))                      {                          //current limitations in how .Visible is treated mean we can only hide and not un-hide                          //hiding means the entry will no longer be in the view model to un-hide                          //the GUI currently has the same limitation - must unhide via XML                          bool hidden;                          app.ToggleNetworkDeviceHidden(networkDevice' out hidden);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' hidden ? "hidden" : "visible"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          var lastWords = String.Join(" "' input.Skip(3).ToArray());                            if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                          {                              app.RenameDevice(networkDevice' lastWords);                              notificationHandler(String.Format("{0} renamed to {1}"' networkDevice.Path' lastWords));                              return true; //early exit - success                          }                          else if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase))                          {                              var index = -1;                              if (int.TryParse(lastWords' out index))                              {                                  index--;                                  if (app.SetNetworkDevicePoolIndex(networkDevice' index))                                      notificationHandler(String.Format("Switching {0} to pool #{1}"' networkDevice.Path' lastWords));                                  else                                      notificationHandler(String.Format("Pool #{0} is invalid for {1}"' lastWords' networkDevice.Path));                                    return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,NetworkCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NetworkCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var path = input[2];                  if (!path.Contains(':')) path = path + ":4028";                    var networkDevice = app.LocalViewModel.Devices.SingleOrDefault((d) => d.Visible && d.Path.Equals(path' StringComparison.OrdinalIgnoreCase));                  if (networkDevice == null)                  {                      networkDevice = app.GetDeviceById(input[2]);                      if (networkDevice.Kind != DeviceKind.NET) networkDevice = null;                  }                    if (networkDevice != null)                  {                      if (verb.Equals(CommandArguments.Restart' StringComparison.OrdinalIgnoreCase))                      {                          app.RestartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Restarting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Start' StringComparison.OrdinalIgnoreCase))                      {                          app.StartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Starting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Stop' StringComparison.OrdinalIgnoreCase))                      {                          app.StopNetworkDevice(networkDevice);                          notificationHandler(String.Format("Stopping {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Reboot' StringComparison.OrdinalIgnoreCase))                      {                          if (app.RebootNetworkDevice(networkDevice))                              notificationHandler(String.Format("Rebooting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Pin' StringComparison.OrdinalIgnoreCase))                      {                          bool sticky;                          app.ToggleNetworkDeviceSticky(networkDevice' out sticky);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' sticky ? "pinned" : "unpinned"));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Hide' StringComparison.OrdinalIgnoreCase))                      {                          //current limitations in how .Visible is treated mean we can only hide and not un-hide                          //hiding means the entry will no longer be in the view model to un-hide                          //the GUI currently has the same limitation - must unhide via XML                          bool hidden;                          app.ToggleNetworkDeviceHidden(networkDevice' out hidden);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' hidden ? "hidden" : "visible"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          var lastWords = String.Join(" "' input.Skip(3).ToArray());                            if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                          {                              app.RenameDevice(networkDevice' lastWords);                              notificationHandler(String.Format("{0} renamed to {1}"' networkDevice.Path' lastWords));                              return true; //early exit - success                          }                          else if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase))                          {                              var index = -1;                              if (int.TryParse(lastWords' out index))                              {                                  index--;                                  if (app.SetNetworkDevicePoolIndex(networkDevice' index))                                      notificationHandler(String.Format("Switching {0} to pool #{1}"' networkDevice.Path' lastWords));                                  else                                      notificationHandler(String.Format("Pool #{0} is invalid for {1}"' lastWords' networkDevice.Path));                                    return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,NetworkCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NetworkCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var path = input[2];                  if (!path.Contains(':')) path = path + ":4028";                    var networkDevice = app.LocalViewModel.Devices.SingleOrDefault((d) => d.Visible && d.Path.Equals(path' StringComparison.OrdinalIgnoreCase));                  if (networkDevice == null)                  {                      networkDevice = app.GetDeviceById(input[2]);                      if (networkDevice.Kind != DeviceKind.NET) networkDevice = null;                  }                    if (networkDevice != null)                  {                      if (verb.Equals(CommandArguments.Restart' StringComparison.OrdinalIgnoreCase))                      {                          app.RestartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Restarting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Start' StringComparison.OrdinalIgnoreCase))                      {                          app.StartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Starting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Stop' StringComparison.OrdinalIgnoreCase))                      {                          app.StopNetworkDevice(networkDevice);                          notificationHandler(String.Format("Stopping {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Reboot' StringComparison.OrdinalIgnoreCase))                      {                          if (app.RebootNetworkDevice(networkDevice))                              notificationHandler(String.Format("Rebooting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Pin' StringComparison.OrdinalIgnoreCase))                      {                          bool sticky;                          app.ToggleNetworkDeviceSticky(networkDevice' out sticky);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' sticky ? "pinned" : "unpinned"));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Hide' StringComparison.OrdinalIgnoreCase))                      {                          //current limitations in how .Visible is treated mean we can only hide and not un-hide                          //hiding means the entry will no longer be in the view model to un-hide                          //the GUI currently has the same limitation - must unhide via XML                          bool hidden;                          app.ToggleNetworkDeviceHidden(networkDevice' out hidden);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' hidden ? "hidden" : "visible"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          var lastWords = String.Join(" "' input.Skip(3).ToArray());                            if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                          {                              app.RenameDevice(networkDevice' lastWords);                              notificationHandler(String.Format("{0} renamed to {1}"' networkDevice.Path' lastWords));                              return true; //early exit - success                          }                          else if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase))                          {                              var index = -1;                              if (int.TryParse(lastWords' out index))                              {                                  index--;                                  if (app.SetNetworkDevicePoolIndex(networkDevice' index))                                      notificationHandler(String.Format("Switching {0} to pool #{1}"' networkDevice.Path' lastWords));                                  else                                      notificationHandler(String.Format("Pool #{0} is invalid for {1}"' lastWords' networkDevice.Path));                                    return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,NetworkCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NetworkCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var path = input[2];                  if (!path.Contains(':')) path = path + ":4028";                    var networkDevice = app.LocalViewModel.Devices.SingleOrDefault((d) => d.Visible && d.Path.Equals(path' StringComparison.OrdinalIgnoreCase));                  if (networkDevice == null)                  {                      networkDevice = app.GetDeviceById(input[2]);                      if (networkDevice.Kind != DeviceKind.NET) networkDevice = null;                  }                    if (networkDevice != null)                  {                      if (verb.Equals(CommandArguments.Restart' StringComparison.OrdinalIgnoreCase))                      {                          app.RestartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Restarting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Start' StringComparison.OrdinalIgnoreCase))                      {                          app.StartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Starting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Stop' StringComparison.OrdinalIgnoreCase))                      {                          app.StopNetworkDevice(networkDevice);                          notificationHandler(String.Format("Stopping {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Reboot' StringComparison.OrdinalIgnoreCase))                      {                          if (app.RebootNetworkDevice(networkDevice))                              notificationHandler(String.Format("Rebooting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Pin' StringComparison.OrdinalIgnoreCase))                      {                          bool sticky;                          app.ToggleNetworkDeviceSticky(networkDevice' out sticky);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' sticky ? "pinned" : "unpinned"));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Hide' StringComparison.OrdinalIgnoreCase))                      {                          //current limitations in how .Visible is treated mean we can only hide and not un-hide                          //hiding means the entry will no longer be in the view model to un-hide                          //the GUI currently has the same limitation - must unhide via XML                          bool hidden;                          app.ToggleNetworkDeviceHidden(networkDevice' out hidden);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' hidden ? "hidden" : "visible"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          var lastWords = String.Join(" "' input.Skip(3).ToArray());                            if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                          {                              app.RenameDevice(networkDevice' lastWords);                              notificationHandler(String.Format("{0} renamed to {1}"' networkDevice.Path' lastWords));                              return true; //early exit - success                          }                          else if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase))                          {                              var index = -1;                              if (int.TryParse(lastWords' out index))                              {                                  index--;                                  if (app.SetNetworkDevicePoolIndex(networkDevice' index))                                      notificationHandler(String.Format("Switching {0} to pool #{1}"' networkDevice.Path' lastWords));                                  else                                      notificationHandler(String.Format("Pool #{0} is invalid for {1}"' lastWords' networkDevice.Path));                                    return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,NetworkCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NetworkCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 3)              {                  var verb = input[1];                  var path = input[2];                  if (!path.Contains(':')) path = path + ":4028";                    var networkDevice = app.LocalViewModel.Devices.SingleOrDefault((d) => d.Visible && d.Path.Equals(path' StringComparison.OrdinalIgnoreCase));                  if (networkDevice == null)                  {                      networkDevice = app.GetDeviceById(input[2]);                      if (networkDevice.Kind != DeviceKind.NET) networkDevice = null;                  }                    if (networkDevice != null)                  {                      if (verb.Equals(CommandArguments.Restart' StringComparison.OrdinalIgnoreCase))                      {                          app.RestartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Restarting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Start' StringComparison.OrdinalIgnoreCase))                      {                          app.StartNetworkDevice(networkDevice);                          notificationHandler(String.Format("Starting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Stop' StringComparison.OrdinalIgnoreCase))                      {                          app.StopNetworkDevice(networkDevice);                          notificationHandler(String.Format("Stopping {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Reboot' StringComparison.OrdinalIgnoreCase))                      {                          if (app.RebootNetworkDevice(networkDevice))                              notificationHandler(String.Format("Rebooting {0}"' networkDevice.Path));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Pin' StringComparison.OrdinalIgnoreCase))                      {                          bool sticky;                          app.ToggleNetworkDeviceSticky(networkDevice' out sticky);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' sticky ? "pinned" : "unpinned"));                          return true; //early exit - success                      }                      else if (verb.Equals(CommandArguments.Hide' StringComparison.OrdinalIgnoreCase))                      {                          //current limitations in how .Visible is treated mean we can only hide and not un-hide                          //hiding means the entry will no longer be in the view model to un-hide                          //the GUI currently has the same limitation - must unhide via XML                          bool hidden;                          app.ToggleNetworkDeviceHidden(networkDevice' out hidden);                          notificationHandler(String.Format("{0} is now {1}"' networkDevice.Path' hidden ? "hidden" : "visible"));                          return true; //early exit - success                      }                      else if (input.Count() >= 4)                      {                          var lastWords = String.Join(" "' input.Skip(3).ToArray());                            if (verb.Equals(CommandArguments.Name' StringComparison.OrdinalIgnoreCase))                          {                              app.RenameDevice(networkDevice' lastWords);                              notificationHandler(String.Format("{0} renamed to {1}"' networkDevice.Path' lastWords));                              return true; //early exit - success                          }                          else if (verb.Equals(CommandArguments.Switch' StringComparison.OrdinalIgnoreCase))                          {                              var index = -1;                              if (int.TryParse(lastWords' out index))                              {                                  index--;                                  if (app.SetNetworkDevicePoolIndex(networkDevice' index))                                      notificationHandler(String.Format("Switching {0} to pool #{1}"' networkDevice.Path' lastWords));                                  else                                      notificationHandler(String.Format("Pool #{0} is invalid for {1}"' lastWords' networkDevice.Path));                                    return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,NotificationsCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NotificationsCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                  if (verb.Equals(CommandArguments.Clear' StringComparison.OrdinalIgnoreCase))                  {                      notifications.Clear();                      return true; //early exit - success                  }                  else if (input.Count() == 3)                  {                      var last = input.Last();                      var index = -1;                      if (Int32.TryParse(last' out index))                      {                          index--; //user enters 1-based                          if ((index >= 0) && (index < notifications.Count))                          {                              if (verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase))                              {                                  notifications.RemoveAt(index);                                  return true; //early exit - success                              }                              else if (verb.Equals(CommandArguments.Act' StringComparison.OrdinalIgnoreCase))                              {                                  notifications[index].ClickHandler();                                  return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,NotificationsCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\NotificationsCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                  if (verb.Equals(CommandArguments.Clear' StringComparison.OrdinalIgnoreCase))                  {                      notifications.Clear();                      return true; //early exit - success                  }                  else if (input.Count() == 3)                  {                      var last = input.Last();                      var index = -1;                      if (Int32.TryParse(last' out index))                      {                          index--; //user enters 1-based                          if ((index >= 0) && (index < notifications.Count))                          {                              if (verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase))                              {                                  notifications.RemoveAt(index);                                  return true; //early exit - success                              }                              else if (verb.Equals(CommandArguments.Act' StringComparison.OrdinalIgnoreCase))                              {                                  notifications[index].ClickHandler();                                  return true; //early exit - success                              }                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,ScreenCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\ScreenCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() == 2)              {                  if (!screenManager.SetCurrentScreen(input[1]))                      //unknown screen specified                      notificationHandler(String.Format("unknown screen: {0}"' input[1]));              }              else                  screenManager.AdvanceCurrentScreen();
Magic Number,MultiMiner.TUI.Commands,StrategiesCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\StrategiesCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var firstArgument = input[1];                  if (firstArgument.Equals(CommandArguments.On' StringComparison.OrdinalIgnoreCase))                  {                      app.EngineConfiguration.StrategyConfiguration.AutomaticallyMineCoins = true;                      notificationHandler("Auto mining strategies enabled");                  }                  else if (firstArgument.Equals(CommandArguments.Off' StringComparison.OrdinalIgnoreCase))                  {                      app.EngineConfiguration.StrategyConfiguration.AutomaticallyMineCoins = false;                      notificationHandler("Auto mining strategies disabled");                  }                  else if (firstArgument.Equals(CommandArguments.Set' StringComparison.OrdinalIgnoreCase))                  {                      var lastArgument = input.Last();                      if (lastArgument.Equals(CommandArguments.Profit' StringComparison.OrdinalIgnoreCase))                          app.EngineConfiguration.StrategyConfiguration.MiningBasis = Engine.Data.Configuration.Strategy.CoinMiningBasis.Profitability;                      else if (lastArgument.Equals(CommandArguments.Diff' StringComparison.OrdinalIgnoreCase))                          app.EngineConfiguration.StrategyConfiguration.MiningBasis = Engine.Data.Configuration.Strategy.CoinMiningBasis.Difficulty;                      else if (lastArgument.Equals(CommandArguments.Price' StringComparison.OrdinalIgnoreCase))                          app.EngineConfiguration.StrategyConfiguration.MiningBasis = Engine.Data.Configuration.Strategy.CoinMiningBasis.Price;                      else                          return false; //early exit' wrong syntax                        notificationHandler("Auto mining basis set to " + app.EngineConfiguration.StrategyConfiguration.MiningBasis);                  }                  else                      return false; //early exit' wrong syntax                    app.EngineConfiguration.SaveStrategyConfiguration();              }              else                  return false;
Magic Number,MultiMiner.TUI.Commands,SwitchAllCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\SwitchAllCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() == 2)              {                  app.SetAllDevicesToCoin(input[1]' true);                  return true;              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var verb = input[1];                    bool add = verb.Equals(CommandArguments.Add' StringComparison.OrdinalIgnoreCase);                  bool remove = verb.Equals(CommandArguments.Remove' StringComparison.OrdinalIgnoreCase);                  bool list = verb.Equals(CommandArguments.List' StringComparison.OrdinalIgnoreCase);                  bool edit = verb.Equals(CommandArguments.Edit' StringComparison.OrdinalIgnoreCase);                    if (list)                  {                      var symbol = String.Empty;                      if (input.Count() >= 3)                          symbol = input[2];                        HandlePoolListCommand(symbol);                      return true; //early exit                  }                  else if (remove)                  {                      if (HandlePoolRemoveCommand(input))                          return true;                  }                  else if (edit)                  {                      if ((input.Count() == 6) && HandlePoolEditCommand(input))                          return true;                  }                  else if (input.Count() >= 3)                  {                      var symbol = input[2];                        CoinApi.Data.CoinInformation coin = app.CoinApiInformation.SingleOrDefault(                          c => c.Symbol.Equals(symbol' StringComparison.OrdinalIgnoreCase)                          || c.Symbol.ShortCoinSymbol().Equals(symbol' StringComparison.Ordinal));                        if (coin == null)                      {                          notificationHandler(String.Format("Unknown coin: {0}"' symbol));                          return true; //early exit                      }                      else if (input.Count() >= 4)                      {                          var url = input[3];                            if (add && (input.Count() == 6))                          {                              var user = input[4];                              var pass = input[5];                                app.AddNewPool(coin' url' user' pass);                              return true; //early exit                          }                      }                  }              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolEditCommand,The following statement contains a magic number: var symbol = input[2];
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolEditCommand,The following statement contains a magic number: var url = input[3];
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolEditCommand,The following statement contains a magic number: var user = input[4];
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolEditCommand,The following statement contains a magic number: if (poolConfig != null)              {                  var pass = input[5];                  Uri uri = new UriBuilder(url).Uri;                    poolConfig.Host = uri.GetComponents(UriComponents.AbsoluteUri & ~UriComponents.Port' UriFormat.UriEscaped);                  poolConfig.Port = uri.Port;                  poolConfig.Password = pass;                  poolConfig.Username = user;                  app.EngineConfiguration.SaveCoinConfigurations();                    notificationHandler(String.Format("Pool {0} updated"' url));                    return true;              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolRemoveCommand,The following statement contains a magic number: var symbol = input[2];
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolRemoveCommand,The following statement contains a magic number: if (coin == null)              {                  var index = -1;                  if (int.TryParse(symbol' out index))                  {                      index--;                      var fullPoolList = GetPoolList();                      if ((index >= 0) && (index < fullPoolList.Count))                      {                          fullPoolList[index].Configuration.Pools.Remove(fullPoolList[index].Pool);                          app.EngineConfiguration.SaveCoinConfigurations();                          notificationHandler(String.Format("Pool {0}:{1} removed"' fullPoolList[index].Pool.Host' fullPoolList[index].Pool.Port));                          return true; //early exit                        }                      notificationHandler(String.Format("Invalid pool number: {0}"' symbol));                      return true; //early exit                  }              }              else if (input.Count() >= 4)              {                  var url = input[3];                  var user = input.Count() > 4 ? input[4] : String.Empty;                    if (app.RemoveExistingPool(coin.PoolGroup.Id' url' user))                      notificationHandler(String.Format("Pool {0} removed"' url));                  else                      notificationHandler(String.Format("Pool {0} not found"' url));                  return true; //early exit              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolRemoveCommand,The following statement contains a magic number: if (coin == null)              {                  var index = -1;                  if (int.TryParse(symbol' out index))                  {                      index--;                      var fullPoolList = GetPoolList();                      if ((index >= 0) && (index < fullPoolList.Count))                      {                          fullPoolList[index].Configuration.Pools.Remove(fullPoolList[index].Pool);                          app.EngineConfiguration.SaveCoinConfigurations();                          notificationHandler(String.Format("Pool {0}:{1} removed"' fullPoolList[index].Pool.Host' fullPoolList[index].Pool.Port));                          return true; //early exit                        }                      notificationHandler(String.Format("Invalid pool number: {0}"' symbol));                      return true; //early exit                  }              }              else if (input.Count() >= 4)              {                  var url = input[3];                  var user = input.Count() > 4 ? input[4] : String.Empty;                    if (app.RemoveExistingPool(coin.PoolGroup.Id' url' user))                      notificationHandler(String.Format("Pool {0} removed"' url));                  else                      notificationHandler(String.Format("Pool {0} not found"' url));                  return true; //early exit              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolRemoveCommand,The following statement contains a magic number: if (coin == null)              {                  var index = -1;                  if (int.TryParse(symbol' out index))                  {                      index--;                      var fullPoolList = GetPoolList();                      if ((index >= 0) && (index < fullPoolList.Count))                      {                          fullPoolList[index].Configuration.Pools.Remove(fullPoolList[index].Pool);                          app.EngineConfiguration.SaveCoinConfigurations();                          notificationHandler(String.Format("Pool {0}:{1} removed"' fullPoolList[index].Pool.Host' fullPoolList[index].Pool.Port));                          return true; //early exit                        }                      notificationHandler(String.Format("Invalid pool number: {0}"' symbol));                      return true; //early exit                  }              }              else if (input.Count() >= 4)              {                  var url = input[3];                  var user = input.Count() > 4 ? input[4] : String.Empty;                    if (app.RemoveExistingPool(coin.PoolGroup.Id' url' user))                      notificationHandler(String.Format("Pool {0} removed"' url));                  else                      notificationHandler(String.Format("Pool {0} not found"' url));                  return true; //early exit              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolRemoveCommand,The following statement contains a magic number: if (coin == null)              {                  var index = -1;                  if (int.TryParse(symbol' out index))                  {                      index--;                      var fullPoolList = GetPoolList();                      if ((index >= 0) && (index < fullPoolList.Count))                      {                          fullPoolList[index].Configuration.Pools.Remove(fullPoolList[index].Pool);                          app.EngineConfiguration.SaveCoinConfigurations();                          notificationHandler(String.Format("Pool {0}:{1} removed"' fullPoolList[index].Pool.Host' fullPoolList[index].Pool.Port));                          return true; //early exit                        }                      notificationHandler(String.Format("Invalid pool number: {0}"' symbol));                      return true; //early exit                  }              }              else if (input.Count() >= 4)              {                  var url = input[3];                  var user = input.Count() > 4 ? input[4] : String.Empty;                    if (app.RemoveExistingPool(coin.PoolGroup.Id' url' user))                      notificationHandler(String.Format("Pool {0} removed"' url));                  else                      notificationHandler(String.Format("Pool {0} not found"' url));                  return true; //early exit              }
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolListCommand,The following statement contains a magic number: filteredPoolList.ForEach((p) =>              {                  UriBuilder builder = new UriBuilder(p.Pool.Host.Trim());                  builder.Port = p.Pool.Port;                    replBuffer.Add((fullPoolList.IndexOf(p) + 1).ToString().FitLeft(2) + " "                      + p.Configuration.PoolGroup.Id.ShortCoinSymbol().PadFitRight(8)                      + builder.Uri.ToString().ShortHostFromHost().PadFitRight(47)                      + p.Pool.Username.PadFitRight(20));              });
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolListCommand,The following statement contains a magic number: filteredPoolList.ForEach((p) =>              {                  UriBuilder builder = new UriBuilder(p.Pool.Host.Trim());                  builder.Port = p.Pool.Port;                    replBuffer.Add((fullPoolList.IndexOf(p) + 1).ToString().FitLeft(2) + " "                      + p.Configuration.PoolGroup.Id.ShortCoinSymbol().PadFitRight(8)                      + builder.Uri.ToString().ShortHostFromHost().PadFitRight(47)                      + p.Pool.Username.PadFitRight(20));              });
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolListCommand,The following statement contains a magic number: filteredPoolList.ForEach((p) =>              {                  UriBuilder builder = new UriBuilder(p.Pool.Host.Trim());                  builder.Port = p.Pool.Port;                    replBuffer.Add((fullPoolList.IndexOf(p) + 1).ToString().FitLeft(2) + " "                      + p.Configuration.PoolGroup.Id.ShortCoinSymbol().PadFitRight(8)                      + builder.Uri.ToString().ShortHostFromHost().PadFitRight(47)                      + p.Pool.Username.PadFitRight(20));              });
Magic Number,MultiMiner.TUI.Commands,PoolCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\PoolCommand.cs,HandlePoolListCommand,The following statement contains a magic number: filteredPoolList.ForEach((p) =>              {                  UriBuilder builder = new UriBuilder(p.Pool.Host.Trim());                  builder.Port = p.Pool.Port;                    replBuffer.Add((fullPoolList.IndexOf(p) + 1).ToString().FitLeft(2) + " "                      + p.Configuration.PoolGroup.Id.ShortCoinSymbol().PadFitRight(8)                      + builder.Uri.ToString().ShortHostFromHost().PadFitRight(47)                      + p.Pool.Username.PadFitRight(20));              });
Magic Number,MultiMiner.TUI.Commands.Settings,CoinApiCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\CoinApiCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() == 2)              {                  var arg1 = input[1];                  if (arg1.Equals(SettingArguments.CoinWarz' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.UseCoinWarzApi = true;                      app.ApplicationConfiguration.UseWhatMineApi = false;                      app.ApplicationConfiguration.UseWhatToMineApi = false;                      success = true;                  }                  else if (arg1.Equals(SettingArguments.WhatToMine' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.UseCoinWarzApi = false;                      app.ApplicationConfiguration.UseWhatMineApi = false;                      app.ApplicationConfiguration.UseWhatToMineApi = true;                      success = true;                  }                    if (success)                  {                      app.ApplicationConfiguration.SaveApplicationConfiguration();                      notificationHandler(String.Format("Preferred Coin API set to: {0}"' arg1));                  }              }
Magic Number,MultiMiner.TUI.Commands.Settings,CoinWarzCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\CoinWarzCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() == 3)              {                  var arg1 = input[1];                  var arg2 = input[2];                  if (arg1.Equals(SettingArguments.ApiKey' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.CoinWarzApiKey = arg2;                      app.ApplicationConfiguration.SaveApplicationConfiguration();                      notificationHandler(String.Format("CoinWarz API key set: {0}"' arg2));                      return true;                  }              }
Magic Number,MultiMiner.TUI.Commands.Settings,CoinWarzCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\CoinWarzCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() == 3)              {                  var arg1 = input[1];                  var arg2 = input[2];                  if (arg1.Equals(SettingArguments.ApiKey' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.CoinWarzApiKey = arg2;                      app.ApplicationConfiguration.SaveApplicationConfiguration();                      notificationHandler(String.Format("CoinWarz API key set: {0}"' arg2));                      return true;                  }              }
Magic Number,MultiMiner.TUI.Commands.Settings,MobileMinerCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\MobileMinerCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var arg1 = input[1];                  if (arg1.Equals(SettingArguments.On' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.MobileMinerMonitoring = true;                      notificationHandler(String.Format("MobileMiner monitoring set to: {0}"' arg1));                      success = true;                  }                  else if (arg1.Equals(SettingArguments.Off' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.MobileMinerMonitoring = true;                      notificationHandler(String.Format("MobileMiner monitoring set to: {0}"' arg1));                      success = true;                  }                  else if (input.Count() >= 3)                  {                      var arg2 = input[1];                      if (arg1.Equals(SettingArguments.Email' StringComparison.OrdinalIgnoreCase))                      {                          app.ApplicationConfiguration.MobileMinerEmailAddress = arg2;                          notificationHandler(String.Format("MobileMiner email set to: {0}"' arg1));                          success = true;                      }                      else if (arg1.Equals(SettingArguments.AppKey' StringComparison.OrdinalIgnoreCase))                      {                          app.ApplicationConfiguration.MobileMinerApplicationKey = arg2;                          notificationHandler(String.Format("MobileMiner appkey set to: {0}"' arg1));                          success = true;                      }                  }              }
Magic Number,MultiMiner.TUI.Commands.Settings,MobileMinerCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\MobileMinerCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var arg1 = input[1];                  if (arg1.Equals(SettingArguments.On' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.MobileMinerMonitoring = true;                      notificationHandler(String.Format("MobileMiner monitoring set to: {0}"' arg1));                      success = true;                  }                  else if (arg1.Equals(SettingArguments.Off' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.MobileMinerMonitoring = true;                      notificationHandler(String.Format("MobileMiner monitoring set to: {0}"' arg1));                      success = true;                  }                  else if (input.Count() >= 3)                  {                      var arg2 = input[1];                      if (arg1.Equals(SettingArguments.Email' StringComparison.OrdinalIgnoreCase))                      {                          app.ApplicationConfiguration.MobileMinerEmailAddress = arg2;                          notificationHandler(String.Format("MobileMiner email set to: {0}"' arg1));                          success = true;                      }                      else if (arg1.Equals(SettingArguments.AppKey' StringComparison.OrdinalIgnoreCase))                      {                          app.ApplicationConfiguration.MobileMinerApplicationKey = arg2;                          notificationHandler(String.Format("MobileMiner appkey set to: {0}"' arg1));                          success = true;                      }                  }              }
Magic Number,MultiMiner.TUI.Commands.Settings,PerksCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\PerksCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var arg1 = input[1];                    if (arg1.Equals(SettingArguments.On' StringComparison.OrdinalIgnoreCase))                  {                      app.PerksConfiguration.PerksEnabled = true;                      app.PerksConfiguration.ShowExchangeRates = true;                      app.PerksConfiguration.ShowIncomeInUsd = true;                      app.PerksConfiguration.ShowIncomeRates = true;                      notificationHandler(String.Format("Perks set to: {0}"' arg1));                      success = true;                  }                  else if (arg1.Equals(SettingArguments.Off' StringComparison.OrdinalIgnoreCase))                  {                      app.PerksConfiguration.PerksEnabled = false;                      notificationHandler(String.Format("Perks set to: {0}"' arg1));                      success = true;                  }                  else if (input.Count() == 3)                  {                      var arg2 = input[2];                      var percent = 1;                        if (arg1.Equals(SettingArguments.Percent' StringComparison.OrdinalIgnoreCase)                          && int.TryParse(arg2' out percent)                          && (percent >= 1))                      {                          notificationHandler(String.Format("Perks donation percent set to: {0}"' arg2));                          success = true;                      }                  }                    if (success)                      app.PerksConfiguration.SavePerksConfiguration();              }
Magic Number,MultiMiner.TUI.Commands.Settings,PerksCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\PerksCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var arg1 = input[1];                    if (arg1.Equals(SettingArguments.On' StringComparison.OrdinalIgnoreCase))                  {                      app.PerksConfiguration.PerksEnabled = true;                      app.PerksConfiguration.ShowExchangeRates = true;                      app.PerksConfiguration.ShowIncomeInUsd = true;                      app.PerksConfiguration.ShowIncomeRates = true;                      notificationHandler(String.Format("Perks set to: {0}"' arg1));                      success = true;                  }                  else if (arg1.Equals(SettingArguments.Off' StringComparison.OrdinalIgnoreCase))                  {                      app.PerksConfiguration.PerksEnabled = false;                      notificationHandler(String.Format("Perks set to: {0}"' arg1));                      success = true;                  }                  else if (input.Count() == 3)                  {                      var arg2 = input[2];                      var percent = 1;                        if (arg1.Equals(SettingArguments.Percent' StringComparison.OrdinalIgnoreCase)                          && int.TryParse(arg2' out percent)                          && (percent >= 1))                      {                          notificationHandler(String.Format("Perks donation percent set to: {0}"' arg2));                          success = true;                      }                  }                    if (success)                      app.PerksConfiguration.SavePerksConfiguration();              }
Magic Number,MultiMiner.TUI.Commands.Settings,PerksCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\PerksCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() >= 2)              {                  var arg1 = input[1];                    if (arg1.Equals(SettingArguments.On' StringComparison.OrdinalIgnoreCase))                  {                      app.PerksConfiguration.PerksEnabled = true;                      app.PerksConfiguration.ShowExchangeRates = true;                      app.PerksConfiguration.ShowIncomeInUsd = true;                      app.PerksConfiguration.ShowIncomeRates = true;                      notificationHandler(String.Format("Perks set to: {0}"' arg1));                      success = true;                  }                  else if (arg1.Equals(SettingArguments.Off' StringComparison.OrdinalIgnoreCase))                  {                      app.PerksConfiguration.PerksEnabled = false;                      notificationHandler(String.Format("Perks set to: {0}"' arg1));                      success = true;                  }                  else if (input.Count() == 3)                  {                      var arg2 = input[2];                      var percent = 1;                        if (arg1.Equals(SettingArguments.Percent' StringComparison.OrdinalIgnoreCase)                          && int.TryParse(arg2' out percent)                          && (percent >= 1))                      {                          notificationHandler(String.Format("Perks donation percent set to: {0}"' arg2));                          success = true;                      }                  }                    if (success)                      app.PerksConfiguration.SavePerksConfiguration();              }
Magic Number,MultiMiner.TUI.Commands.Settings,WhatMineCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\WhatMineCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() == 3)              {                  var arg1 = input[1];                  var arg2 = input[2];                  if (arg1.Equals(SettingArguments.ApiKey' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.WhatMineApiKey = arg2;                      app.ApplicationConfiguration.SaveApplicationConfiguration();                      notificationHandler(String.Format("WhatMine API key set: {0}"' arg2));                      return true;                  }              }
Magic Number,MultiMiner.TUI.Commands.Settings,WhatMineCommand,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Commands\Settings\WhatMineCommand.cs,HandleCommand,The following statement contains a magic number: if (input.Count() == 3)              {                  var arg1 = input[1];                  var arg2 = input[2];                  if (arg1.Equals(SettingArguments.ApiKey' StringComparison.OrdinalIgnoreCase))                  {                      app.ApplicationConfiguration.WhatMineApiKey = arg2;                      app.ApplicationConfiguration.SaveApplicationConfiguration();                      notificationHandler(String.Format("WhatMine API key set: {0}"' arg2));                      return true;                  }              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputAboutInfo,The following statement contains a magic number: if (SetCursorPosition(col' row))              {                  var versionText = String.Format(" {0}"' minerVersion);                  var copyrightText = String.Format("(C) 2013-{0} - {1}"' compileDate.Year' "http://multiminerapp.com");                  WriteText(versionText.PadRight(8)' ConsoleColor.White);                    col = versionText.Length + 2;                  if (SetCursorPosition(col' row))                      WriteText("["' ConsoleColor.DarkGray);                    col++;                  if (SetCursorPosition(col' row))                      WriteText(copyrightText' ConsoleColor.Gray);                    col += copyrightText.Length;                  if (SetCursorPosition(col' row))                      WriteText("]".PadRight(Console.WindowWidth - col)' ConsoleColor.DarkGray);              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputAboutInfo,The following statement contains a magic number: if (SetCursorPosition(col' row))              {                  var versionText = String.Format(" {0}"' minerVersion);                  var copyrightText = String.Format("(C) 2013-{0} - {1}"' compileDate.Year' "http://multiminerapp.com");                  WriteText(versionText.PadRight(8)' ConsoleColor.White);                    col = versionText.Length + 2;                  if (SetCursorPosition(col' row))                      WriteText("["' ConsoleColor.DarkGray);                    col++;                  if (SetCursorPosition(col' row))                      WriteText(copyrightText' ConsoleColor.Gray);                    col += copyrightText.Length;                  if (SetCursorPosition(col' row))                      WriteText("]".PadRight(Console.WindowWidth - col)' ConsoleColor.DarkGray);              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,RegisterSettings,The following statement contains a magic number: settingsProcessor.RegisterCommand(                  CommandNames.Help'                  CommandAliases.Help'                  "[setting]"'                  new string[]                  {                      "help"'                      "h mobileminer"                  }'                  (input) =>                  {                      if (input.Count() <= 2)                      {                          OutputCommandHelp(settingsProcessor' input);                          return true;                      }                      return false;                  });
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,RegisterCommands,The following statement contains a magic number: commandProcessor.RegisterCommand(                  CommandNames.Help'                   CommandAliases.Help'                  "[command]"'                  new string[]                   {                      "help"'                      "h pool"                  }'                  (input) =>              {                  if (input.Count() <= 2)                  {                      OutputCommandHelp(commandProcessor' input);                      return true;                  }                  return false;              });
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,StartupApplication,The following statement contains a magic number: if (ApplicationViewModel.KillOwnedProcesses())                  //otherwise may still be prompted below by check for disowned miners                  System.Threading.Thread.Sleep(500);
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.DateTime.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinName.PadFitRight(9)' ConsoleColor.White);                    if (SetCursorPosition(23' i + offset))                      WriteText(System.IO.Path.GetFileName(logEntry.ExecutablePath).PadFitRight(13));                    var lastColWidth = 16;                  var col = 36;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Arguments.PadFitRight(Console.BufferWidth - col - lastColWidth)' ConsoleColor.DarkGray);                    if (SetCursorPosition(Console.BufferWidth - lastColWidth' i + offset))                      WriteText(logEntry.Reason.PadFitRight(lastColWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.DateTime.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinName.PadFitRight(9)' ConsoleColor.White);                    if (SetCursorPosition(23' i + offset))                      WriteText(System.IO.Path.GetFileName(logEntry.ExecutablePath).PadFitRight(13));                    var lastColWidth = 16;                  var col = 36;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Arguments.PadFitRight(Console.BufferWidth - col - lastColWidth)' ConsoleColor.DarkGray);                    if (SetCursorPosition(Console.BufferWidth - lastColWidth' i + offset))                      WriteText(logEntry.Reason.PadFitRight(lastColWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.DateTime.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinName.PadFitRight(9)' ConsoleColor.White);                    if (SetCursorPosition(23' i + offset))                      WriteText(System.IO.Path.GetFileName(logEntry.ExecutablePath).PadFitRight(13));                    var lastColWidth = 16;                  var col = 36;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Arguments.PadFitRight(Console.BufferWidth - col - lastColWidth)' ConsoleColor.DarkGray);                    if (SetCursorPosition(Console.BufferWidth - lastColWidth' i + offset))                      WriteText(logEntry.Reason.PadFitRight(lastColWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.DateTime.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinName.PadFitRight(9)' ConsoleColor.White);                    if (SetCursorPosition(23' i + offset))                      WriteText(System.IO.Path.GetFileName(logEntry.ExecutablePath).PadFitRight(13));                    var lastColWidth = 16;                  var col = 36;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Arguments.PadFitRight(Console.BufferWidth - col - lastColWidth)' ConsoleColor.DarkGray);                    if (SetCursorPosition(Console.BufferWidth - lastColWidth' i + offset))                      WriteText(logEntry.Reason.PadFitRight(lastColWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.DateTime.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinName.PadFitRight(9)' ConsoleColor.White);                    if (SetCursorPosition(23' i + offset))                      WriteText(System.IO.Path.GetFileName(logEntry.ExecutablePath).PadFitRight(13));                    var lastColWidth = 16;                  var col = 36;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Arguments.PadFitRight(Console.BufferWidth - col - lastColWidth)' ConsoleColor.DarkGray);                    if (SetCursorPosition(Console.BufferWidth - lastColWidth' i + offset))                      WriteText(logEntry.Reason.PadFitRight(lastColWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.DateTime.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinName.PadFitRight(9)' ConsoleColor.White);                    if (SetCursorPosition(23' i + offset))                      WriteText(System.IO.Path.GetFileName(logEntry.ExecutablePath).PadFitRight(13));                    var lastColWidth = 16;                  var col = 36;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Arguments.PadFitRight(Console.BufferWidth - col - lastColWidth)' ConsoleColor.DarkGray);                    if (SetCursorPosition(Console.BufferWidth - lastColWidth' i + offset))                      WriteText(logEntry.Reason.PadFitRight(lastColWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputProcLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.DateTime.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinName.PadFitRight(9)' ConsoleColor.White);                    if (SetCursorPosition(23' i + offset))                      WriteText(System.IO.Path.GetFileName(logEntry.ExecutablePath).PadFitRight(13));                    var lastColWidth = 16;                  var col = 36;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Arguments.PadFitRight(Console.BufferWidth - col - lastColWidth)' ConsoleColor.DarkGray);                    if (SetCursorPosition(Console.BufferWidth - lastColWidth' i + offset))                      WriteText(logEntry.Reason.PadFitRight(lastColWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputHistory,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.EndDate.ToReallyShortDateTimeString().PadFitRight(14)' ConsoleColor.DarkGray);                    if (SetCursorPosition(14' i + offset))                      WriteText(logEntry.CoinSymbol.ShortCoinSymbol().PadFitRight(8)' ConsoleColor.White);                    if (SetCursorPosition(22' i + offset))                      WriteText(logEntry.StartPrice.ToFriendlyString().PadFitLeft(9) + " ");                    TimeSpan timeSpan = logEntry.EndDate - logEntry.StartDate;                  var duration = String.Format("{0:0.##} min"' timeSpan.TotalMinutes);                    if (SetCursorPosition(32' i + offset))                      WriteText(duration.PadFitRight(11));                    var devicesString = String.Empty;                  if (logEntry.DeviceDescriptors != null)                      devicesString = GetFormattedDevicesString(logEntry.DeviceDescriptors);                    var col = 43;                  if (SetCursorPosition(col' i + offset))                      WriteText(devicesString.PadFitRight(Console.WindowWidth - col));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputApiLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.Machine.PadFitRight(20)' ConsoleColor.White);                    if (SetCursorPosition(20' i + offset))                      WriteText(logEntry.Request.PadFitRight(10)' ConsoleColor.DarkGray);                    var col = 30;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Response.PadFitRight(Console.WindowWidth - col + 2));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputApiLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.Machine.PadFitRight(20)' ConsoleColor.White);                    if (SetCursorPosition(20' i + offset))                      WriteText(logEntry.Request.PadFitRight(10)' ConsoleColor.DarkGray);                    var col = 30;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Response.PadFitRight(Console.WindowWidth - col + 2));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputApiLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.Machine.PadFitRight(20)' ConsoleColor.White);                    if (SetCursorPosition(20' i + offset))                      WriteText(logEntry.Request.PadFitRight(10)' ConsoleColor.DarkGray);                    var col = 30;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Response.PadFitRight(Console.WindowWidth - col + 2));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputApiLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.Machine.PadFitRight(20)' ConsoleColor.White);                    if (SetCursorPosition(20' i + offset))                      WriteText(logEntry.Request.PadFitRight(10)' ConsoleColor.DarkGray);                    var col = 30;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Response.PadFitRight(Console.WindowWidth - col + 2));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputApiLog,The following statement contains a magic number: for (int i = 0; i < logEntries.Count; i++)              {                  var logEntry = logEntries[i];                    if (SetCursorPosition(0' i + offset))                      WriteText(logEntry.Machine.PadFitRight(20)' ConsoleColor.White);                    if (SetCursorPosition(20' i + offset))                      WriteText(logEntry.Request.PadFitRight(10)' ConsoleColor.DarkGray);                    var col = 30;                  if (SetCursorPosition(col' i + offset))                      WriteText(logEntry.Response.PadFitRight(Console.WindowWidth - col + 2));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputReplBuffer,The following statement contains a magic number: for (int i = 0; i < lines.Count; i++)              {                  var line = lines[i];                    if (String.IsNullOrEmpty(line))                  {                      ClearRow(i + offset);                      continue;                  }                    if (SetCursorPosition(0' i + offset))                      WriteText(":"' ConsoleColor.White);                  if (SetCursorPosition(1' i + offset))                      WriteText(": "' ConsoleColor.DarkGray);                    if (SetCursorPosition(3' i + offset))                      WriteText(line.PadFitRight(Console.WindowWidth));              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,GetVisibleNotifications,The following statement contains a magic number: const int NotificationCount = 5;
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputScreenName,The following statement contains a magic number: if (SetCursorPosition(Console.WindowWidth - offset - screenName.Length - 2' printableWidth))                  WriteText("["' ConsoleColor.Gray' ConsoleColor.DarkGray);
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputScreenName,The following statement contains a magic number: return screenName.Length + 2;
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputStatus,The following statement contains a magic number: const int Part1Width = 16;
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputStatus,The following statement contains a magic number: if (SetCursorPosition(0' Console.WindowHeight - 2))              {                  var text = String.Format("{0}{1}"' deviceStatus' hashrateStatus);                  WriteText(text' ConsoleColor.White' ConsoleColor.DarkGray);              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputSpecial,The following statement contains a magic number: if (currentPrompt != null)              {                  if ((DateTime.Now - promptTime).TotalSeconds > 30)                      currentPrompt = null;                  else                  {                      OutputCurrentPrompt();                      return; //early exit' prompt rendered                  }              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,GetSpecialRow,The following statement contains a magic number: return Console.WindowHeight - 3;
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,MinerApplication,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\MinerApplication.cs,OutputDevices,The following statement contains a magic number: for (int i = firstIndex; (i < devices.Count) && (row < GetSpecialRow() - GetVisibleNotifications().Count); i++)              {                  var device = devices[i];                  var name = String.IsNullOrEmpty(device.FriendlyName) ? device.Name : device.FriendlyName;                  var averageHashrate = device.AverageHashrate > 0 ? device.AverageHashrate.ToHashrateString().Replace(" "' "") : String.Empty;                  var effectiveHashrate = device.WorkUtility > 0 ? app.WorkUtilityToHashrate(device.WorkUtility).ToHashrateString().Replace(" "' "") : String.Empty;                  var coinSymbol = device.Coin == null ? String.Empty : device.Coin.Id.ShortCoinSymbol();                  var exchange = app.GetExchangeRate(device);                  var pool = device.Pool.DomainFromHost();                  var kind = device.Kind.ToString().First();                  if (kindCounts.ContainsKey(kind))                      kindCounts[kind]++;                  else                      kindCounts[kind] = 1;                  var deviceId = kind + (kindCounts[kind] + firstIndex).ToString();                  var difficulty = device.Difficulty > 0 ? device.Difficulty.ToDifficultyString().Replace(" "' "") : String.Empty;                  var temperature = device.Temperature > 0 ? (int)device.Temperature + "°" : String.Empty;                    if (SetCursorPosition(0' row))                      WriteText(deviceId.ToString().PadRight(4)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(4' row))                      WriteText(name.PadFitRight(12)' device.Enabled ? device.Kind == Xgminer.Data.DeviceKind.NET || app.MiningEngine.Mining ? ConsoleColor.White : ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(16' row))                      WriteText(coinSymbol.PadFitRight(8)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(23' row))                      WriteText(difficulty.PadFitLeft(8)' ConsoleColor.DarkGray);                    if (SetCursorPosition(31' row))                      WriteText(exchange.FitCurrency(9).PadLeft(10).PadRight(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(42' row))                      WriteText(pool.PadFitRight(10)' ConsoleColor.DarkGray);                    if (SetCursorPosition(51' row))                      WriteText(averageHashrate.PadFitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    if (SetCursorPosition(62' row))                      WriteText(effectiveHashrate.FitLeft(11)' device.Enabled ? ConsoleColor.Gray : ConsoleColor.DarkGray);                    var left = 73;                  if (SetCursorPosition(left' row))                      WriteText(temperature.FitLeft(5).PadRight(Console.WindowWidth - left)' device.Enabled ? ConsoleColor.DarkGray : ConsoleColor.DarkGray);                    row++;              }
Magic Number,MultiMiner.TUI,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.TUI\Program.cs,CurrentDomain_UnhandledException,The following statement contains a magic number: EventLog.WriteEntry("Application Error"' (e.ExceptionObject as Exception).ToString()' EventLogEntryType.Error' 1000);
