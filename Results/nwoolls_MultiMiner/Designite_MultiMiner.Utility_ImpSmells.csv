Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MultiMiner.Utility.Net,IPInfoTools,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPInfoTools.cs,GetIPv4Mask,Cyclomatic complexity of the method is 14
Complex Method,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,Cyclomatic complexity of the method is 11
Complex Method,MultiMiner.Utility.Net,PortScanner,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\PortScanner.cs,Find,Cyclomatic complexity of the method is 7
Complex Method,MultiMiner.Utility.Net,LocalNetwork,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\LocalNetwork.cs,GetLocalNetworkInterfaces,Cyclomatic complexity of the method is 10
Complex Method,MultiMiner.Utility.Net,LocalNetwork,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\LocalNetwork.cs,GetWorkGroupName,Cyclomatic complexity of the method is 8
Complex Method,MultiMiner.Utility.Serialization,ConfigurationReaderWriter,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Serialization\ConfigurationReaderWriter.cs,ReadConfiguration,Cyclomatic complexity of the method is 7
Complex Method,MultiMiner.Utility.Serialization,ObjectCopier,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Serialization\ObjectCopier.cs,CopyObject,Cyclomatic complexity of the method is 7
Complex Method,MultiMiner.Utility.Serialization,ObjectLogger,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Serialization\ObjectLogger.cs,BackupLogFileToSets,Cyclomatic complexity of the method is 7
Complex Method,MultiMiner.Utility.Parsers,PlistParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\PlistParser.cs,ParseValue,Cyclomatic complexity of the method is 12
Long Parameter List,MultiMiner.Utility.Net,PortScanner,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\PortScanner.cs,Find,The method has 5 parameters.
Long Statement,MultiMiner.Utility.OS,OwnedProcesses,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\OS\OwnedProcesses.cs,GetOwnedProcesses,The length of the statement  "	IEnumerable<Process> ownedProcesses = allProcesses.Where (ap => children.Any (cp => (cp.Id == ap.Id) && ((OSVersionPlatform.GetGenericPlatform () == System.PlatformID.Unix) //no SessionId on Unix " is 195.
Long Statement,MultiMiner.Utility.OS,OSVersionPlatform,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\OS\OSVersionPlatform.cs,GetHomeDirectoryPath,The length of the statement  "	string result = (GetGenericPlatform () == PlatformID.Unix) ? Environment.GetEnvironmentVariable ("HOME") : Environment.ExpandEnvironmentVariables ("%HOMEDRIVE%%HOMEPATH%"); " is 172.
Long Statement,MultiMiner.Utility.Net,IPInfoTools,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPInfoTools.cs,GetIPv4Mask,The length of the statement  "							Console.Error.WriteLine ("Got a bad hardware address length for an AF_PACKET {0} {1}"' sockaddrll.sll_halen' sockaddrll.sll_addr.Length); " is 137.
Long Statement,MultiMiner.Utility.Net,LocalNetwork,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\LocalNetwork.cs,GetLocalNetworkInterfaces,The length of the statement  "		if ((networkInterface.NetworkInterfaceType == NetworkInterfaceType.Loopback) || (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Tunnel) || (networkInterface.OperationalStatus != OperationalStatus.Up)) " is 215.
Long Statement,MultiMiner.Utility.Net,LocalNetwork,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\LocalNetwork.cs,GetWorkGroupName,The length of the statement  "		using (ManagementObject managementObject = new ManagementObject (String.Format ("Win32_ComputerSystem.Name='{0}'"' Environment.MachineName))) { " is 143.
Long Statement,MultiMiner.Utility.Serialization,ConfigurationReaderWriter,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Serialization\ConfigurationReaderWriter.cs,HandleZeroByteConfiguration,The length of the statement  "		//MessageBox.Show(String.Format("The file {0} was 0 bytes (likely due to a crash on startup).\n\nA previous backup will be restored."' " is 134.
Long Statement,MultiMiner.Utility.Serialization,ConfigurationReaderWriter,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Serialization\ConfigurationReaderWriter.cs,HandleZeroByteConfiguration,The length of the statement  "		//MessageBox.Show(String.Format("The file {0} was 0 bytes (likely due to a crash on startup).\n\nDefault settings for this file will be loaded."' " is 145.
Empty Catch Block,MultiMiner.Utility.OS,OwnedProcesses,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\OS\OwnedProcesses.cs,SaveOwnedProcesses,The method has an empty catch block.
Empty Catch Block,MultiMiner.Utility.OS,OSVersionPlatform,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\OS\OSVersionPlatform.cs,IsRunningOnMac,The method has an empty catch block.
Empty Catch Block,MultiMiner.Utility.Net,PortScanner,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\PortScanner.cs,IsPortOpen,The method has an empty catch block.
Empty Catch Block,MultiMiner.Utility.Serialization,ObjectLogger,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Serialization\ObjectLogger.cs,BackupLogFileToSets,The method has an empty catch block.
Magic Number,MultiMiner.Utility.OS,OSVersionPlatform,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\OS\OSVersionPlatform.cs,IsRunningOnMac,The following statement contains a magic number: try {  	buf = Marshal.AllocHGlobal (8192);  	// This is a hacktastic way of getting sysname from uname ()  	if (NativeMethods.uname (buf) == 0) {  		string os = Marshal.PtrToStringAnsi (buf);  		if (os == "Darwin")  			return true;  	}  } catch {  } finally {  	if (buf != IntPtr.Zero)  		Marshal.FreeHGlobal (buf);  }  
Magic Number,MultiMiner.Utility.OS,OSVersionPlatform,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\OS\OSVersionPlatform.cs,IsRunningOnMac,The following statement contains a magic number: buf = Marshal.AllocHGlobal (8192);  
Magic Number,MultiMiner.Utility.OS,OSVersionPlatform,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\OS\OSVersionPlatform.cs,IsWindowsVistaOrHigher,The following statement contains a magic number: return (OS.Platform == PlatformID.Win32NT) && (OS.Version.Major >= 6);  
Magic Number,MultiMiner.Utility.Net,ApiWebClient,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\ApiWebClient.cs,GetWebRequest,The following statement contains a magic number: w.Timeout = 10 * 1000;  
Magic Number,MultiMiner.Utility.Net,ApiWebClient,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\ApiWebClient.cs,GetWebRequest,The following statement contains a magic number: w.Timeout = 10 * 1000;  
Magic Number,MultiMiner.Utility.Net,ApiWebClient,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\ApiWebClient.cs,DownloadFlakyString,The following statement contains a magic number: try {  	response = DownloadString (address);  } catch (WebException) {  	//try again 1 more time if WebException  	Thread.Sleep (750);  	response = DownloadString (address);  }  
Magic Number,MultiMiner.Utility.Net,ApiWebClient,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\ApiWebClient.cs,DownloadFlakyString,The following statement contains a magic number: Thread.Sleep (750);  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	capacity *= endIp [i] - beginIp [i] + 1;  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int i = beginIp [0]; i <= endIp [0]; i++)  	for (int j = beginIp [1]; j <= endIp [1]; j++)  		for (int k = beginIp [2]; k <= endIp [2]; k++)  			for (int l = beginIp [3]; l <= endIp [3]; l++)  				ips.Add (new IPAddress (new byte[] {  					(byte)i'  					(byte)j'  					(byte)k'  					(byte)l  				}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int i = beginIp [0]; i <= endIp [0]; i++)  	for (int j = beginIp [1]; j <= endIp [1]; j++)  		for (int k = beginIp [2]; k <= endIp [2]; k++)  			for (int l = beginIp [3]; l <= endIp [3]; l++)  				ips.Add (new IPAddress (new byte[] {  					(byte)i'  					(byte)j'  					(byte)k'  					(byte)l  				}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int i = beginIp [0]; i <= endIp [0]; i++)  	for (int j = beginIp [1]; j <= endIp [1]; j++)  		for (int k = beginIp [2]; k <= endIp [2]; k++)  			for (int l = beginIp [3]; l <= endIp [3]; l++)  				ips.Add (new IPAddress (new byte[] {  					(byte)i'  					(byte)j'  					(byte)k'  					(byte)l  				}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int i = beginIp [0]; i <= endIp [0]; i++)  	for (int j = beginIp [1]; j <= endIp [1]; j++)  		for (int k = beginIp [2]; k <= endIp [2]; k++)  			for (int l = beginIp [3]; l <= endIp [3]; l++)  				ips.Add (new IPAddress (new byte[] {  					(byte)i'  					(byte)j'  					(byte)k'  					(byte)l  				}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int j = beginIp [1]; j <= endIp [1]; j++)  	for (int k = beginIp [2]; k <= endIp [2]; k++)  		for (int l = beginIp [3]; l <= endIp [3]; l++)  			ips.Add (new IPAddress (new byte[] {  				(byte)i'  				(byte)j'  				(byte)k'  				(byte)l  			}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int j = beginIp [1]; j <= endIp [1]; j++)  	for (int k = beginIp [2]; k <= endIp [2]; k++)  		for (int l = beginIp [3]; l <= endIp [3]; l++)  			ips.Add (new IPAddress (new byte[] {  				(byte)i'  				(byte)j'  				(byte)k'  				(byte)l  			}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int j = beginIp [1]; j <= endIp [1]; j++)  	for (int k = beginIp [2]; k <= endIp [2]; k++)  		for (int l = beginIp [3]; l <= endIp [3]; l++)  			ips.Add (new IPAddress (new byte[] {  				(byte)i'  				(byte)j'  				(byte)k'  				(byte)l  			}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int j = beginIp [1]; j <= endIp [1]; j++)  	for (int k = beginIp [2]; k <= endIp [2]; k++)  		for (int l = beginIp [3]; l <= endIp [3]; l++)  			ips.Add (new IPAddress (new byte[] {  				(byte)i'  				(byte)j'  				(byte)k'  				(byte)l  			}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int k = beginIp [2]; k <= endIp [2]; k++)  	for (int l = beginIp [3]; l <= endIp [3]; l++)  		ips.Add (new IPAddress (new byte[] {  			(byte)i'  			(byte)j'  			(byte)k'  			(byte)l  		}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int k = beginIp [2]; k <= endIp [2]; k++)  	for (int l = beginIp [3]; l <= endIp [3]; l++)  		ips.Add (new IPAddress (new byte[] {  			(byte)i'  			(byte)j'  			(byte)k'  			(byte)l  		}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int k = beginIp [2]; k <= endIp [2]; k++)  	for (int l = beginIp [3]; l <= endIp [3]; l++)  		ips.Add (new IPAddress (new byte[] {  			(byte)i'  			(byte)j'  			(byte)k'  			(byte)l  		}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int k = beginIp [2]; k <= endIp [2]; k++)  	for (int l = beginIp [3]; l <= endIp [3]; l++)  		ips.Add (new IPAddress (new byte[] {  			(byte)i'  			(byte)j'  			(byte)k'  			(byte)l  		}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int l = beginIp [3]; l <= endIp [3]; l++)  	ips.Add (new IPAddress (new byte[] {  		(byte)i'  		(byte)j'  		(byte)k'  		(byte)l  	}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,GetIPAddresses,The following statement contains a magic number: for (int l = beginIp [3]; l <= endIp [3]; l++)  	ips.Add (new IPAddress (new byte[] {  		(byte)i'  		(byte)j'  		(byte)k'  		(byte)l  	}));  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: if (x.Length != 2)  	return false;  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	ip = ip << 8;  	ip += uint.Parse (ipParts0 [i]);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	ip = ip << 8;  	ip += uint.Parse (ipParts0 [i]);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: ip = ip << 8;  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: beginIp = new byte[4];  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: endIp = new byte[4];  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  	endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  	endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  	endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  	endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  	endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  	endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  	endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: beginIp [i] = (byte)((ip1 >> (3 - i) * 8) & 255);  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseCIDRNotation,The following statement contains a magic number: endIp [i] = (byte)((ip2 >> (3 - i) * 8) & 255);  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseSimpleRange,The following statement contains a magic number: beginIp = new byte[4];  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseSimpleRange,The following statement contains a magic number: endIp = new byte[4];  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseSimpleRange,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	string[] rangeParts = ipParts [i].Split ('-');  	if (rangeParts.Length < 1 || rangeParts.Length > 2)  		return false;  	beginIp [i] = byte.Parse (rangeParts [0]);  	endIp [i] = (rangeParts.Length == 1) ? beginIp [i] : byte.Parse (rangeParts [1]);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseSimpleRange,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	string[] rangeParts = ipParts [i].Split ('-');  	if (rangeParts.Length < 1 || rangeParts.Length > 2)  		return false;  	beginIp [i] = byte.Parse (rangeParts [0]);  	endIp [i] = (rangeParts.Length == 1) ? beginIp [i] : byte.Parse (rangeParts [1]);  }  
Magic Number,MultiMiner.Utility.Net,IPRange,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPRange.cs,TryParseSimpleRange,The following statement contains a magic number: if (rangeParts.Length < 1 || rangeParts.Length > 2)  	return false;  
Magic Number,MultiMiner.Utility.Net,LocalNetwork,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\LocalNetwork.cs,GetBroadcastAddress,The following statement contains a magic number: for (int i = 0; i < broadcastAddress.Length; i++)  	broadcastAddress [i] = (byte)(ipAdressBytes [i] | (subnetMaskBytes [i] ^ 255));  
Magic Number,MultiMiner.Utility.Net,LocalNetwork,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\LocalNetwork.cs,GetBroadcastAddress,The following statement contains a magic number: broadcastAddress [i] = (byte)(ipAdressBytes [i] | (subnetMaskBytes [i] ^ 255));  
Magic Number,MultiMiner.Utility.Net.Extensions,IPAddressExtensions,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\Extensions\IPAddressExtensions.cs,GetSubnetClass,The following statement contains a magic number: if (subnetMask.Address <= 255)  	return SubnetClass.A;  
Magic Number,MultiMiner.Utility.Net.Extensions,IPAddressExtensions,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\Extensions\IPAddressExtensions.cs,GetSubnetClass,The following statement contains a magic number: if (subnetMask.Address < 16777215)  	return SubnetClass.B;  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: if (File.Exists (iniPath)) {  	TextReader iniFile = new StreamReader (iniPath);  	try {  		string currentRoot = null;  		string strLine = iniFile.ReadLine ();  		while (strLine != null) {  			strLine = strLine.TrimStart ();  			if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  				if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  					currentRoot = strLine.Substring (1' strLine.Length - 2);  				else {  					string[] keyPair = strLine.Split (new char[] {  						'='  					}' 2);  					string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  					if (currentRoot == null)  						currentRoot = "ROOT";  					string key = GetKey (currentRoot' keyPair [0]);  					keyPairs [key] = value;  				}  			}  			strLine = iniFile.ReadLine ();  		}  	} finally {  		iniFile.Close ();  	}  } else  	throw new FileNotFoundException ("Unable to locate " + iniPath);  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: if (File.Exists (iniPath)) {  	TextReader iniFile = new StreamReader (iniPath);  	try {  		string currentRoot = null;  		string strLine = iniFile.ReadLine ();  		while (strLine != null) {  			strLine = strLine.TrimStart ();  			if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  				if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  					currentRoot = strLine.Substring (1' strLine.Length - 2);  				else {  					string[] keyPair = strLine.Split (new char[] {  						'='  					}' 2);  					string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  					if (currentRoot == null)  						currentRoot = "ROOT";  					string key = GetKey (currentRoot' keyPair [0]);  					keyPairs [key] = value;  				}  			}  			strLine = iniFile.ReadLine ();  		}  	} finally {  		iniFile.Close ();  	}  } else  	throw new FileNotFoundException ("Unable to locate " + iniPath);  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: try {  	string currentRoot = null;  	string strLine = iniFile.ReadLine ();  	while (strLine != null) {  		strLine = strLine.TrimStart ();  		if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  			if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  				currentRoot = strLine.Substring (1' strLine.Length - 2);  			else {  				string[] keyPair = strLine.Split (new char[] {  					'='  				}' 2);  				string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  				if (currentRoot == null)  					currentRoot = "ROOT";  				string key = GetKey (currentRoot' keyPair [0]);  				keyPairs [key] = value;  			}  		}  		strLine = iniFile.ReadLine ();  	}  } finally {  	iniFile.Close ();  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: try {  	string currentRoot = null;  	string strLine = iniFile.ReadLine ();  	while (strLine != null) {  		strLine = strLine.TrimStart ();  		if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  			if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  				currentRoot = strLine.Substring (1' strLine.Length - 2);  			else {  				string[] keyPair = strLine.Split (new char[] {  					'='  				}' 2);  				string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  				if (currentRoot == null)  					currentRoot = "ROOT";  				string key = GetKey (currentRoot' keyPair [0]);  				keyPairs [key] = value;  			}  		}  		strLine = iniFile.ReadLine ();  	}  } finally {  	iniFile.Close ();  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: while (strLine != null) {  	strLine = strLine.TrimStart ();  	if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  		if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  			currentRoot = strLine.Substring (1' strLine.Length - 2);  		else {  			string[] keyPair = strLine.Split (new char[] {  				'='  			}' 2);  			string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  			if (currentRoot == null)  				currentRoot = "ROOT";  			string key = GetKey (currentRoot' keyPair [0]);  			keyPairs [key] = value;  		}  	}  	strLine = iniFile.ReadLine ();  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: while (strLine != null) {  	strLine = strLine.TrimStart ();  	if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  		if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  			currentRoot = strLine.Substring (1' strLine.Length - 2);  		else {  			string[] keyPair = strLine.Split (new char[] {  				'='  			}' 2);  			string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  			if (currentRoot == null)  				currentRoot = "ROOT";  			string key = GetKey (currentRoot' keyPair [0]);  			keyPairs [key] = value;  		}  	}  	strLine = iniFile.ReadLine ();  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  	if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  		currentRoot = strLine.Substring (1' strLine.Length - 2);  	else {  		string[] keyPair = strLine.Split (new char[] {  			'='  		}' 2);  		string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  		if (currentRoot == null)  			currentRoot = "ROOT";  		string key = GetKey (currentRoot' keyPair [0]);  		keyPairs [key] = value;  	}  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: if (!String.IsNullOrEmpty (strLine) && !strLine.StartsWith ("#") && !strLine.StartsWith (";")) {  	if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  		currentRoot = strLine.Substring (1' strLine.Length - 2);  	else {  		string[] keyPair = strLine.Split (new char[] {  			'='  		}' 2);  		string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  		if (currentRoot == null)  			currentRoot = "ROOT";  		string key = GetKey (currentRoot' keyPair [0]);  		keyPairs [key] = value;  	}  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  	currentRoot = strLine.Substring (1' strLine.Length - 2);  else {  	string[] keyPair = strLine.Split (new char[] {  		'='  	}' 2);  	string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  	if (currentRoot == null)  		currentRoot = "ROOT";  	string key = GetKey (currentRoot' keyPair [0]);  	keyPairs [key] = value;  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: if (strLine.StartsWith ("[") && strLine.EndsWith ("]"))  	currentRoot = strLine.Substring (1' strLine.Length - 2);  else {  	string[] keyPair = strLine.Split (new char[] {  		'='  	}' 2);  	string value = keyPair.Length > 1 ? keyPair [1].TrimStart () : null;  	if (currentRoot == null)  		currentRoot = "ROOT";  	string key = GetKey (currentRoot' keyPair [0]);  	keyPairs [key] = value;  }  
Magic Number,MultiMiner.Utility.Parsers,IniFileParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\IniFileParser.cs,LoadIniFile,The following statement contains a magic number: currentRoot = strLine.Substring (1' strLine.Length - 2);  
Magic Number,MultiMiner.Utility.Parsers,PlistParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\PlistParser.cs,Parse,The following statement contains a magic number: for (int i = 0; i < elements.Count (); i += 2) {  	XElement key = elements.ElementAt (i);  	XElement val = elements.ElementAt (i + 1);  	dict [key.Value] = ParseValue (val);  }  
Magic Number,MultiMiner.Utility.Parsers,PlistParser,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Parsers\PlistParser.cs,Parse,The following statement contains a magic number: i += 2
Missing Default,MultiMiner.Utility.Net,IPInfoTools,D:\newReposJune17\nwoolls_MultiMiner\MultiMiner.Utility\Net\IPInfoTools.cs,GetIPv4Mask,The following switch statement is missing a default case: switch (sockaddr.sin_family) {  case AF_INET6:  	break;  case AF_INET:  	if (name == networkInterfaceName) {  		var netmask = (sockaddr_in)Marshal.PtrToStructure (addr.ifa_netmask' typeof(sockaddr_in));  		var ipAddr = new IPAddress (netmask.sin_addr);  		// IPAddress to format into default string notation  		return ipAddr.ToString ();  	}  	break;  case AF_PACKET:  	{  		var sockaddrll = (sockaddr_ll)Marshal.PtrToStructure (addr.ifa_addr' typeof(sockaddr_ll));  		if (sockaddrll.sll_halen > sockaddrll.sll_addr.Length) {  			Console.Error.WriteLine ("Got a bad hardware address length for an AF_PACKET {0} {1}"' sockaddrll.sll_halen' sockaddrll.sll_addr.Length);  			next = addr.ifa_next;  			continue;  		}  	}  	break;  }  
