Implementation smell,Namespace,Class,File,Method,Description
Long Method,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The method has 107 lines of code.
Long Statement,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The length of the statement  "            AvailableMiner bfgminer = availableMiners.Single(am => am.Name.Equals(MinerNames.BFGMiner' StringComparison.OrdinalIgnoreCase)); " is 128.
Empty Catch Block,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The method has an empty catch block.
Magic Number,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The following statement contains a magic number: try              {                  //create an instance of Miner with the downloaded executable                  Xgminer.Data.Configuration.Miner minerConfiguration = new Xgminer.Data.Configuration.Miner()                  {                      ExecutablePath = Path.Combine(executablePath' executableName)                  };                  Xgminer.Miner miner = new Xgminer.Miner(minerConfiguration' false);                    //use it to iterate through devices                  List<Device> deviceList = miner.ListDevices();                    Console.WriteLine("Using {0} to list available mining devices"' executableName);                    //output devices                  foreach (Device device in deviceList)                      Console.WriteLine("Device detected: {0}\t{1}\t{2}"' device.Kind' device.Driver' device.Name);                    //start mining if there are devices                  if (deviceList.Count > 0)                  {                      Console.WriteLine("{0} device(s) detected' mining Bitcoin on Bitminter using all devices"' deviceList.Count);                        //setup a pool                      MiningPool pool = new MiningPool()                      {                          Host = "mint.bitminter.com"'                          Port = 3333'                          Username = "nwoolls_deepcore"'                          Password = "deepcore"                      };                      minerConfiguration.Pools.Add(pool);                        //specify algorithm                      minerConfiguration.Algorithm = MinerFactory.Instance.GetAlgorithm(AlgorithmNames.SHA256);                        //disable GPU mining                      minerConfiguration.DisableGpu = true;                        //specify device indexes to use                      for (int i = 0; i < deviceList.Count; i++)                          minerConfiguration.DeviceDescriptors.Add(deviceList[i]);                        //enable RPC API                      minerConfiguration.ApiListen = true;                      minerConfiguration.ApiPort = 4028;                        Console.WriteLine("Launching {0}"' executableName);                        //start mining                      miner = new Xgminer.Miner(minerConfiguration' false);                      System.Diagnostics.Process minerProcess = miner.Launch();                      try                      {                          //get an API context                          Xgminer.Api.ApiContext apiContext = new Xgminer.Api.ApiContext(minerConfiguration.ApiPort);                          try                          {                              //mine for one minute' monitoring hashrate via the API                              for (int i = 0; i < 6; i++)                              {                                  Thread.Sleep(1000 * 10); //sleep 10s                                    //query the miner process via its RPC API for device information                                  List<Xgminer.Api.Data.DeviceInformation> deviceInformation = apiContext.GetDeviceInformation();                                    //output device information                                  foreach (Xgminer.Api.Data.DeviceInformation item in deviceInformation)                                      Console.WriteLine("Hasrate for device {0}: {1} current' {2} average"' item.Index'                                              item.CurrentHashrate' item.AverageHashrate);                              }                          }                          finally                          {                              Console.WriteLine("Quitting mining via the RPC API");                                //stop mining' try the API first                              apiContext.QuitMining();                          }                      }                      finally                      {                          Console.WriteLine("Killing any remaining process");                            //then kill the process                          try                          {                              minerProcess.Kill();                              minerProcess.WaitForExit();                              minerProcess.Close();                          }                          catch (InvalidOperationException)                          {                              //already closed                          }                      }                  }                  else                  {                      Console.WriteLine("No devices capable of mining detected");                  }              }              finally              {                  Console.WriteLine("Cleaning up' deleting directory {0}"' executablePath);                  Directory.Delete(executablePath' true);              }
Magic Number,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The following statement contains a magic number: try              {                  //create an instance of Miner with the downloaded executable                  Xgminer.Data.Configuration.Miner minerConfiguration = new Xgminer.Data.Configuration.Miner()                  {                      ExecutablePath = Path.Combine(executablePath' executableName)                  };                  Xgminer.Miner miner = new Xgminer.Miner(minerConfiguration' false);                    //use it to iterate through devices                  List<Device> deviceList = miner.ListDevices();                    Console.WriteLine("Using {0} to list available mining devices"' executableName);                    //output devices                  foreach (Device device in deviceList)                      Console.WriteLine("Device detected: {0}\t{1}\t{2}"' device.Kind' device.Driver' device.Name);                    //start mining if there are devices                  if (deviceList.Count > 0)                  {                      Console.WriteLine("{0} device(s) detected' mining Bitcoin on Bitminter using all devices"' deviceList.Count);                        //setup a pool                      MiningPool pool = new MiningPool()                      {                          Host = "mint.bitminter.com"'                          Port = 3333'                          Username = "nwoolls_deepcore"'                          Password = "deepcore"                      };                      minerConfiguration.Pools.Add(pool);                        //specify algorithm                      minerConfiguration.Algorithm = MinerFactory.Instance.GetAlgorithm(AlgorithmNames.SHA256);                        //disable GPU mining                      minerConfiguration.DisableGpu = true;                        //specify device indexes to use                      for (int i = 0; i < deviceList.Count; i++)                          minerConfiguration.DeviceDescriptors.Add(deviceList[i]);                        //enable RPC API                      minerConfiguration.ApiListen = true;                      minerConfiguration.ApiPort = 4028;                        Console.WriteLine("Launching {0}"' executableName);                        //start mining                      miner = new Xgminer.Miner(minerConfiguration' false);                      System.Diagnostics.Process minerProcess = miner.Launch();                      try                      {                          //get an API context                          Xgminer.Api.ApiContext apiContext = new Xgminer.Api.ApiContext(minerConfiguration.ApiPort);                          try                          {                              //mine for one minute' monitoring hashrate via the API                              for (int i = 0; i < 6; i++)                              {                                  Thread.Sleep(1000 * 10); //sleep 10s                                    //query the miner process via its RPC API for device information                                  List<Xgminer.Api.Data.DeviceInformation> deviceInformation = apiContext.GetDeviceInformation();                                    //output device information                                  foreach (Xgminer.Api.Data.DeviceInformation item in deviceInformation)                                      Console.WriteLine("Hasrate for device {0}: {1} current' {2} average"' item.Index'                                              item.CurrentHashrate' item.AverageHashrate);                              }                          }                          finally                          {                              Console.WriteLine("Quitting mining via the RPC API");                                //stop mining' try the API first                              apiContext.QuitMining();                          }                      }                      finally                      {                          Console.WriteLine("Killing any remaining process");                            //then kill the process                          try                          {                              minerProcess.Kill();                              minerProcess.WaitForExit();                              minerProcess.Close();                          }                          catch (InvalidOperationException)                          {                              //already closed                          }                      }                  }                  else                  {                      Console.WriteLine("No devices capable of mining detected");                  }              }              finally              {                  Console.WriteLine("Cleaning up' deleting directory {0}"' executablePath);                  Directory.Delete(executablePath' true);              }
Magic Number,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The following statement contains a magic number: try              {                  //create an instance of Miner with the downloaded executable                  Xgminer.Data.Configuration.Miner minerConfiguration = new Xgminer.Data.Configuration.Miner()                  {                      ExecutablePath = Path.Combine(executablePath' executableName)                  };                  Xgminer.Miner miner = new Xgminer.Miner(minerConfiguration' false);                    //use it to iterate through devices                  List<Device> deviceList = miner.ListDevices();                    Console.WriteLine("Using {0} to list available mining devices"' executableName);                    //output devices                  foreach (Device device in deviceList)                      Console.WriteLine("Device detected: {0}\t{1}\t{2}"' device.Kind' device.Driver' device.Name);                    //start mining if there are devices                  if (deviceList.Count > 0)                  {                      Console.WriteLine("{0} device(s) detected' mining Bitcoin on Bitminter using all devices"' deviceList.Count);                        //setup a pool                      MiningPool pool = new MiningPool()                      {                          Host = "mint.bitminter.com"'                          Port = 3333'                          Username = "nwoolls_deepcore"'                          Password = "deepcore"                      };                      minerConfiguration.Pools.Add(pool);                        //specify algorithm                      minerConfiguration.Algorithm = MinerFactory.Instance.GetAlgorithm(AlgorithmNames.SHA256);                        //disable GPU mining                      minerConfiguration.DisableGpu = true;                        //specify device indexes to use                      for (int i = 0; i < deviceList.Count; i++)                          minerConfiguration.DeviceDescriptors.Add(deviceList[i]);                        //enable RPC API                      minerConfiguration.ApiListen = true;                      minerConfiguration.ApiPort = 4028;                        Console.WriteLine("Launching {0}"' executableName);                        //start mining                      miner = new Xgminer.Miner(minerConfiguration' false);                      System.Diagnostics.Process minerProcess = miner.Launch();                      try                      {                          //get an API context                          Xgminer.Api.ApiContext apiContext = new Xgminer.Api.ApiContext(minerConfiguration.ApiPort);                          try                          {                              //mine for one minute' monitoring hashrate via the API                              for (int i = 0; i < 6; i++)                              {                                  Thread.Sleep(1000 * 10); //sleep 10s                                    //query the miner process via its RPC API for device information                                  List<Xgminer.Api.Data.DeviceInformation> deviceInformation = apiContext.GetDeviceInformation();                                    //output device information                                  foreach (Xgminer.Api.Data.DeviceInformation item in deviceInformation)                                      Console.WriteLine("Hasrate for device {0}: {1} current' {2} average"' item.Index'                                              item.CurrentHashrate' item.AverageHashrate);                              }                          }                          finally                          {                              Console.WriteLine("Quitting mining via the RPC API");                                //stop mining' try the API first                              apiContext.QuitMining();                          }                      }                      finally                      {                          Console.WriteLine("Killing any remaining process");                            //then kill the process                          try                          {                              minerProcess.Kill();                              minerProcess.WaitForExit();                              minerProcess.Close();                          }                          catch (InvalidOperationException)                          {                              //already closed                          }                      }                  }                  else                  {                      Console.WriteLine("No devices capable of mining detected");                  }              }              finally              {                  Console.WriteLine("Cleaning up' deleting directory {0}"' executablePath);                  Directory.Delete(executablePath' true);              }
Magic Number,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The following statement contains a magic number: try              {                  //create an instance of Miner with the downloaded executable                  Xgminer.Data.Configuration.Miner minerConfiguration = new Xgminer.Data.Configuration.Miner()                  {                      ExecutablePath = Path.Combine(executablePath' executableName)                  };                  Xgminer.Miner miner = new Xgminer.Miner(minerConfiguration' false);                    //use it to iterate through devices                  List<Device> deviceList = miner.ListDevices();                    Console.WriteLine("Using {0} to list available mining devices"' executableName);                    //output devices                  foreach (Device device in deviceList)                      Console.WriteLine("Device detected: {0}\t{1}\t{2}"' device.Kind' device.Driver' device.Name);                    //start mining if there are devices                  if (deviceList.Count > 0)                  {                      Console.WriteLine("{0} device(s) detected' mining Bitcoin on Bitminter using all devices"' deviceList.Count);                        //setup a pool                      MiningPool pool = new MiningPool()                      {                          Host = "mint.bitminter.com"'                          Port = 3333'                          Username = "nwoolls_deepcore"'                          Password = "deepcore"                      };                      minerConfiguration.Pools.Add(pool);                        //specify algorithm                      minerConfiguration.Algorithm = MinerFactory.Instance.GetAlgorithm(AlgorithmNames.SHA256);                        //disable GPU mining                      minerConfiguration.DisableGpu = true;                        //specify device indexes to use                      for (int i = 0; i < deviceList.Count; i++)                          minerConfiguration.DeviceDescriptors.Add(deviceList[i]);                        //enable RPC API                      minerConfiguration.ApiListen = true;                      minerConfiguration.ApiPort = 4028;                        Console.WriteLine("Launching {0}"' executableName);                        //start mining                      miner = new Xgminer.Miner(minerConfiguration' false);                      System.Diagnostics.Process minerProcess = miner.Launch();                      try                      {                          //get an API context                          Xgminer.Api.ApiContext apiContext = new Xgminer.Api.ApiContext(minerConfiguration.ApiPort);                          try                          {                              //mine for one minute' monitoring hashrate via the API                              for (int i = 0; i < 6; i++)                              {                                  Thread.Sleep(1000 * 10); //sleep 10s                                    //query the miner process via its RPC API for device information                                  List<Xgminer.Api.Data.DeviceInformation> deviceInformation = apiContext.GetDeviceInformation();                                    //output device information                                  foreach (Xgminer.Api.Data.DeviceInformation item in deviceInformation)                                      Console.WriteLine("Hasrate for device {0}: {1} current' {2} average"' item.Index'                                              item.CurrentHashrate' item.AverageHashrate);                              }                          }                          finally                          {                              Console.WriteLine("Quitting mining via the RPC API");                                //stop mining' try the API first                              apiContext.QuitMining();                          }                      }                      finally                      {                          Console.WriteLine("Killing any remaining process");                            //then kill the process                          try                          {                              minerProcess.Kill();                              minerProcess.WaitForExit();                              minerProcess.Close();                          }                          catch (InvalidOperationException)                          {                              //already closed                          }                      }                  }                  else                  {                      Console.WriteLine("No devices capable of mining detected");                  }              }              finally              {                  Console.WriteLine("Cleaning up' deleting directory {0}"' executablePath);                  Directory.Delete(executablePath' true);              }
Magic Number,MultiMiner.Example,Program,C:\repos\nwoolls_MultiMiner\MultiMiner.Example\Program.cs,Main,The following statement contains a magic number: try              {                  //create an instance of Miner with the downloaded executable                  Xgminer.Data.Configuration.Miner minerConfiguration = new Xgminer.Data.Configuration.Miner()                  {                      ExecutablePath = Path.Combine(executablePath' executableName)                  };                  Xgminer.Miner miner = new Xgminer.Miner(minerConfiguration' false);                    //use it to iterate through devices                  List<Device> deviceList = miner.ListDevices();                    Console.WriteLine("Using {0} to list available mining devices"' executableName);                    //output devices                  foreach (Device device in deviceList)                      Console.WriteLine("Device detected: {0}\t{1}\t{2}"' device.Kind' device.Driver' device.Name);                    //start mining if there are devices                  if (deviceList.Count > 0)                  {                      Console.WriteLine("{0} device(s) detected' mining Bitcoin on Bitminter using all devices"' deviceList.Count);                        //setup a pool                      MiningPool pool = new MiningPool()                      {                          Host = "mint.bitminter.com"'                          Port = 3333'                          Username = "nwoolls_deepcore"'                          Password = "deepcore"                      };                      minerConfiguration.Pools.Add(pool);                        //specify algorithm                      minerConfiguration.Algorithm = MinerFactory.Instance.GetAlgorithm(AlgorithmNames.SHA256);                        //disable GPU mining                      minerConfiguration.DisableGpu = true;                        //specify device indexes to use                      for (int i = 0; i < deviceList.Count; i++)                          minerConfiguration.DeviceDescriptors.Add(deviceList[i]);                        //enable RPC API                      minerConfiguration.ApiListen = true;                      minerConfiguration.ApiPort = 4028;                        Console.WriteLine("Launching {0}"' executableName);                        //start mining                      miner = new Xgminer.Miner(minerConfiguration' false);                      System.Diagnostics.Process minerProcess = miner.Launch();                      try                      {                          //get an API context                          Xgminer.Api.ApiContext apiContext = new Xgminer.Api.ApiContext(minerConfiguration.ApiPort);                          try                          {                              //mine for one minute' monitoring hashrate via the API                              for (int i = 0; i < 6; i++)                              {                                  Thread.Sleep(1000 * 10); //sleep 10s                                    //query the miner process via its RPC API for device information                                  List<Xgminer.Api.Data.DeviceInformation> deviceInformation = apiContext.GetDeviceInformation();                                    //output device information                                  foreach (Xgminer.Api.Data.DeviceInformation item in deviceInformation)                                      Console.WriteLine("Hasrate for device {0}: {1} current' {2} average"' item.Index'                                              item.CurrentHashrate' item.AverageHashrate);                              }                          }                          finally                          {                              Console.WriteLine("Quitting mining via the RPC API");                                //stop mining' try the API first                              apiContext.QuitMining();                          }                      }                      finally                      {                          Console.WriteLine("Killing any remaining process");                            //then kill the process                          try                          {                              minerProcess.Kill();                              minerProcess.WaitForExit();                              minerProcess.Close();                          }                          catch (InvalidOperationException)                          {                              //already closed                          }                      }                  }                  else                  {                      Console.WriteLine("No devices capable of mining detected");                  }              }              finally              {                  Console.WriteLine("Cleaning up' deleting directory {0}"' executablePath);                  Directory.Delete(executablePath' true);              }
