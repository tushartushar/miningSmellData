Implementation smell,Namespace,Class,File,Method,Description
Long Method,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The method has 116 lines of code.
Long Method,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The method has 118 lines of code.
Long Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The method has 133 lines of code.
Long Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The method has 125 lines of code.
Long Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The method has 229 lines of code.
Long Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The method has 227 lines of code.
Long Method,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The method has 221 lines of code.
Long Method,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The method has 183 lines of code.
Long Method,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The method has 116 lines of code.
Complex Method,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,LoadContent,Cyclomatic complexity of the method is 25
Complex Method,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,Cyclomatic complexity of the method is 29
Complex Method,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,Cyclomatic complexity of the method is 28
Complex Method,GameBase,TPSConfig,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,GetMouseRev,Cyclomatic complexity of the method is 15
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ReleaseContent,Cyclomatic complexity of the method is 14
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,Cyclomatic complexity of the method is 18
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,Cyclomatic complexity of the method is 14
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Shot,Cyclomatic complexity of the method is 12
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,Cyclomatic complexity of the method is 26
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,Cyclomatic complexity of the method is 20
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,Cyclomatic complexity of the method is 114
Complex Method,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,Cyclomatic complexity of the method is 41
Complex Method,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,HandleInput,Cyclomatic complexity of the method is 19
Complex Method,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,Cyclomatic complexity of the method is 26
Complex Method,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,Cyclomatic complexity of the method is 18
Complex Method,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,Cyclomatic complexity of the method is 10
Complex Method,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,Cyclomatic complexity of the method is 39
Complex Method,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,Cyclomatic complexity of the method is 58
Long Parameter List,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The method has 64 parameters.
Long Parameter List,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetButton,The method has 13 parameters.
Long Parameter List,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The method has 9 parameters.
Long Parameter List,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The method has 8 parameters.
Long Parameter List,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The method has 6 parameters.
Long Parameter List,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,MovePlayer,The method has 15 parameters.
Long Parameter List,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,AddPlayer,The method has 8 parameters.
Long Parameter List,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The method has 36 parameters.
Long Parameter List,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The method has 122 parameters.
Long Parameter List,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The method has 16 parameters.
Long Parameter List,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The method has 7 parameters.
Long Parameter List,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The method has 8 parameters.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 134.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 136.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 137.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 146.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 146.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 218.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 147.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 147.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "		mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 219.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The length of the statement  "			cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 141.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetButton,The length of the statement  "	button = new MyButton (buf' GameControl.SWidth * 2 / 3' GameControl.SHeight * y / 14' 229' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 134.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The length of the statement  "	label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  { " is 252.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The length of the statement  "			if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) { " is 178.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The length of the statement  "				control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false); " is 301.
Long Statement,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The length of the statement  "		DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50); " is 205.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The length of the statement  "		models.Add (new AnimationModel (item.Item1' null' (float)item.Item2' false' -2' true' true' false' 0.1f' false' null' (m' o) =>  { " is 130.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The length of the statement  "	player = new Player (TPSConfigScreen.Config.PlayerControl' contents.Contents3D.Weapons' contents.Contents3D.Characters' models' 0' 0' playerStatus.ModelIndex' DX.VGet (x' 400' z)' -1' ATTACH_WEAPON_FRAME_NAME' new int[] { " is 221.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The length of the statement  "			top &= !suicideButton.HandleInput (control' top' !ExitFlag && !mouseRClick && !suicideFlag && player.Health > 0 && !sendSuicide && gameStarted); " is 144.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Shot,The length of the statement  "		DX.VECTOR cap2 = DX.VGet (item.Value.Item2.Location.x' item.Value.Item2.Location.y + r + h' item.Value.Item2.Location.z); " is 121.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The length of the statement  "		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z)); " is 139.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The length of the statement  "			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y)); " is 187.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The length of the statement  "					//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) ); " is 202.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The length of the statement  "						DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z)); " is 267.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The length of the statement  "	//	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos( DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) / 2' item.Location.z ) ); " is 144.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The length of the statement  "	//		double r = Math.Sqrt( ( GameControl.SWidth / 2 - screenLoc.x ) * ( GameControl.SWidth / 2 - screenLoc.x ) + ( GameControl.SHeight / 2 - screenLoc.y ) * ( GameControl.SHeight / 2 - screenLoc.y ) ); " is 200.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The length of the statement  "			Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]); " is 235.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The length of the statement  "		Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30)); " is 141.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The length of the statement  "		DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50); " is 249.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The length of the statement  "			DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE); " is 154.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The length of the statement  "			DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE); " is 154.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The length of the statement  "			Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40)); " is 196.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The length of the statement  "				Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30)); " is 138.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "	DX.VECTOR target = camera.NowCameraParam.Position + DX.VNorm (camera.NowCameraParam.Target - camera.NowCameraParam.Position) * (float)range; " is 140.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z)); " is 135.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "					//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target ); " is 121.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z)); " is 198.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "						result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z)); " is 243.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "				DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z)); " is 144.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "					double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y)); " is 187.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target ); " is 121.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "			Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25)); " is 158.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "			DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE); " is 131.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "			DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE); " is 140.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The length of the statement  "			Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25)); " is 170.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "	DX.DrawBox (GameControl.SWidth - 400' GameControl.SHeight - 60' GameControl.SWidth' GameControl.SHeight' control.COLOR_WHITE' DX.TRUE); " is 135.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "	DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 10' GameControl.SHeight - 10' control.COLOR_BLACK' DX.TRUE); " is 145.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "	DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 380 + len' GameControl.SHeight - 10' color' DX.TRUE); " is 138.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "	DX.DrawStringToHandle (GameControl.SWidth - 340' GameControl.SHeight - 95' player.Health + ""' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_40)); " is 160.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "	DX.DrawStringToHandle (GameControl.SWidth - 200' GameControl.SHeight - 85' "/"' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30)); " is 145.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "	DX.DrawStringToHandle (GameControl.SWidth - 170' GameControl.SHeight - 85' player.MaxHealth + ""' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30)); " is 163.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "	DX.DrawStringToHandle (GameControl.SWidth - len - 15' GameControl.SHeight - 120' str' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_30)); " is 149.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The length of the statement  "		DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate); " is 177.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The length of the statement  "	Utility.DrawStringToHandleArrangeRight (weapon.NowBulletNumber + "+" + weapon.TotalBulletNumber' GameControl.SWidth - 20' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30)); " is 190.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The length of the statement  "	DX.DrawBox (GameControl.SWidth - maxLen - 10 - 2' y + 34' GameControl.SWidth - 10 + 2' y + 44' control.COLOR_BLACK' DX.TRUE); " is 125.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The length of the statement  "	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_ORANGE' DX.TRUE); " is 124.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The length of the statement  "	Utility.DrawStringToHandleArrangeRight (weapon.Name' GameControl.SWidth - 20' y + 50' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40)); " is 152.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The length of the statement  "			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE); " is 124.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The length of the statement  "				DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE); " is 121.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The length of the statement  "			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE); " is 121.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The length of the statement  "	DX.SetCameraPositionAndTargetAndUpVec (DX.VGet (player.Location.x' 400' player.Location.z)' DX.VGet (player.Location.x' 0' player.Location.z)' DX.VGet (1' 0' 0)); " is 162.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The length of the statement  "			DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40)); " is 190.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The length of the statement  "		DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35); " is 214.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The length of the statement  "		Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30)); " is 175.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The length of the statement  "			DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30); " is 194.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The length of the statement  "		DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35); " is 210.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The length of the statement  "		DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35); " is 207.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The length of the statement  "		DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35); " is 207.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The length of the statement  "		DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40)); " is 195.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The length of the statement  "		client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ())); " is 321.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The length of the statement  "			AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17])); " is 160.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The length of the statement  "			MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID); " is 380.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The length of the statement  "		bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8]))); " is 245.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The length of the statement  "			MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID); " is 380.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,MovePlayer,The length of the statement  "			otherPlayer [id].Item2.NetworkControl (x' y' z' vx' vy' vz' moveFlag' otherPlayer [targettingCharacterID].Item2' readyGun' shotVecX' shotVecY' shotVecZ' weaponIndex); " is 166.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,MovePlayer,The length of the statement  "			otherPlayer [id].Item2.NetworkControl (x' y' z' vx' vy' vz' moveFlag' player' readyGun' shotVecX' shotVecY' shotVecZ' weaponIndex); " is 131.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,MovePlayer,The length of the statement  "			otherPlayer [id].Item2.NetworkControl (x' y' z' vx' vy' vz' moveFlag' null' readyGun' shotVecX' shotVecY' shotVecZ' weaponIndex); " is 129.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,AddPlayer,The length of the statement  "			otherPlayer.Add (id' new Tuple<string' Character> (name' new Character (contents.Contents3D.Weapons' contents.Contents3D.Characters' models' 0' 0' model' DX.VGet (0' 400' 0)' -1' ATTACH_WEAPON_FRAME_NAME' new int[] { " is 216.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "			cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  { " is 151.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "			endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  { " is 140.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "			configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  { " is 148.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "			suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  { " is 150.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "		client.AddGameCommand ("shot"' ""' shotFrom.x.ToString ("F2") + "\t" + shotFrom.y.ToString ("F2") + "\t" + shotFrom.z.ToString ("F2")' shotVec.x.ToString ("F2") + "\t" + shotVec.y.ToString ("F2") + "\t" + shotVec.z.ToString ("F2")' shotLength.ToString ("F2") + "\t" + shotDamage.ToString () + "\t" + shotDamageVar.ToString ("F2")); " is 331.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "			cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  { " is 142.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "			DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z)); " is 187.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y)); " is 187.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "				//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) ); " is 146.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The length of the statement  "					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z)); " is 315.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,SendPlayerStateUDP,The length of the statement  "	client.AddGameCommandUDP ("move"' player.Location.x.ToString ("F2") + "\t" + player.Location.y.ToString ("F2") + "\t" + player.Location.z.ToString ("F2")' player.Velocity.x.ToString ("F2") + "\t" + player.Velocity.y.ToString ("F2") + "\t" + player.Velocity.z.ToString ("F2")' player.Moved.ToString () + "\t" + TargettingPlayerID' player.ReadyGun.ToString () + "\t" + shotTargetVec.x.ToString ("F2") + "\t" + shotTargetVec.y.ToString ("F2") + "\t" + shotTargetVec.z.ToString ("F2")' player.NowWeaponIndex.ToString () + "\t" + late.ToString ("F2")); " is 547.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,SendPlayerStateTCP,The length of the statement  "	client.AddGameCommand ("move"' player.Location.x.ToString ("F2") + "\t" + player.Location.y.ToString ("F2") + "\t" + player.Location.z.ToString ("F2")' player.Velocity.x.ToString ("F2") + "\t" + player.Velocity.y.ToString ("F2") + "\t" + player.Velocity.z.ToString ("F2")' player.Moved.ToString () + "\t" + TargettingPlayerID' player.ReadyGun.ToString () + "\t" + shotTargetVec.x.ToString ("F2") + "\t" + shotTargetVec.y.ToString ("F2") + "\t" + shotTargetVec.z.ToString ("F2")' player.NowWeaponIndex.ToString () + "\t" + late.ToString ("F2")); " is 544.
Long Statement,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,SendInitPlayerState,The length of the statement  "	client.AddGameCommand ("init"' player.Location.x.ToString ("F2") + "\t" + player.Location.y.ToString ("F2") + "\t" + player.Location.z.ToString ("F2")' player.Velocity.x.ToString ("F2") + "\t" + player.Velocity.y.ToString ("F2") + "\t" + player.Velocity.z.ToString ("F2")' player.GetRealHeight ().ToString ("F2") + "\t" + player.GetRadius ().ToString ("F2")' player.MaxHealth.ToString () + "\t" + player.Health.ToString () + "\t" + player.DeadCount.ToString () + "\t" + player.KillCount.ToString () + "\t" + playerStatus.ModelIndex.ToString ()' playerStatus.WeaponIndex1.ToString () + "\t" + playerStatus.WeaponIndex2.ToString () + "\t" + playerStatus.WeaponIndex3.ToString () + "\t" + loadFinished.ToString ()); " is 712.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,GetLoadingGameScreenOption,The length of the statement  "		option = new LoadingGameScreenOption (LoadingGameScreenOption.eLoadingScreen.LoadingScreen3' null' null' true' new LoadingAction ()); " is 133.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,HandleInput,The length of the statement  "		top &= !increaseTimeButton.HandleInput (control' top' valid && allowedChangePlayTime && (int)playTime < TPS.PlayTimeNumber - 1); " is 128.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The length of the statement  "	DrawHelper.DrawCenterStringToHandleEx ("制限時間 : " + TPS.GetTime (playTime) + "分"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 80' control.COLOR_GRAY1' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30)); " is 226.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The length of the statement  "		DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50); " is 249.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The length of the statement  "	buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4); " is 146.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The length of the statement  "	buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2); " is 146.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 144.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 141.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 150.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 150.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "			suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 164.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 155.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 155.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 157.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 157.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 157.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 157.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 158.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 158.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 139.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 144.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "		changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 144.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "			charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 173.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "			weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 179.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "			weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 179.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The length of the statement  "			weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 180.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The length of the statement  "		status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4])); " is 158.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The length of the statement  "			suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 164.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The length of the statement  "			suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  { " is 164.
Long Statement,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,SetStatus,The length of the statement  "	client.AddGameCommand ("setStatus"' status.ModelIndex.ToString ()' status.WeaponIndex1.ToString ()' status.WeaponIndex2.ToString ()' status.WeaponIndex3.ToString ()); " is 166.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The length of the statement  "					network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ()); " is 170.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The length of the statement  "			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ()); " is 122.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The length of the statement  "					network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tkill"' item.ShooterID' playerID' shooter.KillCount.ToString ()' player.DeadCount.ToString ()); " is 159.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The length of the statement  "				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdead"' playerID' index.ToString ()' player.DeadCount.ToString ()); " is 131.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The length of the statement  "				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdamage"' playerID' player.Health.ToString ()' index.ToString ()' item.ShooterID' vel.x.ToString ("F2")' vel.z.ToString ("F2")); " is 192.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The length of the statement  "		Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10]))); " is 301.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The length of the statement  "		network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ()); " is 191.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The length of the statement  "		network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ()); " is 136.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The length of the statement  "		p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16])); " is 135.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The length of the statement  "				TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control); " is 163.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The length of the statement  "				network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ()); " is 212.
Long Statement,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The length of the statement  "		p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16])); " is 135.
Complex Conditional,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The conditional expression  "!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8"  is complex.
Complex Conditional,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The conditional expression  "gameStarted && !gameEnd && player.Health <= 0 && waitRespawn"  is complex.
Empty Catch Block,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadWorldModelDataInfo,The method has an empty catch block.
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (!initialized) {  	initialized = true;  	endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		endFlag = true;  		this.ExitScreen ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		Config.PlayerControl.Forward = forward;  		Config.PlayerControl.Back = back;  		Config.PlayerControl.Left = left;  		Config.PlayerControl.Right = right;  		Config.PlayerControl.Jump = jump;  		Config.PlayerControl.Dash = dash;  		Config.Reload = reload;  		Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  		Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		forward = initForward;  		back = initBack;  		left = initLeft;  		right = initRight;  		jump = initJump;  		dash = initDash;  		reload = initReload;  		mouseXLevel = (int)initMouseXLevel;  		mouseYLevel = (int)initMouseYLevel;  		initialized = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  	SetLabel ("マウス感度x"' 9' out mouseXLabel);  	mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel--;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseXLevel++;  		mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseXButton3.IsLabel = true;  	SetLabel ("マウス感度y"' 10' out mouseYLabel);  	mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel--;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		mouseYLevel++;  		mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	}' (mx' my' o) =>  {  	}' null);  	//mouseYButton3.IsLabel = true;  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	endFlag = true;  	this.ExitScreen ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	endFlag = true;  	this.ExitScreen ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	endFlag = true;  	this.ExitScreen ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton ("戻る"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 40' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	endFlag = true;  	this.ExitScreen ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	Config.PlayerControl.Forward = forward;  	Config.PlayerControl.Back = back;  	Config.PlayerControl.Left = left;  	Config.PlayerControl.Right = right;  	Config.PlayerControl.Jump = jump;  	Config.PlayerControl.Dash = dash;  	Config.Reload = reload;  	Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  	Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	Config.PlayerControl.Forward = forward;  	Config.PlayerControl.Back = back;  	Config.PlayerControl.Left = left;  	Config.PlayerControl.Right = right;  	Config.PlayerControl.Jump = jump;  	Config.PlayerControl.Dash = dash;  	Config.Reload = reload;  	Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  	Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	Config.PlayerControl.Forward = forward;  	Config.PlayerControl.Back = back;  	Config.PlayerControl.Left = left;  	Config.PlayerControl.Right = right;  	Config.PlayerControl.Jump = jump;  	Config.PlayerControl.Dash = dash;  	Config.Reload = reload;  	Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  	Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: adaptButton = new MyButton ("適応"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 90' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	Config.PlayerControl.Forward = forward;  	Config.PlayerControl.Back = back;  	Config.PlayerControl.Left = left;  	Config.PlayerControl.Right = right;  	Config.PlayerControl.Jump = jump;  	Config.PlayerControl.Dash = dash;  	Config.Reload = reload;  	Config.MouseXLevel = (TPSConfig.eMouseMoveLevel)mouseXLevel;  	Config.MouseYLevel = (TPSConfig.eMouseMoveLevel)mouseYLevel;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	forward = initForward;  	back = initBack;  	left = initLeft;  	right = initRight;  	jump = initJump;  	dash = initDash;  	reload = initReload;  	mouseXLevel = (int)initMouseXLevel;  	mouseYLevel = (int)initMouseYLevel;  	initialized = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	forward = initForward;  	back = initBack;  	left = initLeft;  	right = initRight;  	jump = initJump;  	dash = initDash;  	reload = initReload;  	mouseXLevel = (int)initMouseXLevel;  	mouseYLevel = (int)initMouseYLevel;  	initialized = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	forward = initForward;  	back = initBack;  	left = initLeft;  	right = initRight;  	jump = initJump;  	dash = initDash;  	reload = initReload;  	mouseXLevel = (int)initMouseXLevel;  	mouseYLevel = (int)initMouseYLevel;  	initialized = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: initButton = new MyButton ("初期化"' GameControl.SWidth * 4 / 5' GameControl.SHeight - 140' 200' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	forward = initForward;  	back = initBack;  	left = initLeft;  	right = initRight;  	jump = initJump;  	dash = initDash;  	reload = initReload;  	mouseXLevel = (int)initMouseXLevel;  	mouseYLevel = (int)initMouseYLevel;  	initialized = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  	settingForward = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  	settingBack = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  	settingLeft = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  	settingRight = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  	settingJump = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  	settingDash = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  	settingReload = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetLabel ("マウス感度x"' 9' out mouseXLabel);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel--;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel--;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel--;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel--;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel--;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel--;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel++;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel++;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel++;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel++;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel++;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 9 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseXLevel++;  	mouseXButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseXButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseXLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 9 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: SetLabel ("マウス感度y"' 10' out mouseYLabel);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel--;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel--;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel--;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel--;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel--;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton1 = new MyButton ("←"' GameControl.SWidth * 2 / 3 - 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel--;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel++;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel++;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel++;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel++;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel++;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton2 = new MyButton ("→"' GameControl.SWidth * 2 / 3 + 120' GameControl.SHeight * 10 / 14' 50' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	mouseYLevel++;  	mouseYButton3.Label = TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: mouseYButton3 = new MyButton (TPSConfig.GetMouseRev ((TPSConfig.eMouseMoveLevel)(mouseYLevel)).ToString ("F2")' GameControl.SWidth * 2 / 3' GameControl.SHeight * 10 / 14' 150' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (SettingButton) {  	if (cancelButton == null) {  		cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (mx' my' o) =>  {  			InitSettingButton ();  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  	}  }  else {  	if (cancelButton != null) {  		cancelButton = null;  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (SettingButton) {  	if (cancelButton == null) {  		cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (mx' my' o) =>  {  			InitSettingButton ();  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  	}  }  else {  	if (cancelButton != null) {  		cancelButton = null;  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (SettingButton) {  	if (cancelButton == null) {  		cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (mx' my' o) =>  {  			InitSettingButton ();  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  	}  }  else {  	if (cancelButton != null) {  		cancelButton = null;  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (SettingButton) {  	if (cancelButton == null) {  		cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (mx' my' o) =>  {  			InitSettingButton ();  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  	}  }  else {  	if (cancelButton != null) {  		cancelButton = null;  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (cancelButton == null) {  	cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		InitSettingButton ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (cancelButton == null) {  	cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		InitSettingButton ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (cancelButton == null) {  	cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		InitSettingButton ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: if (cancelButton == null) {  	cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (mx' my' o) =>  {  		InitSettingButton ();  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	InitSettingButton ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	InitSettingButton ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	InitSettingButton ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Update,The following statement contains a magic number: cancelButton = new MyButton ("キャンセル"' GameControl.SWidth / 2' GameControl.SHeight / 2 + 100' 220' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	InitSettingButton ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetButton,The following statement contains a magic number: button = new MyButton (buf' GameControl.SWidth * 2 / 3' GameControl.SHeight * y / 14' 229' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	clicked ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetButton,The following statement contains a magic number: button = new MyButton (buf' GameControl.SWidth * 2 / 3' GameControl.SHeight * y / 14' 229' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	clicked ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetButton,The following statement contains a magic number: button = new MyButton (buf' GameControl.SWidth * 2 / 3' GameControl.SHeight * y / 14' 229' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	clicked ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetButton,The following statement contains a magic number: button = new MyButton (buf' GameControl.SWidth * 2 / 3' GameControl.SHeight * y / 14' 229' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (mx' my' o) =>  {  	clicked ();  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,SetLabel,The following statement contains a magic number: label = new MyButton (labelStr' GameControl.SWidth / 3' GameControl.SHeight * y / 14' 220' DX.GetColor (244' 244' 244)' DX.GetColor (128' 228' 288)' DX.GetColor (188' 188' 128)' 180' DX.GetColor (24' 64' 64)' FontDefines.FONT_SIZE_30' (mx' my' o) =>  {  }' (mx' my' o) =>  {  }' null);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (SettingButton) {  	int key = control.GetInputKeyCode ();  	if (key >= 0) {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		string buf;  		bool check = control.GetKeyCode (key' out buf);  		if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  			string str = "そのキーは使用できません";  			int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  			control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  		}  		else {  			if (settingForward) {  				forward = key;  				SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  					settingForward = true;  				});  			}  			if (settingBack) {  				back = key;  				SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  					settingBack = true;  				});  			}  			if (settingLeft) {  				left = key;  				SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  					settingLeft = true;  				});  			}  			if (settingRight) {  				right = key;  				SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  					settingRight = true;  				});  			}  			if (settingJump) {  				jump = key;  				SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  					settingJump = true;  				});  			}  			if (settingDash) {  				dash = key;  				SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  					settingDash = true;  				});  			}  			if (settingReload) {  				reload = key;  				SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  					settingReload = true;  				});  			}  			InitSettingButton ();  		}  		for (int i = 256; --i >= 0;) {  			control.SetKeyState (i' KeyControl.KEY_NONE);  		}  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (key >= 0) {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	string buf;  	bool check = control.GetKeyCode (key' out buf);  	if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  		string str = "そのキーは使用できません";  		int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  		control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  	}  	else {  		if (settingForward) {  			forward = key;  			SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  				settingForward = true;  			});  		}  		if (settingBack) {  			back = key;  			SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  				settingBack = true;  			});  		}  		if (settingLeft) {  			left = key;  			SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  				settingLeft = true;  			});  		}  		if (settingRight) {  			right = key;  			SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  				settingRight = true;  			});  		}  		if (settingJump) {  			jump = key;  			SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  				settingJump = true;  			});  		}  		if (settingDash) {  			dash = key;  			SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  				settingDash = true;  			});  		}  		if (settingReload) {  			reload = key;  			SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  				settingReload = true;  			});  		}  		InitSettingButton ();  	}  	for (int i = 256; --i >= 0;) {  		control.SetKeyState (i' KeyControl.KEY_NONE);  	}  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (!check || key == DX.KEY_INPUT_ESCAPE || key == DX.KEY_INPUT_RETURN || key == DX.KEY_INPUT_RSHIFT || key == DX.KEY_INPUT_0 || key == DX.KEY_INPUT_9 || key == DX.KEY_INPUT_8) {  	string str = "そのキーは使用できません";  	int w = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_40));  	control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  }  else {  	if (settingForward) {  		forward = key;  		SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  			settingForward = true;  		});  	}  	if (settingBack) {  		back = key;  		SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  			settingBack = true;  		});  	}  	if (settingLeft) {  		left = key;  		SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  			settingLeft = true;  		});  	}  	if (settingRight) {  		right = key;  		SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  			settingRight = true;  		});  	}  	if (settingJump) {  		jump = key;  		SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  			settingJump = true;  		});  	}  	if (settingDash) {  		dash = key;  		SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  			settingDash = true;  		});  	}  	if (settingReload) {  		reload = key;  		SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  			settingReload = true;  		});  	}  	InitSettingButton ();  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: control.AddMessage (str' null' 2000' GameControl.SWidth / 2 - w / 2' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 - 80' GameControl.SHeight / 2 - 20' GameControl.SWidth / 2 - w / 2 + 80' GameControl.SHeight / 2 - 20' control.COLOR_RED' FontDefines.FONT_SIZE_40' 200' 200' true' false);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (settingForward) {  	forward = key;  	SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  		settingForward = true;  	});  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: SetButton (control' "前進"' forward' 2' out forwardLabel' out forwardButton' () =>  {  	settingForward = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (settingBack) {  	back = key;  	SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  		settingBack = true;  	});  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: SetButton (control' "後退"' back' 3' out backLabel' out backButton' () =>  {  	settingBack = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (settingLeft) {  	left = key;  	SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  		settingLeft = true;  	});  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: SetButton (control' "左移動"' left' 4' out leftLabel' out leftButton' () =>  {  	settingLeft = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (settingRight) {  	right = key;  	SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  		settingRight = true;  	});  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: SetButton (control' "右移動"' right' 5' out rightLabel' out rightButton' () =>  {  	settingRight = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (settingJump) {  	jump = key;  	SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  		settingJump = true;  	});  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: SetButton (control' "ジャンプ"' jump' 6' out jumpLabel' out jumpButton' () =>  {  	settingJump = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (settingDash) {  	dash = key;  	SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  		settingDash = true;  	});  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: SetButton (control' "ダッシュ"' dash' 7' out dashLabel' out dashButton' () =>  {  	settingDash = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: if (settingReload) {  	reload = key;  	SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  		settingReload = true;  	});  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: SetButton (control' "リロード"' reload' 8' out reloadLabel' out reloadButton' () =>  {  	settingReload = true;  });  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,HandleInput,The following statement contains a magic number: for (int i = 256; --i >= 0;) {  	control.SetKeyState (i' KeyControl.KEY_NONE);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: if (SettingButton) {  	control.FadeBackBufferToBlack (100' control.COLOR_BLACK);  	DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: if (SettingButton) {  	control.FadeBackBufferToBlack (100' control.COLOR_BLACK);  	DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: if (SettingButton) {  	control.FadeBackBufferToBlack (100' control.COLOR_BLACK);  	DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: if (SettingButton) {  	control.FadeBackBufferToBlack (100' control.COLOR_BLACK);  	DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: if (SettingButton) {  	control.FadeBackBufferToBlack (100' control.COLOR_BLACK);  	DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: if (SettingButton) {  	control.FadeBackBufferToBlack (100' control.COLOR_BLACK);  	DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  }  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: control.FadeBackBufferToBlack (100' control.COLOR_BLACK);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  
Magic Number,GameBase,TPSConfigScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\ConfigScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("設定したいキーを入力してください"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_50)' 4' -4' 50);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The following statement contains a magic number: foreach (var item in loadModelPath) {  	models.Add (new AnimationModel (item.Item1' null' (float)item.Item2' false' -2' true' true' false' 0.1f' false' null' (m' o) =>  {  		(m as AnimationModel).SetupInitialState ();  	}));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The following statement contains a magic number: models.Add (new AnimationModel (item.Item1' null' (float)item.Item2' false' -2' true' true' false' 0.1f' false' null' (m' o) =>  {  	(m as AnimationModel).SetupInitialState ();  }));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The following statement contains a magic number: player = new Player (TPSConfigScreen.Config.PlayerControl' contents.Contents3D.Weapons' contents.Contents3D.Characters' models' 0' 0' playerStatus.ModelIndex' DX.VGet (x' 400' z)' -1' ATTACH_WEAPON_FRAME_NAME' new int[] {  	playerStatus.WeaponIndex1'  	playerStatus.WeaponIndex2'  	playerStatus.WeaponIndex3  });  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The following statement contains a magic number: camera.CameraAngleRestrictUp = 45;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The following statement contains a magic number: camera.CameraAngleRestrictDown = 45;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The following statement contains a magic number: miniMapBuffer = new Utility.GraphicHandle (GameControl.SWidth / 3' GameControl.SHeight / 3);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,LoadContent,The following statement contains a magic number: miniMapBuffer = new Utility.GraphicHandle (GameControl.SWidth / 3' GameControl.SHeight / 3);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: radarGraph = new Utility.GraphicHandle (256' 256);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: radarGraph = new Utility.GraphicHandle (256' 256);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircle (128' 128' 128' DX.GetColor (255' 255' 0));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircle (128' 128' 128' DX.GetColor (255' 255' 0));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircle (128' 128' 128' DX.GetColor (255' 255' 0));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircle (128' 128' 128' DX.GetColor (255' 255' 0));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircle (128' 128' 128' DX.GetColor (255' 255' 0));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircleGauge (128' 128' 100 * camera.Perspective / 360' tmp1.Handle);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircleGauge (128' 128' 100 * camera.Perspective / 360' tmp1.Handle);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircleGauge (128' 128' 100 * camera.Perspective / 360' tmp1.Handle);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: DX.DrawCircleGauge (128' 128' 100 * camera.Perspective / 360' tmp1.Handle);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: tmp2.DrawRotaGraph (128' 128' 1' -Camera.GetPhi (camera.Perspective) / 2);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: tmp2.DrawRotaGraph (128' 128' 1' -Camera.GetPhi (camera.Perspective) / 2);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CreateRadarGraph,The following statement contains a magic number: tmp2.DrawRotaGraph (128' 128' 1' -Camera.GetPhi (camera.Perspective) / 2);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: if (showMenuFlag) {  	if (endButton != null) {  		top &= !endButton.HandleInput (control' top' !ExitFlag && !mouseRClick);  	}  	if (cancelEndButton != null) {  		top &= !cancelEndButton.HandleInput (control' top' !ExitFlag && !mouseRClick);  	}  	if (configButton != null) {  		top &= !configButton.HandleInput (control' top' !ExitFlag && !mouseRClick);  	}  	if (suicideButton != null) {  		top &= !suicideButton.HandleInput (control' top' !ExitFlag && !mouseRClick && !suicideFlag && player.Health > 0 && !sendSuicide && gameStarted);  	}  	if (!IsValidComment && control.IsKeyInputNow (DX.KEY_INPUT_RSHIFT)) {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}  }  else {  	if (IsValidComment || suicideFlag) {  		if (control.MouseFlag == MouseControl.DrawMouseFlag.Hide) {  			control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  				DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  			});  		}  	}  	else {  		if (control.MouseFlag == MouseControl.DrawMouseFlag.User) {  			control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  			int mx' my;  			DX.GetWindowPosition (out mx' out my);  			mx += GameControl.SWidth / 2;  			my += GameControl.SHeight / 2;  			System.Windows.Forms.Cursor.Position = new System.Drawing.Point (mx' my);  			prevX = mx;  			prevY = my;  		}  	}  	if (suicideFlag) {  		if (cancelSuicideButton != null) {  			top &= !cancelSuicideButton.HandleInput (control' top' !ExitFlag && !mouseRClick && suicideFlag);  		}  	}  	else {  		if (!IsValidComment && !sendSuicide) {  			PlayerControl (control);  		}  		if (!IsValidComment && control.IsKeyInputNow (DX.KEY_INPUT_RSHIFT)) {  			showMenuFlag = true;  			setMenuButtonFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: if (showMenuFlag) {  	if (endButton != null) {  		top &= !endButton.HandleInput (control' top' !ExitFlag && !mouseRClick);  	}  	if (cancelEndButton != null) {  		top &= !cancelEndButton.HandleInput (control' top' !ExitFlag && !mouseRClick);  	}  	if (configButton != null) {  		top &= !configButton.HandleInput (control' top' !ExitFlag && !mouseRClick);  	}  	if (suicideButton != null) {  		top &= !suicideButton.HandleInput (control' top' !ExitFlag && !mouseRClick && !suicideFlag && player.Health > 0 && !sendSuicide && gameStarted);  	}  	if (!IsValidComment && control.IsKeyInputNow (DX.KEY_INPUT_RSHIFT)) {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}  }  else {  	if (IsValidComment || suicideFlag) {  		if (control.MouseFlag == MouseControl.DrawMouseFlag.Hide) {  			control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  				DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  			});  		}  	}  	else {  		if (control.MouseFlag == MouseControl.DrawMouseFlag.User) {  			control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  			int mx' my;  			DX.GetWindowPosition (out mx' out my);  			mx += GameControl.SWidth / 2;  			my += GameControl.SHeight / 2;  			System.Windows.Forms.Cursor.Position = new System.Drawing.Point (mx' my);  			prevX = mx;  			prevY = my;  		}  	}  	if (suicideFlag) {  		if (cancelSuicideButton != null) {  			top &= !cancelSuicideButton.HandleInput (control' top' !ExitFlag && !mouseRClick && suicideFlag);  		}  	}  	else {  		if (!IsValidComment && !sendSuicide) {  			PlayerControl (control);  		}  		if (!IsValidComment && control.IsKeyInputNow (DX.KEY_INPUT_RSHIFT)) {  			showMenuFlag = true;  			setMenuButtonFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: if (IsValidComment || suicideFlag) {  	if (control.MouseFlag == MouseControl.DrawMouseFlag.Hide) {  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  else {  	if (control.MouseFlag == MouseControl.DrawMouseFlag.User) {  		control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  		int mx' my;  		DX.GetWindowPosition (out mx' out my);  		mx += GameControl.SWidth / 2;  		my += GameControl.SHeight / 2;  		System.Windows.Forms.Cursor.Position = new System.Drawing.Point (mx' my);  		prevX = mx;  		prevY = my;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: if (IsValidComment || suicideFlag) {  	if (control.MouseFlag == MouseControl.DrawMouseFlag.Hide) {  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  else {  	if (control.MouseFlag == MouseControl.DrawMouseFlag.User) {  		control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  		int mx' my;  		DX.GetWindowPosition (out mx' out my);  		mx += GameControl.SWidth / 2;  		my += GameControl.SHeight / 2;  		System.Windows.Forms.Cursor.Position = new System.Drawing.Point (mx' my);  		prevX = mx;  		prevY = my;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: if (control.MouseFlag == MouseControl.DrawMouseFlag.User) {  	control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  	int mx' my;  	DX.GetWindowPosition (out mx' out my);  	mx += GameControl.SWidth / 2;  	my += GameControl.SHeight / 2;  	System.Windows.Forms.Cursor.Position = new System.Drawing.Point (mx' my);  	prevX = mx;  	prevY = my;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: if (control.MouseFlag == MouseControl.DrawMouseFlag.User) {  	control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  	int mx' my;  	DX.GetWindowPosition (out mx' out my);  	mx += GameControl.SWidth / 2;  	my += GameControl.SHeight / 2;  	System.Windows.Forms.Cursor.Position = new System.Drawing.Point (mx' my);  	prevX = mx;  	prevY = my;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: mx += GameControl.SWidth / 2;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,HandleInput,The following statement contains a magic number: my += GameControl.SHeight / 2;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (shooting && (player.State & CharacterState.FLOW_FILTER) == 0) {  	Shot (control);  }  else if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (shooting && (player.State & CharacterState.FLOW_FILTER) == 0) {  	Shot (control);  }  else if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (shooting && (player.State & CharacterState.FLOW_FILTER) == 0) {  	Shot (control);  }  else if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (shooting && (player.State & CharacterState.FLOW_FILTER) == 0) {  	Shot (control);  }  else if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (!waitRespawn) {  	int vol = DX.GetMouseWheelRotVol ();  	if (vol != 0) {  		if (vol > 0 && mouseRotate < 0) {  			mouseRotate = vol;  		}  		else if (vol < 0 && mouseRotate > 0) {  			mouseRotate = vol;  		}  		else {  			mouseRotate += vol;  		}  		while (mouseRotate >= 3) {  			mouseRotate -= 3;  			player.NowWeaponIndex--;  		}  		while (mouseRotate <= -3) {  			mouseRotate += 3;  			player.NowWeaponIndex++;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (vol != 0) {  	if (vol > 0 && mouseRotate < 0) {  		mouseRotate = vol;  	}  	else if (vol < 0 && mouseRotate > 0) {  		mouseRotate = vol;  	}  	else {  		mouseRotate += vol;  	}  	while (mouseRotate >= 3) {  		mouseRotate -= 3;  		player.NowWeaponIndex--;  	}  	while (mouseRotate <= -3) {  		mouseRotate += 3;  		player.NowWeaponIndex++;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (vol != 0) {  	if (vol > 0 && mouseRotate < 0) {  		mouseRotate = vol;  	}  	else if (vol < 0 && mouseRotate > 0) {  		mouseRotate = vol;  	}  	else {  		mouseRotate += vol;  	}  	while (mouseRotate >= 3) {  		mouseRotate -= 3;  		player.NowWeaponIndex--;  	}  	while (mouseRotate <= -3) {  		mouseRotate += 3;  		player.NowWeaponIndex++;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (vol != 0) {  	if (vol > 0 && mouseRotate < 0) {  		mouseRotate = vol;  	}  	else if (vol < 0 && mouseRotate > 0) {  		mouseRotate = vol;  	}  	else {  		mouseRotate += vol;  	}  	while (mouseRotate >= 3) {  		mouseRotate -= 3;  		player.NowWeaponIndex--;  	}  	while (mouseRotate <= -3) {  		mouseRotate += 3;  		player.NowWeaponIndex++;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: if (vol != 0) {  	if (vol > 0 && mouseRotate < 0) {  		mouseRotate = vol;  	}  	else if (vol < 0 && mouseRotate > 0) {  		mouseRotate = vol;  	}  	else {  		mouseRotate += vol;  	}  	while (mouseRotate >= 3) {  		mouseRotate -= 3;  		player.NowWeaponIndex--;  	}  	while (mouseRotate <= -3) {  		mouseRotate += 3;  		player.NowWeaponIndex++;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: while (mouseRotate >= 3) {  	mouseRotate -= 3;  	player.NowWeaponIndex--;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: while (mouseRotate >= 3) {  	mouseRotate -= 3;  	player.NowWeaponIndex--;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: mouseRotate -= 3;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: while (mouseRotate <= -3) {  	mouseRotate += 3;  	player.NowWeaponIndex++;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: while (mouseRotate <= -3) {  	mouseRotate += 3;  	player.NowWeaponIndex++;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,PlayerControl,The following statement contains a magic number: mouseRotate += 3;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Shot,The following statement contains a magic number: if (TargettingPlayerID == null) {  	//ロックオンしていないとき  	tmpShotFrom = camera.NowCameraParam.Position;  	int w2 = GameControl.SWidth / 2;  	int h2 = GameControl.SHeight / 2;  	float near = camera.CameraNear * 10;  	float far = camera.CameraFar;  	float z = (range - near) / (far - near);  	//カメラ位置から見た最大射程とターゲットマークの交点へのベクトル  	vec = DX.VNorm (DX.ConvScreenPosToWorldPos_ZLinear (DX.VGet (w2' h2' z)) - tmpShotFrom) * range;  }  else {  	//ロックオンしているとき  	////カメラ位置から見たターゲットへのベクトル  	//tmpShotFrom = camera.NowCameraParam.Position;  	//vec = DX.VNorm( camera.NowCameraParam.Target - tmpShotFrom ) * range;  	//銃からターゲットへのベクトル  	tmpShotFrom = framePos;  	vec = DX.VNorm (camera.NowCameraParam.Target - tmpShotFrom) * range;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Shot,The following statement contains a magic number: if (TargettingPlayerID == null) {  	//ロックオンしていないとき  	tmpShotFrom = camera.NowCameraParam.Position;  	int w2 = GameControl.SWidth / 2;  	int h2 = GameControl.SHeight / 2;  	float near = camera.CameraNear * 10;  	float far = camera.CameraFar;  	float z = (range - near) / (far - near);  	//カメラ位置から見た最大射程とターゲットマークの交点へのベクトル  	vec = DX.VNorm (DX.ConvScreenPosToWorldPos_ZLinear (DX.VGet (w2' h2' z)) - tmpShotFrom) * range;  }  else {  	//ロックオンしているとき  	////カメラ位置から見たターゲットへのベクトル  	//tmpShotFrom = camera.NowCameraParam.Position;  	//vec = DX.VNorm( camera.NowCameraParam.Target - tmpShotFrom ) * range;  	//銃からターゲットへのベクトル  	tmpShotFrom = framePos;  	vec = DX.VNorm (camera.NowCameraParam.Target - tmpShotFrom) * range;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Shot,The following statement contains a magic number: if (TargettingPlayerID == null) {  	//ロックオンしていないとき  	tmpShotFrom = camera.NowCameraParam.Position;  	int w2 = GameControl.SWidth / 2;  	int h2 = GameControl.SHeight / 2;  	float near = camera.CameraNear * 10;  	float far = camera.CameraFar;  	float z = (range - near) / (far - near);  	//カメラ位置から見た最大射程とターゲットマークの交点へのベクトル  	vec = DX.VNorm (DX.ConvScreenPosToWorldPos_ZLinear (DX.VGet (w2' h2' z)) - tmpShotFrom) * range;  }  else {  	//ロックオンしているとき  	////カメラ位置から見たターゲットへのベクトル  	//tmpShotFrom = camera.NowCameraParam.Position;  	//vec = DX.VNorm( camera.NowCameraParam.Target - tmpShotFrom ) * range;  	//銃からターゲットへのベクトル  	tmpShotFrom = framePos;  	vec = DX.VNorm (camera.NowCameraParam.Target - tmpShotFrom) * range;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Shot,The following statement contains a magic number: if (TargettingPlayer != null) {  	size = DX.VSize (player.Velocity) * 1 + 0.8f;  }  else {  	size = DX.VSize (player.Velocity) * 3 + 2f;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Shot,The following statement contains a magic number: size = DX.VSize (player.Velocity) * 3 + 2f;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: if (x < -0.1) {  	camera.KeyRight (dt' x);  }  else if (x > 0.1) {  	camera.KeyLeft (dt' x);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: if (x < -0.1) {  	camera.KeyRight (dt' x);  }  else if (x > 0.1) {  	camera.KeyLeft (dt' x);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: if (x > 0.1) {  	camera.KeyLeft (dt' x);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: if (y < -0.1) {  	camera.KeyDown (dt' y);  }  else if (y > 0.1) {  	camera.KeyUp (dt' y);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: if (y < -0.1) {  	camera.KeyDown (dt' y);  }  else if (y > 0.1) {  	camera.KeyUp (dt' y);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: if (y > 0.1) {  	camera.KeyUp (dt' y);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: mx += GameControl.SWidth / 2;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CameraControl,The following statement contains a magic number: my += GameControl.SHeight / 2;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var id in otherPlayer.Keys.Where (id =>  {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		return false;  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () / 2' item.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r <= LOCKON_MAX_R) {  			foreach (var model in models) {  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  				//if( result.HitFlag == DX.TRUE )  				//{  				//	return false;  				//}  				//else  				{  					DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						return false;  					}  				}  			}  			return true;  		}  	}  	return false;  })) {  	var item = otherPlayer [id].Item2;  	float distance = DX.VSize (item.Location - player.Location);  	if (distance <= LOCKON_MAX_DISTANCE && dist > distance) {  		TargettingPlayerID = id;  		dist = distance;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r <= LOCKON_MAX_R) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	return false;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					return false;  				}  			}  		}  		return true;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (r <= LOCKON_MAX_R) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	return false;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				return false;  			}  		}  	}  	return true;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (r <= LOCKON_MAX_R) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	return false;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				return false;  			}  		}  	}  	return true;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (r <= LOCKON_MAX_R) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	return false;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				return false;  			}  		}  	}  	return true;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: if (r <= LOCKON_MAX_R) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	return false;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				return false;  			}  		}  	}  	return true;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	return false;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			return false;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	return false;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			return false;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	return false;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			return false;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,CheckLockOnTarget,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position' DX.VGet( item.Location.x' item.Location.y + item.GetRealHeight( ) * 2 / 3' item.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	return false;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			return false;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (showMenuFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (endButton != null) {  		endButton.Draw (control);  	}  	if (cancelEndButton != null) {  		cancelEndButton.Draw (control);  	}  	if (configButton != null) {  		configButton.Draw (control);  	}  	if (suicideButton != null) {  		suicideButton.Draw (control);  	}  }  else if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (suicideFlag || sendSuicide) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	if (cancelSuicideButton != null) {  		cancelSuicideButton.Draw (control);  	}  	if (!sendSuicide) {  		double c = suicideCount > 0 ? suicideCount : 0;  		int sec = (int)(c / 1000);  		int ms = (int)(c - sec * 1000) / 10;  		Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  	}  }  else {  	Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!sendSuicide) {  	double c = suicideCount > 0 ? suicideCount : 0;  	int sec = (int)(c / 1000);  	int ms = (int)(c - sec * 1000) / 10;  	Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!sendSuicide) {  	double c = suicideCount > 0 ? suicideCount : 0;  	int sec = (int)(c / 1000);  	int ms = (int)(c - sec * 1000) / 10;  	Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!sendSuicide) {  	double c = suicideCount > 0 ? suicideCount : 0;  	int sec = (int)(c / 1000);  	int ms = (int)(c - sec * 1000) / 10;  	Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!sendSuicide) {  	double c = suicideCount > 0 ? suicideCount : 0;  	int sec = (int)(c / 1000);  	int ms = (int)(c - sec * 1000) / 10;  	Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!sendSuicide) {  	double c = suicideCount > 0 ? suicideCount : 0;  	int sec = (int)(c / 1000);  	int ms = (int)(c - sec * 1000) / 10;  	Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!sendSuicide) {  	double c = suicideCount > 0 ? suicideCount : 0;  	int sec = (int)(c / 1000);  	int ms = (int)(c - sec * 1000) / 10;  	Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (sec + "." + ms.ToString ("D2")' GameControl.SWidth / 2' GameControl.SHeight / 2 - 45' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_35)' FontDefines.FontSize [FontDefines.FONT_SIZE_35]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle ("右シフトでメニュー"' GameControl.SWidth / 2' 40' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!loadFinished) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  else if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (!gameStarted) {  	int n = otherPlayer.Values.Count (item => !item.Item2.WorldLoadFinished);  	if (n > 0) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  		int dot = (int)(drawDotCount / 250) + 1;  		int height = n * 35;  		int y = GameControl.SHeight / 2 - height / 2;  		int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  		Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  		foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  			Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  			int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  			if (width > drawWidth) {  				drawWidth = width;  			}  			y += 35;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: if (n > 0) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	int dot = (int)(drawDotCount / 250) + 1;  	int height = n * 35;  	int y = GameControl.SHeight / 2 - height / 2;  	int drawWidth = Utility.GetDrawStringWidthToHandle ("Now Loading..."' control.GetFont (FontDefines.FONT_SIZE_40));  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  	Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  	foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  		Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  		int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  		if (width > drawWidth) {  			drawWidth = width;  		}  		y += 35;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2' y - 70' (GameControl.SWidth + drawWidth + 80) / 2' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  	Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  	if (width > drawWidth) {  		drawWidth = width;  	}  	y += 35;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: foreach (var item in otherPlayer.Values.Where (p => !p.Item2.WorldLoadFinished)) {  	Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	int width = Utility.GetDrawStringWidthToHandle (item.Item1' control.GetFont (FontDefines.FONT_SIZE_30));  	if (width > drawWidth) {  		drawWidth = width;  	}  	y += 35;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (item.Item1' GameControl.SWidth / 2' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Draw,The following statement contains a magic number: y += 35;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: targetX = GameControl.SWidth / 2;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: targetY = GameControl.SHeight / 2;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var id in otherPlayer.Keys) {  	var item = otherPlayer [id].Item2;  	if (item.Health <= 0)  		continue;  	item.Draw (control' false);  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight ()' item.Location.z));  	int color;  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		float dist = DX.VSize (item.Location - player.Location);  		if (dist > LOCKON_MAX_DISTANCE) {  			if (!inTarget && dist <= range) {  				float r = item.GetRadius ();  				DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  				DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  				if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  					inTarget = true;  				}  				//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  				//if ( result.HitFlag == DX.TRUE )  				//{  				//	inTarget = true;  				//}  			}  			continue;  		}  		if (!item.Exposed) {  			bool hit = false;  			foreach (var model in models) {  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  				else {  					result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  					if (result.HitFlag == DX.TRUE) {  						hit = true;  						break;  					}  				}  			}  			if (hit) {  				continue;  			}  		}  		double distRate;  		if (dist < camera.TraceDistance) {  			distRate = 1;  		}  		else {  			distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  		}  		var name = otherPlayer [id].Item1;  		if (TargettingPlayerID == id) {  			DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  			DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  			DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  			targetX = (int)screenLoc3.x;  			targetY = (int)screenLoc3.y;  			color = control.COLOR_ORANGE;  		}  		else {  			if (TargettingPlayerID == null) {  				double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  				if (r < LOCKON_MAX_R) {  					color = control.COLOR_ORANGE;  				}  				else {  					color = control.COLOR_WHITE;  				}  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  		double healthRate = (double)item.Health / item.MaxHealth;  		if (healthRate > 0.6) {  			color = control.COLOR_GREEN;  		}  		else if (healthRate > 0.2) {  			color = control.COLOR_YELLOW;  		}  		else {  			color = control.COLOR_RED;  		}  		int len = (int)(60 * distRate);  		int len2 = (int)(len * 2 * healthRate);  		DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  		DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  		name = "K:" + item.KillCount + " D:" + item.DeadCount;  		Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	float dist = DX.VSize (item.Location - player.Location);  	if (dist > LOCKON_MAX_DISTANCE) {  		if (!inTarget && dist <= range) {  			float r = item.GetRadius ();  			DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  			DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  			if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  				inTarget = true;  			}  			//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  			//if ( result.HitFlag == DX.TRUE )  			//{  			//	inTarget = true;  			//}  		}  		continue;  	}  	if (!item.Exposed) {  		bool hit = false;  		foreach (var model in models) {  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  			else {  				result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  				if (result.HitFlag == DX.TRUE) {  					hit = true;  					break;  				}  			}  		}  		if (hit) {  			continue;  		}  	}  	double distRate;  	if (dist < camera.TraceDistance) {  		distRate = 1;  	}  	else {  		distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  	}  	var name = otherPlayer [id].Item1;  	if (TargettingPlayerID == id) {  		DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  		DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  		DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  		targetX = (int)screenLoc3.x;  		targetY = (int)screenLoc3.y;  		color = control.COLOR_ORANGE;  	}  	else {  		if (TargettingPlayerID == null) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r < LOCKON_MAX_R) {  				color = control.COLOR_ORANGE;  			}  			else {  				color = control.COLOR_WHITE;  			}  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	if (!inTarget && dist <= range) {  		float r = item.GetRadius ();  		DX.VECTOR pos1 = DX.VGet (item.Location.x' item.Location.y + r' item.Location.z);  		DX.VECTOR pos2 = DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () - r' item.Location.z);  		if (Utility3D.Math3D.HitCheck_Line_Capsule (camera.NowCameraParam.Position' target' pos1' pos2' r) >= 0) {  			inTarget = true;  		}  		//DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line( item.Model.Handle' -1' camera.NowCameraParam.Position' target );  		//if ( result.HitFlag == DX.TRUE )  		//{  		//	inTarget = true;  		//}  	}  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  	double healthRate = (double)item.Health / item.MaxHealth;  	if (healthRate > 0.6) {  		color = control.COLOR_GREEN;  	}  	else if (healthRate > 0.2) {  		color = control.COLOR_YELLOW;  	}  	else {  		color = control.COLOR_RED;  	}  	int len = (int)(60 * distRate);  	int len2 = (int)(len * 2 * healthRate);  	DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  	DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  	name = "K:" + item.KillCount + " D:" + item.DeadCount;  	Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (!item.Exposed) {  	bool hit = false;  	foreach (var model in models) {  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  		else {  			result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  		}  	}  	if (hit) {  		continue;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (!item.Exposed) {  	bool hit = false;  	foreach (var model in models) {  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  		else {  			result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  		}  	}  	if (hit) {  		continue;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (!item.Exposed) {  	bool hit = false;  	foreach (var model in models) {  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  		else {  			result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  		}  	}  	if (hit) {  		continue;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (!item.Exposed) {  	bool hit = false;  	foreach (var model in models) {  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  		else {  			result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  		}  	}  	if (hit) {  		continue;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (!item.Exposed) {  	bool hit = false;  	foreach (var model in models) {  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  		else {  			result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  		}  	}  	if (hit) {  		continue;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (!item.Exposed) {  	bool hit = false;  	foreach (var model in models) {  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  		else {  			result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  			if (result.HitFlag == DX.TRUE) {  				hit = true;  				break;  			}  		}  	}  	if (hit) {  		continue;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var model in models) {  	DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  	else {  		result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var model in models) {  	DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  	else {  		result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var model in models) {  	DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  	else {  		result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var model in models) {  	DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  	else {  		result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var model in models) {  	DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  	else {  		result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: foreach (var model in models) {  	DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' camera.NowCameraParam.Position' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  	else {  		result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  		if (result.HitFlag == DX.TRUE) {  			hit = true;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (result.HitFlag == DX.TRUE) {  	hit = true;  	break;  }  else {  	result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (result.HitFlag == DX.TRUE) {  	hit = true;  	break;  }  else {  	result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (result.HitFlag == DX.TRUE) {  	hit = true;  	break;  }  else {  	result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (result.HitFlag == DX.TRUE) {  	hit = true;  	break;  }  else {  	result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	if (result.HitFlag == DX.TRUE) {  		hit = true;  		break;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (dist < camera.TraceDistance) {  	distRate = 1;  }  else {  	distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: distRate = 1 - (dist - camera.TraceDistance) * 0.5 / (LOCKON_MAX_DISTANCE - camera.TraceDistance);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == id) {  	DX.VECTOR screenLoc2 = DX.ConvWorldPosToScreenPos (DX.VGet (item.Location.x' item.Location.y + item.GetRealHeight () * 2 / 3' item.Location.z));  	DX.VECTOR screenLoc3 = DX.ConvWorldPosToScreenPos (camera.NowCameraParam.Target);  	DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  	DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  	targetX = (int)screenLoc3.x;  	targetY = (int)screenLoc3.y;  	color = control.COLOR_ORANGE;  }  else {  	if (TargettingPlayerID == null) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r < LOCKON_MAX_R) {  			color = control.COLOR_ORANGE;  		}  		else {  			color = control.COLOR_WHITE;  		}  	}  	else {  		color = control.COLOR_WHITE;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x - 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 20' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 20' (int)screenLoc2.x + 20' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x + 20' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 20' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 20' (int)screenLoc2.x - 20' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x - 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 19' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 19' (int)screenLoc2.x + 19' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x + 19' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 19' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 19' (int)screenLoc2.x - 19' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x - 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y + 18' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y + 18' (int)screenLoc2.x + 18' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x + 18' (int)screenLoc2.y' (int)screenLoc2.x' (int)screenLoc2.y - 18' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawLine ((int)screenLoc2.x' (int)screenLoc2.y - 18' (int)screenLoc2.x - 18' (int)screenLoc2.y' control.COLOR_RED);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == null) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r < LOCKON_MAX_R) {  		color = control.COLOR_ORANGE;  	}  	else {  		color = control.COLOR_WHITE;  	}  }  else {  	color = control.COLOR_WHITE;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == null) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r < LOCKON_MAX_R) {  		color = control.COLOR_ORANGE;  	}  	else {  		color = control.COLOR_WHITE;  	}  }  else {  	color = control.COLOR_WHITE;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == null) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r < LOCKON_MAX_R) {  		color = control.COLOR_ORANGE;  	}  	else {  		color = control.COLOR_WHITE;  	}  }  else {  	color = control.COLOR_WHITE;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (TargettingPlayerID == null) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r < LOCKON_MAX_R) {  		color = control.COLOR_ORANGE;  	}  	else {  		color = control.COLOR_WHITE;  	}  }  else {  	color = control.COLOR_WHITE;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 26' color' control.GetFont (FontDefines.FONT_SIZE_25));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (healthRate > 0.6) {  	color = control.COLOR_GREEN;  }  else if (healthRate > 0.2) {  	color = control.COLOR_YELLOW;  }  else {  	color = control.COLOR_RED;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (healthRate > 0.6) {  	color = control.COLOR_GREEN;  }  else if (healthRate > 0.2) {  	color = control.COLOR_YELLOW;  }  else {  	color = control.COLOR_RED;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: if (healthRate > 0.2) {  	color = control.COLOR_YELLOW;  }  else {  	color = control.COLOR_RED;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawBox ((int)screenLoc.x - len' (int)screenLoc.y' (int)screenLoc.x + len' (int)screenLoc.y + 10' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: DX.DrawBox ((int)screenLoc.x - len + 2' (int)screenLoc.y + 2' (int)screenLoc.x - len + len2 - 2' (int)screenLoc.y + 10 - 2' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawOtherPlayer,The following statement contains a magic number: Utility.DrawCenterExtendStringToHandle (name' distRate' distRate' (int)screenLoc.x' (int)screenLoc.y - 52' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_25));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 400' GameControl.SHeight - 60' GameControl.SWidth' GameControl.SHeight' control.COLOR_WHITE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 400' GameControl.SHeight - 60' GameControl.SWidth' GameControl.SHeight' control.COLOR_WHITE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 10' GameControl.SHeight - 10' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 10' GameControl.SHeight - 10' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 10' GameControl.SHeight - 10' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 10' GameControl.SHeight - 10' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (rate > 0.6)  	color = control.COLOR_GREEN;  else if (rate > 0.2)  	color = control.COLOR_YELLOW;  else  	color = control.COLOR_RED;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (rate > 0.6)  	color = control.COLOR_GREEN;  else if (rate > 0.2)  	color = control.COLOR_YELLOW;  else  	color = control.COLOR_RED;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (rate > 0.2)  	color = control.COLOR_YELLOW;  else  	color = control.COLOR_RED;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 380 + len' GameControl.SHeight - 10' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 380 + len' GameControl.SHeight - 10' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 380 + len' GameControl.SHeight - 10' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - 380' GameControl.SHeight - 50' GameControl.SWidth - 380 + len' GameControl.SHeight - 10' color' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - 340' GameControl.SHeight - 95' player.Health + ""' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - 340' GameControl.SHeight - 95' player.Health + ""' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - 200' GameControl.SHeight - 85' "/"' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - 200' GameControl.SHeight - 85' "/"' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - 170' GameControl.SHeight - 85' player.MaxHealth + ""' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - 170' GameControl.SHeight - 85' player.MaxHealth + ""' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - len - 15' GameControl.SHeight - 120' str' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawStringToHandle (GameControl.SWidth - len - 15' GameControl.SHeight - 120' str' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: if (inTarget) {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  }  else {  	DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  	DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  	DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  	DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  	DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawCircle (targetX' targetY' 14' control.COLOR_RED' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawCircle (targetX' targetY' 15' control.COLOR_RED' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_ORANGE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawCircle (targetX' targetY' 14' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawCircle (targetX' targetY' 15' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 14' targetY' targetX + 14' targetY' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 14' targetX' targetY + 14' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX - 15' targetY' targetX + 15' targetY' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DX.DrawLine (targetX' targetY - 15' targetX' targetY + 15' control.COLOR_WHITE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawPlayerInfo,The following statement contains a magic number: DrawWeaponData (control' targetX' targetY' player.Weapon [i]' GameControl.SHeight - 254 - 240 + 120 * i' player.NowWeaponIndex == i' player.ChangingWeapon' player.ChangingRate);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  	DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 60);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 30);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 45' y - 10' GameControl.SWidth - 3' y + 100' control.COLOR_OLIVE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: Utility.DrawStringToHandleArrangeRight (weapon.NowBulletNumber + "+" + weapon.TotalBulletNumber' GameControl.SWidth - 20' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 - 2' y + 34' GameControl.SWidth - 10 + 2' y + 44' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 - 2' y + 34' GameControl.SWidth - 10 + 2' y + 44' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 - 2' y + 34' GameControl.SWidth - 10 + 2' y + 44' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 - 2' y + 34' GameControl.SWidth - 10 + 2' y + 44' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 - 2' y + 34' GameControl.SWidth - 10 + 2' y + 44' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 - 2' y + 34' GameControl.SWidth - 10 + 2' y + 44' control.COLOR_BLACK' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_ORANGE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_ORANGE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_ORANGE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_ORANGE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: Utility.DrawStringToHandleArrangeRight (weapon.Name' GameControl.SWidth - 20' y + 50' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: Utility.DrawStringToHandleArrangeRight (weapon.Name' GameControl.SWidth - 20' y + 50' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (selected) {  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  	if (changing) {  		rate = 1 - changingRate;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  	else {  		if (weapon.IsReloading) {  			rate = 1 - weapon.ReloadingRate / 100;  			len = (int)(maxLen * rate);  			DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  			contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  		}  	}  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' false);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (changing) {  	rate = 1 - changingRate;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  else {  	if (weapon.IsReloading) {  		rate = 1 - weapon.ReloadingRate / 100;  		len = (int)(maxLen * rate);  		DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  		contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  	contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: rate = 1 - weapon.ReloadingRate / 100;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: contents.Contents3D.Weapons.DrawBulletRate (1 - rate' targetX' targetY' 100' true);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: if (weapon.IsReloading) {  	rate = 1 - weapon.ReloadingRate / 100;  	len = (int)(maxLen * rate);  	DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: rate = 1 - weapon.ReloadingRate / 100;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawWeaponData,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth - maxLen - 10 + len' y + 36' GameControl.SWidth - 10' y + 42' control.COLOR_RED' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: DX.SetCameraPositionAndTargetAndUpVec (DX.VGet (player.Location.x' 400' player.Location.z)' DX.VGet (player.Location.x' 0' player.Location.z)' DX.VGet (1' 0' 0));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: DX.SetDrawArea (5' 5' miniMapBuffer.GraphicWidth - 5' miniMapBuffer.GraphicHeight - 5);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: DX.SetDrawArea (5' 5' miniMapBuffer.GraphicWidth - 5' miniMapBuffer.GraphicHeight - 5);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: DX.SetDrawArea (5' 5' miniMapBuffer.GraphicWidth - 5' miniMapBuffer.GraphicHeight - 5);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: DX.SetDrawArea (5' 5' miniMapBuffer.GraphicWidth - 5' miniMapBuffer.GraphicHeight - 5);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: theta += Math.PI * 2 / 3;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: theta += Math.PI * 2 / 3;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: theta += Math.PI * 2 / 3;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: theta += Math.PI * 2 / 3;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 85);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 235);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: miniMapBuffer.DrawGraph (GameControl.SWidth - drawWidth - 5' 5);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawMiniMap,The following statement contains a magic number: miniMapBuffer.DrawGraph (GameControl.SWidth - drawWidth - 5' 5);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if (lockedOn) {  	lockedOn = false;  	lockedOnCount = 2000;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: lockedOnCount = 2000;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if (lockedOnCount > 0) {  	if ((int)(lockedOnCount / 200) % 2 == 0) {  		DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if (lockedOnCount > 0) {  	if ((int)(lockedOnCount / 200) % 2 == 0) {  		DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if (lockedOnCount > 0) {  	if ((int)(lockedOnCount / 200) % 2 == 0) {  		DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if (lockedOnCount > 0) {  	if ((int)(lockedOnCount / 200) % 2 == 0) {  		DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if (lockedOnCount > 0) {  	if ((int)(lockedOnCount / 200) % 2 == 0) {  		DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if ((int)(lockedOnCount / 200) % 2 == 0) {  	DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if ((int)(lockedOnCount / 200) % 2 == 0) {  	DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if ((int)(lockedOnCount / 200) % 2 == 0) {  	DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if ((int)(lockedOnCount / 200) % 2 == 0) {  	DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: if ((int)(lockedOnCount / 200) % 2 == 0) {  	DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawLockedOn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("ロックオン注意"' GameControl.SWidth / 2' GameControl.SHeight * 4 / 5' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: if (gameStartCountFlag) {  	DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: if (gameStartCountFlag) {  	DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: if (gameStartCountFlag) {  	DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: if (gameStartCountFlag) {  	DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: if (gameStartCountFlag) {  	DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawStartCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (gameStartCount.ToString ()' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_YELLOW' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStarted && !gameEnd) {  	int min = gameCount / 60;  	int sec = gameCount % 60;  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  	DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	if (gameStartShowMessageCount > 0) {  		DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DX.DrawBox (GameControl.SWidth / 2 - 80' 2' GameControl.SWidth / 2 + 80' 38' control.COLOR_BLUE' DX.TRUE);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: Utility.DrawCenterStringToHandle (min.ToString ("D2") + ":" + sec.ToString ("D2")' GameControl.SWidth / 2' 5' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStartShowMessageCount > 0) {  	DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStartShowMessageCount > 0) {  	DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStartShowMessageCount > 0) {  	DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStartShowMessageCount > 0) {  	DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: if (gameStartShowMessageCount > 0) {  	DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawGameCount,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Start"' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_60)' 3' -3' 30);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (gameStarted && !gameEnd && player.Health <= 0 && waitRespawn) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (gameStarted && !gameEnd && player.Health <= 0 && waitRespawn) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (gameStarted && !gameEnd && player.Health <= 0 && waitRespawn) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (gameStarted && !gameEnd && player.Health <= 0 && waitRespawn) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (gameStarted && !gameEnd && player.Health <= 0 && waitRespawn) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (gameStarted && !gameEnd && player.Health <= 0 && waitRespawn) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (gameStarted && !gameEnd && player.Health <= 0 && waitRespawn) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: if (!showMenuFlag && !suicideFlag) {  	control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: control.FadeBackBufferToBlack (120' control.COLOR_BLACK);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawRespawn,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx (respawnCount + ""' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (resultRecv) {  	if (!showMenuFlag && !suicideFlag) {  		control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  	}  	DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  	DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: if (!showMenuFlag && !suicideFlag) {  	control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: control.FadeBackBufferToBlack (50' control.COLOR_BLACK);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("順位  ：" + rank' GameControl.SWidth / 2' GameControl.SHeight / 2 - 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("スコア：" + score' GameControl.SWidth / 2' GameControl.SHeight / 2 + 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_70)' 3' -3' 35);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,DrawResult,The following statement contains a magic number: DrawHelper.DrawStringToHandleEx (GameControl.SWidth * 3 / 4' GameControl.SHeight * 2 / 3' endRoomCount + ""' control.COLOR_GRAY1' control.COLOR_OLIVE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (messages.ContainsKey (id)) {  	messages [id].SetMessage (command [2]);  }  else {  	if (otherPlayer.ContainsKey (id)) {  		messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  		messages [id].SetMessage (command [2]);  	}  	else if (id == client.Params.User.UserID) {  		messages.Add (id' new SpeakMessage (player));  		messages [id].SetMessage (command [2]);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (messages.ContainsKey (id)) {  	messages [id].SetMessage (command [2]);  }  else {  	if (otherPlayer.ContainsKey (id)) {  		messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  		messages [id].SetMessage (command [2]);  	}  	else if (id == client.Params.User.UserID) {  		messages.Add (id' new SpeakMessage (player));  		messages [id].SetMessage (command [2]);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (messages.ContainsKey (id)) {  	messages [id].SetMessage (command [2]);  }  else {  	if (otherPlayer.ContainsKey (id)) {  		messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  		messages [id].SetMessage (command [2]);  	}  	else if (id == client.Params.User.UserID) {  		messages.Add (id' new SpeakMessage (player));  		messages [id].SetMessage (command [2]);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: messages [id].SetMessage (command [2]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (id)) {  	messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  	messages [id].SetMessage (command [2]);  }  else if (id == client.Params.User.UserID) {  	messages.Add (id' new SpeakMessage (player));  	messages [id].SetMessage (command [2]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (id)) {  	messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  	messages [id].SetMessage (command [2]);  }  else if (id == client.Params.User.UserID) {  	messages.Add (id' new SpeakMessage (player));  	messages [id].SetMessage (command [2]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: messages [id].SetMessage (command [2]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (id == client.Params.User.UserID) {  	messages.Add (id' new SpeakMessage (player));  	messages [id].SetMessage (command [2]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: messages [id].SetMessage (command [2]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: gameStartShowMessageCount = 2000;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (!gameStarted) {  	gameStartShowMessageCount = 2000;  	gameStarted = true;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: gameStartShowMessageCount = 2000;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	resultRecv = true;  	rank = int.Parse (command [2]);  	score = int.Parse (command [3]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	resultRecv = true;  	rank = int.Parse (command [2]);  	score = int.Parse (command [3]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: rank = int.Parse (command [2]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: score = int.Parse (command [3]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  	otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  	otherPlayer [id].Item2.Health = int.Parse (command [10]);  	otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  	otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: otherPlayer [id].Item2.Health = int.Parse (command [10]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (character != null) {  	int health = int.Parse (command [2]);  	character.Health = health;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (character != null) {  	int health = int.Parse (command [2]);  	character.Health = health;  	if (client.Params.User.UserID == command [1]) {  		float vx = float.Parse (command [5]);  		float vz = float.Parse (command [6]);  		damageDirection.Add (command [4]' vx' vz);  		suicideFlag = false;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (character != null) {  	int health = int.Parse (command [2]);  	character.Health = health;  	if (client.Params.User.UserID == command [1]) {  		float vx = float.Parse (command [5]);  		float vz = float.Parse (command [6]);  		damageDirection.Add (command [4]' vx' vz);  		suicideFlag = false;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (character != null) {  	int health = int.Parse (command [2]);  	character.Health = health;  	if (client.Params.User.UserID == command [1]) {  		float vx = float.Parse (command [5]);  		float vz = float.Parse (command [6]);  		damageDirection.Add (command [4]' vx' vz);  		suicideFlag = false;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (character != null) {  	int health = int.Parse (command [2]);  	character.Health = health;  	if (client.Params.User.UserID == command [1]) {  		float vx = float.Parse (command [5]);  		float vz = float.Parse (command [6]);  		damageDirection.Add (command [4]' vx' vz);  		suicideFlag = false;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	float vx = float.Parse (command [5]);  	float vz = float.Parse (command [6]);  	damageDirection.Add (command [4]' vx' vz);  	suicideFlag = false;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	float vx = float.Parse (command [5]);  	float vz = float.Parse (command [6]);  	damageDirection.Add (command [4]' vx' vz);  	suicideFlag = false;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	float vx = float.Parse (command [5]);  	float vz = float.Parse (command [6]);  	damageDirection.Add (command [4]' vx' vz);  	suicideFlag = false;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: damageDirection.Add (command [4]' vx' vz);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (character != null) {  	character.DeadCount = int.Parse (command [3]);  	character.Health = 0;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: character.DeadCount = int.Parse (command [3]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	respawnCount = int.Parse (command [2]);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: respawnCount = int.Parse (command [2]);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	player.Initialize (true' 300' 300);  	SendInitPlayerState (client);  	waitRespawn = false;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [1]) {  	player.Initialize (true' 300' 300);  	SendInitPlayerState (client);  	waitRespawn = false;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: player.Initialize (true' 300' 300);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: player.Initialize (true' 300' 300);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (command [2])) {  	character = otherPlayer [command [2]].Item2;  	command [2] = otherPlayer [command [2]].Item1;  }  else if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (command [2])) {  	character = otherPlayer [command [2]].Item2;  	command [2] = otherPlayer [command [2]].Item1;  }  else if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (command [2])) {  	character = otherPlayer [command [2]].Item2;  	command [2] = otherPlayer [command [2]].Item1;  }  else if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (command [2])) {  	character = otherPlayer [command [2]].Item2;  	command [2] = otherPlayer [command [2]].Item1;  }  else if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (command [2])) {  	character = otherPlayer [command [2]].Item2;  	command [2] = otherPlayer [command [2]].Item1;  }  else if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (otherPlayer.ContainsKey (command [2])) {  	character = otherPlayer [command [2]].Item2;  	command [2] = otherPlayer [command [2]].Item1;  }  else if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: character = otherPlayer [command [2]].Item2;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: command [2] = otherPlayer [command [2]].Item1;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: command [2] = otherPlayer [command [2]].Item1;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.UserID == command [2]) {  	character = player;  	command [2] = client.Params.User.UserName;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: command [2] = client.Params.User.UserName;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following statement contains a magic number: killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following statement contains a magic number: MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,AddPlayer,The following statement contains a magic number: if (client.Params.User.UserID != id) {  	if (!otherPlayer.ContainsKey (id)) {  		otherPlayer.Add (id' new Tuple<string' Character> (name' new Character (contents.Contents3D.Weapons' contents.Contents3D.Characters' models' 0' 0' model' DX.VGet (0' 400' 0)' -1' ATTACH_WEAPON_FRAME_NAME' new int[] {  			w1'  			w2'  			w3  		})));  		otherPlayer [id].Item2.WorldLoadFinished = loadFinished;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,AddPlayer,The following statement contains a magic number: if (!otherPlayer.ContainsKey (id)) {  	otherPlayer.Add (id' new Tuple<string' Character> (name' new Character (contents.Contents3D.Weapons' contents.Contents3D.Characters' models' 0' 0' model' DX.VGet (0' 400' 0)' -1' ATTACH_WEAPON_FRAME_NAME' new int[] {  		w1'  		w2'  		w3  	})));  	otherPlayer [id].Item2.WorldLoadFinished = loadFinished;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,AddPlayer,The following statement contains a magic number: otherPlayer.Add (id' new Tuple<string' Character> (name' new Character (contents.Contents3D.Weapons' contents.Contents3D.Characters' models' 0' 0' model' DX.VGet (0' 400' 0)' -1' ATTACH_WEAPON_FRAME_NAME' new int[] {  	w1'  	w2'  	w3  })));  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (showMenuFlag) {  	if (!setMenuButtonFlag) {  		setMenuButtonFlag = true;  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  		str = "終了する";  		endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			ExitFlag = true;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "コンフィグ";  		configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			control.AddScreen (new TPSConfigScreen ());  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		str = "緊急離脱";  		suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			showMenuFlag = false;  			suicideFlag = true;  			suicideCount = SUICIDE_COUNT;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  		control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  			DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  		});  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!setMenuButtonFlag) {  	setMenuButtonFlag = true;  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	str = "終了する";  	endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		ExitFlag = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "コンフィグ";  	configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	str = "緊急離脱";  	suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		showMenuFlag = false;  		suicideFlag = true;  		suicideCount = SUICIDE_COUNT;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  		DrawHelper.DrawMouseFunc (control' mouseX' mouseY' LogControl.LOG_FONT_SIZE);  	});  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelEndButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 + 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	ExitFlag = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	ExitFlag = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	ExitFlag = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	ExitFlag = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: endButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	ExitFlag = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 54' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	suicideFlag = true;  	suicideCount = SUICIDE_COUNT;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	suicideFlag = true;  	suicideCount = SUICIDE_COUNT;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	suicideFlag = true;  	suicideCount = SUICIDE_COUNT;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	suicideFlag = true;  	suicideCount = SUICIDE_COUNT;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	suicideFlag = true;  	suicideCount = SUICIDE_COUNT;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: suicideButton = new MyButton (str' GameControl.SWidth * 3 / 4' GameControl.SHeight * 3 / 4 - 108' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	showMenuFlag = false;  	suicideFlag = true;  	suicideCount = SUICIDE_COUNT;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!loadFinished || !gameStarted) {  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!loadFinished || !gameStarted) {  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: while (drawDotCount >= 1000) {  	drawDotCount -= 1000;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: while (drawDotCount >= 1000) {  	drawDotCount -= 1000;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: drawDotCount -= 1000;  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!loadFinished) {  	loadFinished = true;  	foreach (var item in models) {  		if (item.LoadAsyncState == Utility.LoadAsyncState.Loading) {  			loadFinished = false;  			break;  		}  	}  	camera.Update (control.MilliSecond' null);  }  else {  	if (!sentLoadFinished && readyFlag) {  		sentLoadFinished = true;  		client.AddGameCommand ("loadFinished");  	}  	camera.Update (control.MilliSecond' models);  	if (debugMove != null) {  		if (otherScreenHasFocus) {  			control.MouseUnclickRight ();  			control.MouseUnclickLeft ();  			debugMove.Update (control' camera);  			PlayerControl (control' true);  		}  		else {  			debugMove.Update (control' camera);  			if (showMenuFlag || suicideFlag) {  				PlayerControl (control' true);  			}  		}  	}  	player.Update (control);  	if (player.Location.y < -300) {  		player.InitLocation (true' 300' 300);  	}  	SendPlayerState (control' client);  	player.ReadyGun = shooting;  	if (shooting && (player.State & CharacterState.FLOW_FILTER) == 0) {  		player.ShotVec = shotTargetVec;  	}  	foreach (var item in models) {  		item.Update (control.MilliSecondf);  	}  	foreach (var item in otherPlayer.Values) {  		item.Item2.Update (control);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!loadFinished) {  	loadFinished = true;  	foreach (var item in models) {  		if (item.LoadAsyncState == Utility.LoadAsyncState.Loading) {  			loadFinished = false;  			break;  		}  	}  	camera.Update (control.MilliSecond' null);  }  else {  	if (!sentLoadFinished && readyFlag) {  		sentLoadFinished = true;  		client.AddGameCommand ("loadFinished");  	}  	camera.Update (control.MilliSecond' models);  	if (debugMove != null) {  		if (otherScreenHasFocus) {  			control.MouseUnclickRight ();  			control.MouseUnclickLeft ();  			debugMove.Update (control' camera);  			PlayerControl (control' true);  		}  		else {  			debugMove.Update (control' camera);  			if (showMenuFlag || suicideFlag) {  				PlayerControl (control' true);  			}  		}  	}  	player.Update (control);  	if (player.Location.y < -300) {  		player.InitLocation (true' 300' 300);  	}  	SendPlayerState (control' client);  	player.ReadyGun = shooting;  	if (shooting && (player.State & CharacterState.FLOW_FILTER) == 0) {  		player.ShotVec = shotTargetVec;  	}  	foreach (var item in models) {  		item.Update (control.MilliSecondf);  	}  	foreach (var item in otherPlayer.Values) {  		item.Item2.Update (control);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (!loadFinished) {  	loadFinished = true;  	foreach (var item in models) {  		if (item.LoadAsyncState == Utility.LoadAsyncState.Loading) {  			loadFinished = false;  			break;  		}  	}  	camera.Update (control.MilliSecond' null);  }  else {  	if (!sentLoadFinished && readyFlag) {  		sentLoadFinished = true;  		client.AddGameCommand ("loadFinished");  	}  	camera.Update (control.MilliSecond' models);  	if (debugMove != null) {  		if (otherScreenHasFocus) {  			control.MouseUnclickRight ();  			control.MouseUnclickLeft ();  			debugMove.Update (control' camera);  			PlayerControl (control' true);  		}  		else {  			debugMove.Update (control' camera);  			if (showMenuFlag || suicideFlag) {  				PlayerControl (control' true);  			}  		}  	}  	player.Update (control);  	if (player.Location.y < -300) {  		player.InitLocation (true' 300' 300);  	}  	SendPlayerState (control' client);  	player.ReadyGun = shooting;  	if (shooting && (player.State & CharacterState.FLOW_FILTER) == 0) {  		player.ShotVec = shotTargetVec;  	}  	foreach (var item in models) {  		item.Update (control.MilliSecondf);  	}  	foreach (var item in otherPlayer.Values) {  		item.Item2.Update (control);  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (player.Location.y < -300) {  	player.InitLocation (true' 300' 300);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (player.Location.y < -300) {  	player.InitLocation (true' 300' 300);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (player.Location.y < -300) {  	player.InitLocation (true' 300' 300);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: player.InitLocation (true' 300' 300);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: player.InitLocation (true' 300' 300);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (suicideFlag) {  	if (cancelSuicideButton == null) {  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			int mx = System.Windows.Forms.Cursor.Position.X;  			int my = System.Windows.Forms.Cursor.Position.Y;  			prevX = mx;  			prevY = my;  			suicideFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  	}  	if (suicideCount > 0 && player.Health > 0) {  		suicideCount -= control.MilliSecond;  	}  	else {  		suicideFlag = false;  		sendSuicide = true;  		showMenuFlag = false;  		if (player.Health > 0) {  			client.AddGameCommand ("suicide");  		}  	}  }  else if (cancelSuicideButton != null) {  	cancelSuicideButton = null;  	control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  	int mx = System.Windows.Forms.Cursor.Position.X;  	int my = System.Windows.Forms.Cursor.Position.Y;  	prevX = mx;  	prevY = my;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (suicideFlag) {  	if (cancelSuicideButton == null) {  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			int mx = System.Windows.Forms.Cursor.Position.X;  			int my = System.Windows.Forms.Cursor.Position.Y;  			prevX = mx;  			prevY = my;  			suicideFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  	}  	if (suicideCount > 0 && player.Health > 0) {  		suicideCount -= control.MilliSecond;  	}  	else {  		suicideFlag = false;  		sendSuicide = true;  		showMenuFlag = false;  		if (player.Health > 0) {  			client.AddGameCommand ("suicide");  		}  	}  }  else if (cancelSuicideButton != null) {  	cancelSuicideButton = null;  	control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  	int mx = System.Windows.Forms.Cursor.Position.X;  	int my = System.Windows.Forms.Cursor.Position.Y;  	prevX = mx;  	prevY = my;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (suicideFlag) {  	if (cancelSuicideButton == null) {  		string str = "キャンセル";  		int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  		cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			int mx = System.Windows.Forms.Cursor.Position.X;  			int my = System.Windows.Forms.Cursor.Position.Y;  			prevX = mx;  			prevY = my;  			suicideFlag = false;  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  		}' null);  	}  	if (suicideCount > 0 && player.Health > 0) {  		suicideCount -= control.MilliSecond;  	}  	else {  		suicideFlag = false;  		sendSuicide = true;  		showMenuFlag = false;  		if (player.Health > 0) {  			client.AddGameCommand ("suicide");  		}  	}  }  else if (cancelSuicideButton != null) {  	cancelSuicideButton = null;  	control.SetMouseFlag (MouseControl.DrawMouseFlag.Hide);  	int mx = System.Windows.Forms.Cursor.Position.X;  	int my = System.Windows.Forms.Cursor.Position.Y;  	prevX = mx;  	prevY = my;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (cancelSuicideButton == null) {  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		int mx = System.Windows.Forms.Cursor.Position.X;  		int my = System.Windows.Forms.Cursor.Position.Y;  		prevX = mx;  		prevY = my;  		suicideFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (cancelSuicideButton == null) {  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		int mx = System.Windows.Forms.Cursor.Position.X;  		int my = System.Windows.Forms.Cursor.Position.Y;  		prevX = mx;  		prevY = my;  		suicideFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (cancelSuicideButton == null) {  	string str = "キャンセル";  	int len = Utility.GetDrawStringWidthToHandle (str' control.GetFont (FontDefines.FONT_SIZE_35));  	cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		int mx = System.Windows.Forms.Cursor.Position.X;  		int my = System.Windows.Forms.Cursor.Position.Y;  		prevX = mx;  		prevY = my;  		suicideFlag = false;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	int mx = System.Windows.Forms.Cursor.Position.X;  	int my = System.Windows.Forms.Cursor.Position.Y;  	prevX = mx;  	prevY = my;  	suicideFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	int mx = System.Windows.Forms.Cursor.Position.X;  	int my = System.Windows.Forms.Cursor.Position.Y;  	prevX = mx;  	prevY = my;  	suicideFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: cancelSuicideButton = new MyButton (str' GameControl.SWidth / 2' GameControl.SHeight / 2' len + 150' FontDefines.FONT_SIZE_35' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	int mx = System.Windows.Forms.Cursor.Position.X;  	int my = System.Windows.Forms.Cursor.Position.Y;  	prevX = mx;  	prevY = my;  	suicideFlag = false;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	if (TargettingPlayer.Health <= 0) {  		TargettingPlayerID = null;  	}  	else {  		DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  		if (screenLoc.z > 0 && screenLoc.z < 1) {  			double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  			if (r > LOCKON_MAX_R) {  				TargettingPlayerID = null;  			}  			else {  				float distance = DX.VSize (TargettingPlayer.Location - player.Location);  				if (distance > LOCKON_MAX_DISTANCE) {  					TargettingPlayerID = null;  				}  			}  		}  		else {  			TargettingPlayerID = null;  		}  	}  	if (TargettingPlayerID != null) {  		foreach (var model in models) {  			//DX.MV1_COLL_RESULT_POLY result =  			//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  			//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  			//if( result.HitFlag == DX.TRUE )  			//{  			//	TargettingPlayerID = null;  			//	break;  			//}  			//else  			{  				DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  				if (result.HitFlag == DX.TRUE) {  					TargettingPlayerID = null;  					break;  				}  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayer.Health <= 0) {  	TargettingPlayerID = null;  }  else {  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r > LOCKON_MAX_R) {  			TargettingPlayerID = null;  		}  		else {  			float distance = DX.VSize (TargettingPlayer.Location - player.Location);  			if (distance > LOCKON_MAX_DISTANCE) {  				TargettingPlayerID = null;  			}  		}  	}  	else {  		TargettingPlayerID = null;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayer.Health <= 0) {  	TargettingPlayerID = null;  }  else {  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r > LOCKON_MAX_R) {  			TargettingPlayerID = null;  		}  		else {  			float distance = DX.VSize (TargettingPlayer.Location - player.Location);  			if (distance > LOCKON_MAX_DISTANCE) {  				TargettingPlayerID = null;  			}  		}  	}  	else {  		TargettingPlayerID = null;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayer.Health <= 0) {  	TargettingPlayerID = null;  }  else {  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r > LOCKON_MAX_R) {  			TargettingPlayerID = null;  		}  		else {  			float distance = DX.VSize (TargettingPlayer.Location - player.Location);  			if (distance > LOCKON_MAX_DISTANCE) {  				TargettingPlayerID = null;  			}  		}  	}  	else {  		TargettingPlayerID = null;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayer.Health <= 0) {  	TargettingPlayerID = null;  }  else {  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r > LOCKON_MAX_R) {  			TargettingPlayerID = null;  		}  		else {  			float distance = DX.VSize (TargettingPlayer.Location - player.Location);  			if (distance > LOCKON_MAX_DISTANCE) {  				TargettingPlayerID = null;  			}  		}  	}  	else {  		TargettingPlayerID = null;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayer.Health <= 0) {  	TargettingPlayerID = null;  }  else {  	DX.VECTOR screenLoc = DX.ConvWorldPosToScreenPos (DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () / 2' TargettingPlayer.Location.z));  	if (screenLoc.z > 0 && screenLoc.z < 1) {  		double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  		if (r > LOCKON_MAX_R) {  			TargettingPlayerID = null;  		}  		else {  			float distance = DX.VSize (TargettingPlayer.Location - player.Location);  			if (distance > LOCKON_MAX_DISTANCE) {  				TargettingPlayerID = null;  			}  		}  	}  	else {  		TargettingPlayerID = null;  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r > LOCKON_MAX_R) {  		TargettingPlayerID = null;  	}  	else {  		float distance = DX.VSize (TargettingPlayer.Location - player.Location);  		if (distance > LOCKON_MAX_DISTANCE) {  			TargettingPlayerID = null;  		}  	}  }  else {  	TargettingPlayerID = null;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r > LOCKON_MAX_R) {  		TargettingPlayerID = null;  	}  	else {  		float distance = DX.VSize (TargettingPlayer.Location - player.Location);  		if (distance > LOCKON_MAX_DISTANCE) {  			TargettingPlayerID = null;  		}  	}  }  else {  	TargettingPlayerID = null;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r > LOCKON_MAX_R) {  		TargettingPlayerID = null;  	}  	else {  		float distance = DX.VSize (TargettingPlayer.Location - player.Location);  		if (distance > LOCKON_MAX_DISTANCE) {  			TargettingPlayerID = null;  		}  	}  }  else {  	TargettingPlayerID = null;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (screenLoc.z > 0 && screenLoc.z < 1) {  	double r = Math.Sqrt ((GameControl.SWidth / 2 - screenLoc.x) * (GameControl.SWidth / 2 - screenLoc.x) + (GameControl.SHeight / 2 - screenLoc.y) * (GameControl.SHeight / 2 - screenLoc.y));  	if (r > LOCKON_MAX_R) {  		TargettingPlayerID = null;  	}  	else {  		float distance = DX.VSize (TargettingPlayer.Location - player.Location);  		if (distance > LOCKON_MAX_DISTANCE) {  			TargettingPlayerID = null;  		}  	}  }  else {  	TargettingPlayerID = null;  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result =  		//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  		//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	TargettingPlayerID = null;  		//	break;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  			if (result.HitFlag == DX.TRUE) {  				TargettingPlayerID = null;  				break;  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result =  		//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  		//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	TargettingPlayerID = null;  		//	break;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  			if (result.HitFlag == DX.TRUE) {  				TargettingPlayerID = null;  				break;  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result =  		//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  		//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	TargettingPlayerID = null;  		//	break;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  			if (result.HitFlag == DX.TRUE) {  				TargettingPlayerID = null;  				break;  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: if (TargettingPlayerID != null) {  	foreach (var model in models) {  		//DX.MV1_COLL_RESULT_POLY result =  		//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  		//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  		//if( result.HitFlag == DX.TRUE )  		//{  		//	TargettingPlayerID = null;  		//	break;  		//}  		//else  		{  			DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  			if (result.HitFlag == DX.TRUE) {  				TargettingPlayerID = null;  				break;  			}  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result =  	//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  	//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	TargettingPlayerID = null;  	//	break;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  		if (result.HitFlag == DX.TRUE) {  			TargettingPlayerID = null;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result =  	//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  	//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	TargettingPlayerID = null;  	//	break;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  		if (result.HitFlag == DX.TRUE) {  			TargettingPlayerID = null;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result =  	//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  	//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	TargettingPlayerID = null;  	//	break;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  		if (result.HitFlag == DX.TRUE) {  			TargettingPlayerID = null;  			break;  		}  	}  }  
Magic Number,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,Update,The following statement contains a magic number: foreach (var model in models) {  	//DX.MV1_COLL_RESULT_POLY result =  	//	DX.MV1CollCheck_Line( model.Handle' -1' camera.NowCameraParam.Position'  	//	DX.VGet( TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight( ) * 2 / 3' TargettingPlayer.Location.z ) );  	//if( result.HitFlag == DX.TRUE )  	//{  	//	TargettingPlayerID = null;  	//	break;  	//}  	//else  	{  		DX.MV1_COLL_RESULT_POLY result = DX.MV1CollCheck_Line (model.Handle' -1' DX.VGet (player.Location.x' player.Location.y + player.GetRealHeight () * 2 / 3' player.Location.z)' DX.VGet (TargettingPlayer.Location.x' TargettingPlayer.Location.y + TargettingPlayer.GetRealHeight () * 2 / 3' TargettingPlayer.Location.z));  		if (result.HitFlag == DX.TRUE) {  			TargettingPlayerID = null;  			break;  		}  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,InitScreen,The following statement contains a magic number: SlideCenterX = -GameControl.SWidth * 4 / 17;  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,InitScreen,The following statement contains a magic number: SlideCenterX = -GameControl.SWidth * 4 / 17;  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,LoadContent,The following statement contains a magic number: switch (index) {  case 0:  	back = new Utility.GraphicHandle (DrawHelper.LoadRandomGraph ()' false);  	buffer = new Utility.GraphicHandle (256' 256);  	break;  default:  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,LoadContent,The following statement contains a magic number: switch (index) {  case 0:  	back = new Utility.GraphicHandle (DrawHelper.LoadRandomGraph ()' false);  	buffer = new Utility.GraphicHandle (256' 256);  	break;  default:  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,LoadContent,The following statement contains a magic number: buffer = new Utility.GraphicHandle (256' 256);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,LoadContent,The following statement contains a magic number: buffer = new Utility.GraphicHandle (256' 256);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (weapon1 != null) {  	DrawWeapon (control' weapon1' GameControl.SHeight / 2 - 90' rotateWeapon1);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (weapon1 != null) {  	DrawWeapon (control' weapon1' GameControl.SHeight / 2 - 90' rotateWeapon1);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawWeapon (control' weapon1' GameControl.SHeight / 2 - 90' rotateWeapon1);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawWeapon (control' weapon1' GameControl.SHeight / 2 - 90' rotateWeapon1);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (weapon2 != null) {  	DrawWeapon (control' weapon2' GameControl.SHeight / 2 + 10' rotateWeapon2);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (weapon2 != null) {  	DrawWeapon (control' weapon2' GameControl.SHeight / 2 + 10' rotateWeapon2);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawWeapon (control' weapon2' GameControl.SHeight / 2 + 10' rotateWeapon2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawWeapon (control' weapon2' GameControl.SHeight / 2 + 10' rotateWeapon2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (weapon3 != null) {  	DrawWeapon (control' weapon3' GameControl.SHeight / 2 + 110' rotateWeapon3);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (weapon3 != null) {  	DrawWeapon (control' weapon3' GameControl.SHeight / 2 + 110' rotateWeapon3);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawWeapon (control' weapon3' GameControl.SHeight / 2 + 110' rotateWeapon3);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawWeapon (control' weapon3' GameControl.SHeight / 2 + 110' rotateWeapon3);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("制限時間 : " + TPS.GetTime (playTime) + "分"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 80' control.COLOR_GRAY1' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("制限時間 : " + TPS.GetTime (playTime) + "分"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 80' control.COLOR_GRAY1' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("制限時間 : " + TPS.GetTime (playTime) + "分"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 80' control.COLOR_GRAY1' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("制限時間 : " + TPS.GetTime (playTime) + "分"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 80' control.COLOR_GRAY1' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: if (!setStatus) {  	control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  	drawDotCount += control.MilliSecond;  	while (drawDotCount >= 1000) {  		drawDotCount -= 1000;  	}  	int dot = (int)(drawDotCount / 250) + 1;  	DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: control.FadeBackBufferToBlack (150' control.COLOR_BLACK);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: while (drawDotCount >= 1000) {  	drawDotCount -= 1000;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: while (drawDotCount >= 1000) {  	drawDotCount -= 1000;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: drawDotCount -= 1000;  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Draw,The following statement contains a magic number: DrawHelper.DrawCenterStringToHandleEx ("Now Loading" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2' GameControl.SHeight / 2' control.COLOR_GRAY1' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_50)' 3' -3' 50);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: DX.SetCameraNearFar (0.1f' 100);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: DX.SetCameraPositionAndTarget_UpVecY (DX.VGet (0' 0' -18)' DX.VGet (0' 0' 0));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: DX.SetupCamera_Perspective (30);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: character.SetPosition (0' 10' 0);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawCharacter,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 13 / 16 + 15 - width / 2' 0' GameControl.SWidth * 13 / 16 + 15 + width / 2' GameControl.SHeight / 4);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: DX.SetCameraNearFar (0.1f' 100);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: DX.SetCameraPositionAndTarget_UpVecY (DX.VGet (0' 0' -13)' DX.VGet (0' 0' 0));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: DX.SetupCamera_Perspective (30);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 150);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,DrawWeapon,The following statement contains a magic number: buffer.DrawExtendGraph (GameControl.SWidth * 5 / 8 - 30 - width / 2' y - height / 2' GameControl.SWidth * 5 / 8 - 30 + width / 2' y + height / 2);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (changeStateButton == null) {  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onLeave = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  	increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("incTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("decTime");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	//if ( client.Params.User.IsHost )  	//{  	//	allowedChangePlayTime = true;  	//	suspendOtherToChangeTimeButton = new MyButton(  	//	"他プレイヤーの時間変更を禁止"' GameControl.SWidth * 4 / 5' GameControl.SHeight / 5 + 100' 200' FontDefines.FONT_SIZE_25'  	//	( x' y' o ) => { }'  	//	( x' y' o ) =>  	//	{  	//		client.AddGameCommand( "formit" );  	//	}' null );  	//}  	if (client.Params.User.IsHost) {  		allowedChangePlayTime = true;  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  		charaNameLabel.Label = charaNames [status.ModelIndex];  		character.DetachAll ();  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		character.Update (control.MilliSecondf);  		rotateChara = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  		weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  		SetStatus (client);  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		control.AddScreen (new TPSConfigScreen ());  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  	client.AddGameCommand ("getGameData");  	AddSystemMessage (1' "参加プレイヤーが集まったら「準備完了！」ボタンを押してください．"' control.COLOR_YELLOW' true);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onLeave = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onLeave = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onLeave = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: leaveRoomButton = new MyButton ("部屋を出る"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 60' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onLeave = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("incTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("incTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("incTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("incTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: increaseTimeButton = new MyButton ("制限時間↑"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 155' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("incTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("decTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("decTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("decTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("decTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: decreaseTimeButton = new MyButton ("制限時間↓"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 105' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("decTime");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (client.Params.User.IsHost) {  	allowedChangePlayTime = true;  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (client.Params.User.IsHost) {  	allowedChangePlayTime = true;  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (client.Params.User.IsHost) {  	allowedChangePlayTime = true;  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (client.Params.User.IsHost) {  	allowedChangePlayTime = true;  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (client.Params.User.IsHost) {  	allowedChangePlayTime = true;  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex + 1) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeCharaButton2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 4 + 50' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.ModelIndex = (status.ModelIndex - 1 + charaNames.Length) % charaNames.Length;  	charaNameLabel.Label = charaNames [status.ModelIndex];  	character.DetachAll ();  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	character.Update (control.MilliSecondf);  	rotateChara = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 + 1) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon1Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 - 40' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex1 = (status.WeaponIndex1 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon1NameLabel.Label = weaponNames [status.WeaponIndex1];  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 + 1) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon2Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 60' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex2 = (status.WeaponIndex2 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon2NameLabel.Label = weaponNames [status.WeaponIndex2];  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button1 = new MyButton ("→"' GameControl.SWidth * 13 / 16 + 15 + 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 + 1) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeWeapon3Button2 = new MyButton ("←"' GameControl.SWidth * 13 / 16 + 15 - 30' GameControl.SHeight / 2 + 160' 40' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	status.WeaponIndex3 = (status.WeaponIndex3 - 1 + weaponNames.Length) % weaponNames.Length;  	weapon3NameLabel.Label = weaponNames [status.WeaponIndex3];  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  	SetStatus (client);  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: configButton = new MyButton ("コンフィグ"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 160' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	control.AddScreen (new TPSConfigScreen ());  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (onReady) {  	onReady = false;  	OnReady (client);  	changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		offReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (onReady) {  	onReady = false;  	OnReady (client);  	changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		offReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (onReady) {  	onReady = false;  	OnReady (client);  	changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		offReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (onReady) {  	onReady = false;  	OnReady (client);  	changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		offReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	offReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	offReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	offReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("キャンセル"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	offReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CANCEL);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (offReady) {  	offReady = false;  	OffReady (client);  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (offReady) {  	offReady = false;  	OffReady (client);  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (offReady) {  	offReady = false;  	OffReady (client);  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (offReady) {  	offReady = false;  	OffReady (client);  	changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  	}' (x' y' o) =>  {  		onReady = true;  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: changeStateButton = new MyButton ("準備完了！"' GameControl.SWidth * 7 / 8' GameControl.SHeight - 110' 200' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.CURSOR);  }' (x' y' o) =>  {  	onReady = true;  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (gotStatus && !setStatus) {  	if (!contents.StartLoading) {  		if (contents.SuspendUpdate) {  			contents.SuspendUpdate = false;  		}  		else {  			contents.OnReload (control);  		}  	}  	else {  		setStatus = true;  		charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		charaNameLabel.IsLabel = true;  		character = contents.Contents3D.Characters.Characters [status.ModelIndex];  		character.Attach ((int)CharacterAnim.MOVE_WALK1);  		rotateChara = 0;  		weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon1NameLabel.IsLabel = true;  		weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  		rotateWeapon1 = 0;  		weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon2NameLabel.IsLabel = true;  		weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  		rotateWeapon2 = 0;  		weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  		}' null);  		weapon3NameLabel.IsLabel = true;  		weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  		rotateWeapon3 = 0;  	}  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: if (!contents.StartLoading) {  	if (contents.SuspendUpdate) {  		contents.SuspendUpdate = false;  	}  	else {  		contents.OnReload (control);  	}  }  else {  	setStatus = true;  	charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	charaNameLabel.IsLabel = true;  	character = contents.Contents3D.Characters.Characters [status.ModelIndex];  	character.Attach ((int)CharacterAnim.MOVE_WALK1);  	rotateChara = 0;  	weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon1NameLabel.IsLabel = true;  	weapon1 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex1].Model;  	rotateWeapon1 = 0;  	weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon2NameLabel.IsLabel = true;  	weapon2 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex2].Model;  	rotateWeapon2 = 0;  	weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  	}' null);  	weapon3NameLabel.IsLabel = true;  	weapon3 = contents.Contents3D.Weapons.Weapons [status.WeaponIndex3].Model;  	rotateWeapon3 = 0;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: charaNameLabel = new MyButton (charaNames [status.ModelIndex]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 4 + 5' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon1NameLabel = new MyButton (weaponNames [status.WeaponIndex1]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 - 90' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon2NameLabel = new MyButton (weaponNames [status.WeaponIndex2]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 10' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,Update,The following statement contains a magic number: weapon3NameLabel = new MyButton (weaponNames [status.WeaponIndex3]' GameControl.SWidth * 13 / 16 + 15' GameControl.SHeight / 2 + 110' 320' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: status.StageNum = int.Parse (command [5]);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = false;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = false;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = false;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = false;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("permit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = false;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("permit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("formit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = true;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("formit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = true;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("formit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = true;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("formit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = true;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: if (client.Params.User.IsHost) {  	suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  	}' (x' y' o) =>  {  		client.AddGameCommand ("formit");  		contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  	}' null);  }  else {  	allowedChangePlayTime = true;  }  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("formit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("formit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("formit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("formit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following statement contains a magic number: suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  }' (x' y' o) =>  {  	client.AddGameCommand ("formit");  	contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  }' null);  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetGameInfo,The following statement contains a magic number: if (info == null) {  	info = new GameInfo ();  	info.Name = "TPS";  	info.Version = 1;  	info.PlayerMinNumber = 1;  	info.PlayerMaxNumber = 50;  	info.IsAbleToEnterAfterReady = true;  	info.MaxInstanceNumber = -1;  	//info.IsNeedUDP = true;  	info.HandOverRoomHost = true;  	info.Use3DContents = true;  	info.OnlyWindowMode = true;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetGameInfo,The following statement contains a magic number: info.PlayerMaxNumber = 50;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: switch (time) {  case ePlayTime.PlayTime1:  	return 1;  case ePlayTime.PlayTime3:  	return 3;  case ePlayTime.PlayTime5:  	return 5;  case ePlayTime.PlayTime10:  	return 10;  case ePlayTime.PlayTime15:  	return 15;  case ePlayTime.PlayTime20:  	return 20;  case ePlayTime.PlayTime30:  	return 30;  case ePlayTime.PlayTime45:  	return 45;  case ePlayTime.PlayTime60:  	return 60;  default:  	return 5;  }  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 3;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 5;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 10;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 15;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 20;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 30;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 45;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 60;  
Magic Number,GameBase,TPS,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPS.cs,GetTime,The following statement contains a magic number: return 5;  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStarted) {  	if (!gameEnd) {  		gameCount -= control.MilliSecond;  		int c = (int)(gameCount / 1000);  		gameEnd = c <= 0;  		if (gameEnd) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  			prevEndRoomCount = (int)(endRoomCount / 1000);  			int n = 1;  			foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  				n++;  			}  		}  		else if (c < prevGameCount) {  			prevGameCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  		}  	}  	else if (!endRoom) {  		endRoomCount -= control.MilliSecond;  		int c = (int)(endRoomCount / 1000);  		endRoom = c <= 0;  		if (endRoom) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  		}  		else if (c < prevEndRoomCount) {  			prevEndRoomCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  		}  	}  }  else if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameEnd) {  	gameCount -= control.MilliSecond;  	int c = (int)(gameCount / 1000);  	gameEnd = c <= 0;  	if (gameEnd) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  		prevEndRoomCount = (int)(endRoomCount / 1000);  		int n = 1;  		foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  			n++;  		}  	}  	else if (c < prevGameCount) {  		prevGameCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  	}  }  else if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameEnd) {  	gameCount -= control.MilliSecond;  	int c = (int)(gameCount / 1000);  	gameEnd = c <= 0;  	if (gameEnd) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  		prevEndRoomCount = (int)(endRoomCount / 1000);  		int n = 1;  		foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  			n++;  		}  	}  	else if (c < prevGameCount) {  		prevGameCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  	}  }  else if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameEnd) {  	gameCount -= control.MilliSecond;  	int c = (int)(gameCount / 1000);  	gameEnd = c <= 0;  	if (gameEnd) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  		prevEndRoomCount = (int)(endRoomCount / 1000);  		int n = 1;  		foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  			n++;  		}  	}  	else if (c < prevGameCount) {  		prevGameCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  	}  }  else if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameEnd) {  	gameCount -= control.MilliSecond;  	int c = (int)(gameCount / 1000);  	gameEnd = c <= 0;  	if (gameEnd) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  		prevEndRoomCount = (int)(endRoomCount / 1000);  		int n = 1;  		foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  			n++;  		}  	}  	else if (c < prevGameCount) {  		prevGameCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  	}  }  else if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameEnd) {  	gameCount -= control.MilliSecond;  	int c = (int)(gameCount / 1000);  	gameEnd = c <= 0;  	if (gameEnd) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  		prevEndRoomCount = (int)(endRoomCount / 1000);  		int n = 1;  		foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  			n++;  		}  	}  	else if (c < prevGameCount) {  		prevGameCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  	}  }  else if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameEnd) {  	gameCount -= control.MilliSecond;  	int c = (int)(gameCount / 1000);  	gameEnd = c <= 0;  	if (gameEnd) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  		prevEndRoomCount = (int)(endRoomCount / 1000);  		int n = 1;  		foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  			n++;  		}  	}  	else if (c < prevGameCount) {  		prevGameCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  	}  }  else if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameEnd) {  	gameCount -= control.MilliSecond;  	int c = (int)(gameCount / 1000);  	gameEnd = c <= 0;  	if (gameEnd) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  		prevEndRoomCount = (int)(endRoomCount / 1000);  		int n = 1;  		foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  			n++;  		}  	}  	else if (c < prevGameCount) {  		prevGameCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  	}  }  else if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameEnd) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  	prevEndRoomCount = (int)(endRoomCount / 1000);  	int n = 1;  	foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  		n++;  	}  }  else if (c < prevGameCount) {  	prevGameCount = c;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameEnd) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  	prevEndRoomCount = (int)(endRoomCount / 1000);  	int n = 1;  	foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  		n++;  	}  }  else if (c < prevGameCount) {  	prevGameCount = c;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameEnd) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  	prevEndRoomCount = (int)(endRoomCount / 1000);  	int n = 1;  	foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  		n++;  	}  }  else if (c < prevGameCount) {  	prevGameCount = c;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameEnd) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  	prevEndRoomCount = (int)(endRoomCount / 1000);  	int n = 1;  	foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  		n++;  	}  }  else if (c < prevGameCount) {  	prevGameCount = c;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameEnd) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  	prevEndRoomCount = (int)(endRoomCount / 1000);  	int n = 1;  	foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  		n++;  	}  }  else if (c < prevGameCount) {  	prevGameCount = c;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcount"' prevGameCount.ToString ());  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tend"' ((int)(endRoomCount / 1000)).ToString ());  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: prevEndRoomCount = (int)(endRoomCount / 1000);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  	n++;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  	n++;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: foreach (var item in playerData.OrderBy (pair => -pair.Value.KillCount * 2 + pair.Value.DeadCount)) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  	n++;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tresult"' item.Key' n.ToString ()' ((item.Value.KillCount * 2 - item.Value.DeadCount) * 100).ToString ());  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!endRoom) {  	endRoomCount -= control.MilliSecond;  	int c = (int)(endRoomCount / 1000);  	endRoom = c <= 0;  	if (endRoom) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoom");  	}  	else if (c < prevEndRoomCount) {  		prevEndRoomCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tendRoomCount"' prevEndRoomCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (!gameStartCountFlag) {  	gameStartCountFlag = Factory.Players.Count > 0;  	foreach (var item in Factory.Players) {  		if (!playerData.ContainsKey (item.Player.UserID) || !playerData [item.Player.UserID].LoadFinished) {  			gameStartCountFlag = false;  			break;  		}  	}  	if (gameStartCountFlag) {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  		prevGameStartCount = (int)(gameStartCount / 1000);  	}  }  else {  	gameStartCount -= control.MilliSecond;  	int c = (int)(gameStartCount / 1000);  	if (c <= 0) {  		gameStarted = true;  		gameCount = TPS.GetTime (playTime) * 60 * 1000;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  		prevGameCount = (int)(gameCount / 1000);  		foreach (var item in playerData.Values) {  			item.ExistenceCount = 0;  		}  	}  	else {  		if (c < prevGameStartCount) {  			prevGameStartCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStartCountFlag) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  	prevGameStartCount = (int)(gameStartCount / 1000);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameStartCountFlag) {  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  	prevGameStartCount = (int)(gameStartCount / 1000);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tcountStart"' ((int)(gameStartCount / 1000)).ToString ());  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: prevGameStartCount = (int)(gameStartCount / 1000);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (c <= 0) {  	gameStarted = true;  	gameCount = TPS.GetTime (playTime) * 60 * 1000;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  	prevGameCount = (int)(gameCount / 1000);  	foreach (var item in playerData.Values) {  		item.ExistenceCount = 0;  	}  }  else {  	if (c < prevGameStartCount) {  		prevGameStartCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (c <= 0) {  	gameStarted = true;  	gameCount = TPS.GetTime (playTime) * 60 * 1000;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  	prevGameCount = (int)(gameCount / 1000);  	foreach (var item in playerData.Values) {  		item.ExistenceCount = 0;  	}  }  else {  	if (c < prevGameStartCount) {  		prevGameStartCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (c <= 0) {  	gameStarted = true;  	gameCount = TPS.GetTime (playTime) * 60 * 1000;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  	prevGameCount = (int)(gameCount / 1000);  	foreach (var item in playerData.Values) {  		item.ExistenceCount = 0;  	}  }  else {  	if (c < prevGameStartCount) {  		prevGameStartCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (c <= 0) {  	gameStarted = true;  	gameCount = TPS.GetTime (playTime) * 60 * 1000;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  	prevGameCount = (int)(gameCount / 1000);  	foreach (var item in playerData.Values) {  		item.ExistenceCount = 0;  	}  }  else {  	if (c < prevGameStartCount) {  		prevGameStartCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstartCount"' prevGameStartCount.ToString ());  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: gameCount = TPS.GetTime (playTime) * 60 * 1000;  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: gameCount = TPS.GetTime (playTime) * 60 * 1000;  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tstart"' ((int)(gameCount / 1000)).ToString ());  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: prevGameCount = (int)(gameCount / 1000);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: foreach (var key in playerData.Keys) {  	var item = playerData [key];  	item.Update (dt);  	if (item.SendRecovery) {  		item.SendRecovery = false;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trecovery"' key' item.Health.ToString ());  	}  	if (item.SendOnExpose) {  		item.SendOnExpose = false;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tonExpose"' key);  	}  	if (item.SendOffExpose) {  		item.SendOffExpose = false;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\toffExpose"' key);  	}  	if (item.Health <= 0) {  		if (item.RespawnCount >= 0) {  			int c = (int)Math.Ceiling (item.RespawnCount / 1000);  			if (c != item.sentRespawnCount) {  				item.sentRespawnCount = c;  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawnCount"' key' c + "");  			}  		}  		else if (!item.SentRespawn) {  			item.SentRespawn = true;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawnCount"' key' "0");  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawn"' key);  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (item.Health <= 0) {  	if (item.RespawnCount >= 0) {  		int c = (int)Math.Ceiling (item.RespawnCount / 1000);  		if (c != item.sentRespawnCount) {  			item.sentRespawnCount = c;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawnCount"' key' c + "");  		}  	}  	else if (!item.SentRespawn) {  		item.SentRespawn = true;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawnCount"' key' "0");  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawn"' key);  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (item.RespawnCount >= 0) {  	int c = (int)Math.Ceiling (item.RespawnCount / 1000);  	if (c != item.sentRespawnCount) {  		item.sentRespawnCount = c;  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawnCount"' key' c + "");  	}  }  else if (!item.SentRespawn) {  	item.SentRespawn = true;  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawnCount"' key' "0");  	network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\trespawn"' key);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: for (int i = Bullet.Count; --i >= 0;) {  	float min = float.MaxValue;  	var item = Bullet [i];  	item.Update (control);  	if (item.IsOutOfRange) {  		Bullet.RemoveAt (i);  		continue;  	}  	string playerID = null;  	DX.VECTOR linePos1 = DX.VGet (item.X' item.Y' item.Z);  	float checkF = item.RangeFrame < f ? item.RangeFrame : f;  	DX.VECTOR linePos2 = DX.VGet (item.X + item.VX * checkF' item.Y + item.VY * checkF' item.Z + item.VZ * checkF);  	var shooter = playerData [item.ShooterID];  	foreach (var key in playerData.Keys) {  		if (key == item.ShooterID)  			continue;  		var player = playerData [key];  		if (player.Health <= 0)  			continue;  		float x' y' z;  		player.GetPos ((float)gameCount' shooter.Late' out x' out y' out z);  		DX.VECTOR pos1 = DX.VGet (x' y + player.Radius' z);  		DX.VECTOR pos2 = DX.VGet (x' y + player.Height - player.Radius' z);  		//DX.VECTOR pos1 = DX.VGet( player.X' player.Y + player.Radius' player.Z );  		//DX.VECTOR pos2 = DX.VGet( player.X' player.Y + player.Height - player.Radius' player.Z );  		if (Utility3D.Math3D.HitCheck_Line_Capsule (linePos1' linePos2' pos1' pos2' player.Radius) >= 0) {  			float dist2 = DX.VSquareSize (linePos1 - pos1);  			if (dist2 < min) {  				min = dist2;  				playerID = key;  			}  		}  	}  	if (playerID != null) {  		int index = item.Index;  		var player = playerData [playerID];  		int baseDamage = item.BaseDamage;  		float damageVar = item.DamageVar;  		var vel = DX.VGet (item.VX' 0' item.VZ);  		Bullet.RemoveAt (i);  		int damage;  		if (gameEnd || !gameStarted || !player.LoadFinished) {  			damage = 0;  		}  		else {  			damage = (int)(GameControl.random.NextGaussian () * damageVar + baseDamage);  			if (damage < 10)  				damage = 10;  		}  		if (player.OnDamage (damage)) {  			if (playerData.ContainsKey (item.ShooterID)) {  				shooter.KillCount++;  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tkill"' item.ShooterID' playerID' shooter.KillCount.ToString ()' player.DeadCount.ToString ());  			}  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdead"' playerID' index.ToString ()' player.DeadCount.ToString ());  		}  		else {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdamage"' playerID' player.Health.ToString ()' index.ToString ()' item.ShooterID' vel.x.ToString ("F2")' vel.z.ToString ("F2"));  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: for (int i = Bullet.Count; --i >= 0;) {  	float min = float.MaxValue;  	var item = Bullet [i];  	item.Update (control);  	if (item.IsOutOfRange) {  		Bullet.RemoveAt (i);  		continue;  	}  	string playerID = null;  	DX.VECTOR linePos1 = DX.VGet (item.X' item.Y' item.Z);  	float checkF = item.RangeFrame < f ? item.RangeFrame : f;  	DX.VECTOR linePos2 = DX.VGet (item.X + item.VX * checkF' item.Y + item.VY * checkF' item.Z + item.VZ * checkF);  	var shooter = playerData [item.ShooterID];  	foreach (var key in playerData.Keys) {  		if (key == item.ShooterID)  			continue;  		var player = playerData [key];  		if (player.Health <= 0)  			continue;  		float x' y' z;  		player.GetPos ((float)gameCount' shooter.Late' out x' out y' out z);  		DX.VECTOR pos1 = DX.VGet (x' y + player.Radius' z);  		DX.VECTOR pos2 = DX.VGet (x' y + player.Height - player.Radius' z);  		//DX.VECTOR pos1 = DX.VGet( player.X' player.Y + player.Radius' player.Z );  		//DX.VECTOR pos2 = DX.VGet( player.X' player.Y + player.Height - player.Radius' player.Z );  		if (Utility3D.Math3D.HitCheck_Line_Capsule (linePos1' linePos2' pos1' pos2' player.Radius) >= 0) {  			float dist2 = DX.VSquareSize (linePos1 - pos1);  			if (dist2 < min) {  				min = dist2;  				playerID = key;  			}  		}  	}  	if (playerID != null) {  		int index = item.Index;  		var player = playerData [playerID];  		int baseDamage = item.BaseDamage;  		float damageVar = item.DamageVar;  		var vel = DX.VGet (item.VX' 0' item.VZ);  		Bullet.RemoveAt (i);  		int damage;  		if (gameEnd || !gameStarted || !player.LoadFinished) {  			damage = 0;  		}  		else {  			damage = (int)(GameControl.random.NextGaussian () * damageVar + baseDamage);  			if (damage < 10)  				damage = 10;  		}  		if (player.OnDamage (damage)) {  			if (playerData.ContainsKey (item.ShooterID)) {  				shooter.KillCount++;  				network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tkill"' item.ShooterID' playerID' shooter.KillCount.ToString ()' player.DeadCount.ToString ());  			}  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdead"' playerID' index.ToString ()' player.DeadCount.ToString ());  		}  		else {  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdamage"' playerID' player.Health.ToString ()' index.ToString ()' item.ShooterID' vel.x.ToString ("F2")' vel.z.ToString ("F2"));  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (playerID != null) {  	int index = item.Index;  	var player = playerData [playerID];  	int baseDamage = item.BaseDamage;  	float damageVar = item.DamageVar;  	var vel = DX.VGet (item.VX' 0' item.VZ);  	Bullet.RemoveAt (i);  	int damage;  	if (gameEnd || !gameStarted || !player.LoadFinished) {  		damage = 0;  	}  	else {  		damage = (int)(GameControl.random.NextGaussian () * damageVar + baseDamage);  		if (damage < 10)  			damage = 10;  	}  	if (player.OnDamage (damage)) {  		if (playerData.ContainsKey (item.ShooterID)) {  			shooter.KillCount++;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tkill"' item.ShooterID' playerID' shooter.KillCount.ToString ()' player.DeadCount.ToString ());  		}  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdead"' playerID' index.ToString ()' player.DeadCount.ToString ());  	}  	else {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdamage"' playerID' player.Health.ToString ()' index.ToString ()' item.ShooterID' vel.x.ToString ("F2")' vel.z.ToString ("F2"));  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (playerID != null) {  	int index = item.Index;  	var player = playerData [playerID];  	int baseDamage = item.BaseDamage;  	float damageVar = item.DamageVar;  	var vel = DX.VGet (item.VX' 0' item.VZ);  	Bullet.RemoveAt (i);  	int damage;  	if (gameEnd || !gameStarted || !player.LoadFinished) {  		damage = 0;  	}  	else {  		damage = (int)(GameControl.random.NextGaussian () * damageVar + baseDamage);  		if (damage < 10)  			damage = 10;  	}  	if (player.OnDamage (damage)) {  		if (playerData.ContainsKey (item.ShooterID)) {  			shooter.KillCount++;  			network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tkill"' item.ShooterID' playerID' shooter.KillCount.ToString ()' player.DeadCount.ToString ());  		}  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdead"' playerID' index.ToString ()' player.DeadCount.ToString ());  	}  	else {  		network.AddSendChannelData (channelIndex' "gameCommand\t" + "\t\tdamage"' playerID' player.Health.ToString ()' index.ToString ()' item.ShooterID' vel.x.ToString ("F2")' vel.z.ToString ("F2"));  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameEnd || !gameStarted || !player.LoadFinished) {  	damage = 0;  }  else {  	damage = (int)(GameControl.random.NextGaussian () * damageVar + baseDamage);  	if (damage < 10)  		damage = 10;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (gameEnd || !gameStarted || !player.LoadFinished) {  	damage = 0;  }  else {  	damage = (int)(GameControl.random.NextGaussian () * damageVar + baseDamage);  	if (damage < 10)  		damage = 10;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (damage < 10)  	damage = 10;  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: if (damage < 10)  	damage = 10;  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,Update,The following statement contains a magic number: damage = 10;  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: command [3] = bulletIndex.ToString ();  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!playerData.ContainsKey (command [3])) {  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: playerData [command [3]].OnLockOn (command [0]);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!playerData.ContainsKey (command [3])) {  	return;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: playerData [command [3]].UnLockOn (command [0]);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!playerData.ContainsKey (command [0])) {  	playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  	if (!gameStarted) {  		gameStartCountFlag = false;  	}  }  else {  	playerData [command [0]].Height = float.Parse (command [9]);  	playerData [command [0]].Radius = float.Parse (command [10]);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!playerData.ContainsKey (command [0])) {  	playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  	if (!gameStarted) {  		gameStartCountFlag = false;  	}  }  else {  	playerData [command [0]].Height = float.Parse (command [9]);  	playerData [command [0]].Radius = float.Parse (command [10]);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!playerData.ContainsKey (command [0])) {  	playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  	if (!gameStarted) {  		gameStartCountFlag = false;  	}  }  else {  	playerData [command [0]].Height = float.Parse (command [9]);  	playerData [command [0]].Radius = float.Parse (command [10]);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!playerData.ContainsKey (command [0])) {  	playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  	if (!gameStarted) {  		gameStartCountFlag = false;  	}  }  else {  	playerData [command [0]].Height = float.Parse (command [9]);  	playerData [command [0]].Radius = float.Parse (command [10]);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: playerData [command [0]].Height = float.Parse (command [9]);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: playerData [command [0]].Radius = float.Parse (command [10]);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: player.MaxHealth = int.Parse (command [11]);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: player.Health = int.Parse (command [12]);  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!command [0].StartsWith (Const.GUEST_ID)) {  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  			ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  			break;  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!command [0].StartsWith (Const.GUEST_ID)) {  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  			ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  			break;  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!command [0].StartsWith (Const.GUEST_ID)) {  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  			ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  			break;  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (!command [0].StartsWith (Const.GUEST_ID)) {  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  			ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  			break;  		}  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: foreach (var item in players) {  	if (item.User.UserID == command [0]) {  		TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  		ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  		break;  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: foreach (var item in players) {  	if (item.User.UserID == command [0]) {  		TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  		ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  		break;  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: foreach (var item in players) {  	if (item.User.UserID == command [0]) {  		TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  		ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  		break;  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: foreach (var item in players) {  	if (item.User.UserID == command [0]) {  		TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  		ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  		break;  	}  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (item.User.UserID == command [0]) {  	TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  	ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  	break;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (item.User.UserID == command [0]) {  	TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  	ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  	break;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (item.User.UserID == command [0]) {  	TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  	ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  	break;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: if (item.User.UserID == command [0]) {  	TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  	ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  	break;  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following statement contains a magic number: ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: if (command [2] == "move") {  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendDataUDP (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (!p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  }  else {  	base.ParseUDPMessages (control' roomIndex' network' players' handle' command);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: if (command [2] == "move") {  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendDataUDP (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (!p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  }  else {  	base.ParseUDPMessages (control' roomIndex' network' players' handle' command);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: if (command [2] == "move") {  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendDataUDP (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (!p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  }  else {  	base.ParseUDPMessages (control' roomIndex' network' players' handle' command);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: if (command [2] == "move") {  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendDataUDP (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (!p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  }  else {  	base.ParseUDPMessages (control' roomIndex' network' players' handle' command);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: if (command [2] == "move") {  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendDataUDP (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (!p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.IsValidUDPHandle)  			return false;  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  }  else {  	base.ParseUDPMessages (control' roomIndex' network' players' handle' command);  }  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Magic Number,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseUDPMessages,The following statement contains a magic number: p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  
Missing Default,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommand,The following switch statement is missing a default case: switch (command [0]) {  case "talk":  	//受信  1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  	if (messages.ContainsKey (id)) {  		messages [id].SetMessage (command [2]);  	}  	else {  		if (otherPlayer.ContainsKey (id)) {  			messages.Add (id' new SpeakMessage (otherPlayer [id].Item2));  			messages [id].SetMessage (command [2]);  		}  		else if (id == client.Params.User.UserID) {  			messages.Add (id' new SpeakMessage (player));  			messages [id].SetMessage (command [2]);  		}  	}  	client.RecvDataList.Add (new Tuple<CommonNetwork.Network.NetworkSendData' int' CommonNetwork.Network.CheckDataLife> (new CommonNetwork.Network.NetworkSendData (id' "talk"' command [1]' name' command [2]' Log.LogControl.eChatMode.All.ToString ()' command [4]' command [5])' 0' new CommonNetwork.Network.CheckDataLife ()));  	break;  case "ready":  	SendInitPlayerState (client);  	if (client.Params.User.UserID == id) {  		readyFlag = true;  	}  	break;  case "countStart":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	LoadFinishedAllPlayer ();  	break;  case "startCount":  	gameStartCount = int.Parse (command [1]);  	gameStartCountFlag = true;  	break;  case "start":  	gameStartCountFlag = false;  	gameCount = int.Parse (command [1]);  	gameStarted = true;  	gameStartShowMessageCount = 2000;  	player.SuspendMove = false;  	LoadFinishedAllPlayer ();  	break;  case "count":  	gameCount = int.Parse (command [1]);  	if (!gameStarted) {  		gameStartShowMessageCount = 2000;  		gameStarted = true;  		player.SuspendMove = false;  		LoadFinishedAllPlayer ();  	}  	break;  case "end":  	gameEnd = true;  	endRoomCount = int.Parse (command [1]);  	IsValidCustomSendMessageCommand = false;  	DrawLogWindowFlag = true;  	break;  case "result":  	if (client.Params.User.UserID == command [1]) {  		resultRecv = true;  		rank = int.Parse (command [2]);  		score = int.Parse (command [3]);  	}  	break;  case "endRoomCount":  	endRoomCount = int.Parse (command [1]);  	break;  case "endRoom":  	this.ExitFlag = true;  	break;  case "lockOn":  	//if ( client.Params.User.UserID == command[1] )  	//{  	//	lockedOn = true;  	//}  	break;  case "onExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = true;  	}  	break;  case "offExpose":  	if (otherPlayer.ContainsKey (command [1])) {  		otherPlayer [command [1]].Item2.Exposed = false;  	}  	break;  case "init":  	if (client.Params.User.UserID != id) {  		AddPlayer (client' id' name' int.Parse (command [13])' int.Parse (command [14])' int.Parse (command [15])' int.Parse (command [16])' bool.Parse (command [17]));  		otherPlayer [id].Item2.MaxHealth = int.Parse (command [9]);  		otherPlayer [id].Item2.Health = int.Parse (command [10]);  		otherPlayer [id].Item2.DeadCount = int.Parse (command [11]);  		otherPlayer [id].Item2.KillCount = int.Parse (command [12]);  	}  	break;  case "loadFinished":  	if (client.Params.User.UserID != id) {  		if (otherPlayer.ContainsKey (id)) {  			otherPlayer [id].Item2.WorldLoadFinished = true;  		}  	}  	break;  case "recovery":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  		}  	}  	break;  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  case "shot":  	bullet.Add (new Bullet (int.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' 0.4f' float.Parse (command [8])));  	break;  case "damage":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  		}  		if (character != null) {  			int health = int.Parse (command [2]);  			character.Health = health;  			if (client.Params.User.UserID == command [1]) {  				float vx = float.Parse (command [5]);  				float vz = float.Parse (command [6]);  				damageDirection.Add (command [4]' vx' vz);  				suicideFlag = false;  			}  		}  		int index = int.Parse (command [3]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "dead":  	{  		Character character = null;  		if (otherPlayer.ContainsKey (command [1])) {  			character = otherPlayer [command [1]].Item2;  		}  		else if (client.Params.User.UserID == command [1]) {  			character = player;  			respawnCount = -1;  			waitRespawn = true;  			suicideFlag = false;  			sendSuicide = false;  			TargettingPlayerID = null;  		}  		if (character != null) {  			character.DeadCount = int.Parse (command [3]);  			character.Health = 0;  		}  		int index = int.Parse (command [2]);  		bullet.RemoveAll (b => b.Index == index);  	}  	break;  case "respawnCount":  	{  		if (client.Params.User.UserID == command [1]) {  			respawnCount = int.Parse (command [2]);  		}  	}  	break;  case "respawn":  	{  		if (client.Params.User.UserID == command [1]) {  			player.Initialize (true' 300' 300);  			SendInitPlayerState (client);  			waitRespawn = false;  		}  	}  	break;  case "kill":  	{  		//command[1]がcommand[2]を倒した  		//command[1]が倒した回数はint.Parse( command[3] )回  		//command[2]が倒された回数はint.Parse( command[4] )回  		//（command[1]とcommand[2]が同じ場合は自爆）  		int kill = int.Parse (command [3]);  		int dead = int.Parse (command [4]);  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [1])) {  				character = otherPlayer [command [1]].Item2;  				command [1] = otherPlayer [command [1]].Item1;  			}  			else if (client.Params.User.UserID == command [1]) {  				character = player;  				command [1] = client.Params.User.UserName;  			}  			if (character != null) {  				character.KillCount = kill;  			}  		}  		{  			Character character = null;  			if (otherPlayer.ContainsKey (command [2])) {  				character = otherPlayer [command [2]].Item2;  				command [2] = otherPlayer [command [2]].Item1;  			}  			else if (client.Params.User.UserID == command [2]) {  				character = player;  				command [2] = client.Params.User.UserName;  			}  			if (character != null) {  				character.DeadCount = dead;  			}  		}  		killMessages.AddMessage (command [1]' command [2]' int.Parse (command [3])' int.Parse (command [4]));  	}  	break;  }  
Missing Default,GameBase,TPSGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSGameScreen.cs,ParseGameCommandUDP,The following switch statement is missing a default case: switch (command [0]) {  case "move":  	if (client.Params.User.UserID != id) {  		MovePlayer (id' float.Parse (command [1])' float.Parse (command [2])' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' bool.Parse (command [7])' command [8]' bool.Parse (command [9])' float.Parse (command [10])' float.Parse (command [11])' float.Parse (command [12])' int.Parse (command [13])' client.Params.User.UserID);  	}  	break;  }  
Missing Default,GameBase,TPSRoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSRoomScreen.cs,ParseGameCommand,The following switch statement is missing a default case: switch (command [0]) {  case "getGameData":  	status = new TPS.PlayerStatus (client.Params.User.UserID' int.Parse (command [1])' int.Parse (command [2])' int.Parse (command [3])' int.Parse (command [4]));  	status.StageNum = int.Parse (command [5]);  	gotStatus = true;  	setStatus = false;  	break;  case "setPlayTime":  	int index = int.Parse (command [1]);  	playTime = (TPS.ePlayTime)index;  	break;  case "formit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を許可"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("permit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = false;  	}  	break;  case "permit":  	if (client.Params.User.IsHost) {  		suspendOtherToChangeTimeButton = new MyButton ("時間変更を禁止"' GameControl.SWidth * 5 / 8 - 10' GameControl.SHeight - 205' 250' FontDefines.FONT_SIZE_25' (x' y' o) =>  {  		}' (x' y' o) =>  {  			client.AddGameCommand ("formit");  			contents.Contents.Sound.Play (SystemSound.SystemSoundType.DECIDE);  		}' null);  	}  	else {  		allowedChangePlayTime = true;  	}  	break;  }  
Missing Default,GameBase,TPSServerScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\TPS\TPSServerScreen.cs,ParseTCPMessages,The following switch statement is missing a default case: switch (command [2]) {  case "shot":  	Bullet.Add (new BulletData (command [0]' ++bulletIndex' int.Parse (command [11])' float.Parse (command [12])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [6])' float.Parse (command [7])' float.Parse (command [8])' float.Parse (command [9])' float.Parse (command [10])));  	command [3] = bulletIndex.ToString ();  	break;  case "lockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].OnLockOn (command [0]);  	break;  case "unLockOn":  	if (!playerData.ContainsKey (command [3])) {  		return;  	}  	playerData [command [3]].UnLockOn (command [0]);  	return;  case "suicide":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].OnDamage ();  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tkill"' command [0]' command [0]' playerData [command [0]].KillCount.ToString ()' playerData [command [0]].DeadCount.ToString ());  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tdead"' command [0]' "-1"' playerData [command [0]].DeadCount.ToString ());  	return;  case "init":  	base.ParseTCPMessages (control' roomIndex' network' players' handle' command);  	if (!playerData.ContainsKey (command [0])) {  		playerData.Add (command [0]' new PlayerData (float.Parse (command [9])' float.Parse (command [10])));  		if (!gameStarted) {  			gameStartCountFlag = false;  		}  	}  	else {  		playerData [command [0]].Height = float.Parse (command [9]);  		playerData [command [0]].Radius = float.Parse (command [10]);  	}  	var player = playerData [command [0]];  	player.MaxHealth = int.Parse (command [11]);  	player.Health = int.Parse (command [12]);  	return;  case "loadFinished":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	playerData [command [0]].LoadFinished = true;  	break;  case "move":  	if (!playerData.ContainsKey (command [0])) {  		return;  	}  	var p1 = playerData [command [0]];  	p1.Set ((float)gameCount' float.Parse (command [3])' float.Parse (command [4])' float.Parse (command [5])' float.Parse (command [16]));  	float x1 = p1.X;  	float y1 = p1.Y;  	float z1 = p1.Z;  	network.SendData (new Network.NetworkSendData (""' "gameCommand"' command)' players.Where (p =>  {  		if (p.User.UserID == command [0])  			return false;  		if (!playerData.ContainsKey (p.User.UserID))  			return false;  		var p2 = playerData [p.User.UserID];  		float x2 = p2.X;  		float y2 = p2.Y;  		float z2 = p2.Z;  		float len2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);  		if (len2 < SEND_THRESHOLD1)  			return true;  		if (len2 < SEND_THRESHOLD2)  			return send1;  		if (len2 < SEND_THRESHOLD3)  			return send2;  		return send3;  	}));  	return;  case "getGameData":  	if (stageIndex < 0) {  		stageIndex = GameControl.random.Next (ModelDataCheck.CheckStageNumber (control));  	}  	foreach (var item in players) {  		if (item.User.UserID == command [0]) {  			TPS.PlayerStatus ps = command [0].StartsWith (Const.GUEST_ID) ? (new TPS.PlayerStatus (command [0]' control)) : PlayerStatus.GetStatus (item.User.UserID' control);  			int c = ModelDataCheck.CheckCaracterNumber (control);  			int w = ModelDataCheck.CheckWeaponNumber (control);  			ps.ModelIndex = (ps.ModelIndex + c) % c;  			ps.WeaponIndex1 = (ps.WeaponIndex1 + w) % w;  			ps.WeaponIndex2 = (ps.WeaponIndex2 + w) % w;  			ps.WeaponIndex3 = (ps.WeaponIndex3 + w) % w;  			network.AddSendData ("gameCommand\t" + "\t\tgetGameData"' item.TCPHandle' ps.ModelIndex.ToString ()' ps.WeaponIndex1.ToString ()' ps.WeaponIndex2.ToString ()' ps.WeaponIndex3.ToString ()' stageIndex.ToString ());  			break;  		}  	}  	return;  case "setStatus":  	if (!command [0].StartsWith (Const.GUEST_ID)) {  		foreach (var item in players) {  			if (item.User.UserID == command [0]) {  				TPS.PlayerStatus ps = PlayerStatus.GetStatus (item.User.UserID' control);  				ps.Init (int.Parse (command [3])' int.Parse (command [4])' int.Parse (command [5])' int.Parse (command [6]));  				break;  			}  		}  	}  	return;  case "incTime":  	playTime = TPS.IncPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  case "decTime":  	playTime = TPS.DecPlayTime (playTime);  	network.AddSendChannelData (roomIndex' "gameCommand\t" + "\t\tsetPlayTime"' ((int)playTime).ToString ());  	return;  }  
